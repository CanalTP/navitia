pipeline {
    agent {
        docker {
            image 'navitia/debian8_dev'
            args '--user root'
        }
    }
    stages {
        stage ('Checkout') {
            steps {
                sh '''
                  sed -i 's,git\\@github.com:\\([^/]*\\)/\\(.*\\).git,https://github.com/\\1/\\2,' .gitmodules
                  git submodule update --init --recursive
                  mkdir -p build_package
                '''
            }
        }
        stage ('Install gcov and SonarCloud's dependencies for C++ analysis') {
            steps {
                sh '''
                  cd build_package
                  apt install -y gcovr
                  apt install -y unzip wget
                  wget 'https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip' 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.0.2311-linux.zip'
                  unzip -u build-wrapper-linux-x86.zip
                  unzip -u sonar-scanner-cli-4.6.0.2311-linux.zip
                '''
            }
        }
        stage ('Compilation') {
            steps {
                sh '''
                  cd build_package
                  # we set a custom instance timeout because jenkins can be very slow
                  CUSTOM_INSTANCE_TIMEOUT=1500 cmake -DCMAKE_BUILD_TYPE=Profile ../source
                  build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir build-wrapper-output-dir make -j1
                '''
            }
        }
        stage ('Clean') {
            steps {
                sh '''
                    # cleaning test xml files
                    find build_package/ -name results*.xml -exec rm {} \\;
                    find build_package/ -name nosetest*.xml -exec rm {} \\;
                    find build_package/ -name '*.gcda' -exec rm {} \\;
                    find build_package/ -name '*.gdata' -exec rm {} \\;
                    rm -rf tmp/
                    rm -rf venv/
                '''
            }
        }
        stage ('Dependancies') {
            steps {
                sh '''
                    apt update
                    apt-get install curl
                    pip install virtualenv -U
                    virtualenv --system-site-packages venv
                    . venv/bin/activate
                    pip install --exists-action=w -r source/jormungandr/requirements.txt
                    if [ -e source/jormungandr/requirements_dev.txt ]
                    then
                    pip install --exists-action=w -r source/jormungandr/requirements_dev.txt
                    fi
                    pip install --exists-action=w -r source/tyr/requirements.txt
                '''
            }
        }
        stage ('Tests') {
            steps {
                sh '''
                    mkdir tmp
                    . venv/bin/activate
                    cd build_package;
                    service rabbitmq-server start
                    CUSTOM_INSTANCE_TIMEOUT=1500 make test
                '''
            }
        }
        stage ('Coverage') {
            steps {
                sh '''
                    gcovr -k -r . -f source -e source/third_party --sonarqube coverage.xml
                '''
            }
        }
        stage ('PublishCodeCov') {
            steps {
                withCredentials([string(credentialsId: 'sonar_token', variable: 'SONAR_TOKEN')]) {
                sh '''
                    cd build_package
                    export SONAR_TOKEN=$SONAR_TOKEN
                    sonar-scanner-4.6.0.2311-linux/bin/sonar-scanner \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.sources=source \
                    -Dsonar.login=$SONAR_TOKEN \
                    -Dsonar.organization=canaltp \
                    -Dsonar.projectKey=CanalTP_navitia \
                    -Dsonar.projectName=Navitia \
                    -Dsonar.python.coverage.reportPaths=jormungandr_serpy_integration_coverage.xml,jormungandr_coverage_serpy.xml \
                    -Dsonar.cfamily.gcov.reportsPath=. \
                    -Dsonar.cfamily.build-wrapper-output=build-wrapper-output-dir \
                    -Dsonar.cfamily.cache.enabled=false \
                    -Dsonar.cfamily.threads=$(nproc)
                '''
            }
         }
        }
    }
    post {
        always {
            xunit([JUnit(deleteOutputFiles: true, failIfNotNew: true, pattern: '**/nosetest*.xml', skipNoTestFiles: false, stopProcessingIfError: true),
            BoostTest(deleteOutputFiles: true, failIfNotNew: true, pattern: '**/results*.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
            cleanWs()
        }
        failure {
            script {
                emailext subject: 'Navitia-CovCode Dev build has failed',
                         to: 'tech.navitia.development@kisio.com',
                         body: "${env.JOB_NAME} has failed (${env.BUILD_NUMBER} ) - ${env.BUILD_URL}"

                slackSend color: "danger",
                          channel: "navitia-core-team",
                          message: "${env.JOB_NAME} has failed (${env.BUILD_NUMBER} ) - ${env.BUILD_URL}"
            }
        }
        cleanup {
            sh '''
                cd build_package;
                make clean
            '''
        }
    }
}


