// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#ifndef PROTOBUF_response_2eproto__INCLUDED
#define PROTOBUF_response_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "type.pb.h"
// @@protoc_insertion_point(includes)

namespace pbnavitia {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_response_2eproto();
void protobuf_AssignDesc_response_2eproto();
void protobuf_ShutdownFile_response_2eproto();

class BoardItem;
class Co2Emission;
class Cost;
class DepartureBoard;
class Distances;
class Durations;
class EquipmentReport;
class Error;
class ExternalLink;
class Fare;
class FeedPublisher;
class GeoStatus;
class GraphicalIsochrone;
class Header;
class HeatMap;
class IndividualInformation;
class IndividualRating;
class Journey;
class LineReport;
class Link;
class LinkArgs;
class Load;
class Metadatas;
class NearestStopPoint;
class Pagination;
class Passage;
class PathItem;
class Planner;
class PtDisplayInfo;
class Response;
class RidesharingInformation;
class RoutePoint;
class RouteSchedule;
class RouteScheduleRow;
class RoutingElement;
class ScheduleStopTime;
class SeatsDescription;
class Section;
class Status;
class StopSchedule;
class StreetNetwork;
class StreetNetworkRoutingMatrix;
class StreetNetworkRoutingRow;
class Table;
class Ticket;
class TrafficReports;
class Uris;

enum Error_error_id {
  Error_error_id_bad_filter = 1,
  Error_error_id_unknown_api = 2,
  Error_error_id_date_out_of_bounds = 3,
  Error_error_id_unable_to_parse = 4,
  Error_error_id_bad_format = 5,
  Error_error_id_no_origin = 6,
  Error_error_id_no_destination = 7,
  Error_error_id_no_origin_nor_destination = 8,
  Error_error_id_no_solution = 9,
  Error_error_id_unknown_object = 10,
  Error_error_id_service_unavailable = 11,
  Error_error_id_invalid_protobuf_request = 12,
  Error_error_id_internal_error = 13,
  Error_error_id_deadline_expired = 14
};
bool Error_error_id_IsValid(int value);
const Error_error_id Error_error_id_error_id_MIN = Error_error_id_bad_filter;
const Error_error_id Error_error_id_error_id_MAX = Error_error_id_deadline_expired;
const int Error_error_id_error_id_ARRAYSIZE = Error_error_id_error_id_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_error_id_descriptor();
inline const ::std::string& Error_error_id_Name(Error_error_id value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_error_id_descriptor(), value);
}
inline bool Error_error_id_Parse(
    const ::std::string& name, Error_error_id* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_error_id>(
    Error_error_id_descriptor(), name, value);
}
enum CyclePathType {
  NoCycleLane = 0,
  SharedCycleWay = 1,
  DedicatedCycleWay = 2,
  SeparatedCycleWay = 3
};
bool CyclePathType_IsValid(int value);
const CyclePathType CyclePathType_MIN = NoCycleLane;
const CyclePathType CyclePathType_MAX = SeparatedCycleWay;
const int CyclePathType_ARRAYSIZE = CyclePathType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CyclePathType_descriptor();
inline const ::std::string& CyclePathType_Name(CyclePathType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CyclePathType_descriptor(), value);
}
inline bool CyclePathType_Parse(
    const ::std::string& name, CyclePathType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CyclePathType>(
    CyclePathType_descriptor(), name, value);
}
enum StreetNetworkMode {
  Walking = 0,
  Bike = 1,
  Car = 3,
  Bss = 4,
  Ridesharing = 5,
  CarNoPark = 6,
  Taxi = 7
};
bool StreetNetworkMode_IsValid(int value);
const StreetNetworkMode StreetNetworkMode_MIN = Walking;
const StreetNetworkMode StreetNetworkMode_MAX = Taxi;
const int StreetNetworkMode_ARRAYSIZE = StreetNetworkMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreetNetworkMode_descriptor();
inline const ::std::string& StreetNetworkMode_Name(StreetNetworkMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreetNetworkMode_descriptor(), value);
}
inline bool StreetNetworkMode_Parse(
    const ::std::string& name, StreetNetworkMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreetNetworkMode>(
    StreetNetworkMode_descriptor(), name, value);
}
enum SectionType {
  PUBLIC_TRANSPORT = 1,
  STREET_NETWORK = 2,
  WAITING = 3,
  TRANSFER = 4,
  boarding = 6,
  landing = 7,
  BSS_RENT = 8,
  BSS_PUT_BACK = 9,
  CROW_FLY = 10,
  PARK = 11,
  LEAVE_PARKING = 12,
  ALIGHTING = 13,
  RIDESHARING = 14,
  ON_DEMAND_TRANSPORT = 15
};
bool SectionType_IsValid(int value);
const SectionType SectionType_MIN = PUBLIC_TRANSPORT;
const SectionType SectionType_MAX = ON_DEMAND_TRANSPORT;
const int SectionType_ARRAYSIZE = SectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SectionType_descriptor();
inline const ::std::string& SectionType_Name(SectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SectionType_descriptor(), value);
}
inline bool SectionType_Parse(
    const ::std::string& name, SectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SectionType>(
    SectionType_descriptor(), name, value);
}
enum TransferType {
  walking = 1,
  stay_in = 3
};
bool TransferType_IsValid(int value);
const TransferType TransferType_MIN = walking;
const TransferType TransferType_MAX = stay_in;
const int TransferType_ARRAYSIZE = TransferType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransferType_descriptor();
inline const ::std::string& TransferType_Name(TransferType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransferType_descriptor(), value);
}
inline bool TransferType_Parse(
    const ::std::string& name, TransferType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransferType>(
    TransferType_descriptor(), name, value);
}
enum SectionAdditionalInformationType {
  ODT_WITH_ZONE = 1,
  ODT_WITH_STOP_POINT = 2,
  ODT_WITH_STOP_TIME = 3,
  HAS_DATETIME_ESTIMATED = 4,
  REGULAR = 5,
  STAY_IN = 6
};
bool SectionAdditionalInformationType_IsValid(int value);
const SectionAdditionalInformationType SectionAdditionalInformationType_MIN = ODT_WITH_ZONE;
const SectionAdditionalInformationType SectionAdditionalInformationType_MAX = STAY_IN;
const int SectionAdditionalInformationType_ARRAYSIZE = SectionAdditionalInformationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SectionAdditionalInformationType_descriptor();
inline const ::std::string& SectionAdditionalInformationType_Name(SectionAdditionalInformationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SectionAdditionalInformationType_descriptor(), value);
}
inline bool SectionAdditionalInformationType_Parse(
    const ::std::string& name, SectionAdditionalInformationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SectionAdditionalInformationType>(
    SectionAdditionalInformationType_descriptor(), name, value);
}
enum GenderType {
  FEMALE = 1,
  MALE = 2
};
bool GenderType_IsValid(int value);
const GenderType GenderType_MIN = FEMALE;
const GenderType GenderType_MAX = MALE;
const int GenderType_ARRAYSIZE = GenderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GenderType_descriptor();
inline const ::std::string& GenderType_Name(GenderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GenderType_descriptor(), value);
}
inline bool GenderType_Parse(
    const ::std::string& name, GenderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GenderType>(
    GenderType_descriptor(), name, value);
}
enum ResponseType {
  ITINERARY_FOUND = 1,
  DATE_OUT_OF_BOUNDS = 2,
  NO_ORIGIN_POINT = 3,
  NO_DESTINATION_POINT = 4,
  NO_ORIGIN_NOR_DESTINATION_POINT = 5,
  NO_VIA_POINT = 6,
  NO_SOLUTION = 7,
  CONNECTION_LIMITATION = 8,
  DURATION_LIMITATION = 9
};
bool ResponseType_IsValid(int value);
const ResponseType ResponseType_MIN = ITINERARY_FOUND;
const ResponseType ResponseType_MAX = DURATION_LIMITATION;
const int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor();
inline const ::std::string& ResponseType_Name(ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseType_descriptor(), value);
}
inline bool ResponseType_Parse(
    const ::std::string& name, ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
enum RoutingStatus {
  reached = 0,
  unreached = 1,
  unknown = 2
};
bool RoutingStatus_IsValid(int value);
const RoutingStatus RoutingStatus_MIN = reached;
const RoutingStatus RoutingStatus_MAX = unknown;
const int RoutingStatus_ARRAYSIZE = RoutingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoutingStatus_descriptor();
inline const ::std::string& RoutingStatus_Name(RoutingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoutingStatus_descriptor(), value);
}
inline bool RoutingStatus_Parse(
    const ::std::string& name, RoutingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingStatus>(
    RoutingStatus_descriptor(), name, value);
}
// ===================================================================

class PathItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PathItem) */ {
 public:
  PathItem();
  virtual ~PathItem();

  PathItem(const PathItem& from);

  inline PathItem& operator=(const PathItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathItem& default_instance();

  void Swap(PathItem* other);

  // implements Message ----------------------------------------------

  inline PathItem* New() const { return New(NULL); }

  PathItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathItem& from);
  void MergeFrom(const PathItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  double length() const;
  void set_length(double value);

  // optional int32 direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // optional double duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  double duration() const;
  void set_duration(double value);

  // optional .pbnavitia.CyclePathType cycle_path_type = 5;
  bool has_cycle_path_type() const;
  void clear_cycle_path_type();
  static const int kCyclePathTypeFieldNumber = 5;
  ::pbnavitia::CyclePathType cycle_path_type() const;
  void set_cycle_path_type(::pbnavitia::CyclePathType value);

  // @@protoc_insertion_point(class_scope:pbnavitia.PathItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_cycle_path_type();
  inline void clear_has_cycle_path_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double length_;
  double duration_;
  ::google::protobuf::int32 direction_;
  int cycle_path_type_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static PathItem* default_instance_;
};
// -------------------------------------------------------------------

class StreetNetwork : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StreetNetwork) */ {
 public:
  StreetNetwork();
  virtual ~StreetNetwork();

  StreetNetwork(const StreetNetwork& from);

  inline StreetNetwork& operator=(const StreetNetwork& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreetNetwork& default_instance();

  void Swap(StreetNetwork* other);

  // implements Message ----------------------------------------------

  inline StreetNetwork* New() const { return New(NULL); }

  StreetNetwork* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreetNetwork& from);
  void MergeFrom(const StreetNetwork& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreetNetwork* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double length = 1;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  double length() const;
  void set_length(double value);

  // optional double duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  double duration() const;
  void set_duration(double value);

  // optional .pbnavitia.StreetNetworkMode mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::pbnavitia::StreetNetworkMode mode() const;
  void set_mode(::pbnavitia::StreetNetworkMode value);

  // repeated .pbnavitia.PathItem path_items = 4;
  int path_items_size() const;
  void clear_path_items();
  static const int kPathItemsFieldNumber = 4;
  const ::pbnavitia::PathItem& path_items(int index) const;
  ::pbnavitia::PathItem* mutable_path_items(int index);
  ::pbnavitia::PathItem* add_path_items();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PathItem >*
      mutable_path_items();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PathItem >&
      path_items() const;

  // repeated .pbnavitia.GeographicalCoord coordinates = 5;
  int coordinates_size() const;
  void clear_coordinates();
  static const int kCoordinatesFieldNumber = 5;
  const ::pbnavitia::GeographicalCoord& coordinates(int index) const;
  ::pbnavitia::GeographicalCoord* mutable_coordinates(int index);
  ::pbnavitia::GeographicalCoord* add_coordinates();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
      mutable_coordinates();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
      coordinates() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.StreetNetwork)
 private:
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double length_;
  double duration_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PathItem > path_items_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord > coordinates_;
  int mode_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static StreetNetwork* default_instance_;
};
// -------------------------------------------------------------------

class PtDisplayInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PtDisplayInfo) */ {
 public:
  PtDisplayInfo();
  virtual ~PtDisplayInfo();

  PtDisplayInfo(const PtDisplayInfo& from);

  inline PtDisplayInfo& operator=(const PtDisplayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PtDisplayInfo& default_instance();

  void Swap(PtDisplayInfo* other);

  // implements Message ----------------------------------------------

  inline PtDisplayInfo* New() const { return New(NULL); }

  PtDisplayInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PtDisplayInfo& from);
  void MergeFrom(const PtDisplayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PtDisplayInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string network = 1;
  bool has_network() const;
  void clear_network();
  static const int kNetworkFieldNumber = 1;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // optional string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string headsign = 3;
  bool has_headsign() const;
  void clear_headsign();
  static const int kHeadsignFieldNumber = 3;
  const ::std::string& headsign() const;
  void set_headsign(const ::std::string& value);
  void set_headsign(const char* value);
  void set_headsign(const char* value, size_t size);
  ::std::string* mutable_headsign();
  ::std::string* release_headsign();
  void set_allocated_headsign(::std::string* headsign);

  // optional string direction = 4;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  const ::std::string& direction() const;
  void set_direction(const ::std::string& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  ::std::string* mutable_direction();
  ::std::string* release_direction();
  void set_allocated_direction(::std::string* direction);

  // optional string color = 5;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 5;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string commercial_mode = 6;
  bool has_commercial_mode() const;
  void clear_commercial_mode();
  static const int kCommercialModeFieldNumber = 6;
  const ::std::string& commercial_mode() const;
  void set_commercial_mode(const ::std::string& value);
  void set_commercial_mode(const char* value);
  void set_commercial_mode(const char* value, size_t size);
  ::std::string* mutable_commercial_mode();
  ::std::string* release_commercial_mode();
  void set_allocated_commercial_mode(::std::string* commercial_mode);

  // optional string physical_mode = 7;
  bool has_physical_mode() const;
  void clear_physical_mode();
  static const int kPhysicalModeFieldNumber = 7;
  const ::std::string& physical_mode() const;
  void set_physical_mode(const ::std::string& value);
  void set_physical_mode(const char* value);
  void set_physical_mode(const char* value, size_t size);
  ::std::string* mutable_physical_mode();
  ::std::string* release_physical_mode();
  void set_allocated_physical_mode(::std::string* physical_mode);

  // optional string description = 8;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 8;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .pbnavitia.Uris uris = 9;
  bool has_uris() const;
  void clear_uris();
  static const int kUrisFieldNumber = 9;
  const ::pbnavitia::Uris& uris() const;
  ::pbnavitia::Uris* mutable_uris();
  ::pbnavitia::Uris* release_uris();
  void set_allocated_uris(::pbnavitia::Uris* uris);

  // optional .pbnavitia.hasEquipments has_equipments = 11;
  bool has_has_equipments() const;
  void clear_has_equipments();
  static const int kHasEquipmentsFieldNumber = 11;
  const ::pbnavitia::hasEquipments& has_equipments() const;
  ::pbnavitia::hasEquipments* mutable_has_equipments();
  ::pbnavitia::hasEquipments* release_has_equipments();
  void set_allocated_has_equipments(::pbnavitia::hasEquipments* has_equipments);

  // optional string name = 12;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 12;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .pbnavitia.Message messages = 13;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 13;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 18;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 18;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // repeated .pbnavitia.Note notes = 15;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 15;
  const ::pbnavitia::Note& notes(int index) const;
  ::pbnavitia::Note* mutable_notes(int index);
  ::pbnavitia::Note* add_notes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >*
      mutable_notes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >&
      notes() const;

  // repeated string headsigns = 16;
  int headsigns_size() const;
  void clear_headsigns();
  static const int kHeadsignsFieldNumber = 16;
  const ::std::string& headsigns(int index) const;
  ::std::string* mutable_headsigns(int index);
  void set_headsigns(int index, const ::std::string& value);
  void set_headsigns(int index, const char* value);
  void set_headsigns(int index, const char* value, size_t size);
  ::std::string* add_headsigns();
  void add_headsigns(const ::std::string& value);
  void add_headsigns(const char* value);
  void add_headsigns(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& headsigns() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_headsigns();

  // optional string text_color = 17;
  bool has_text_color() const;
  void clear_text_color();
  static const int kTextColorFieldNumber = 17;
  const ::std::string& text_color() const;
  void set_text_color(const ::std::string& value);
  void set_text_color(const char* value);
  void set_text_color(const char* value, size_t size);
  ::std::string* mutable_text_color();
  ::std::string* release_text_color();
  void set_allocated_text_color(::std::string* text_color);

  // optional string trip_short_name = 19;
  bool has_trip_short_name() const;
  void clear_trip_short_name();
  static const int kTripShortNameFieldNumber = 19;
  const ::std::string& trip_short_name() const;
  void set_trip_short_name(const ::std::string& value);
  void set_trip_short_name(const char* value);
  void set_trip_short_name(const char* value, size_t size);
  ::std::string* mutable_trip_short_name();
  ::std::string* release_trip_short_name();
  void set_allocated_trip_short_name(::std::string* trip_short_name);

  // @@protoc_insertion_point(class_scope:pbnavitia.PtDisplayInfo)
 private:
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_headsign();
  inline void clear_has_headsign();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_commercial_mode();
  inline void clear_has_commercial_mode();
  inline void set_has_physical_mode();
  inline void clear_has_physical_mode();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_uris();
  inline void clear_has_uris();
  inline void set_has_has_equipments();
  inline void clear_has_has_equipments();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_text_color();
  inline void clear_has_text_color();
  inline void set_has_trip_short_name();
  inline void clear_has_trip_short_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr headsign_;
  ::google::protobuf::internal::ArenaStringPtr direction_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr commercial_mode_;
  ::google::protobuf::internal::ArenaStringPtr physical_mode_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::pbnavitia::Uris* uris_;
  ::pbnavitia::hasEquipments* has_equipments_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note > notes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> headsigns_;
  ::google::protobuf::internal::ArenaStringPtr text_color_;
  ::google::protobuf::internal::ArenaStringPtr trip_short_name_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static PtDisplayInfo* default_instance_;
};
// -------------------------------------------------------------------

class Uris : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Uris) */ {
 public:
  Uris();
  virtual ~Uris();

  Uris(const Uris& from);

  inline Uris& operator=(const Uris& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Uris& default_instance();

  void Swap(Uris* other);

  // implements Message ----------------------------------------------

  inline Uris* New() const { return New(NULL); }

  Uris* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Uris& from);
  void MergeFrom(const Uris& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Uris* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string company = 1;
  bool has_company() const;
  void clear_company();
  static const int kCompanyFieldNumber = 1;
  const ::std::string& company() const;
  void set_company(const ::std::string& value);
  void set_company(const char* value);
  void set_company(const char* value, size_t size);
  ::std::string* mutable_company();
  ::std::string* release_company();
  void set_allocated_company(::std::string* company);

  // optional string vehicle_journey = 2;
  bool has_vehicle_journey() const;
  void clear_vehicle_journey();
  static const int kVehicleJourneyFieldNumber = 2;
  const ::std::string& vehicle_journey() const;
  void set_vehicle_journey(const ::std::string& value);
  void set_vehicle_journey(const char* value);
  void set_vehicle_journey(const char* value, size_t size);
  ::std::string* mutable_vehicle_journey();
  ::std::string* release_vehicle_journey();
  void set_allocated_vehicle_journey(::std::string* vehicle_journey);

  // optional string line = 3;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 3;
  const ::std::string& line() const;
  void set_line(const ::std::string& value);
  void set_line(const char* value);
  void set_line(const char* value, size_t size);
  ::std::string* mutable_line();
  ::std::string* release_line();
  void set_allocated_line(::std::string* line);

  // optional string route = 4;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 4;
  const ::std::string& route() const;
  void set_route(const ::std::string& value);
  void set_route(const char* value);
  void set_route(const char* value, size_t size);
  ::std::string* mutable_route();
  ::std::string* release_route();
  void set_allocated_route(::std::string* route);

  // optional string commercial_mode = 5;
  bool has_commercial_mode() const;
  void clear_commercial_mode();
  static const int kCommercialModeFieldNumber = 5;
  const ::std::string& commercial_mode() const;
  void set_commercial_mode(const ::std::string& value);
  void set_commercial_mode(const char* value);
  void set_commercial_mode(const char* value, size_t size);
  ::std::string* mutable_commercial_mode();
  ::std::string* release_commercial_mode();
  void set_allocated_commercial_mode(::std::string* commercial_mode);

  // optional string physical_mode = 6;
  bool has_physical_mode() const;
  void clear_physical_mode();
  static const int kPhysicalModeFieldNumber = 6;
  const ::std::string& physical_mode() const;
  void set_physical_mode(const ::std::string& value);
  void set_physical_mode(const char* value);
  void set_physical_mode(const char* value, size_t size);
  ::std::string* mutable_physical_mode();
  ::std::string* release_physical_mode();
  void set_allocated_physical_mode(::std::string* physical_mode);

  // optional string network = 7;
  bool has_network() const;
  void clear_network();
  static const int kNetworkFieldNumber = 7;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // optional string note = 8;
  bool has_note() const;
  void clear_note();
  static const int kNoteFieldNumber = 8;
  const ::std::string& note() const;
  void set_note(const ::std::string& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  ::std::string* mutable_note();
  ::std::string* release_note();
  void set_allocated_note(::std::string* note);

  // optional string journey_pattern = 9;
  bool has_journey_pattern() const;
  void clear_journey_pattern();
  static const int kJourneyPatternFieldNumber = 9;
  const ::std::string& journey_pattern() const;
  void set_journey_pattern(const ::std::string& value);
  void set_journey_pattern(const char* value);
  void set_journey_pattern(const char* value, size_t size);
  ::std::string* mutable_journey_pattern();
  ::std::string* release_journey_pattern();
  void set_allocated_journey_pattern(::std::string* journey_pattern);

  // @@protoc_insertion_point(class_scope:pbnavitia.Uris)
 private:
  inline void set_has_company();
  inline void clear_has_company();
  inline void set_has_vehicle_journey();
  inline void clear_has_vehicle_journey();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_route();
  inline void clear_has_route();
  inline void set_has_commercial_mode();
  inline void clear_has_commercial_mode();
  inline void set_has_physical_mode();
  inline void clear_has_physical_mode();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_note();
  inline void clear_has_note();
  inline void set_has_journey_pattern();
  inline void clear_has_journey_pattern();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr company_;
  ::google::protobuf::internal::ArenaStringPtr vehicle_journey_;
  ::google::protobuf::internal::ArenaStringPtr line_;
  ::google::protobuf::internal::ArenaStringPtr route_;
  ::google::protobuf::internal::ArenaStringPtr commercial_mode_;
  ::google::protobuf::internal::ArenaStringPtr physical_mode_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr note_;
  ::google::protobuf::internal::ArenaStringPtr journey_pattern_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Uris* default_instance_;
};
// -------------------------------------------------------------------

class Cost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Cost) */ {
 public:
  Cost();
  virtual ~Cost();

  Cost(const Cost& from);

  inline Cost& operator=(const Cost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cost& default_instance();

  void Swap(Cost* other);

  // implements Message ----------------------------------------------

  inline Cost* New() const { return New(NULL); }

  Cost* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cost& from);
  void MergeFrom(const Cost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Cost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // optional string currency = 2;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  const ::std::string& currency() const;
  void set_currency(const ::std::string& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  ::std::string* mutable_currency();
  ::std::string* release_currency();
  void set_allocated_currency(::std::string* currency);

  // @@protoc_insertion_point(class_scope:pbnavitia.Cost)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_currency();
  inline void clear_has_currency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double value_;
  ::google::protobuf::internal::ArenaStringPtr currency_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Cost* default_instance_;
};
// -------------------------------------------------------------------

class Ticket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Ticket) */ {
 public:
  Ticket();
  virtual ~Ticket();

  Ticket(const Ticket& from);

  inline Ticket& operator=(const Ticket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ticket& default_instance();

  void Swap(Ticket* other);

  // implements Message ----------------------------------------------

  inline Ticket* New() const { return New(NULL); }

  Ticket* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ticket& from);
  void MergeFrom(const Ticket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ticket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .pbnavitia.Cost cost = 3;
  bool has_cost() const;
  void clear_cost();
  static const int kCostFieldNumber = 3;
  const ::pbnavitia::Cost& cost() const;
  ::pbnavitia::Cost* mutable_cost();
  ::pbnavitia::Cost* release_cost();
  void set_allocated_cost(::pbnavitia::Cost* cost);

  // repeated string section_id = 4;
  int section_id_size() const;
  void clear_section_id();
  static const int kSectionIdFieldNumber = 4;
  const ::std::string& section_id(int index) const;
  ::std::string* mutable_section_id(int index);
  void set_section_id(int index, const ::std::string& value);
  void set_section_id(int index, const char* value);
  void set_section_id(int index, const char* value, size_t size);
  ::std::string* add_section_id();
  void add_section_id(const ::std::string& value);
  void add_section_id(const char* value);
  void add_section_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& section_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_section_id();

  // optional bool found = 5;
  bool has_found() const;
  void clear_found();
  static const int kFoundFieldNumber = 5;
  bool found() const;
  void set_found(bool value);

  // optional string comment = 6;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 6;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional string source_id = 7;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 7;
  const ::std::string& source_id() const;
  void set_source_id(const ::std::string& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  ::std::string* mutable_source_id();
  ::std::string* release_source_id();
  void set_allocated_source_id(::std::string* source_id);

  // @@protoc_insertion_point(class_scope:pbnavitia.Ticket)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_found();
  inline void clear_has_found();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_source_id();
  inline void clear_has_source_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pbnavitia::Cost* cost_;
  ::google::protobuf::RepeatedPtrField< ::std::string> section_id_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr source_id_;
  bool found_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Ticket* default_instance_;
};
// -------------------------------------------------------------------

class Fare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Fare) */ {
 public:
  Fare();
  virtual ~Fare();

  Fare(const Fare& from);

  inline Fare& operator=(const Fare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fare& default_instance();

  void Swap(Fare* other);

  // implements Message ----------------------------------------------

  inline Fare* New() const { return New(NULL); }

  Fare* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fare& from);
  void MergeFrom(const Fare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Fare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.Cost total = 1;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 1;
  const ::pbnavitia::Cost& total() const;
  ::pbnavitia::Cost* mutable_total();
  ::pbnavitia::Cost* release_total();
  void set_allocated_total(::pbnavitia::Cost* total);

  // repeated string ticket_id = 2;
  int ticket_id_size() const;
  void clear_ticket_id();
  static const int kTicketIdFieldNumber = 2;
  const ::std::string& ticket_id(int index) const;
  ::std::string* mutable_ticket_id(int index);
  void set_ticket_id(int index, const ::std::string& value);
  void set_ticket_id(int index, const char* value);
  void set_ticket_id(int index, const char* value, size_t size);
  ::std::string* add_ticket_id();
  void add_ticket_id(const ::std::string& value);
  void add_ticket_id(const char* value);
  void add_ticket_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ticket_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ticket_id();

  // optional bool found = 3;
  bool has_found() const;
  void clear_found();
  static const int kFoundFieldNumber = 3;
  bool found() const;
  void set_found(bool value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Fare)
 private:
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_found();
  inline void clear_has_found();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::Cost* total_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ticket_id_;
  bool found_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Fare* default_instance_;
};
// -------------------------------------------------------------------

class Co2Emission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Co2Emission) */ {
 public:
  Co2Emission();
  virtual ~Co2Emission();

  Co2Emission(const Co2Emission& from);

  inline Co2Emission& operator=(const Co2Emission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Co2Emission& default_instance();

  void Swap(Co2Emission* other);

  // implements Message ----------------------------------------------

  inline Co2Emission* New() const { return New(NULL); }

  Co2Emission* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Co2Emission& from);
  void MergeFrom(const Co2Emission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Co2Emission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // optional string unit = 2;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // @@protoc_insertion_point(class_scope:pbnavitia.Co2Emission)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_unit();
  inline void clear_has_unit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double value_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Co2Emission* default_instance_;
};
// -------------------------------------------------------------------

class Durations : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Durations) */ {
 public:
  Durations();
  virtual ~Durations();

  Durations(const Durations& from);

  inline Durations& operator=(const Durations& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Durations& default_instance();

  void Swap(Durations* other);

  // implements Message ----------------------------------------------

  inline Durations* New() const { return New(NULL); }

  Durations* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Durations& from);
  void MergeFrom(const Durations& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Durations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 total = 1;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 1;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // optional int32 walking = 2;
  bool has_walking() const;
  void clear_walking();
  static const int kWalkingFieldNumber = 2;
  ::google::protobuf::int32 walking() const;
  void set_walking(::google::protobuf::int32 value);

  // optional int32 bike = 3;
  bool has_bike() const;
  void clear_bike();
  static const int kBikeFieldNumber = 3;
  ::google::protobuf::int32 bike() const;
  void set_bike(::google::protobuf::int32 value);

  // optional int32 car = 4;
  bool has_car() const;
  void clear_car();
  static const int kCarFieldNumber = 4;
  ::google::protobuf::int32 car() const;
  void set_car(::google::protobuf::int32 value);

  // optional int32 ridesharing = 5;
  bool has_ridesharing() const;
  void clear_ridesharing();
  static const int kRidesharingFieldNumber = 5;
  ::google::protobuf::int32 ridesharing() const;
  void set_ridesharing(::google::protobuf::int32 value);

  // optional int32 taxi = 6;
  bool has_taxi() const;
  void clear_taxi();
  static const int kTaxiFieldNumber = 6;
  ::google::protobuf::int32 taxi() const;
  void set_taxi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Durations)
 private:
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_walking();
  inline void clear_has_walking();
  inline void set_has_bike();
  inline void clear_has_bike();
  inline void set_has_car();
  inline void clear_has_car();
  inline void set_has_ridesharing();
  inline void clear_has_ridesharing();
  inline void set_has_taxi();
  inline void clear_has_taxi();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 walking_;
  ::google::protobuf::int32 bike_;
  ::google::protobuf::int32 car_;
  ::google::protobuf::int32 ridesharing_;
  ::google::protobuf::int32 taxi_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Durations* default_instance_;
};
// -------------------------------------------------------------------

class Distances : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Distances) */ {
 public:
  Distances();
  virtual ~Distances();

  Distances(const Distances& from);

  inline Distances& operator=(const Distances& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Distances& default_instance();

  void Swap(Distances* other);

  // implements Message ----------------------------------------------

  inline Distances* New() const { return New(NULL); }

  Distances* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Distances& from);
  void MergeFrom(const Distances& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Distances* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 walking = 1;
  bool has_walking() const;
  void clear_walking();
  static const int kWalkingFieldNumber = 1;
  ::google::protobuf::int32 walking() const;
  void set_walking(::google::protobuf::int32 value);

  // optional int32 bike = 2;
  bool has_bike() const;
  void clear_bike();
  static const int kBikeFieldNumber = 2;
  ::google::protobuf::int32 bike() const;
  void set_bike(::google::protobuf::int32 value);

  // optional int32 car = 3;
  bool has_car() const;
  void clear_car();
  static const int kCarFieldNumber = 3;
  ::google::protobuf::int32 car() const;
  void set_car(::google::protobuf::int32 value);

  // optional int32 ridesharing = 4;
  bool has_ridesharing() const;
  void clear_ridesharing();
  static const int kRidesharingFieldNumber = 4;
  ::google::protobuf::int32 ridesharing() const;
  void set_ridesharing(::google::protobuf::int32 value);

  // optional int32 taxi = 5;
  bool has_taxi() const;
  void clear_taxi();
  static const int kTaxiFieldNumber = 5;
  ::google::protobuf::int32 taxi() const;
  void set_taxi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Distances)
 private:
  inline void set_has_walking();
  inline void clear_has_walking();
  inline void set_has_bike();
  inline void clear_has_bike();
  inline void set_has_car();
  inline void clear_has_car();
  inline void set_has_ridesharing();
  inline void clear_has_ridesharing();
  inline void set_has_taxi();
  inline void clear_has_taxi();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 walking_;
  ::google::protobuf::int32 bike_;
  ::google::protobuf::int32 car_;
  ::google::protobuf::int32 ridesharing_;
  ::google::protobuf::int32 taxi_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Distances* default_instance_;
};
// -------------------------------------------------------------------

class IndividualRating : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.IndividualRating) */ {
 public:
  IndividualRating();
  virtual ~IndividualRating();

  IndividualRating(const IndividualRating& from);

  inline IndividualRating& operator=(const IndividualRating& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndividualRating& default_instance();

  void Swap(IndividualRating* other);

  // implements Message ----------------------------------------------

  inline IndividualRating* New() const { return New(NULL); }

  IndividualRating* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndividualRating& from);
  void MergeFrom(const IndividualRating& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndividualRating* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional double scale_min = 3;
  bool has_scale_min() const;
  void clear_scale_min();
  static const int kScaleMinFieldNumber = 3;
  double scale_min() const;
  void set_scale_min(double value);

  // optional double scale_max = 4;
  bool has_scale_max() const;
  void clear_scale_max();
  static const int kScaleMaxFieldNumber = 4;
  double scale_max() const;
  void set_scale_max(double value);

  // @@protoc_insertion_point(class_scope:pbnavitia.IndividualRating)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_scale_min();
  inline void clear_has_scale_min();
  inline void set_has_scale_max();
  inline void clear_has_scale_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double value_;
  double scale_min_;
  double scale_max_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static IndividualRating* default_instance_;
};
// -------------------------------------------------------------------

class IndividualInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.IndividualInformation) */ {
 public:
  IndividualInformation();
  virtual ~IndividualInformation();

  IndividualInformation(const IndividualInformation& from);

  inline IndividualInformation& operator=(const IndividualInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IndividualInformation& default_instance();

  void Swap(IndividualInformation* other);

  // implements Message ----------------------------------------------

  inline IndividualInformation* New() const { return New(NULL); }

  IndividualInformation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndividualInformation& from);
  void MergeFrom(const IndividualInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IndividualInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string alias = 1;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // optional .pbnavitia.GenderType gender = 3;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 3;
  ::pbnavitia::GenderType gender() const;
  void set_gender(::pbnavitia::GenderType value);

  // optional .pbnavitia.IndividualRating rating = 4;
  bool has_rating() const;
  void clear_rating();
  static const int kRatingFieldNumber = 4;
  const ::pbnavitia::IndividualRating& rating() const;
  ::pbnavitia::IndividualRating* mutable_rating();
  ::pbnavitia::IndividualRating* release_rating();
  void set_allocated_rating(::pbnavitia::IndividualRating* rating);

  // @@protoc_insertion_point(class_scope:pbnavitia.IndividualInformation)
 private:
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_rating();
  inline void clear_has_rating();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::pbnavitia::IndividualRating* rating_;
  int gender_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static IndividualInformation* default_instance_;
};
// -------------------------------------------------------------------

class SeatsDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.SeatsDescription) */ {
 public:
  SeatsDescription();
  virtual ~SeatsDescription();

  SeatsDescription(const SeatsDescription& from);

  inline SeatsDescription& operator=(const SeatsDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeatsDescription& default_instance();

  void Swap(SeatsDescription* other);

  // implements Message ----------------------------------------------

  inline SeatsDescription* New() const { return New(NULL); }

  SeatsDescription* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeatsDescription& from);
  void MergeFrom(const SeatsDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeatsDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total = 1;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 1;
  ::google::protobuf::uint32 total() const;
  void set_total(::google::protobuf::uint32 value);

  // optional uint32 available = 2;
  bool has_available() const;
  void clear_available();
  static const int kAvailableFieldNumber = 2;
  ::google::protobuf::uint32 available() const;
  void set_available(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.SeatsDescription)
 private:
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_available();
  inline void clear_has_available();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 total_;
  ::google::protobuf::uint32 available_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static SeatsDescription* default_instance_;
};
// -------------------------------------------------------------------

class ExternalLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.ExternalLink) */ {
 public:
  ExternalLink();
  virtual ~ExternalLink();

  ExternalLink(const ExternalLink& from);

  inline ExternalLink& operator=(const ExternalLink& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalLink& default_instance();

  void Swap(ExternalLink* other);

  // implements Message ----------------------------------------------

  inline ExternalLink* New() const { return New(NULL); }

  ExternalLink* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternalLink& from);
  void MergeFrom(const ExternalLink& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExternalLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string href = 2;
  bool has_href() const;
  void clear_href();
  static const int kHrefFieldNumber = 2;
  const ::std::string& href() const;
  void set_href(const ::std::string& value);
  void set_href(const char* value);
  void set_href(const char* value, size_t size);
  ::std::string* mutable_href();
  ::std::string* release_href();
  void set_allocated_href(::std::string* href);

  // @@protoc_insertion_point(class_scope:pbnavitia.ExternalLink)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_href();
  inline void clear_has_href();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr href_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static ExternalLink* default_instance_;
};
// -------------------------------------------------------------------

class RidesharingInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.RidesharingInformation) */ {
 public:
  RidesharingInformation();
  virtual ~RidesharingInformation();

  RidesharingInformation(const RidesharingInformation& from);

  inline RidesharingInformation& operator=(const RidesharingInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RidesharingInformation& default_instance();

  void Swap(RidesharingInformation* other);

  // implements Message ----------------------------------------------

  inline RidesharingInformation* New() const { return New(NULL); }

  RidesharingInformation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RidesharingInformation& from);
  void MergeFrom(const RidesharingInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RidesharingInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string operator = 1;
  bool has_operator_() const;
  void clear_operator_();
  static const int kOperatorFieldNumber = 1;
  const ::std::string& operator_() const;
  void set_operator_(const ::std::string& value);
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  ::std::string* mutable_operator_();
  ::std::string* release_operator_();
  void set_allocated_operator_(::std::string* operator_);

  // optional string network = 2;
  bool has_network() const;
  void clear_network();
  static const int kNetworkFieldNumber = 2;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // optional .pbnavitia.IndividualInformation driver = 3;
  bool has_driver() const;
  void clear_driver();
  static const int kDriverFieldNumber = 3;
  const ::pbnavitia::IndividualInformation& driver() const;
  ::pbnavitia::IndividualInformation* mutable_driver();
  ::pbnavitia::IndividualInformation* release_driver();
  void set_allocated_driver(::pbnavitia::IndividualInformation* driver);

  // optional .pbnavitia.SeatsDescription seats = 4;
  bool has_seats() const;
  void clear_seats();
  static const int kSeatsFieldNumber = 4;
  const ::pbnavitia::SeatsDescription& seats() const;
  ::pbnavitia::SeatsDescription* mutable_seats();
  ::pbnavitia::SeatsDescription* release_seats();
  void set_allocated_seats(::pbnavitia::SeatsDescription* seats);

  // repeated .pbnavitia.ExternalLink links = 5;
  int links_size() const;
  void clear_links();
  static const int kLinksFieldNumber = 5;
  const ::pbnavitia::ExternalLink& links(int index) const;
  ::pbnavitia::ExternalLink* mutable_links(int index);
  ::pbnavitia::ExternalLink* add_links();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ExternalLink >*
      mutable_links();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ExternalLink >&
      links() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.RidesharingInformation)
 private:
  inline void set_has_operator_();
  inline void clear_has_operator_();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_driver();
  inline void clear_has_driver();
  inline void set_has_seats();
  inline void clear_has_seats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr operator__;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::pbnavitia::IndividualInformation* driver_;
  ::pbnavitia::SeatsDescription* seats_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ExternalLink > links_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static RidesharingInformation* default_instance_;
};
// -------------------------------------------------------------------

class FeedPublisher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.FeedPublisher) */ {
 public:
  FeedPublisher();
  virtual ~FeedPublisher();

  FeedPublisher(const FeedPublisher& from);

  inline FeedPublisher& operator=(const FeedPublisher& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedPublisher& default_instance();

  void Swap(FeedPublisher* other);

  // implements Message ----------------------------------------------

  inline FeedPublisher* New() const { return New(NULL); }

  FeedPublisher* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedPublisher& from);
  void MergeFrom(const FeedPublisher& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedPublisher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string license = 4;
  bool has_license() const;
  void clear_license();
  static const int kLicenseFieldNumber = 4;
  const ::std::string& license() const;
  void set_license(const ::std::string& value);
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  ::std::string* mutable_license();
  ::std::string* release_license();
  void set_allocated_license(::std::string* license);

  // @@protoc_insertion_point(class_scope:pbnavitia.FeedPublisher)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_license();
  inline void clear_has_license();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr license_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static FeedPublisher* default_instance_;
};
// -------------------------------------------------------------------

class Section : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Section) */ {
 public:
  Section();
  virtual ~Section();

  Section(const Section& from);

  inline Section& operator=(const Section& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Section& default_instance();

  void Swap(Section* other);

  // implements Message ----------------------------------------------

  inline Section* New() const { return New(NULL); }

  Section* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Section& from);
  void MergeFrom(const Section& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Section* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.SectionType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pbnavitia::SectionType type() const;
  void set_type(::pbnavitia::SectionType value);

  // optional .pbnavitia.PtObject origin = 2;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 2;
  const ::pbnavitia::PtObject& origin() const;
  ::pbnavitia::PtObject* mutable_origin();
  ::pbnavitia::PtObject* release_origin();
  void set_allocated_origin(::pbnavitia::PtObject* origin);

  // optional .pbnavitia.PtObject destination = 3;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 3;
  const ::pbnavitia::PtObject& destination() const;
  ::pbnavitia::PtObject* mutable_destination();
  ::pbnavitia::PtObject* release_destination();
  void set_allocated_destination(::pbnavitia::PtObject* destination);

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 4;
  bool has_pt_display_informations() const;
  void clear_pt_display_informations();
  static const int kPtDisplayInformationsFieldNumber = 4;
  const ::pbnavitia::PtDisplayInfo& pt_display_informations() const;
  ::pbnavitia::PtDisplayInfo* mutable_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* release_pt_display_informations();
  void set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations);

  // optional .pbnavitia.Uris uris = 5;
  bool has_uris() const;
  void clear_uris();
  static const int kUrisFieldNumber = 5;
  const ::pbnavitia::Uris& uris() const;
  ::pbnavitia::Uris* mutable_uris();
  ::pbnavitia::Uris* release_uris();
  void set_allocated_uris(::pbnavitia::Uris* uris);

  // optional .pbnavitia.VehicleJourney vehicle_journey = 9;
  bool has_vehicle_journey() const;
  void clear_vehicle_journey();
  static const int kVehicleJourneyFieldNumber = 9;
  const ::pbnavitia::VehicleJourney& vehicle_journey() const;
  ::pbnavitia::VehicleJourney* mutable_vehicle_journey();
  ::pbnavitia::VehicleJourney* release_vehicle_journey();
  void set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey);

  // repeated .pbnavitia.StopDateTime stop_date_times = 10;
  int stop_date_times_size() const;
  void clear_stop_date_times();
  static const int kStopDateTimesFieldNumber = 10;
  const ::pbnavitia::StopDateTime& stop_date_times(int index) const;
  ::pbnavitia::StopDateTime* mutable_stop_date_times(int index);
  ::pbnavitia::StopDateTime* add_stop_date_times();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopDateTime >*
      mutable_stop_date_times();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopDateTime >&
      stop_date_times() const;

  // optional .pbnavitia.StreetNetwork street_network = 12;
  bool has_street_network() const;
  void clear_street_network();
  static const int kStreetNetworkFieldNumber = 12;
  const ::pbnavitia::StreetNetwork& street_network() const;
  ::pbnavitia::StreetNetwork* mutable_street_network();
  ::pbnavitia::StreetNetwork* release_street_network();
  void set_allocated_street_network(::pbnavitia::StreetNetwork* street_network);

  // optional int32 cycle_lane_length = 30;
  bool has_cycle_lane_length() const;
  void clear_cycle_lane_length();
  static const int kCycleLaneLengthFieldNumber = 30;
  ::google::protobuf::int32 cycle_lane_length() const;
  void set_cycle_lane_length(::google::protobuf::int32 value);

  // optional .pbnavitia.TransferType transfer_type = 13;
  bool has_transfer_type() const;
  void clear_transfer_type();
  static const int kTransferTypeFieldNumber = 13;
  ::pbnavitia::TransferType transfer_type() const;
  void set_transfer_type(::pbnavitia::TransferType value);

  // repeated .pbnavitia.Journey ridesharing_journeys = 28;
  int ridesharing_journeys_size() const;
  void clear_ridesharing_journeys();
  static const int kRidesharingJourneysFieldNumber = 28;
  const ::pbnavitia::Journey& ridesharing_journeys(int index) const;
  ::pbnavitia::Journey* mutable_ridesharing_journeys(int index);
  ::pbnavitia::Journey* add_ridesharing_journeys();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
      mutable_ridesharing_journeys();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
      ridesharing_journeys() const;

  // optional .pbnavitia.RidesharingInformation ridesharing_information = 29;
  bool has_ridesharing_information() const;
  void clear_ridesharing_information();
  static const int kRidesharingInformationFieldNumber = 29;
  const ::pbnavitia::RidesharingInformation& ridesharing_information() const;
  ::pbnavitia::RidesharingInformation* mutable_ridesharing_information();
  ::pbnavitia::RidesharingInformation* release_ridesharing_information();
  void set_allocated_ridesharing_information(::pbnavitia::RidesharingInformation* ridesharing_information);

  // repeated .pbnavitia.GeographicalCoord shape = 24;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 24;
  const ::pbnavitia::GeographicalCoord& shape(int index) const;
  ::pbnavitia::GeographicalCoord* mutable_shape(int index);
  ::pbnavitia::GeographicalCoord* add_shape();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
      shape() const;

  // optional int32 duration = 15;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 15;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional uint64 begin_date_time = 16;
  bool has_begin_date_time() const;
  void clear_begin_date_time();
  static const int kBeginDateTimeFieldNumber = 16;
  ::google::protobuf::uint64 begin_date_time() const;
  void set_begin_date_time(::google::protobuf::uint64 value);

  // optional uint64 end_date_time = 17;
  bool has_end_date_time() const;
  void clear_end_date_time();
  static const int kEndDateTimeFieldNumber = 17;
  ::google::protobuf::uint64 end_date_time() const;
  void set_end_date_time(::google::protobuf::uint64 value);

  // optional uint64 base_begin_date_time = 25;
  bool has_base_begin_date_time() const;
  void clear_base_begin_date_time();
  static const int kBaseBeginDateTimeFieldNumber = 25;
  ::google::protobuf::uint64 base_begin_date_time() const;
  void set_base_begin_date_time(::google::protobuf::uint64 value);

  // optional uint64 base_end_date_time = 26;
  bool has_base_end_date_time() const;
  void clear_base_end_date_time();
  static const int kBaseEndDateTimeFieldNumber = 26;
  ::google::protobuf::uint64 base_end_date_time() const;
  void set_base_end_date_time(::google::protobuf::uint64 value);

  // optional .pbnavitia.RTLevel realtime_level = 27;
  bool has_realtime_level() const;
  void clear_realtime_level();
  static const int kRealtimeLevelFieldNumber = 27;
  ::pbnavitia::RTLevel realtime_level() const;
  void set_realtime_level(::pbnavitia::RTLevel value);

  // optional int32 length = 19;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 19;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // optional string id = 20;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 20;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .pbnavitia.Co2Emission co2_emission = 21;
  bool has_co2_emission() const;
  void clear_co2_emission();
  static const int kCo2EmissionFieldNumber = 21;
  const ::pbnavitia::Co2Emission& co2_emission() const;
  ::pbnavitia::Co2Emission* mutable_co2_emission();
  ::pbnavitia::Co2Emission* release_co2_emission();
  void set_allocated_co2_emission(::pbnavitia::Co2Emission* co2_emission);

  // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 22;
  int additional_informations_size() const;
  void clear_additional_informations();
  static const int kAdditionalInformationsFieldNumber = 22;
  ::pbnavitia::SectionAdditionalInformationType additional_informations(int index) const;
  void set_additional_informations(int index, ::pbnavitia::SectionAdditionalInformationType value);
  void add_additional_informations(::pbnavitia::SectionAdditionalInformationType value);
  const ::google::protobuf::RepeatedField<int>& additional_informations() const;
  ::google::protobuf::RepeatedField<int>* mutable_additional_informations();

  // @@protoc_insertion_point(class_scope:pbnavitia.Section)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_pt_display_informations();
  inline void clear_has_pt_display_informations();
  inline void set_has_uris();
  inline void clear_has_uris();
  inline void set_has_vehicle_journey();
  inline void clear_has_vehicle_journey();
  inline void set_has_street_network();
  inline void clear_has_street_network();
  inline void set_has_cycle_lane_length();
  inline void clear_has_cycle_lane_length();
  inline void set_has_transfer_type();
  inline void clear_has_transfer_type();
  inline void set_has_ridesharing_information();
  inline void clear_has_ridesharing_information();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_begin_date_time();
  inline void clear_has_begin_date_time();
  inline void set_has_end_date_time();
  inline void clear_has_end_date_time();
  inline void set_has_base_begin_date_time();
  inline void clear_has_base_begin_date_time();
  inline void set_has_base_end_date_time();
  inline void clear_has_base_end_date_time();
  inline void set_has_realtime_level();
  inline void clear_has_realtime_level();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_co2_emission();
  inline void clear_has_co2_emission();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::PtObject* origin_;
  ::pbnavitia::PtObject* destination_;
  ::pbnavitia::PtDisplayInfo* pt_display_informations_;
  ::pbnavitia::Uris* uris_;
  int type_;
  ::google::protobuf::int32 cycle_lane_length_;
  ::pbnavitia::VehicleJourney* vehicle_journey_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopDateTime > stop_date_times_;
  ::pbnavitia::StreetNetwork* street_network_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey > ridesharing_journeys_;
  ::pbnavitia::RidesharingInformation* ridesharing_information_;
  int transfer_type_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord > shape_;
  ::google::protobuf::uint64 begin_date_time_;
  ::google::protobuf::uint64 end_date_time_;
  ::google::protobuf::uint64 base_begin_date_time_;
  ::google::protobuf::uint64 base_end_date_time_;
  int realtime_level_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::pbnavitia::Co2Emission* co2_emission_;
  ::google::protobuf::RepeatedField<int> additional_informations_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Section* default_instance_;
};
// -------------------------------------------------------------------

class Journey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Journey) */ {
 public:
  Journey();
  virtual ~Journey();

  Journey(const Journey& from);

  inline Journey& operator=(const Journey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Journey& default_instance();

  void Swap(Journey* other);

  // implements Message ----------------------------------------------

  inline Journey* New() const { return New(NULL); }

  Journey* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Journey& from);
  void MergeFrom(const Journey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Journey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 duration = 1;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 nb_transfers = 2;
  bool has_nb_transfers() const;
  void clear_nb_transfers();
  static const int kNbTransfersFieldNumber = 2;
  ::google::protobuf::int32 nb_transfers() const;
  void set_nb_transfers(::google::protobuf::int32 value);

  // optional uint64 departure_date_time = 3;
  bool has_departure_date_time() const;
  void clear_departure_date_time();
  static const int kDepartureDateTimeFieldNumber = 3;
  ::google::protobuf::uint64 departure_date_time() const;
  void set_departure_date_time(::google::protobuf::uint64 value);

  // optional uint64 arrival_date_time = 4;
  bool has_arrival_date_time() const;
  void clear_arrival_date_time();
  static const int kArrivalDateTimeFieldNumber = 4;
  ::google::protobuf::uint64 arrival_date_time() const;
  void set_arrival_date_time(::google::protobuf::uint64 value);

  // optional uint64 requested_date_time = 5;
  bool has_requested_date_time() const;
  void clear_requested_date_time();
  static const int kRequestedDateTimeFieldNumber = 5;
  ::google::protobuf::uint64 requested_date_time() const;
  void set_requested_date_time(::google::protobuf::uint64 value);

  // repeated .pbnavitia.Section sections = 6;
  int sections_size() const;
  void clear_sections();
  static const int kSectionsFieldNumber = 6;
  const ::pbnavitia::Section& sections(int index) const;
  ::pbnavitia::Section* mutable_sections(int index);
  ::pbnavitia::Section* add_sections();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Section >*
      mutable_sections();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Section >&
      sections() const;

  // optional .pbnavitia.PtObject origin = 7;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 7;
  const ::pbnavitia::PtObject& origin() const;
  ::pbnavitia::PtObject* mutable_origin();
  ::pbnavitia::PtObject* release_origin();
  void set_allocated_origin(::pbnavitia::PtObject* origin);

  // optional .pbnavitia.PtObject destination = 8;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 8;
  const ::pbnavitia::PtObject& destination() const;
  ::pbnavitia::PtObject* mutable_destination();
  ::pbnavitia::PtObject* release_destination();
  void set_allocated_destination(::pbnavitia::PtObject* destination);

  // optional string type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .pbnavitia.Fare fare = 10;
  bool has_fare() const;
  void clear_fare();
  static const int kFareFieldNumber = 10;
  const ::pbnavitia::Fare& fare() const;
  ::pbnavitia::Fare* mutable_fare();
  ::pbnavitia::Fare* release_fare();
  void set_allocated_fare(::pbnavitia::Fare* fare);

  // repeated string tags = 11;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 11;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated .pbnavitia.Calendar calendars = 12;
  int calendars_size() const;
  void clear_calendars();
  static const int kCalendarsFieldNumber = 12;
  const ::pbnavitia::Calendar& calendars(int index) const;
  ::pbnavitia::Calendar* mutable_calendars(int index);
  ::pbnavitia::Calendar* add_calendars();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
      mutable_calendars();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
      calendars() const;

  // optional .pbnavitia.Co2Emission co2_emission = 13;
  bool has_co2_emission() const;
  void clear_co2_emission();
  static const int kCo2EmissionFieldNumber = 13;
  const ::pbnavitia::Co2Emission& co2_emission() const;
  ::pbnavitia::Co2Emission* mutable_co2_emission();
  ::pbnavitia::Co2Emission* release_co2_emission();
  void set_allocated_co2_emission(::pbnavitia::Co2Emission* co2_emission);

  // optional string most_serious_disruption_effect = 14;
  bool has_most_serious_disruption_effect() const;
  void clear_most_serious_disruption_effect();
  static const int kMostSeriousDisruptionEffectFieldNumber = 14;
  const ::std::string& most_serious_disruption_effect() const;
  void set_most_serious_disruption_effect(const ::std::string& value);
  void set_most_serious_disruption_effect(const char* value);
  void set_most_serious_disruption_effect(const char* value, size_t size);
  ::std::string* mutable_most_serious_disruption_effect();
  ::std::string* release_most_serious_disruption_effect();
  void set_allocated_most_serious_disruption_effect(::std::string* most_serious_disruption_effect);

  // optional string internal_id = 15;
  bool has_internal_id() const;
  void clear_internal_id();
  static const int kInternalIdFieldNumber = 15;
  const ::std::string& internal_id() const;
  void set_internal_id(const ::std::string& value);
  void set_internal_id(const char* value);
  void set_internal_id(const char* value, size_t size);
  ::std::string* mutable_internal_id();
  ::std::string* release_internal_id();
  void set_allocated_internal_id(::std::string* internal_id);

  // optional uint64 sn_dur = 16;
  bool has_sn_dur() const;
  void clear_sn_dur();
  static const int kSnDurFieldNumber = 16;
  ::google::protobuf::uint64 sn_dur() const;
  void set_sn_dur(::google::protobuf::uint64 value);

  // optional uint64 transfer_dur = 17;
  bool has_transfer_dur() const;
  void clear_transfer_dur();
  static const int kTransferDurFieldNumber = 17;
  ::google::protobuf::uint64 transfer_dur() const;
  void set_transfer_dur(::google::protobuf::uint64 value);

  // optional uint64 min_waiting_dur = 18;
  bool has_min_waiting_dur() const;
  void clear_min_waiting_dur();
  static const int kMinWaitingDurFieldNumber = 18;
  ::google::protobuf::uint64 min_waiting_dur() const;
  void set_min_waiting_dur(::google::protobuf::uint64 value);

  // optional uint32 nb_vj_extentions = 19;
  bool has_nb_vj_extentions() const;
  void clear_nb_vj_extentions();
  static const int kNbVjExtentionsFieldNumber = 19;
  ::google::protobuf::uint32 nb_vj_extentions() const;
  void set_nb_vj_extentions(::google::protobuf::uint32 value);

  // optional uint32 nb_sections = 20;
  bool has_nb_sections() const;
  void clear_nb_sections();
  static const int kNbSectionsFieldNumber = 20;
  ::google::protobuf::uint32 nb_sections() const;
  void set_nb_sections(::google::protobuf::uint32 value);

  // optional .pbnavitia.Durations durations = 21;
  bool has_durations() const;
  void clear_durations();
  static const int kDurationsFieldNumber = 21;
  const ::pbnavitia::Durations& durations() const;
  ::pbnavitia::Durations* mutable_durations();
  ::pbnavitia::Durations* release_durations();
  void set_allocated_durations(::pbnavitia::Durations* durations);

  // optional .pbnavitia.Distances distances = 22;
  bool has_distances() const;
  void clear_distances();
  static const int kDistancesFieldNumber = 22;
  const ::pbnavitia::Distances& distances() const;
  ::pbnavitia::Distances* mutable_distances();
  ::pbnavitia::Distances* release_distances();
  void set_allocated_distances(::pbnavitia::Distances* distances);

  // @@protoc_insertion_point(class_scope:pbnavitia.Journey)
 private:
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_nb_transfers();
  inline void clear_has_nb_transfers();
  inline void set_has_departure_date_time();
  inline void clear_has_departure_date_time();
  inline void set_has_arrival_date_time();
  inline void clear_has_arrival_date_time();
  inline void set_has_requested_date_time();
  inline void clear_has_requested_date_time();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_fare();
  inline void clear_has_fare();
  inline void set_has_co2_emission();
  inline void clear_has_co2_emission();
  inline void set_has_most_serious_disruption_effect();
  inline void clear_has_most_serious_disruption_effect();
  inline void set_has_internal_id();
  inline void clear_has_internal_id();
  inline void set_has_sn_dur();
  inline void clear_has_sn_dur();
  inline void set_has_transfer_dur();
  inline void clear_has_transfer_dur();
  inline void set_has_min_waiting_dur();
  inline void clear_has_min_waiting_dur();
  inline void set_has_nb_vj_extentions();
  inline void clear_has_nb_vj_extentions();
  inline void set_has_nb_sections();
  inline void clear_has_nb_sections();
  inline void set_has_durations();
  inline void clear_has_durations();
  inline void set_has_distances();
  inline void clear_has_distances();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 nb_transfers_;
  ::google::protobuf::uint64 departure_date_time_;
  ::google::protobuf::uint64 arrival_date_time_;
  ::google::protobuf::uint64 requested_date_time_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Section > sections_;
  ::pbnavitia::PtObject* origin_;
  ::pbnavitia::PtObject* destination_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::pbnavitia::Fare* fare_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar > calendars_;
  ::pbnavitia::Co2Emission* co2_emission_;
  ::google::protobuf::internal::ArenaStringPtr most_serious_disruption_effect_;
  ::google::protobuf::internal::ArenaStringPtr internal_id_;
  ::google::protobuf::uint64 sn_dur_;
  ::google::protobuf::uint64 transfer_dur_;
  ::google::protobuf::uint64 min_waiting_dur_;
  ::google::protobuf::uint32 nb_vj_extentions_;
  ::google::protobuf::uint32 nb_sections_;
  ::pbnavitia::Durations* durations_;
  ::pbnavitia::Distances* distances_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Journey* default_instance_;
};
// -------------------------------------------------------------------

class Planner : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Planner) */ {
 public:
  Planner();
  virtual ~Planner();

  Planner(const Planner& from);

  inline Planner& operator=(const Planner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Planner& default_instance();

  void Swap(Planner* other);

  // implements Message ----------------------------------------------

  inline Planner* New() const { return New(NULL); }

  Planner* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Planner& from);
  void MergeFrom(const Planner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Planner* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.Journey journeys = 1;
  int journeys_size() const;
  void clear_journeys();
  static const int kJourneysFieldNumber = 1;
  const ::pbnavitia::Journey& journeys(int index) const;
  ::pbnavitia::Journey* mutable_journeys(int index);
  ::pbnavitia::Journey* add_journeys();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
      mutable_journeys();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
      journeys() const;

  // optional .pbnavitia.ResponseType response_type = 2;
  bool has_response_type() const;
  void clear_response_type();
  static const int kResponseTypeFieldNumber = 2;
  ::pbnavitia::ResponseType response_type() const;
  void set_response_type(::pbnavitia::ResponseType value);

  // optional string before = 3;
  bool has_before() const;
  void clear_before();
  static const int kBeforeFieldNumber = 3;
  const ::std::string& before() const;
  void set_before(const ::std::string& value);
  void set_before(const char* value);
  void set_before(const char* value, size_t size);
  ::std::string* mutable_before();
  ::std::string* release_before();
  void set_allocated_before(::std::string* before);

  // optional string after = 4;
  bool has_after() const;
  void clear_after();
  static const int kAfterFieldNumber = 4;
  const ::std::string& after() const;
  void set_after(const ::std::string& value);
  void set_after(const char* value);
  void set_after(const char* value, size_t size);
  ::std::string* mutable_after();
  ::std::string* release_after();
  void set_allocated_after(::std::string* after);

  // @@protoc_insertion_point(class_scope:pbnavitia.Planner)
 private:
  inline void set_has_response_type();
  inline void clear_has_response_type();
  inline void set_has_before();
  inline void clear_has_before();
  inline void set_has_after();
  inline void clear_has_after();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey > journeys_;
  ::google::protobuf::internal::ArenaStringPtr before_;
  ::google::protobuf::internal::ArenaStringPtr after_;
  int response_type_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Planner* default_instance_;
};
// -------------------------------------------------------------------

class GeoStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.GeoStatus) */ {
 public:
  GeoStatus();
  virtual ~GeoStatus();

  GeoStatus(const GeoStatus& from);

  inline GeoStatus& operator=(const GeoStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoStatus& default_instance();

  void Swap(GeoStatus* other);

  // implements Message ----------------------------------------------

  inline GeoStatus* New() const { return New(NULL); }

  GeoStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeoStatus& from);
  void MergeFrom(const GeoStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeoStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string street_network_source = 1;
  bool has_street_network_source() const;
  void clear_street_network_source();
  static const int kStreetNetworkSourceFieldNumber = 1;
  const ::std::string& street_network_source() const;
  void set_street_network_source(const ::std::string& value);
  void set_street_network_source(const char* value);
  void set_street_network_source(const char* value, size_t size);
  ::std::string* mutable_street_network_source();
  ::std::string* release_street_network_source();
  void set_allocated_street_network_source(::std::string* street_network_source);

  // optional int32 nb_admins = 2;
  bool has_nb_admins() const;
  void clear_nb_admins();
  static const int kNbAdminsFieldNumber = 2;
  ::google::protobuf::int32 nb_admins() const;
  void set_nb_admins(::google::protobuf::int32 value);

  // optional int32 nb_admins_from_cities = 3;
  bool has_nb_admins_from_cities() const;
  void clear_nb_admins_from_cities();
  static const int kNbAdminsFromCitiesFieldNumber = 3;
  ::google::protobuf::int32 nb_admins_from_cities() const;
  void set_nb_admins_from_cities(::google::protobuf::int32 value);

  // optional int32 nb_ways = 4;
  bool has_nb_ways() const;
  void clear_nb_ways();
  static const int kNbWaysFieldNumber = 4;
  ::google::protobuf::int32 nb_ways() const;
  void set_nb_ways(::google::protobuf::int32 value);

  // optional int32 nb_addresses = 5;
  bool has_nb_addresses() const;
  void clear_nb_addresses();
  static const int kNbAddressesFieldNumber = 5;
  ::google::protobuf::int32 nb_addresses() const;
  void set_nb_addresses(::google::protobuf::int32 value);

  // optional int32 nb_poi = 6;
  bool has_nb_poi() const;
  void clear_nb_poi();
  static const int kNbPoiFieldNumber = 6;
  ::google::protobuf::int32 nb_poi() const;
  void set_nb_poi(::google::protobuf::int32 value);

  // optional string poi_source = 7;
  bool has_poi_source() const;
  void clear_poi_source();
  static const int kPoiSourceFieldNumber = 7;
  const ::std::string& poi_source() const;
  void set_poi_source(const ::std::string& value);
  void set_poi_source(const char* value);
  void set_poi_source(const char* value, size_t size);
  ::std::string* mutable_poi_source();
  ::std::string* release_poi_source();
  void set_allocated_poi_source(::std::string* poi_source);

  // @@protoc_insertion_point(class_scope:pbnavitia.GeoStatus)
 private:
  inline void set_has_street_network_source();
  inline void clear_has_street_network_source();
  inline void set_has_nb_admins();
  inline void clear_has_nb_admins();
  inline void set_has_nb_admins_from_cities();
  inline void clear_has_nb_admins_from_cities();
  inline void set_has_nb_ways();
  inline void clear_has_nb_ways();
  inline void set_has_nb_addresses();
  inline void clear_has_nb_addresses();
  inline void set_has_nb_poi();
  inline void clear_has_nb_poi();
  inline void set_has_poi_source();
  inline void clear_has_poi_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr street_network_source_;
  ::google::protobuf::int32 nb_admins_;
  ::google::protobuf::int32 nb_admins_from_cities_;
  ::google::protobuf::int32 nb_ways_;
  ::google::protobuf::int32 nb_addresses_;
  ::google::protobuf::internal::ArenaStringPtr poi_source_;
  ::google::protobuf::int32 nb_poi_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static GeoStatus* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string publication_date = 1;
  bool has_publication_date() const;
  void clear_publication_date();
  static const int kPublicationDateFieldNumber = 1;
  const ::std::string& publication_date() const;
  void set_publication_date(const ::std::string& value);
  void set_publication_date(const char* value);
  void set_publication_date(const char* value, size_t size);
  ::std::string* mutable_publication_date();
  ::std::string* release_publication_date();
  void set_allocated_publication_date(::std::string* publication_date);

  // required string start_production_date = 2;
  bool has_start_production_date() const;
  void clear_start_production_date();
  static const int kStartProductionDateFieldNumber = 2;
  const ::std::string& start_production_date() const;
  void set_start_production_date(const ::std::string& value);
  void set_start_production_date(const char* value);
  void set_start_production_date(const char* value, size_t size);
  ::std::string* mutable_start_production_date();
  ::std::string* release_start_production_date();
  void set_allocated_start_production_date(::std::string* start_production_date);

  // required string end_production_date = 3;
  bool has_end_production_date() const;
  void clear_end_production_date();
  static const int kEndProductionDateFieldNumber = 3;
  const ::std::string& end_production_date() const;
  void set_end_production_date(const ::std::string& value);
  void set_end_production_date(const char* value);
  void set_end_production_date(const char* value, size_t size);
  ::std::string* mutable_end_production_date();
  ::std::string* release_end_production_date();
  void set_allocated_end_production_date(::std::string* end_production_date);

  // optional int32 data_version = 4;
  bool has_data_version() const;
  void clear_data_version();
  static const int kDataVersionFieldNumber = 4;
  ::google::protobuf::int32 data_version() const;
  void set_data_version(::google::protobuf::int32 value);

  // optional string navitia_version = 6;
  bool has_navitia_version() const;
  void clear_navitia_version();
  static const int kNavitiaVersionFieldNumber = 6;
  const ::std::string& navitia_version() const;
  void set_navitia_version(const ::std::string& value);
  void set_navitia_version(const char* value);
  void set_navitia_version(const char* value, size_t size);
  ::std::string* mutable_navitia_version();
  ::std::string* release_navitia_version();
  void set_allocated_navitia_version(::std::string* navitia_version);

  // repeated string data_sources = 7;
  int data_sources_size() const;
  void clear_data_sources();
  static const int kDataSourcesFieldNumber = 7;
  const ::std::string& data_sources(int index) const;
  ::std::string* mutable_data_sources(int index);
  void set_data_sources(int index, const ::std::string& value);
  void set_data_sources(int index, const char* value);
  void set_data_sources(int index, const char* value, size_t size);
  ::std::string* add_data_sources();
  void add_data_sources(const ::std::string& value);
  void add_data_sources(const char* value);
  void add_data_sources(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data_sources() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data_sources();

  // optional string last_load_at = 8;
  bool has_last_load_at() const;
  void clear_last_load_at();
  static const int kLastLoadAtFieldNumber = 8;
  const ::std::string& last_load_at() const;
  void set_last_load_at(const ::std::string& value);
  void set_last_load_at(const char* value);
  void set_last_load_at(const char* value, size_t size);
  ::std::string* mutable_last_load_at();
  ::std::string* release_last_load_at();
  void set_allocated_last_load_at(::std::string* last_load_at);

  // optional bool last_load_status = 9;
  bool has_last_load_status() const;
  void clear_last_load_status();
  static const int kLastLoadStatusFieldNumber = 9;
  bool last_load_status() const;
  void set_last_load_status(bool value);

  // optional bool loaded = 10;
  bool has_loaded() const;
  void clear_loaded();
  static const int kLoadedFieldNumber = 10;
  bool loaded() const;
  void set_loaded(bool value);

  // optional int32 nb_threads = 11;
  bool has_nb_threads() const;
  void clear_nb_threads();
  static const int kNbThreadsFieldNumber = 11;
  ::google::protobuf::int32 nb_threads() const;
  void set_nb_threads(::google::protobuf::int32 value);

  // optional bool is_connected_to_rabbitmq = 12;
  bool has_is_connected_to_rabbitmq() const;
  void clear_is_connected_to_rabbitmq();
  static const int kIsConnectedToRabbitmqFieldNumber = 12;
  bool is_connected_to_rabbitmq() const;
  void set_is_connected_to_rabbitmq(bool value);

  // optional string status = 13;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 13;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string last_rt_data_loaded = 14;
  bool has_last_rt_data_loaded() const;
  void clear_last_rt_data_loaded();
  static const int kLastRtDataLoadedFieldNumber = 14;
  const ::std::string& last_rt_data_loaded() const;
  void set_last_rt_data_loaded(const ::std::string& value);
  void set_last_rt_data_loaded(const char* value);
  void set_last_rt_data_loaded(const char* value, size_t size);
  ::std::string* mutable_last_rt_data_loaded();
  ::std::string* release_last_rt_data_loaded();
  void set_allocated_last_rt_data_loaded(::std::string* last_rt_data_loaded);

  // optional bool is_realtime_loaded = 16;
  bool has_is_realtime_loaded() const;
  void clear_is_realtime_loaded();
  static const int kIsRealtimeLoadedFieldNumber = 16;
  bool is_realtime_loaded() const;
  void set_is_realtime_loaded(bool value);

  // optional string dataset_created_at = 17;
  bool has_dataset_created_at() const;
  void clear_dataset_created_at();
  static const int kDatasetCreatedAtFieldNumber = 17;
  const ::std::string& dataset_created_at() const;
  void set_dataset_created_at(const ::std::string& value);
  void set_dataset_created_at(const char* value);
  void set_dataset_created_at(const char* value, size_t size);
  ::std::string* mutable_dataset_created_at();
  ::std::string* release_dataset_created_at();
  void set_allocated_dataset_created_at(::std::string* dataset_created_at);

  // repeated string rt_contributors = 18;
  int rt_contributors_size() const;
  void clear_rt_contributors();
  static const int kRtContributorsFieldNumber = 18;
  const ::std::string& rt_contributors(int index) const;
  ::std::string* mutable_rt_contributors(int index);
  void set_rt_contributors(int index, const ::std::string& value);
  void set_rt_contributors(int index, const char* value);
  void set_rt_contributors(int index, const char* value, size_t size);
  ::std::string* add_rt_contributors();
  void add_rt_contributors(const ::std::string& value);
  void add_rt_contributors(const char* value);
  void add_rt_contributors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& rt_contributors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rt_contributors();

  // optional bool disruption_error = 19;
  bool has_disruption_error() const;
  void clear_disruption_error();
  static const int kDisruptionErrorFieldNumber = 19;
  bool disruption_error() const;
  void set_disruption_error(bool value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Status)
 private:
  inline void set_has_publication_date();
  inline void clear_has_publication_date();
  inline void set_has_start_production_date();
  inline void clear_has_start_production_date();
  inline void set_has_end_production_date();
  inline void clear_has_end_production_date();
  inline void set_has_data_version();
  inline void clear_has_data_version();
  inline void set_has_navitia_version();
  inline void clear_has_navitia_version();
  inline void set_has_last_load_at();
  inline void clear_has_last_load_at();
  inline void set_has_last_load_status();
  inline void clear_has_last_load_status();
  inline void set_has_loaded();
  inline void clear_has_loaded();
  inline void set_has_nb_threads();
  inline void clear_has_nb_threads();
  inline void set_has_is_connected_to_rabbitmq();
  inline void clear_has_is_connected_to_rabbitmq();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_last_rt_data_loaded();
  inline void clear_has_last_rt_data_loaded();
  inline void set_has_is_realtime_loaded();
  inline void clear_has_is_realtime_loaded();
  inline void set_has_dataset_created_at();
  inline void clear_has_dataset_created_at();
  inline void set_has_disruption_error();
  inline void clear_has_disruption_error();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr publication_date_;
  ::google::protobuf::internal::ArenaStringPtr start_production_date_;
  ::google::protobuf::internal::ArenaStringPtr end_production_date_;
  ::google::protobuf::internal::ArenaStringPtr navitia_version_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_sources_;
  ::google::protobuf::internal::ArenaStringPtr last_load_at_;
  ::google::protobuf::int32 data_version_;
  ::google::protobuf::int32 nb_threads_;
  bool last_load_status_;
  bool loaded_;
  bool is_connected_to_rabbitmq_;
  bool is_realtime_loaded_;
  bool disruption_error_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr last_rt_data_loaded_;
  ::google::protobuf::internal::ArenaStringPtr dataset_created_at_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rt_contributors_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class ScheduleStopTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.ScheduleStopTime) */ {
 public:
  ScheduleStopTime();
  virtual ~ScheduleStopTime();

  ScheduleStopTime(const ScheduleStopTime& from);

  inline ScheduleStopTime& operator=(const ScheduleStopTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleStopTime& default_instance();

  void Swap(ScheduleStopTime* other);

  // implements Message ----------------------------------------------

  inline ScheduleStopTime* New() const { return New(NULL); }

  ScheduleStopTime* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScheduleStopTime& from);
  void MergeFrom(const ScheduleStopTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScheduleStopTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.Properties properties = 2;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  const ::pbnavitia::Properties& properties() const;
  ::pbnavitia::Properties* mutable_properties();
  ::pbnavitia::Properties* release_properties();
  void set_allocated_properties(::pbnavitia::Properties* properties);

  // optional uint64 time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional uint64 date = 4;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 4;
  ::google::protobuf::uint64 date() const;
  void set_date(::google::protobuf::uint64 value);

  // optional .pbnavitia.ResponseStatus dt_status = 5;
  bool has_dt_status() const;
  void clear_dt_status();
  static const int kDtStatusFieldNumber = 5;
  ::pbnavitia::ResponseStatus dt_status() const;
  void set_dt_status(::pbnavitia::ResponseStatus value);

  // optional .pbnavitia.RTLevel realtime_level = 6;
  bool has_realtime_level() const;
  void clear_realtime_level();
  static const int kRealtimeLevelFieldNumber = 6;
  ::pbnavitia::RTLevel realtime_level() const;
  void set_realtime_level(::pbnavitia::RTLevel value);

  // optional uint64 base_date_time = 7;
  bool has_base_date_time() const;
  void clear_base_date_time();
  static const int kBaseDateTimeFieldNumber = 7;
  ::google::protobuf::uint64 base_date_time() const;
  void set_base_date_time(::google::protobuf::uint64 value);

  // repeated string impact_uris = 8;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 8;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // @@protoc_insertion_point(class_scope:pbnavitia.ScheduleStopTime)
 private:
  inline void set_has_properties();
  inline void clear_has_properties();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_dt_status();
  inline void clear_has_dt_status();
  inline void set_has_realtime_level();
  inline void clear_has_realtime_level();
  inline void set_has_base_date_time();
  inline void clear_has_base_date_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::Properties* properties_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint64 date_;
  int dt_status_;
  int realtime_level_;
  ::google::protobuf::uint64 base_date_time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static ScheduleStopTime* default_instance_;
};
// -------------------------------------------------------------------

class RouteScheduleRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.RouteScheduleRow) */ {
 public:
  RouteScheduleRow();
  virtual ~RouteScheduleRow();

  RouteScheduleRow(const RouteScheduleRow& from);

  inline RouteScheduleRow& operator=(const RouteScheduleRow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteScheduleRow& default_instance();

  void Swap(RouteScheduleRow* other);

  // implements Message ----------------------------------------------

  inline RouteScheduleRow* New() const { return New(NULL); }

  RouteScheduleRow* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouteScheduleRow& from);
  void MergeFrom(const RouteScheduleRow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RouteScheduleRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.StopPoint stop_point = 1;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 1;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // repeated .pbnavitia.ScheduleStopTime date_times = 2;
  int date_times_size() const;
  void clear_date_times();
  static const int kDateTimesFieldNumber = 2;
  const ::pbnavitia::ScheduleStopTime& date_times(int index) const;
  ::pbnavitia::ScheduleStopTime* mutable_date_times(int index);
  ::pbnavitia::ScheduleStopTime* add_date_times();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >*
      mutable_date_times();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >&
      date_times() const;

  // repeated string stop_times = 3;
  int stop_times_size() const;
  void clear_stop_times();
  static const int kStopTimesFieldNumber = 3;
  const ::std::string& stop_times(int index) const;
  ::std::string* mutable_stop_times(int index);
  void set_stop_times(int index, const ::std::string& value);
  void set_stop_times(int index, const char* value);
  void set_stop_times(int index, const char* value, size_t size);
  ::std::string* add_stop_times();
  void add_stop_times(const ::std::string& value);
  void add_stop_times(const char* value);
  void add_stop_times(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stop_times() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stop_times();

  // @@protoc_insertion_point(class_scope:pbnavitia.RouteScheduleRow)
 private:
  inline void set_has_stop_point();
  inline void clear_has_stop_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::StopPoint* stop_point_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime > date_times_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stop_times_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static RouteScheduleRow* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.PtDisplayInfo pt_display_informations = 1;
  bool has_pt_display_informations() const;
  void clear_pt_display_informations();
  static const int kPtDisplayInformationsFieldNumber = 1;
  const ::pbnavitia::PtDisplayInfo& pt_display_informations() const;
  ::pbnavitia::PtDisplayInfo* mutable_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* release_pt_display_informations();
  void set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations);

  // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 3;
  int additional_informations_size() const;
  void clear_additional_informations();
  static const int kAdditionalInformationsFieldNumber = 3;
  ::pbnavitia::SectionAdditionalInformationType additional_informations(int index) const;
  void set_additional_informations(int index, ::pbnavitia::SectionAdditionalInformationType value);
  void add_additional_informations(::pbnavitia::SectionAdditionalInformationType value);
  const ::google::protobuf::RepeatedField<int>& additional_informations() const;
  ::google::protobuf::RepeatedField<int>* mutable_additional_informations();

  // @@protoc_insertion_point(class_scope:pbnavitia.Header)
 private:
  inline void set_has_pt_display_informations();
  inline void clear_has_pt_display_informations();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::PtDisplayInfo* pt_display_informations_;
  ::google::protobuf::RepeatedField<int> additional_informations_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  inline Table* New() const { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.RouteScheduleRow rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  const ::pbnavitia::RouteScheduleRow& rows(int index) const;
  ::pbnavitia::RouteScheduleRow* mutable_rows(int index);
  ::pbnavitia::RouteScheduleRow* add_rows();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteScheduleRow >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteScheduleRow >&
      rows() const;

  // repeated .pbnavitia.Header headers = 2;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 2;
  const ::pbnavitia::Header& headers(int index) const;
  ::pbnavitia::Header* mutable_headers(int index);
  ::pbnavitia::Header* add_headers();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Header >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Header >&
      headers() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteScheduleRow > rows_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Header > headers_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class RouteSchedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.RouteSchedule) */ {
 public:
  RouteSchedule();
  virtual ~RouteSchedule();

  RouteSchedule(const RouteSchedule& from);

  inline RouteSchedule& operator=(const RouteSchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteSchedule& default_instance();

  void Swap(RouteSchedule* other);

  // implements Message ----------------------------------------------

  inline RouteSchedule* New() const { return New(NULL); }

  RouteSchedule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouteSchedule& from);
  void MergeFrom(const RouteSchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RouteSchedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.Table table = 1;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::pbnavitia::Table& table() const;
  ::pbnavitia::Table* mutable_table();
  ::pbnavitia::Table* release_table();
  void set_allocated_table(::pbnavitia::Table* table);

  // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
  bool has_pt_display_informations() const;
  void clear_pt_display_informations();
  static const int kPtDisplayInformationsFieldNumber = 2;
  const ::pbnavitia::PtDisplayInfo& pt_display_informations() const;
  ::pbnavitia::PtDisplayInfo* mutable_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* release_pt_display_informations();
  void set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations);

  // optional .pbnavitia.MultiLineString geojson = 3;
  bool has_geojson() const;
  void clear_geojson();
  static const int kGeojsonFieldNumber = 3;
  const ::pbnavitia::MultiLineString& geojson() const;
  ::pbnavitia::MultiLineString* mutable_geojson();
  ::pbnavitia::MultiLineString* release_geojson();
  void set_allocated_geojson(::pbnavitia::MultiLineString* geojson);

  // optional .pbnavitia.ResponseStatus response_status = 4;
  bool has_response_status() const;
  void clear_response_status();
  static const int kResponseStatusFieldNumber = 4;
  ::pbnavitia::ResponseStatus response_status() const;
  void set_response_status(::pbnavitia::ResponseStatus value);

  // @@protoc_insertion_point(class_scope:pbnavitia.RouteSchedule)
 private:
  inline void set_has_table();
  inline void clear_has_table();
  inline void set_has_pt_display_informations();
  inline void clear_has_pt_display_informations();
  inline void set_has_geojson();
  inline void clear_has_geojson();
  inline void set_has_response_status();
  inline void clear_has_response_status();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::Table* table_;
  ::pbnavitia::PtDisplayInfo* pt_display_informations_;
  ::pbnavitia::MultiLineString* geojson_;
  int response_status_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static RouteSchedule* default_instance_;
};
// -------------------------------------------------------------------

class Passage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Passage) */ {
 public:
  Passage();
  virtual ~Passage();

  Passage(const Passage& from);

  inline Passage& operator=(const Passage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Passage& default_instance();

  void Swap(Passage* other);

  // implements Message ----------------------------------------------

  inline Passage* New() const { return New(NULL); }

  Passage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Passage& from);
  void MergeFrom(const Passage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Passage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.StopDateTime stop_date_time = 1;
  bool has_stop_date_time() const;
  void clear_stop_date_time();
  static const int kStopDateTimeFieldNumber = 1;
  const ::pbnavitia::StopDateTime& stop_date_time() const;
  ::pbnavitia::StopDateTime* mutable_stop_date_time();
  ::pbnavitia::StopDateTime* release_stop_date_time();
  void set_allocated_stop_date_time(::pbnavitia::StopDateTime* stop_date_time);

  // required .pbnavitia.StopPoint stop_point = 2;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 2;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
  bool has_pt_display_informations() const;
  void clear_pt_display_informations();
  static const int kPtDisplayInformationsFieldNumber = 3;
  const ::pbnavitia::PtDisplayInfo& pt_display_informations() const;
  ::pbnavitia::PtDisplayInfo* mutable_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* release_pt_display_informations();
  void set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations);

  // optional .pbnavitia.Route route = 4;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 4;
  const ::pbnavitia::Route& route() const;
  ::pbnavitia::Route* mutable_route();
  ::pbnavitia::Route* release_route();
  void set_allocated_route(::pbnavitia::Route* route);

  // @@protoc_insertion_point(class_scope:pbnavitia.Passage)
 private:
  inline void set_has_stop_date_time();
  inline void clear_has_stop_date_time();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_pt_display_informations();
  inline void clear_has_pt_display_informations();
  inline void set_has_route();
  inline void clear_has_route();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::StopDateTime* stop_date_time_;
  ::pbnavitia::StopPoint* stop_point_;
  ::pbnavitia::PtDisplayInfo* pt_display_informations_;
  ::pbnavitia::Route* route_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Passage* default_instance_;
};
// -------------------------------------------------------------------

class RoutePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.RoutePoint) */ {
 public:
  RoutePoint();
  virtual ~RoutePoint();

  RoutePoint(const RoutePoint& from);

  inline RoutePoint& operator=(const RoutePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutePoint& default_instance();

  void Swap(RoutePoint* other);

  // implements Message ----------------------------------------------

  inline RoutePoint* New() const { return New(NULL); }

  RoutePoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoutePoint& from);
  void MergeFrom(const RoutePoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoutePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.Route route = 1;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 1;
  const ::pbnavitia::Route& route() const;
  ::pbnavitia::Route* mutable_route();
  ::pbnavitia::Route* release_route();
  void set_allocated_route(::pbnavitia::Route* route);

  // optional .pbnavitia.StopPoint stop_point = 2;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 2;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
  bool has_pt_display_informations() const;
  void clear_pt_display_informations();
  static const int kPtDisplayInformationsFieldNumber = 3;
  const ::pbnavitia::PtDisplayInfo& pt_display_informations() const;
  ::pbnavitia::PtDisplayInfo* mutable_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* release_pt_display_informations();
  void set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations);

  // @@protoc_insertion_point(class_scope:pbnavitia.RoutePoint)
 private:
  inline void set_has_route();
  inline void clear_has_route();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_pt_display_informations();
  inline void clear_has_pt_display_informations();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::Route* route_;
  ::pbnavitia::StopPoint* stop_point_;
  ::pbnavitia::PtDisplayInfo* pt_display_informations_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static RoutePoint* default_instance_;
};
// -------------------------------------------------------------------

class BoardItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.BoardItem) */ {
 public:
  BoardItem();
  virtual ~BoardItem();

  BoardItem(const BoardItem& from);

  inline BoardItem& operator=(const BoardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoardItem& default_instance();

  void Swap(BoardItem* other);

  // implements Message ----------------------------------------------

  inline BoardItem* New() const { return New(NULL); }

  BoardItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoardItem& from);
  void MergeFrom(const BoardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoardItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hour = 1;
  bool has_hour() const;
  void clear_hour();
  static const int kHourFieldNumber = 1;
  const ::std::string& hour() const;
  void set_hour(const ::std::string& value);
  void set_hour(const char* value);
  void set_hour(const char* value, size_t size);
  ::std::string* mutable_hour();
  ::std::string* release_hour();
  void set_allocated_hour(::std::string* hour);

  // repeated string minutes = 2;
  int minutes_size() const;
  void clear_minutes();
  static const int kMinutesFieldNumber = 2;
  const ::std::string& minutes(int index) const;
  ::std::string* mutable_minutes(int index);
  void set_minutes(int index, const ::std::string& value);
  void set_minutes(int index, const char* value);
  void set_minutes(int index, const char* value, size_t size);
  ::std::string* add_minutes();
  void add_minutes(const ::std::string& value);
  void add_minutes(const char* value);
  void add_minutes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& minutes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_minutes();

  // @@protoc_insertion_point(class_scope:pbnavitia.BoardItem)
 private:
  inline void set_has_hour();
  inline void clear_has_hour();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hour_;
  ::google::protobuf::RepeatedPtrField< ::std::string> minutes_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static BoardItem* default_instance_;
};
// -------------------------------------------------------------------

class DepartureBoard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.DepartureBoard) */ {
 public:
  DepartureBoard();
  virtual ~DepartureBoard();

  DepartureBoard(const DepartureBoard& from);

  inline DepartureBoard& operator=(const DepartureBoard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DepartureBoard& default_instance();

  void Swap(DepartureBoard* other);

  // implements Message ----------------------------------------------

  inline DepartureBoard* New() const { return New(NULL); }

  DepartureBoard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DepartureBoard& from);
  void MergeFrom(const DepartureBoard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DepartureBoard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.StopPoint stop_point = 1;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 1;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // required .pbnavitia.Route route = 2;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 2;
  const ::pbnavitia::Route& route() const;
  ::pbnavitia::Route* mutable_route();
  ::pbnavitia::Route* release_route();
  void set_allocated_route(::pbnavitia::Route* route);

  // repeated .pbnavitia.BoardItem board_items = 3;
  int board_items_size() const;
  void clear_board_items();
  static const int kBoardItemsFieldNumber = 3;
  const ::pbnavitia::BoardItem& board_items(int index) const;
  ::pbnavitia::BoardItem* mutable_board_items(int index);
  ::pbnavitia::BoardItem* add_board_items();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::BoardItem >*
      mutable_board_items();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::BoardItem >&
      board_items() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.DepartureBoard)
 private:
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_route();
  inline void clear_has_route();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::StopPoint* stop_point_;
  ::pbnavitia::Route* route_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::BoardItem > board_items_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static DepartureBoard* default_instance_;
};
// -------------------------------------------------------------------

class Load : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Load) */ {
 public:
  Load();
  virtual ~Load();

  Load(const Load& from);

  inline Load& operator=(const Load& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Load& default_instance();

  void Swap(Load* other);

  // implements Message ----------------------------------------------

  inline Load* New() const { return New(NULL); }

  Load* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Load& from);
  void MergeFrom(const Load& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Load* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ok = 1;
  bool has_ok() const;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Load)
 private:
  inline void set_has_ok();
  inline void clear_has_ok();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool ok_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Load* default_instance_;
};
// -------------------------------------------------------------------

class Metadatas : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Metadatas) */ {
 public:
  Metadatas();
  virtual ~Metadatas();

  Metadatas(const Metadatas& from);

  inline Metadatas& operator=(const Metadatas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadatas& default_instance();

  void Swap(Metadatas* other);

  // implements Message ----------------------------------------------

  inline Metadatas* New() const { return New(NULL); }

  Metadatas* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadatas& from);
  void MergeFrom(const Metadatas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Metadatas* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string start_production_date = 1;
  bool has_start_production_date() const;
  void clear_start_production_date();
  static const int kStartProductionDateFieldNumber = 1;
  const ::std::string& start_production_date() const;
  void set_start_production_date(const ::std::string& value);
  void set_start_production_date(const char* value);
  void set_start_production_date(const char* value, size_t size);
  ::std::string* mutable_start_production_date();
  ::std::string* release_start_production_date();
  void set_allocated_start_production_date(::std::string* start_production_date);

  // required string end_production_date = 2;
  bool has_end_production_date() const;
  void clear_end_production_date();
  static const int kEndProductionDateFieldNumber = 2;
  const ::std::string& end_production_date() const;
  void set_end_production_date(const ::std::string& value);
  void set_end_production_date(const char* value);
  void set_end_production_date(const char* value, size_t size);
  ::std::string* mutable_end_production_date();
  ::std::string* release_end_production_date();
  void set_allocated_end_production_date(::std::string* end_production_date);

  // required string shape = 3;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  const ::std::string& shape() const;
  void set_shape(const ::std::string& value);
  void set_shape(const char* value);
  void set_shape(const char* value, size_t size);
  ::std::string* mutable_shape();
  ::std::string* release_shape();
  void set_allocated_shape(::std::string* shape);

  // required string status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // repeated string contributors = 12;
  int contributors_size() const;
  void clear_contributors();
  static const int kContributorsFieldNumber = 12;
  const ::std::string& contributors(int index) const;
  ::std::string* mutable_contributors(int index);
  void set_contributors(int index, const ::std::string& value);
  void set_contributors(int index, const char* value);
  void set_contributors(int index, const char* value, size_t size);
  ::std::string* add_contributors();
  void add_contributors(const ::std::string& value);
  void add_contributors(const char* value);
  void add_contributors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& contributors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_contributors();

  // optional string timezone = 13;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 13;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional string name = 14;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 14;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 last_load_at = 15;
  bool has_last_load_at() const;
  void clear_last_load_at();
  static const int kLastLoadAtFieldNumber = 15;
  ::google::protobuf::uint64 last_load_at() const;
  void set_last_load_at(::google::protobuf::uint64 value);

  // optional string dataset_created_at = 16;
  bool has_dataset_created_at() const;
  void clear_dataset_created_at();
  static const int kDatasetCreatedAtFieldNumber = 16;
  const ::std::string& dataset_created_at() const;
  void set_dataset_created_at(const ::std::string& value);
  void set_dataset_created_at(const char* value);
  void set_dataset_created_at(const char* value, size_t size);
  ::std::string* mutable_dataset_created_at();
  ::std::string* release_dataset_created_at();
  void set_allocated_dataset_created_at(::std::string* dataset_created_at);

  // @@protoc_insertion_point(class_scope:pbnavitia.Metadatas)
 private:
  inline void set_has_start_production_date();
  inline void clear_has_start_production_date();
  inline void set_has_end_production_date();
  inline void clear_has_end_production_date();
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_timezone();
  inline void clear_has_timezone();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_last_load_at();
  inline void clear_has_last_load_at();
  inline void set_has_dataset_created_at();
  inline void clear_has_dataset_created_at();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr start_production_date_;
  ::google::protobuf::internal::ArenaStringPtr end_production_date_;
  ::google::protobuf::internal::ArenaStringPtr shape_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::RepeatedPtrField< ::std::string> contributors_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 last_load_at_;
  ::google::protobuf::internal::ArenaStringPtr dataset_created_at_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Metadatas* default_instance_;
};
// -------------------------------------------------------------------

class Pagination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Pagination) */ {
 public:
  Pagination();
  virtual ~Pagination();

  Pagination(const Pagination& from);

  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pagination& default_instance();

  void Swap(Pagination* other);

  // implements Message ----------------------------------------------

  inline Pagination* New() const { return New(NULL); }

  Pagination* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pagination& from);
  void MergeFrom(const Pagination& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pagination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 totalResult = 1;
  bool has_totalresult() const;
  void clear_totalresult();
  static const int kTotalResultFieldNumber = 1;
  ::google::protobuf::int32 totalresult() const;
  void set_totalresult(::google::protobuf::int32 value);

  // required int32 startPage = 2;
  bool has_startpage() const;
  void clear_startpage();
  static const int kStartPageFieldNumber = 2;
  ::google::protobuf::int32 startpage() const;
  void set_startpage(::google::protobuf::int32 value);

  // required int32 itemsPerPage = 3;
  bool has_itemsperpage() const;
  void clear_itemsperpage();
  static const int kItemsPerPageFieldNumber = 3;
  ::google::protobuf::int32 itemsperpage() const;
  void set_itemsperpage(::google::protobuf::int32 value);

  // required int32 itemsOnPage = 4;
  bool has_itemsonpage() const;
  void clear_itemsonpage();
  static const int kItemsOnPageFieldNumber = 4;
  ::google::protobuf::int32 itemsonpage() const;
  void set_itemsonpage(::google::protobuf::int32 value);

  // optional string nextPage = 5;
  bool has_nextpage() const;
  void clear_nextpage();
  static const int kNextPageFieldNumber = 5;
  const ::std::string& nextpage() const;
  void set_nextpage(const ::std::string& value);
  void set_nextpage(const char* value);
  void set_nextpage(const char* value, size_t size);
  ::std::string* mutable_nextpage();
  ::std::string* release_nextpage();
  void set_allocated_nextpage(::std::string* nextpage);

  // optional string previousPage = 6;
  bool has_previouspage() const;
  void clear_previouspage();
  static const int kPreviousPageFieldNumber = 6;
  const ::std::string& previouspage() const;
  void set_previouspage(const ::std::string& value);
  void set_previouspage(const char* value);
  void set_previouspage(const char* value, size_t size);
  ::std::string* mutable_previouspage();
  ::std::string* release_previouspage();
  void set_allocated_previouspage(::std::string* previouspage);

  // @@protoc_insertion_point(class_scope:pbnavitia.Pagination)
 private:
  inline void set_has_totalresult();
  inline void clear_has_totalresult();
  inline void set_has_startpage();
  inline void clear_has_startpage();
  inline void set_has_itemsperpage();
  inline void clear_has_itemsperpage();
  inline void set_has_itemsonpage();
  inline void clear_has_itemsonpage();
  inline void set_has_nextpage();
  inline void clear_has_nextpage();
  inline void set_has_previouspage();
  inline void clear_has_previouspage();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 totalresult_;
  ::google::protobuf::int32 startpage_;
  ::google::protobuf::int32 itemsperpage_;
  ::google::protobuf::int32 itemsonpage_;
  ::google::protobuf::internal::ArenaStringPtr nextpage_;
  ::google::protobuf::internal::ArenaStringPtr previouspage_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Pagination* default_instance_;
};
// -------------------------------------------------------------------

class StopSchedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StopSchedule) */ {
 public:
  StopSchedule();
  virtual ~StopSchedule();

  StopSchedule(const StopSchedule& from);

  inline StopSchedule& operator=(const StopSchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopSchedule& default_instance();

  void Swap(StopSchedule* other);

  // implements Message ----------------------------------------------

  inline StopSchedule* New() const { return New(NULL); }

  StopSchedule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopSchedule& from);
  void MergeFrom(const StopSchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopSchedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.Route route = 1;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 1;
  const ::pbnavitia::Route& route() const;
  ::pbnavitia::Route* mutable_route();
  ::pbnavitia::Route* release_route();
  void set_allocated_route(::pbnavitia::Route* route);

  // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
  bool has_pt_display_informations() const;
  void clear_pt_display_informations();
  static const int kPtDisplayInformationsFieldNumber = 2;
  const ::pbnavitia::PtDisplayInfo& pt_display_informations() const;
  ::pbnavitia::PtDisplayInfo* mutable_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* release_pt_display_informations();
  void set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations);

  // required .pbnavitia.StopPoint stop_point = 3;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 3;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // repeated .pbnavitia.ScheduleStopTime date_times = 4;
  int date_times_size() const;
  void clear_date_times();
  static const int kDateTimesFieldNumber = 4;
  const ::pbnavitia::ScheduleStopTime& date_times(int index) const;
  ::pbnavitia::ScheduleStopTime* mutable_date_times(int index);
  ::pbnavitia::ScheduleStopTime* add_date_times();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >*
      mutable_date_times();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >&
      date_times() const;

  // optional .pbnavitia.ResponseStatus response_status = 5;
  bool has_response_status() const;
  void clear_response_status();
  static const int kResponseStatusFieldNumber = 5;
  ::pbnavitia::ResponseStatus response_status() const;
  void set_response_status(::pbnavitia::ResponseStatus value);

  // optional .pbnavitia.ScheduleStopTime first_datetime = 6;
  bool has_first_datetime() const;
  void clear_first_datetime();
  static const int kFirstDatetimeFieldNumber = 6;
  const ::pbnavitia::ScheduleStopTime& first_datetime() const;
  ::pbnavitia::ScheduleStopTime* mutable_first_datetime();
  ::pbnavitia::ScheduleStopTime* release_first_datetime();
  void set_allocated_first_datetime(::pbnavitia::ScheduleStopTime* first_datetime);

  // optional .pbnavitia.ScheduleStopTime last_datetime = 7;
  bool has_last_datetime() const;
  void clear_last_datetime();
  static const int kLastDatetimeFieldNumber = 7;
  const ::pbnavitia::ScheduleStopTime& last_datetime() const;
  ::pbnavitia::ScheduleStopTime* mutable_last_datetime();
  ::pbnavitia::ScheduleStopTime* release_last_datetime();
  void set_allocated_last_datetime(::pbnavitia::ScheduleStopTime* last_datetime);

  // @@protoc_insertion_point(class_scope:pbnavitia.StopSchedule)
 private:
  inline void set_has_route();
  inline void clear_has_route();
  inline void set_has_pt_display_informations();
  inline void clear_has_pt_display_informations();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_response_status();
  inline void clear_has_response_status();
  inline void set_has_first_datetime();
  inline void clear_has_first_datetime();
  inline void set_has_last_datetime();
  inline void clear_has_last_datetime();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::Route* route_;
  ::pbnavitia::PtDisplayInfo* pt_display_informations_;
  ::pbnavitia::StopPoint* stop_point_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime > date_times_;
  ::pbnavitia::ScheduleStopTime* first_datetime_;
  ::pbnavitia::ScheduleStopTime* last_datetime_;
  int response_status_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static StopSchedule* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  inline Error* New() const { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Error_error_id error_id;
  static const error_id bad_filter =
    Error_error_id_bad_filter;
  static const error_id unknown_api =
    Error_error_id_unknown_api;
  static const error_id date_out_of_bounds =
    Error_error_id_date_out_of_bounds;
  static const error_id unable_to_parse =
    Error_error_id_unable_to_parse;
  static const error_id bad_format =
    Error_error_id_bad_format;
  static const error_id no_origin =
    Error_error_id_no_origin;
  static const error_id no_destination =
    Error_error_id_no_destination;
  static const error_id no_origin_nor_destination =
    Error_error_id_no_origin_nor_destination;
  static const error_id no_solution =
    Error_error_id_no_solution;
  static const error_id unknown_object =
    Error_error_id_unknown_object;
  static const error_id service_unavailable =
    Error_error_id_service_unavailable;
  static const error_id invalid_protobuf_request =
    Error_error_id_invalid_protobuf_request;
  static const error_id internal_error =
    Error_error_id_internal_error;
  static const error_id deadline_expired =
    Error_error_id_deadline_expired;
  static inline bool error_id_IsValid(int value) {
    return Error_error_id_IsValid(value);
  }
  static const error_id error_id_MIN =
    Error_error_id_error_id_MIN;
  static const error_id error_id_MAX =
    Error_error_id_error_id_MAX;
  static const int error_id_ARRAYSIZE =
    Error_error_id_error_id_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  error_id_descriptor() {
    return Error_error_id_descriptor();
  }
  static inline const ::std::string& error_id_Name(error_id value) {
    return Error_error_id_Name(value);
  }
  static inline bool error_id_Parse(const ::std::string& name,
      error_id* value) {
    return Error_error_id_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .pbnavitia.Error.error_id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::pbnavitia::Error_error_id id() const;
  void set_id(::pbnavitia::Error_error_id value);

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:pbnavitia.Error)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int id_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class TrafficReports : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.TrafficReports) */ {
 public:
  TrafficReports();
  virtual ~TrafficReports();

  TrafficReports(const TrafficReports& from);

  inline TrafficReports& operator=(const TrafficReports& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficReports& default_instance();

  void Swap(TrafficReports* other);

  // implements Message ----------------------------------------------

  inline TrafficReports* New() const { return New(NULL); }

  TrafficReports* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficReports& from);
  void MergeFrom(const TrafficReports& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficReports* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.Network network = 1;
  bool has_network() const;
  void clear_network();
  static const int kNetworkFieldNumber = 1;
  const ::pbnavitia::Network& network() const;
  ::pbnavitia::Network* mutable_network();
  ::pbnavitia::Network* release_network();
  void set_allocated_network(::pbnavitia::Network* network);

  // repeated .pbnavitia.Line lines = 2;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 2;
  const ::pbnavitia::Line& lines(int index) const;
  ::pbnavitia::Line* mutable_lines(int index);
  ::pbnavitia::Line* add_lines();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
      mutable_lines();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
      lines() const;

  // repeated .pbnavitia.StopArea stop_areas = 3;
  int stop_areas_size() const;
  void clear_stop_areas();
  static const int kStopAreasFieldNumber = 3;
  const ::pbnavitia::StopArea& stop_areas(int index) const;
  ::pbnavitia::StopArea* mutable_stop_areas(int index);
  ::pbnavitia::StopArea* add_stop_areas();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
      mutable_stop_areas();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
      stop_areas() const;

  // repeated .pbnavitia.VehicleJourney vehicle_journeys = 4;
  int vehicle_journeys_size() const;
  void clear_vehicle_journeys();
  static const int kVehicleJourneysFieldNumber = 4;
  const ::pbnavitia::VehicleJourney& vehicle_journeys(int index) const;
  ::pbnavitia::VehicleJourney* mutable_vehicle_journeys(int index);
  ::pbnavitia::VehicleJourney* add_vehicle_journeys();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >*
      mutable_vehicle_journeys();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >&
      vehicle_journeys() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.TrafficReports)
 private:
  inline void set_has_network();
  inline void clear_has_network();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::Network* network_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line > lines_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea > stop_areas_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney > vehicle_journeys_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static TrafficReports* default_instance_;
};
// -------------------------------------------------------------------

class LineReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.LineReport) */ {
 public:
  LineReport();
  virtual ~LineReport();

  LineReport(const LineReport& from);

  inline LineReport& operator=(const LineReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineReport& default_instance();

  void Swap(LineReport* other);

  // implements Message ----------------------------------------------

  inline LineReport* New() const { return New(NULL); }

  LineReport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineReport& from);
  void MergeFrom(const LineReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.Line line = 1;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 1;
  const ::pbnavitia::Line& line() const;
  ::pbnavitia::Line* mutable_line();
  ::pbnavitia::Line* release_line();
  void set_allocated_line(::pbnavitia::Line* line);

  // repeated .pbnavitia.PtObject pt_objects = 2;
  int pt_objects_size() const;
  void clear_pt_objects();
  static const int kPtObjectsFieldNumber = 2;
  const ::pbnavitia::PtObject& pt_objects(int index) const;
  ::pbnavitia::PtObject* mutable_pt_objects(int index);
  ::pbnavitia::PtObject* add_pt_objects();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
      mutable_pt_objects();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
      pt_objects() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.LineReport)
 private:
  inline void set_has_line();
  inline void clear_has_line();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::Line* line_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject > pt_objects_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static LineReport* default_instance_;
};
// -------------------------------------------------------------------

class LinkArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.LinkArgs) */ {
 public:
  LinkArgs();
  virtual ~LinkArgs();

  LinkArgs(const LinkArgs& from);

  inline LinkArgs& operator=(const LinkArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkArgs& default_instance();

  void Swap(LinkArgs* other);

  // implements Message ----------------------------------------------

  inline LinkArgs* New() const { return New(NULL); }

  LinkArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinkArgs& from);
  void MergeFrom(const LinkArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LinkArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // repeated string values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:pbnavitia.LinkArgs)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static LinkArgs* default_instance_;
};
// -------------------------------------------------------------------

class Link : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Link) */ {
 public:
  Link();
  virtual ~Link();

  Link(const Link& from);

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();

  void Swap(Link* other);

  // implements Message ----------------------------------------------

  inline Link* New() const { return New(NULL); }

  Link* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rel = 1;
  bool has_rel() const;
  void clear_rel();
  static const int kRelFieldNumber = 1;
  const ::std::string& rel() const;
  void set_rel(const ::std::string& value);
  void set_rel(const char* value);
  void set_rel(const char* value, size_t size);
  ::std::string* mutable_rel();
  ::std::string* release_rel();
  void set_allocated_rel(::std::string* rel);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional bool is_templated = 3;
  bool has_is_templated() const;
  void clear_is_templated();
  static const int kIsTemplatedFieldNumber = 3;
  bool is_templated() const;
  void set_is_templated(bool value);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // repeated .pbnavitia.LinkArgs kwargs = 5;
  int kwargs_size() const;
  void clear_kwargs();
  static const int kKwargsFieldNumber = 5;
  const ::pbnavitia::LinkArgs& kwargs(int index) const;
  ::pbnavitia::LinkArgs* mutable_kwargs(int index);
  ::pbnavitia::LinkArgs* add_kwargs();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LinkArgs >*
      mutable_kwargs();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LinkArgs >&
      kwargs() const;

  // optional string ressource_name = 6;
  bool has_ressource_name() const;
  void clear_ressource_name();
  static const int kRessourceNameFieldNumber = 6;
  const ::std::string& ressource_name() const;
  void set_ressource_name(const ::std::string& value);
  void set_ressource_name(const char* value);
  void set_ressource_name(const char* value, size_t size);
  ::std::string* mutable_ressource_name();
  ::std::string* release_ressource_name();
  void set_allocated_ressource_name(::std::string* ressource_name);

  // @@protoc_insertion_point(class_scope:pbnavitia.Link)
 private:
  inline void set_has_rel();
  inline void clear_has_rel();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_templated();
  inline void clear_has_is_templated();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_ressource_name();
  inline void clear_has_ressource_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rel_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LinkArgs > kwargs_;
  ::google::protobuf::internal::ArenaStringPtr ressource_name_;
  bool is_templated_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Link* default_instance_;
};
// -------------------------------------------------------------------

class GraphicalIsochrone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.GraphicalIsochrone) */ {
 public:
  GraphicalIsochrone();
  virtual ~GraphicalIsochrone();

  GraphicalIsochrone(const GraphicalIsochrone& from);

  inline GraphicalIsochrone& operator=(const GraphicalIsochrone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphicalIsochrone& default_instance();

  void Swap(GraphicalIsochrone* other);

  // implements Message ----------------------------------------------

  inline GraphicalIsochrone* New() const { return New(NULL); }

  GraphicalIsochrone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraphicalIsochrone& from);
  void MergeFrom(const GraphicalIsochrone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphicalIsochrone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string geojson = 1;
  bool has_geojson() const;
  void clear_geojson();
  static const int kGeojsonFieldNumber = 1;
  const ::std::string& geojson() const;
  void set_geojson(const ::std::string& value);
  void set_geojson(const char* value);
  void set_geojson(const char* value, size_t size);
  ::std::string* mutable_geojson();
  ::std::string* release_geojson();
  void set_allocated_geojson(::std::string* geojson);

  // optional int32 max_duration = 2;
  bool has_max_duration() const;
  void clear_max_duration();
  static const int kMaxDurationFieldNumber = 2;
  ::google::protobuf::int32 max_duration() const;
  void set_max_duration(::google::protobuf::int32 value);

  // optional int32 min_duration = 3;
  bool has_min_duration() const;
  void clear_min_duration();
  static const int kMinDurationFieldNumber = 3;
  ::google::protobuf::int32 min_duration() const;
  void set_min_duration(::google::protobuf::int32 value);

  // optional .pbnavitia.PtObject origin = 4;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 4;
  const ::pbnavitia::PtObject& origin() const;
  ::pbnavitia::PtObject* mutable_origin();
  ::pbnavitia::PtObject* release_origin();
  void set_allocated_origin(::pbnavitia::PtObject* origin);

  // optional .pbnavitia.PtObject destination = 5;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 5;
  const ::pbnavitia::PtObject& destination() const;
  ::pbnavitia::PtObject* mutable_destination();
  ::pbnavitia::PtObject* release_destination();
  void set_allocated_destination(::pbnavitia::PtObject* destination);

  // optional uint64 requested_date_time = 6;
  bool has_requested_date_time() const;
  void clear_requested_date_time();
  static const int kRequestedDateTimeFieldNumber = 6;
  ::google::protobuf::uint64 requested_date_time() const;
  void set_requested_date_time(::google::protobuf::uint64 value);

  // optional uint64 min_date_time = 7;
  bool has_min_date_time() const;
  void clear_min_date_time();
  static const int kMinDateTimeFieldNumber = 7;
  ::google::protobuf::uint64 min_date_time() const;
  void set_min_date_time(::google::protobuf::uint64 value);

  // optional uint64 max_date_time = 8;
  bool has_max_date_time() const;
  void clear_max_date_time();
  static const int kMaxDateTimeFieldNumber = 8;
  ::google::protobuf::uint64 max_date_time() const;
  void set_max_date_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.GraphicalIsochrone)
 private:
  inline void set_has_geojson();
  inline void clear_has_geojson();
  inline void set_has_max_duration();
  inline void clear_has_max_duration();
  inline void set_has_min_duration();
  inline void clear_has_min_duration();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_requested_date_time();
  inline void clear_has_requested_date_time();
  inline void set_has_min_date_time();
  inline void clear_has_min_date_time();
  inline void set_has_max_date_time();
  inline void clear_has_max_date_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr geojson_;
  ::google::protobuf::int32 max_duration_;
  ::google::protobuf::int32 min_duration_;
  ::pbnavitia::PtObject* origin_;
  ::pbnavitia::PtObject* destination_;
  ::google::protobuf::uint64 requested_date_time_;
  ::google::protobuf::uint64 min_date_time_;
  ::google::protobuf::uint64 max_date_time_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static GraphicalIsochrone* default_instance_;
};
// -------------------------------------------------------------------

class HeatMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.HeatMap) */ {
 public:
  HeatMap();
  virtual ~HeatMap();

  HeatMap(const HeatMap& from);

  inline HeatMap& operator=(const HeatMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeatMap& default_instance();

  void Swap(HeatMap* other);

  // implements Message ----------------------------------------------

  inline HeatMap* New() const { return New(NULL); }

  HeatMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeatMap& from);
  void MergeFrom(const HeatMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeatMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string heat_matrix = 1;
  bool has_heat_matrix() const;
  void clear_heat_matrix();
  static const int kHeatMatrixFieldNumber = 1;
  const ::std::string& heat_matrix() const;
  void set_heat_matrix(const ::std::string& value);
  void set_heat_matrix(const char* value);
  void set_heat_matrix(const char* value, size_t size);
  ::std::string* mutable_heat_matrix();
  ::std::string* release_heat_matrix();
  void set_allocated_heat_matrix(::std::string* heat_matrix);

  // optional .pbnavitia.PtObject origin = 2;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 2;
  const ::pbnavitia::PtObject& origin() const;
  ::pbnavitia::PtObject* mutable_origin();
  ::pbnavitia::PtObject* release_origin();
  void set_allocated_origin(::pbnavitia::PtObject* origin);

  // optional .pbnavitia.PtObject destination = 3;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 3;
  const ::pbnavitia::PtObject& destination() const;
  ::pbnavitia::PtObject* mutable_destination();
  ::pbnavitia::PtObject* release_destination();
  void set_allocated_destination(::pbnavitia::PtObject* destination);

  // optional uint64 requested_date_time = 4;
  bool has_requested_date_time() const;
  void clear_requested_date_time();
  static const int kRequestedDateTimeFieldNumber = 4;
  ::google::protobuf::uint64 requested_date_time() const;
  void set_requested_date_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.HeatMap)
 private:
  inline void set_has_heat_matrix();
  inline void clear_has_heat_matrix();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_requested_date_time();
  inline void clear_has_requested_date_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr heat_matrix_;
  ::pbnavitia::PtObject* origin_;
  ::pbnavitia::PtObject* destination_;
  ::google::protobuf::uint64 requested_date_time_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static HeatMap* default_instance_;
};
// -------------------------------------------------------------------

class RoutingElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.RoutingElement) */ {
 public:
  RoutingElement();
  virtual ~RoutingElement();

  RoutingElement(const RoutingElement& from);

  inline RoutingElement& operator=(const RoutingElement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutingElement& default_instance();

  void Swap(RoutingElement* other);

  // implements Message ----------------------------------------------

  inline RoutingElement* New() const { return New(NULL); }

  RoutingElement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoutingElement& from);
  void MergeFrom(const RoutingElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoutingElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 duration = 1;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // required .pbnavitia.RoutingStatus routing_status = 2;
  bool has_routing_status() const;
  void clear_routing_status();
  static const int kRoutingStatusFieldNumber = 2;
  ::pbnavitia::RoutingStatus routing_status() const;
  void set_routing_status(::pbnavitia::RoutingStatus value);

  // @@protoc_insertion_point(class_scope:pbnavitia.RoutingElement)
 private:
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_routing_status();
  inline void clear_has_routing_status();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 duration_;
  int routing_status_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static RoutingElement* default_instance_;
};
// -------------------------------------------------------------------

class StreetNetworkRoutingRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StreetNetworkRoutingRow) */ {
 public:
  StreetNetworkRoutingRow();
  virtual ~StreetNetworkRoutingRow();

  StreetNetworkRoutingRow(const StreetNetworkRoutingRow& from);

  inline StreetNetworkRoutingRow& operator=(const StreetNetworkRoutingRow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreetNetworkRoutingRow& default_instance();

  void Swap(StreetNetworkRoutingRow* other);

  // implements Message ----------------------------------------------

  inline StreetNetworkRoutingRow* New() const { return New(NULL); }

  StreetNetworkRoutingRow* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreetNetworkRoutingRow& from);
  void MergeFrom(const StreetNetworkRoutingRow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreetNetworkRoutingRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.RoutingElement routing_response = 2;
  int routing_response_size() const;
  void clear_routing_response();
  static const int kRoutingResponseFieldNumber = 2;
  const ::pbnavitia::RoutingElement& routing_response(int index) const;
  ::pbnavitia::RoutingElement* mutable_routing_response(int index);
  ::pbnavitia::RoutingElement* add_routing_response();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutingElement >*
      mutable_routing_response();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutingElement >&
      routing_response() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.StreetNetworkRoutingRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutingElement > routing_response_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static StreetNetworkRoutingRow* default_instance_;
};
// -------------------------------------------------------------------

class StreetNetworkRoutingMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StreetNetworkRoutingMatrix) */ {
 public:
  StreetNetworkRoutingMatrix();
  virtual ~StreetNetworkRoutingMatrix();

  StreetNetworkRoutingMatrix(const StreetNetworkRoutingMatrix& from);

  inline StreetNetworkRoutingMatrix& operator=(const StreetNetworkRoutingMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreetNetworkRoutingMatrix& default_instance();

  void Swap(StreetNetworkRoutingMatrix* other);

  // implements Message ----------------------------------------------

  inline StreetNetworkRoutingMatrix* New() const { return New(NULL); }

  StreetNetworkRoutingMatrix* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreetNetworkRoutingMatrix& from);
  void MergeFrom(const StreetNetworkRoutingMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreetNetworkRoutingMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.StreetNetworkRoutingRow rows = 1;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  const ::pbnavitia::StreetNetworkRoutingRow& rows(int index) const;
  ::pbnavitia::StreetNetworkRoutingRow* mutable_rows(int index);
  ::pbnavitia::StreetNetworkRoutingRow* add_rows();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StreetNetworkRoutingRow >*
      mutable_rows();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StreetNetworkRoutingRow >&
      rows() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.StreetNetworkRoutingMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StreetNetworkRoutingRow > rows_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static StreetNetworkRoutingMatrix* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status_code = 1;
  bool has_status_code() const;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  ::google::protobuf::int32 status_code() const;
  void set_status_code(::google::protobuf::int32 value);

  // optional .pbnavitia.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::pbnavitia::Error& error() const;
  ::pbnavitia::Error* mutable_error();
  ::pbnavitia::Error* release_error();
  void set_allocated_error(::pbnavitia::Error* error);

  // optional string info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional .pbnavitia.Status status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  const ::pbnavitia::Status& status() const;
  ::pbnavitia::Status* mutable_status();
  ::pbnavitia::Status* release_status();
  void set_allocated_status(::pbnavitia::Status* status);

  // optional int32 publication_date = 5;
  bool has_publication_date() const;
  void clear_publication_date();
  static const int kPublicationDateFieldNumber = 5;
  ::google::protobuf::int32 publication_date() const;
  void set_publication_date(::google::protobuf::int32 value);

  // repeated string ignored_words = 11;
  int ignored_words_size() const;
  void clear_ignored_words();
  static const int kIgnoredWordsFieldNumber = 11;
  const ::std::string& ignored_words(int index) const;
  ::std::string* mutable_ignored_words(int index);
  void set_ignored_words(int index, const ::std::string& value);
  void set_ignored_words(int index, const char* value);
  void set_ignored_words(int index, const char* value, size_t size);
  ::std::string* add_ignored_words();
  void add_ignored_words(const ::std::string& value);
  void add_ignored_words(const char* value);
  void add_ignored_words(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ignored_words() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ignored_words();

  // repeated string bad_words = 12;
  int bad_words_size() const;
  void clear_bad_words();
  static const int kBadWordsFieldNumber = 12;
  const ::std::string& bad_words(int index) const;
  ::std::string* mutable_bad_words(int index);
  void set_bad_words(int index, const ::std::string& value);
  void set_bad_words(int index, const char* value);
  void set_bad_words(int index, const char* value, size_t size);
  ::std::string* add_bad_words();
  void add_bad_words(const ::std::string& value);
  void add_bad_words(const char* value);
  void add_bad_words(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bad_words() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bad_words();

  // repeated .pbnavitia.PtObject places = 13;
  int places_size() const;
  void clear_places();
  static const int kPlacesFieldNumber = 13;
  const ::pbnavitia::PtObject& places(int index) const;
  ::pbnavitia::PtObject* mutable_places(int index);
  ::pbnavitia::PtObject* add_places();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
      mutable_places();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
      places() const;

  // repeated .pbnavitia.PtObject places_nearby = 14;
  int places_nearby_size() const;
  void clear_places_nearby();
  static const int kPlacesNearbyFieldNumber = 14;
  const ::pbnavitia::PtObject& places_nearby(int index) const;
  ::pbnavitia::PtObject* mutable_places_nearby(int index);
  ::pbnavitia::PtObject* add_places_nearby();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
      mutable_places_nearby();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
      places_nearby() const;

  // repeated .pbnavitia.ValidityPattern validity_patterns = 15;
  int validity_patterns_size() const;
  void clear_validity_patterns();
  static const int kValidityPatternsFieldNumber = 15;
  const ::pbnavitia::ValidityPattern& validity_patterns(int index) const;
  ::pbnavitia::ValidityPattern* mutable_validity_patterns(int index);
  ::pbnavitia::ValidityPattern* add_validity_patterns();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ValidityPattern >*
      mutable_validity_patterns();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ValidityPattern >&
      validity_patterns() const;

  // repeated .pbnavitia.Line lines = 16;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 16;
  const ::pbnavitia::Line& lines(int index) const;
  ::pbnavitia::Line* mutable_lines(int index);
  ::pbnavitia::Line* add_lines();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
      mutable_lines();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
      lines() const;

  // repeated .pbnavitia.JourneyPattern journey_patterns = 17;
  int journey_patterns_size() const;
  void clear_journey_patterns();
  static const int kJourneyPatternsFieldNumber = 17;
  const ::pbnavitia::JourneyPattern& journey_patterns(int index) const;
  ::pbnavitia::JourneyPattern* mutable_journey_patterns(int index);
  ::pbnavitia::JourneyPattern* add_journey_patterns();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >*
      mutable_journey_patterns();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >&
      journey_patterns() const;

  // repeated .pbnavitia.VehicleJourney vehicle_journeys = 18;
  int vehicle_journeys_size() const;
  void clear_vehicle_journeys();
  static const int kVehicleJourneysFieldNumber = 18;
  const ::pbnavitia::VehicleJourney& vehicle_journeys(int index) const;
  ::pbnavitia::VehicleJourney* mutable_vehicle_journeys(int index);
  ::pbnavitia::VehicleJourney* add_vehicle_journeys();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >*
      mutable_vehicle_journeys();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >&
      vehicle_journeys() const;

  // repeated .pbnavitia.StopPoint stop_points = 19;
  int stop_points_size() const;
  void clear_stop_points();
  static const int kStopPointsFieldNumber = 19;
  const ::pbnavitia::StopPoint& stop_points(int index) const;
  ::pbnavitia::StopPoint* mutable_stop_points(int index);
  ::pbnavitia::StopPoint* add_stop_points();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
      mutable_stop_points();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
      stop_points() const;

  // repeated .pbnavitia.StopArea stop_areas = 20;
  int stop_areas_size() const;
  void clear_stop_areas();
  static const int kStopAreasFieldNumber = 20;
  const ::pbnavitia::StopArea& stop_areas(int index) const;
  ::pbnavitia::StopArea* mutable_stop_areas(int index);
  ::pbnavitia::StopArea* add_stop_areas();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
      mutable_stop_areas();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
      stop_areas() const;

  // repeated .pbnavitia.Network networks = 21;
  int networks_size() const;
  void clear_networks();
  static const int kNetworksFieldNumber = 21;
  const ::pbnavitia::Network& networks(int index) const;
  ::pbnavitia::Network* mutable_networks(int index);
  ::pbnavitia::Network* add_networks();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Network >*
      mutable_networks();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Network >&
      networks() const;

  // repeated .pbnavitia.PhysicalMode physical_modes = 22;
  int physical_modes_size() const;
  void clear_physical_modes();
  static const int kPhysicalModesFieldNumber = 22;
  const ::pbnavitia::PhysicalMode& physical_modes(int index) const;
  ::pbnavitia::PhysicalMode* mutable_physical_modes(int index);
  ::pbnavitia::PhysicalMode* add_physical_modes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
      mutable_physical_modes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
      physical_modes() const;

  // repeated .pbnavitia.CommercialMode commercial_modes = 23;
  int commercial_modes_size() const;
  void clear_commercial_modes();
  static const int kCommercialModesFieldNumber = 23;
  const ::pbnavitia::CommercialMode& commercial_modes(int index) const;
  ::pbnavitia::CommercialMode* mutable_commercial_modes(int index);
  ::pbnavitia::CommercialMode* add_commercial_modes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
      mutable_commercial_modes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
      commercial_modes() const;

  // repeated .pbnavitia.Connection connections = 24;
  int connections_size() const;
  void clear_connections();
  static const int kConnectionsFieldNumber = 24;
  const ::pbnavitia::Connection& connections(int index) const;
  ::pbnavitia::Connection* mutable_connections(int index);
  ::pbnavitia::Connection* add_connections();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Connection >*
      mutable_connections();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Connection >&
      connections() const;

  // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 25;
  int journey_pattern_points_size() const;
  void clear_journey_pattern_points();
  static const int kJourneyPatternPointsFieldNumber = 25;
  const ::pbnavitia::JourneyPatternPoint& journey_pattern_points(int index) const;
  ::pbnavitia::JourneyPatternPoint* mutable_journey_pattern_points(int index);
  ::pbnavitia::JourneyPatternPoint* add_journey_pattern_points();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >*
      mutable_journey_pattern_points();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >&
      journey_pattern_points() const;

  // repeated .pbnavitia.Company companies = 26;
  int companies_size() const;
  void clear_companies();
  static const int kCompaniesFieldNumber = 26;
  const ::pbnavitia::Company& companies(int index) const;
  ::pbnavitia::Company* mutable_companies(int index);
  ::pbnavitia::Company* add_companies();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Company >*
      mutable_companies();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Company >&
      companies() const;

  // repeated .pbnavitia.Route routes = 27;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 27;
  const ::pbnavitia::Route& routes(int index) const;
  ::pbnavitia::Route* mutable_routes(int index);
  ::pbnavitia::Route* add_routes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
      mutable_routes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
      routes() const;

  // repeated .pbnavitia.Poi pois = 28;
  int pois_size() const;
  void clear_pois();
  static const int kPoisFieldNumber = 28;
  const ::pbnavitia::Poi& pois(int index) const;
  ::pbnavitia::Poi* mutable_pois(int index);
  ::pbnavitia::Poi* add_pois();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Poi >*
      mutable_pois();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Poi >&
      pois() const;

  // repeated .pbnavitia.PoiType poi_types = 29;
  int poi_types_size() const;
  void clear_poi_types();
  static const int kPoiTypesFieldNumber = 29;
  const ::pbnavitia::PoiType& poi_types(int index) const;
  ::pbnavitia::PoiType* mutable_poi_types(int index);
  ::pbnavitia::PoiType* add_poi_types();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PoiType >*
      mutable_poi_types();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PoiType >&
      poi_types() const;

  // repeated .pbnavitia.Calendar calendars = 55;
  int calendars_size() const;
  void clear_calendars();
  static const int kCalendarsFieldNumber = 55;
  const ::pbnavitia::Calendar& calendars(int index) const;
  ::pbnavitia::Calendar* mutable_calendars(int index);
  ::pbnavitia::Calendar* add_calendars();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
      mutable_calendars();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
      calendars() const;

  // repeated .pbnavitia.LineGroup line_groups = 56;
  int line_groups_size() const;
  void clear_line_groups();
  static const int kLineGroupsFieldNumber = 56;
  const ::pbnavitia::LineGroup& line_groups(int index) const;
  ::pbnavitia::LineGroup* mutable_line_groups(int index);
  ::pbnavitia::LineGroup* add_line_groups();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >*
      mutable_line_groups();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >&
      line_groups() const;

  // repeated .pbnavitia.Trip trips = 62;
  int trips_size() const;
  void clear_trips();
  static const int kTripsFieldNumber = 62;
  const ::pbnavitia::Trip& trips(int index) const;
  ::pbnavitia::Trip* mutable_trips(int index);
  ::pbnavitia::Trip* add_trips();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Trip >*
      mutable_trips();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Trip >&
      trips() const;

  // repeated .pbnavitia.Contributor contributors = 64;
  int contributors_size() const;
  void clear_contributors();
  static const int kContributorsFieldNumber = 64;
  const ::pbnavitia::Contributor& contributors(int index) const;
  ::pbnavitia::Contributor* mutable_contributors(int index);
  ::pbnavitia::Contributor* add_contributors();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Contributor >*
      mutable_contributors();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Contributor >&
      contributors() const;

  // repeated .pbnavitia.Dataset datasets = 65;
  int datasets_size() const;
  void clear_datasets();
  static const int kDatasetsFieldNumber = 65;
  const ::pbnavitia::Dataset& datasets(int index) const;
  ::pbnavitia::Dataset* mutable_datasets(int index);
  ::pbnavitia::Dataset* add_datasets();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Dataset >*
      mutable_datasets();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Dataset >&
      datasets() const;

  // repeated .pbnavitia.RoutePoint route_points = 66;
  int route_points_size() const;
  void clear_route_points();
  static const int kRoutePointsFieldNumber = 66;
  const ::pbnavitia::RoutePoint& route_points(int index) const;
  ::pbnavitia::RoutePoint* mutable_route_points(int index);
  ::pbnavitia::RoutePoint* add_route_points();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutePoint >*
      mutable_route_points();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutePoint >&
      route_points() const;

  // repeated .pbnavitia.Impact impacts = 57;
  int impacts_size() const;
  void clear_impacts();
  static const int kImpactsFieldNumber = 57;
  const ::pbnavitia::Impact& impacts(int index) const;
  ::pbnavitia::Impact* mutable_impacts(int index);
  ::pbnavitia::Impact* add_impacts();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Impact >*
      mutable_impacts();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Impact >&
      impacts() const;

  // repeated .pbnavitia.Journey journeys = 30;
  int journeys_size() const;
  void clear_journeys();
  static const int kJourneysFieldNumber = 30;
  const ::pbnavitia::Journey& journeys(int index) const;
  ::pbnavitia::Journey* mutable_journeys(int index);
  ::pbnavitia::Journey* add_journeys();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
      mutable_journeys();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
      journeys() const;

  // optional .pbnavitia.ResponseType response_type = 31;
  bool has_response_type() const;
  void clear_response_type();
  static const int kResponseTypeFieldNumber = 31;
  ::pbnavitia::ResponseType response_type() const;
  void set_response_type(::pbnavitia::ResponseType value);

  // optional string prev = 32;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 32;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  void set_prev(const char* value);
  void set_prev(const char* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional string next = 33;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 33;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  void set_next(const char* value);
  void set_next(const char* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // optional uint32 next_request_date_time = 34;
  bool has_next_request_date_time() const;
  void clear_next_request_date_time();
  static const int kNextRequestDateTimeFieldNumber = 34;
  ::google::protobuf::uint32 next_request_date_time() const;
  void set_next_request_date_time(::google::protobuf::uint32 value);

  // repeated .pbnavitia.RouteSchedule route_schedules = 35;
  int route_schedules_size() const;
  void clear_route_schedules();
  static const int kRouteSchedulesFieldNumber = 35;
  const ::pbnavitia::RouteSchedule& route_schedules(int index) const;
  ::pbnavitia::RouteSchedule* mutable_route_schedules(int index);
  ::pbnavitia::RouteSchedule* add_route_schedules();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteSchedule >*
      mutable_route_schedules();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteSchedule >&
      route_schedules() const;

  // repeated .pbnavitia.DepartureBoard departure_boards = 36;
  int departure_boards_size() const;
  void clear_departure_boards();
  static const int kDepartureBoardsFieldNumber = 36;
  const ::pbnavitia::DepartureBoard& departure_boards(int index) const;
  ::pbnavitia::DepartureBoard* mutable_departure_boards(int index);
  ::pbnavitia::DepartureBoard* add_departure_boards();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::DepartureBoard >*
      mutable_departure_boards();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::DepartureBoard >&
      departure_boards() const;

  // repeated .pbnavitia.Passage next_departures = 37;
  int next_departures_size() const;
  void clear_next_departures();
  static const int kNextDeparturesFieldNumber = 37;
  const ::pbnavitia::Passage& next_departures(int index) const;
  ::pbnavitia::Passage* mutable_next_departures(int index);
  ::pbnavitia::Passage* add_next_departures();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >*
      mutable_next_departures();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >&
      next_departures() const;

  // repeated .pbnavitia.Passage next_arrivals = 38;
  int next_arrivals_size() const;
  void clear_next_arrivals();
  static const int kNextArrivalsFieldNumber = 38;
  const ::pbnavitia::Passage& next_arrivals(int index) const;
  ::pbnavitia::Passage* mutable_next_arrivals(int index);
  ::pbnavitia::Passage* add_next_arrivals();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >*
      mutable_next_arrivals();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >&
      next_arrivals() const;

  // repeated .pbnavitia.StopSchedule stop_schedules = 39;
  int stop_schedules_size() const;
  void clear_stop_schedules();
  static const int kStopSchedulesFieldNumber = 39;
  const ::pbnavitia::StopSchedule& stop_schedules(int index) const;
  ::pbnavitia::StopSchedule* mutable_stop_schedules(int index);
  ::pbnavitia::StopSchedule* add_stop_schedules();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >*
      mutable_stop_schedules();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >&
      stop_schedules() const;

  // optional .pbnavitia.Load load = 46;
  bool has_load() const;
  void clear_load();
  static const int kLoadFieldNumber = 46;
  const ::pbnavitia::Load& load() const;
  ::pbnavitia::Load* mutable_load();
  ::pbnavitia::Load* release_load();
  void set_allocated_load(::pbnavitia::Load* load);

  // optional .pbnavitia.Metadatas metadatas = 48;
  bool has_metadatas() const;
  void clear_metadatas();
  static const int kMetadatasFieldNumber = 48;
  const ::pbnavitia::Metadatas& metadatas() const;
  ::pbnavitia::Metadatas* mutable_metadatas();
  ::pbnavitia::Metadatas* release_metadatas();
  void set_allocated_metadatas(::pbnavitia::Metadatas* metadatas);

  // optional .pbnavitia.Pagination pagination = 49;
  bool has_pagination() const;
  void clear_pagination();
  static const int kPaginationFieldNumber = 49;
  const ::pbnavitia::Pagination& pagination() const;
  ::pbnavitia::Pagination* mutable_pagination();
  ::pbnavitia::Pagination* release_pagination();
  void set_allocated_pagination(::pbnavitia::Pagination* pagination);

  // repeated .pbnavitia.TrafficReports traffic_reports = 61;
  int traffic_reports_size() const;
  void clear_traffic_reports();
  static const int kTrafficReportsFieldNumber = 61;
  const ::pbnavitia::TrafficReports& traffic_reports(int index) const;
  ::pbnavitia::TrafficReports* mutable_traffic_reports(int index);
  ::pbnavitia::TrafficReports* add_traffic_reports();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::TrafficReports >*
      mutable_traffic_reports();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::TrafficReports >&
      traffic_reports() const;

  // repeated .pbnavitia.LineReport line_reports = 73;
  int line_reports_size() const;
  void clear_line_reports();
  static const int kLineReportsFieldNumber = 73;
  const ::pbnavitia::LineReport& line_reports(int index) const;
  ::pbnavitia::LineReport* mutable_line_reports(int index);
  ::pbnavitia::LineReport* add_line_reports();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineReport >*
      mutable_line_reports();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineReport >&
      line_reports() const;

  // repeated .pbnavitia.Ticket tickets = 51;
  int tickets_size() const;
  void clear_tickets();
  static const int kTicketsFieldNumber = 51;
  const ::pbnavitia::Ticket& tickets(int index) const;
  ::pbnavitia::Ticket* mutable_tickets(int index);
  ::pbnavitia::Ticket* add_tickets();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Ticket >*
      mutable_tickets();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Ticket >&
      tickets() const;

  // repeated .pbnavitia.PtObject pt_objects = 52;
  int pt_objects_size() const;
  void clear_pt_objects();
  static const int kPtObjectsFieldNumber = 52;
  const ::pbnavitia::PtObject& pt_objects(int index) const;
  ::pbnavitia::PtObject* mutable_pt_objects(int index);
  ::pbnavitia::PtObject* add_pt_objects();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
      mutable_pt_objects();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
      pt_objects() const;

  // repeated .pbnavitia.FeedPublisher feed_publishers = 53;
  int feed_publishers_size() const;
  void clear_feed_publishers();
  static const int kFeedPublishersFieldNumber = 53;
  const ::pbnavitia::FeedPublisher& feed_publishers(int index) const;
  ::pbnavitia::FeedPublisher* mutable_feed_publishers(int index);
  ::pbnavitia::FeedPublisher* add_feed_publishers();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::FeedPublisher >*
      mutable_feed_publishers();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::FeedPublisher >&
      feed_publishers() const;

  // repeated .pbnavitia.NearestStopPoint nearest_stop_points = 63;
  int nearest_stop_points_size() const;
  void clear_nearest_stop_points();
  static const int kNearestStopPointsFieldNumber = 63;
  const ::pbnavitia::NearestStopPoint& nearest_stop_points(int index) const;
  ::pbnavitia::NearestStopPoint* mutable_nearest_stop_points(int index);
  ::pbnavitia::NearestStopPoint* add_nearest_stop_points();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::NearestStopPoint >*
      mutable_nearest_stop_points();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::NearestStopPoint >&
      nearest_stop_points() const;

  // repeated .pbnavitia.Link links = 67;
  int links_size() const;
  void clear_links();
  static const int kLinksFieldNumber = 67;
  const ::pbnavitia::Link& links(int index) const;
  ::pbnavitia::Link* mutable_links(int index);
  ::pbnavitia::Link* add_links();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Link >*
      mutable_links();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Link >&
      links() const;

  // repeated .pbnavitia.GraphicalIsochrone graphical_isochrones = 68;
  int graphical_isochrones_size() const;
  void clear_graphical_isochrones();
  static const int kGraphicalIsochronesFieldNumber = 68;
  const ::pbnavitia::GraphicalIsochrone& graphical_isochrones(int index) const;
  ::pbnavitia::GraphicalIsochrone* mutable_graphical_isochrones(int index);
  ::pbnavitia::GraphicalIsochrone* add_graphical_isochrones();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::GraphicalIsochrone >*
      mutable_graphical_isochrones();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GraphicalIsochrone >&
      graphical_isochrones() const;

  // repeated .pbnavitia.HeatMap heat_maps = 71;
  int heat_maps_size() const;
  void clear_heat_maps();
  static const int kHeatMapsFieldNumber = 71;
  const ::pbnavitia::HeatMap& heat_maps(int index) const;
  ::pbnavitia::HeatMap* mutable_heat_maps(int index);
  ::pbnavitia::HeatMap* add_heat_maps();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::HeatMap >*
      mutable_heat_maps();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::HeatMap >&
      heat_maps() const;

  // optional .pbnavitia.GeoStatus geo_status = 69;
  bool has_geo_status() const;
  void clear_geo_status();
  static const int kGeoStatusFieldNumber = 69;
  const ::pbnavitia::GeoStatus& geo_status() const;
  ::pbnavitia::GeoStatus* mutable_geo_status();
  ::pbnavitia::GeoStatus* release_geo_status();
  void set_allocated_geo_status(::pbnavitia::GeoStatus* geo_status);

  // optional .pbnavitia.Co2Emission car_co2_emission = 70;
  bool has_car_co2_emission() const;
  void clear_car_co2_emission();
  static const int kCarCo2EmissionFieldNumber = 70;
  const ::pbnavitia::Co2Emission& car_co2_emission() const;
  ::pbnavitia::Co2Emission* mutable_car_co2_emission();
  ::pbnavitia::Co2Emission* release_car_co2_emission();
  void set_allocated_car_co2_emission(::pbnavitia::Co2Emission* car_co2_emission);

  // optional .pbnavitia.StreetNetworkRoutingMatrix sn_routing_matrix = 72;
  bool has_sn_routing_matrix() const;
  void clear_sn_routing_matrix();
  static const int kSnRoutingMatrixFieldNumber = 72;
  const ::pbnavitia::StreetNetworkRoutingMatrix& sn_routing_matrix() const;
  ::pbnavitia::StreetNetworkRoutingMatrix* mutable_sn_routing_matrix();
  ::pbnavitia::StreetNetworkRoutingMatrix* release_sn_routing_matrix();
  void set_allocated_sn_routing_matrix(::pbnavitia::StreetNetworkRoutingMatrix* sn_routing_matrix);

  // repeated .pbnavitia.EquipmentReport equipment_reports = 74;
  int equipment_reports_size() const;
  void clear_equipment_reports();
  static const int kEquipmentReportsFieldNumber = 74;
  const ::pbnavitia::EquipmentReport& equipment_reports(int index) const;
  ::pbnavitia::EquipmentReport* mutable_equipment_reports(int index);
  ::pbnavitia::EquipmentReport* add_equipment_reports();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentReport >*
      mutable_equipment_reports();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentReport >&
      equipment_reports() const;

  // repeated .pbnavitia.StopSchedule terminus_schedules = 75;
  int terminus_schedules_size() const;
  void clear_terminus_schedules();
  static const int kTerminusSchedulesFieldNumber = 75;
  const ::pbnavitia::StopSchedule& terminus_schedules(int index) const;
  ::pbnavitia::StopSchedule* mutable_terminus_schedules(int index);
  ::pbnavitia::StopSchedule* add_terminus_schedules();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >*
      mutable_terminus_schedules();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >&
      terminus_schedules() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.Response)
 private:
  inline void set_has_status_code();
  inline void clear_has_status_code();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_publication_date();
  inline void clear_has_publication_date();
  inline void set_has_response_type();
  inline void clear_has_response_type();
  inline void set_has_prev();
  inline void clear_has_prev();
  inline void set_has_next();
  inline void clear_has_next();
  inline void set_has_next_request_date_time();
  inline void clear_has_next_request_date_time();
  inline void set_has_load();
  inline void clear_has_load();
  inline void set_has_metadatas();
  inline void clear_has_metadatas();
  inline void set_has_pagination();
  inline void clear_has_pagination();
  inline void set_has_geo_status();
  inline void clear_has_geo_status();
  inline void set_has_car_co2_emission();
  inline void clear_has_car_co2_emission();
  inline void set_has_sn_routing_matrix();
  inline void clear_has_sn_routing_matrix();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::pbnavitia::Error* error_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int32 status_code_;
  ::google::protobuf::int32 publication_date_;
  ::pbnavitia::Status* status_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ignored_words_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bad_words_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject > places_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject > places_nearby_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ValidityPattern > validity_patterns_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line > lines_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern > journey_patterns_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney > vehicle_journeys_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint > stop_points_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea > stop_areas_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Network > networks_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode > physical_modes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode > commercial_modes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Connection > connections_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint > journey_pattern_points_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Company > companies_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route > routes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Poi > pois_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PoiType > poi_types_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar > calendars_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup > line_groups_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Trip > trips_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Contributor > contributors_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Dataset > datasets_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutePoint > route_points_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Impact > impacts_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey > journeys_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  int response_type_;
  ::google::protobuf::uint32 next_request_date_time_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteSchedule > route_schedules_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::DepartureBoard > departure_boards_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage > next_departures_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage > next_arrivals_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule > stop_schedules_;
  ::pbnavitia::Load* load_;
  ::pbnavitia::Metadatas* metadatas_;
  ::pbnavitia::Pagination* pagination_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::TrafficReports > traffic_reports_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineReport > line_reports_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Ticket > tickets_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject > pt_objects_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::FeedPublisher > feed_publishers_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::NearestStopPoint > nearest_stop_points_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Link > links_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::GraphicalIsochrone > graphical_isochrones_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::HeatMap > heat_maps_;
  ::pbnavitia::GeoStatus* geo_status_;
  ::pbnavitia::Co2Emission* car_co2_emission_;
  ::pbnavitia::StreetNetworkRoutingMatrix* sn_routing_matrix_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentReport > equipment_reports_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule > terminus_schedules_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class NearestStopPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.NearestStopPoint) */ {
 public:
  NearestStopPoint();
  virtual ~NearestStopPoint();

  NearestStopPoint(const NearestStopPoint& from);

  inline NearestStopPoint& operator=(const NearestStopPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NearestStopPoint& default_instance();

  void Swap(NearestStopPoint* other);

  // implements Message ----------------------------------------------

  inline NearestStopPoint* New() const { return New(NULL); }

  NearestStopPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NearestStopPoint& from);
  void MergeFrom(const NearestStopPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NearestStopPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.StopPoint stop_point = 1;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 1;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // optional int32 access_duration = 2;
  bool has_access_duration() const;
  void clear_access_duration();
  static const int kAccessDurationFieldNumber = 2;
  ::google::protobuf::int32 access_duration() const;
  void set_access_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.NearestStopPoint)
 private:
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_access_duration();
  inline void clear_has_access_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::StopPoint* stop_point_;
  ::google::protobuf::int32 access_duration_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static NearestStopPoint* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.EquipmentReport) */ {
 public:
  EquipmentReport();
  virtual ~EquipmentReport();

  EquipmentReport(const EquipmentReport& from);

  inline EquipmentReport& operator=(const EquipmentReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentReport& default_instance();

  void Swap(EquipmentReport* other);

  // implements Message ----------------------------------------------

  inline EquipmentReport* New() const { return New(NULL); }

  EquipmentReport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentReport& from);
  void MergeFrom(const EquipmentReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EquipmentReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.Line line = 1;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 1;
  const ::pbnavitia::Line& line() const;
  ::pbnavitia::Line* mutable_line();
  ::pbnavitia::Line* release_line();
  void set_allocated_line(::pbnavitia::Line* line);

  // repeated .pbnavitia.StopAreaEquipment stop_area_equipments = 2;
  int stop_area_equipments_size() const;
  void clear_stop_area_equipments();
  static const int kStopAreaEquipmentsFieldNumber = 2;
  const ::pbnavitia::StopAreaEquipment& stop_area_equipments(int index) const;
  ::pbnavitia::StopAreaEquipment* mutable_stop_area_equipments(int index);
  ::pbnavitia::StopAreaEquipment* add_stop_area_equipments();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopAreaEquipment >*
      mutable_stop_area_equipments();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopAreaEquipment >&
      stop_area_equipments() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.EquipmentReport)
 private:
  inline void set_has_line();
  inline void clear_has_line();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::Line* line_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopAreaEquipment > stop_area_equipments_;
  friend void  protobuf_AddDesc_response_2eproto();
  friend void protobuf_AssignDesc_response_2eproto();
  friend void protobuf_ShutdownFile_response_2eproto();

  void InitAsDefaultInstance();
  static EquipmentReport* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PathItem

// optional string name = 1;
inline bool PathItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PathItem::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.name)
}
inline void PathItem::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PathItem.name)
}
inline void PathItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PathItem.name)
}
inline ::std::string* PathItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PathItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathItem::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PathItem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PathItem.name)
}

// optional double length = 2;
inline bool PathItem::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathItem::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathItem::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathItem::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double PathItem::length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.length)
  return length_;
}
inline void PathItem::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.length)
}

// optional int32 direction = 3;
inline bool PathItem::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathItem::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathItem::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathItem::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 PathItem::direction() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.direction)
  return direction_;
}
inline void PathItem::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.direction)
}

// optional double duration = 4;
inline bool PathItem::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PathItem::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PathItem::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PathItem::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double PathItem::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.duration)
  return duration_;
}
inline void PathItem::set_duration(double value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.duration)
}

// optional .pbnavitia.CyclePathType cycle_path_type = 5;
inline bool PathItem::has_cycle_path_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PathItem::set_has_cycle_path_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PathItem::clear_has_cycle_path_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PathItem::clear_cycle_path_type() {
  cycle_path_type_ = 0;
  clear_has_cycle_path_type();
}
inline ::pbnavitia::CyclePathType PathItem::cycle_path_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.cycle_path_type)
  return static_cast< ::pbnavitia::CyclePathType >(cycle_path_type_);
}
inline void PathItem::set_cycle_path_type(::pbnavitia::CyclePathType value) {
  assert(::pbnavitia::CyclePathType_IsValid(value));
  set_has_cycle_path_type();
  cycle_path_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.cycle_path_type)
}

// -------------------------------------------------------------------

// StreetNetwork

// optional double length = 1;
inline bool StreetNetwork::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreetNetwork::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreetNetwork::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreetNetwork::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double StreetNetwork::length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.length)
  return length_;
}
inline void StreetNetwork::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetwork.length)
}

// optional double duration = 2;
inline bool StreetNetwork::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreetNetwork::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreetNetwork::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreetNetwork::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline double StreetNetwork::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.duration)
  return duration_;
}
inline void StreetNetwork::set_duration(double value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetwork.duration)
}

// optional .pbnavitia.StreetNetworkMode mode = 3;
inline bool StreetNetwork::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreetNetwork::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreetNetwork::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreetNetwork::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::pbnavitia::StreetNetworkMode StreetNetwork::mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.mode)
  return static_cast< ::pbnavitia::StreetNetworkMode >(mode_);
}
inline void StreetNetwork::set_mode(::pbnavitia::StreetNetworkMode value) {
  assert(::pbnavitia::StreetNetworkMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetwork.mode)
}

// repeated .pbnavitia.PathItem path_items = 4;
inline int StreetNetwork::path_items_size() const {
  return path_items_.size();
}
inline void StreetNetwork::clear_path_items() {
  path_items_.Clear();
}
inline const ::pbnavitia::PathItem& StreetNetwork::path_items(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.path_items)
  return path_items_.Get(index);
}
inline ::pbnavitia::PathItem* StreetNetwork::mutable_path_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetwork.path_items)
  return path_items_.Mutable(index);
}
inline ::pbnavitia::PathItem* StreetNetwork::add_path_items() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetwork.path_items)
  return path_items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PathItem >*
StreetNetwork::mutable_path_items() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetwork.path_items)
  return &path_items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PathItem >&
StreetNetwork::path_items() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetwork.path_items)
  return path_items_;
}

// repeated .pbnavitia.GeographicalCoord coordinates = 5;
inline int StreetNetwork::coordinates_size() const {
  return coordinates_.size();
}
inline void StreetNetwork::clear_coordinates() {
  coordinates_.Clear();
}
inline const ::pbnavitia::GeographicalCoord& StreetNetwork::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.coordinates)
  return coordinates_.Get(index);
}
inline ::pbnavitia::GeographicalCoord* StreetNetwork::mutable_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetwork.coordinates)
  return coordinates_.Mutable(index);
}
inline ::pbnavitia::GeographicalCoord* StreetNetwork::add_coordinates() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetwork.coordinates)
  return coordinates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
StreetNetwork::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetwork.coordinates)
  return &coordinates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
StreetNetwork::coordinates() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetwork.coordinates)
  return coordinates_;
}

// -------------------------------------------------------------------

// PtDisplayInfo

// optional string network = 1;
inline bool PtDisplayInfo::has_network() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PtDisplayInfo::set_has_network() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PtDisplayInfo::clear_has_network() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PtDisplayInfo::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network();
}
inline const ::std::string& PtDisplayInfo::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_network(const ::std::string& value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.network)
}
inline void PtDisplayInfo::set_network(const char* value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.network)
}
inline void PtDisplayInfo::set_network(const char* value, size_t size) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.network)
}
inline ::std::string* PtDisplayInfo::mutable_network() {
  set_has_network();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.network)
  clear_has_network();
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    set_has_network();
  } else {
    clear_has_network();
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.network)
}

// optional string code = 2;
inline bool PtDisplayInfo::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PtDisplayInfo::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PtDisplayInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PtDisplayInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& PtDisplayInfo::code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.code)
}
inline void PtDisplayInfo::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.code)
}
inline void PtDisplayInfo::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.code)
}
inline ::std::string* PtDisplayInfo::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.code)
}

// optional string headsign = 3;
inline bool PtDisplayInfo::has_headsign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PtDisplayInfo::set_has_headsign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PtDisplayInfo::clear_has_headsign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PtDisplayInfo::clear_headsign() {
  headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headsign();
}
inline const ::std::string& PtDisplayInfo::headsign() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.headsign)
  return headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_headsign(const ::std::string& value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.headsign)
}
inline void PtDisplayInfo::set_headsign(const char* value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.headsign)
}
inline void PtDisplayInfo::set_headsign(const char* value, size_t size) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.headsign)
}
inline ::std::string* PtDisplayInfo::mutable_headsign() {
  set_has_headsign();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.headsign)
  return headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_headsign() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.headsign)
  clear_has_headsign();
  return headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_headsign(::std::string* headsign) {
  if (headsign != NULL) {
    set_has_headsign();
  } else {
    clear_has_headsign();
  }
  headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headsign);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.headsign)
}

// optional string direction = 4;
inline bool PtDisplayInfo::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PtDisplayInfo::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PtDisplayInfo::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PtDisplayInfo::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_direction();
}
inline const ::std::string& PtDisplayInfo::direction() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.direction)
  return direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_direction(const ::std::string& value) {
  set_has_direction();
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.direction)
}
inline void PtDisplayInfo::set_direction(const char* value) {
  set_has_direction();
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.direction)
}
inline void PtDisplayInfo::set_direction(const char* value, size_t size) {
  set_has_direction();
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.direction)
}
inline ::std::string* PtDisplayInfo::mutable_direction() {
  set_has_direction();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_direction() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.direction)
  clear_has_direction();
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.direction)
}

// optional string color = 5;
inline bool PtDisplayInfo::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PtDisplayInfo::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PtDisplayInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PtDisplayInfo::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& PtDisplayInfo::color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.color)
}
inline void PtDisplayInfo::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.color)
}
inline void PtDisplayInfo::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.color)
}
inline ::std::string* PtDisplayInfo::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.color)
}

// optional string commercial_mode = 6;
inline bool PtDisplayInfo::has_commercial_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PtDisplayInfo::set_has_commercial_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PtDisplayInfo::clear_has_commercial_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PtDisplayInfo::clear_commercial_mode() {
  commercial_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commercial_mode();
}
inline const ::std::string& PtDisplayInfo::commercial_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.commercial_mode)
  return commercial_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_commercial_mode(const ::std::string& value) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.commercial_mode)
}
inline void PtDisplayInfo::set_commercial_mode(const char* value) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.commercial_mode)
}
inline void PtDisplayInfo::set_commercial_mode(const char* value, size_t size) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.commercial_mode)
}
inline ::std::string* PtDisplayInfo::mutable_commercial_mode() {
  set_has_commercial_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.commercial_mode)
  return commercial_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_commercial_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.commercial_mode)
  clear_has_commercial_mode();
  return commercial_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_commercial_mode(::std::string* commercial_mode) {
  if (commercial_mode != NULL) {
    set_has_commercial_mode();
  } else {
    clear_has_commercial_mode();
  }
  commercial_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commercial_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.commercial_mode)
}

// optional string physical_mode = 7;
inline bool PtDisplayInfo::has_physical_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PtDisplayInfo::set_has_physical_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PtDisplayInfo::clear_has_physical_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PtDisplayInfo::clear_physical_mode() {
  physical_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_physical_mode();
}
inline const ::std::string& PtDisplayInfo::physical_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.physical_mode)
  return physical_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_physical_mode(const ::std::string& value) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.physical_mode)
}
inline void PtDisplayInfo::set_physical_mode(const char* value) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.physical_mode)
}
inline void PtDisplayInfo::set_physical_mode(const char* value, size_t size) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.physical_mode)
}
inline ::std::string* PtDisplayInfo::mutable_physical_mode() {
  set_has_physical_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.physical_mode)
  return physical_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_physical_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.physical_mode)
  clear_has_physical_mode();
  return physical_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_physical_mode(::std::string* physical_mode) {
  if (physical_mode != NULL) {
    set_has_physical_mode();
  } else {
    clear_has_physical_mode();
  }
  physical_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.physical_mode)
}

// optional string description = 8;
inline bool PtDisplayInfo::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PtDisplayInfo::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PtDisplayInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PtDisplayInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& PtDisplayInfo::description() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.description)
}
inline void PtDisplayInfo::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.description)
}
inline void PtDisplayInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.description)
}
inline ::std::string* PtDisplayInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_description() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.description)
}

// optional .pbnavitia.Uris uris = 9;
inline bool PtDisplayInfo::has_uris() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PtDisplayInfo::set_has_uris() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PtDisplayInfo::clear_has_uris() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PtDisplayInfo::clear_uris() {
  if (uris_ != NULL) uris_->::pbnavitia::Uris::Clear();
  clear_has_uris();
}
inline const ::pbnavitia::Uris& PtDisplayInfo::uris() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.uris)
  return uris_ != NULL ? *uris_ : *default_instance_->uris_;
}
inline ::pbnavitia::Uris* PtDisplayInfo::mutable_uris() {
  set_has_uris();
  if (uris_ == NULL) {
    uris_ = new ::pbnavitia::Uris;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.uris)
  return uris_;
}
inline ::pbnavitia::Uris* PtDisplayInfo::release_uris() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.uris)
  clear_has_uris();
  ::pbnavitia::Uris* temp = uris_;
  uris_ = NULL;
  return temp;
}
inline void PtDisplayInfo::set_allocated_uris(::pbnavitia::Uris* uris) {
  delete uris_;
  uris_ = uris;
  if (uris) {
    set_has_uris();
  } else {
    clear_has_uris();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.uris)
}

// optional .pbnavitia.hasEquipments has_equipments = 11;
inline bool PtDisplayInfo::has_has_equipments() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PtDisplayInfo::set_has_has_equipments() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PtDisplayInfo::clear_has_has_equipments() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PtDisplayInfo::clear_has_equipments() {
  if (has_equipments_ != NULL) has_equipments_->::pbnavitia::hasEquipments::Clear();
  clear_has_has_equipments();
}
inline const ::pbnavitia::hasEquipments& PtDisplayInfo::has_equipments() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.has_equipments)
  return has_equipments_ != NULL ? *has_equipments_ : *default_instance_->has_equipments_;
}
inline ::pbnavitia::hasEquipments* PtDisplayInfo::mutable_has_equipments() {
  set_has_has_equipments();
  if (has_equipments_ == NULL) {
    has_equipments_ = new ::pbnavitia::hasEquipments;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.has_equipments)
  return has_equipments_;
}
inline ::pbnavitia::hasEquipments* PtDisplayInfo::release_has_equipments() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.has_equipments)
  clear_has_has_equipments();
  ::pbnavitia::hasEquipments* temp = has_equipments_;
  has_equipments_ = NULL;
  return temp;
}
inline void PtDisplayInfo::set_allocated_has_equipments(::pbnavitia::hasEquipments* has_equipments) {
  delete has_equipments_;
  has_equipments_ = has_equipments;
  if (has_equipments) {
    set_has_has_equipments();
  } else {
    clear_has_has_equipments();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.has_equipments)
}

// optional string name = 12;
inline bool PtDisplayInfo::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PtDisplayInfo::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PtDisplayInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PtDisplayInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PtDisplayInfo::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.name)
}
inline void PtDisplayInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.name)
}
inline void PtDisplayInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.name)
}
inline ::std::string* PtDisplayInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.name)
}

// repeated .pbnavitia.Message messages = 13;
inline int PtDisplayInfo::messages_size() const {
  return messages_.size();
}
inline void PtDisplayInfo::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& PtDisplayInfo::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* PtDisplayInfo::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* PtDisplayInfo::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.PtDisplayInfo.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
PtDisplayInfo::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtDisplayInfo.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
PtDisplayInfo::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtDisplayInfo.messages)
  return messages_;
}

// repeated string impact_uris = 18;
inline int PtDisplayInfo::impact_uris_size() const {
  return impact_uris_.size();
}
inline void PtDisplayInfo::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& PtDisplayInfo::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* PtDisplayInfo::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void PtDisplayInfo::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void PtDisplayInfo::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.impact_uris)
}
inline void PtDisplayInfo::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.impact_uris)
}
inline ::std::string* PtDisplayInfo::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PtDisplayInfo.impact_uris)
  return impact_uris_.Add();
}
inline void PtDisplayInfo::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtDisplayInfo.impact_uris)
}
inline void PtDisplayInfo::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PtDisplayInfo.impact_uris)
}
inline void PtDisplayInfo::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PtDisplayInfo.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PtDisplayInfo::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtDisplayInfo.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PtDisplayInfo::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtDisplayInfo.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Note notes = 15;
inline int PtDisplayInfo::notes_size() const {
  return notes_.size();
}
inline void PtDisplayInfo::clear_notes() {
  notes_.Clear();
}
inline const ::pbnavitia::Note& PtDisplayInfo::notes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.notes)
  return notes_.Get(index);
}
inline ::pbnavitia::Note* PtDisplayInfo::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.notes)
  return notes_.Mutable(index);
}
inline ::pbnavitia::Note* PtDisplayInfo::add_notes() {
  // @@protoc_insertion_point(field_add:pbnavitia.PtDisplayInfo.notes)
  return notes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >*
PtDisplayInfo::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtDisplayInfo.notes)
  return &notes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >&
PtDisplayInfo::notes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtDisplayInfo.notes)
  return notes_;
}

// repeated string headsigns = 16;
inline int PtDisplayInfo::headsigns_size() const {
  return headsigns_.size();
}
inline void PtDisplayInfo::clear_headsigns() {
  headsigns_.Clear();
}
inline const ::std::string& PtDisplayInfo::headsigns(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.headsigns)
  return headsigns_.Get(index);
}
inline ::std::string* PtDisplayInfo::mutable_headsigns(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.headsigns)
  return headsigns_.Mutable(index);
}
inline void PtDisplayInfo::set_headsigns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.headsigns)
  headsigns_.Mutable(index)->assign(value);
}
inline void PtDisplayInfo::set_headsigns(int index, const char* value) {
  headsigns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.headsigns)
}
inline void PtDisplayInfo::set_headsigns(int index, const char* value, size_t size) {
  headsigns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.headsigns)
}
inline ::std::string* PtDisplayInfo::add_headsigns() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PtDisplayInfo.headsigns)
  return headsigns_.Add();
}
inline void PtDisplayInfo::add_headsigns(const ::std::string& value) {
  headsigns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtDisplayInfo.headsigns)
}
inline void PtDisplayInfo::add_headsigns(const char* value) {
  headsigns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PtDisplayInfo.headsigns)
}
inline void PtDisplayInfo::add_headsigns(const char* value, size_t size) {
  headsigns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PtDisplayInfo.headsigns)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PtDisplayInfo::headsigns() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtDisplayInfo.headsigns)
  return headsigns_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PtDisplayInfo::mutable_headsigns() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtDisplayInfo.headsigns)
  return &headsigns_;
}

// optional string text_color = 17;
inline bool PtDisplayInfo::has_text_color() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PtDisplayInfo::set_has_text_color() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PtDisplayInfo::clear_has_text_color() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PtDisplayInfo::clear_text_color() {
  text_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_color();
}
inline const ::std::string& PtDisplayInfo::text_color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.text_color)
  return text_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_text_color(const ::std::string& value) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.text_color)
}
inline void PtDisplayInfo::set_text_color(const char* value) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.text_color)
}
inline void PtDisplayInfo::set_text_color(const char* value, size_t size) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.text_color)
}
inline ::std::string* PtDisplayInfo::mutable_text_color() {
  set_has_text_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.text_color)
  return text_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_text_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.text_color)
  clear_has_text_color();
  return text_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_text_color(::std::string* text_color) {
  if (text_color != NULL) {
    set_has_text_color();
  } else {
    clear_has_text_color();
  }
  text_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.text_color)
}

// optional string trip_short_name = 19;
inline bool PtDisplayInfo::has_trip_short_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PtDisplayInfo::set_has_trip_short_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PtDisplayInfo::clear_has_trip_short_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PtDisplayInfo::clear_trip_short_name() {
  trip_short_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trip_short_name();
}
inline const ::std::string& PtDisplayInfo::trip_short_name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.trip_short_name)
  return trip_short_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_trip_short_name(const ::std::string& value) {
  set_has_trip_short_name();
  trip_short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.trip_short_name)
}
inline void PtDisplayInfo::set_trip_short_name(const char* value) {
  set_has_trip_short_name();
  trip_short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.trip_short_name)
}
inline void PtDisplayInfo::set_trip_short_name(const char* value, size_t size) {
  set_has_trip_short_name();
  trip_short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.trip_short_name)
}
inline ::std::string* PtDisplayInfo::mutable_trip_short_name() {
  set_has_trip_short_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.trip_short_name)
  return trip_short_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtDisplayInfo::release_trip_short_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.trip_short_name)
  clear_has_trip_short_name();
  return trip_short_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtDisplayInfo::set_allocated_trip_short_name(::std::string* trip_short_name) {
  if (trip_short_name != NULL) {
    set_has_trip_short_name();
  } else {
    clear_has_trip_short_name();
  }
  trip_short_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_short_name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.trip_short_name)
}

// -------------------------------------------------------------------

// Uris

// optional string company = 1;
inline bool Uris::has_company() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Uris::set_has_company() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Uris::clear_has_company() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Uris::clear_company() {
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company();
}
inline const ::std::string& Uris::company() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.company)
  return company_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_company(const ::std::string& value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.company)
}
inline void Uris::set_company(const char* value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.company)
}
inline void Uris::set_company(const char* value, size_t size) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.company)
}
inline ::std::string* Uris::mutable_company() {
  set_has_company();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.company)
  return company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_company() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.company)
  clear_has_company();
  return company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_company(::std::string* company) {
  if (company != NULL) {
    set_has_company();
  } else {
    clear_has_company();
  }
  company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.company)
}

// optional string vehicle_journey = 2;
inline bool Uris::has_vehicle_journey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Uris::set_has_vehicle_journey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Uris::clear_has_vehicle_journey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Uris::clear_vehicle_journey() {
  vehicle_journey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicle_journey();
}
inline const ::std::string& Uris::vehicle_journey() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.vehicle_journey)
  return vehicle_journey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_vehicle_journey(const ::std::string& value) {
  set_has_vehicle_journey();
  vehicle_journey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.vehicle_journey)
}
inline void Uris::set_vehicle_journey(const char* value) {
  set_has_vehicle_journey();
  vehicle_journey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.vehicle_journey)
}
inline void Uris::set_vehicle_journey(const char* value, size_t size) {
  set_has_vehicle_journey();
  vehicle_journey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.vehicle_journey)
}
inline ::std::string* Uris::mutable_vehicle_journey() {
  set_has_vehicle_journey();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.vehicle_journey)
  return vehicle_journey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_vehicle_journey() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.vehicle_journey)
  clear_has_vehicle_journey();
  return vehicle_journey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_vehicle_journey(::std::string* vehicle_journey) {
  if (vehicle_journey != NULL) {
    set_has_vehicle_journey();
  } else {
    clear_has_vehicle_journey();
  }
  vehicle_journey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_journey);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.vehicle_journey)
}

// optional string line = 3;
inline bool Uris::has_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Uris::set_has_line() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Uris::clear_has_line() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Uris::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_line();
}
inline const ::std::string& Uris::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.line)
  return line_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_line(const ::std::string& value) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.line)
}
inline void Uris::set_line(const char* value) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.line)
}
inline void Uris::set_line(const char* value, size_t size) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.line)
}
inline ::std::string* Uris::mutable_line() {
  set_has_line();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.line)
  clear_has_line();
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_line(::std::string* line) {
  if (line != NULL) {
    set_has_line();
  } else {
    clear_has_line();
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.line)
}

// optional string route = 4;
inline bool Uris::has_route() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Uris::set_has_route() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Uris::clear_has_route() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Uris::clear_route() {
  route_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route();
}
inline const ::std::string& Uris::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.route)
  return route_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_route(const ::std::string& value) {
  set_has_route();
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.route)
}
inline void Uris::set_route(const char* value) {
  set_has_route();
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.route)
}
inline void Uris::set_route(const char* value, size_t size) {
  set_has_route();
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.route)
}
inline ::std::string* Uris::mutable_route() {
  set_has_route();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.route)
  return route_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.route)
  clear_has_route();
  return route_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_route(::std::string* route) {
  if (route != NULL) {
    set_has_route();
  } else {
    clear_has_route();
  }
  route_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.route)
}

// optional string commercial_mode = 5;
inline bool Uris::has_commercial_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Uris::set_has_commercial_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Uris::clear_has_commercial_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Uris::clear_commercial_mode() {
  commercial_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commercial_mode();
}
inline const ::std::string& Uris::commercial_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.commercial_mode)
  return commercial_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_commercial_mode(const ::std::string& value) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.commercial_mode)
}
inline void Uris::set_commercial_mode(const char* value) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.commercial_mode)
}
inline void Uris::set_commercial_mode(const char* value, size_t size) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.commercial_mode)
}
inline ::std::string* Uris::mutable_commercial_mode() {
  set_has_commercial_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.commercial_mode)
  return commercial_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_commercial_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.commercial_mode)
  clear_has_commercial_mode();
  return commercial_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_commercial_mode(::std::string* commercial_mode) {
  if (commercial_mode != NULL) {
    set_has_commercial_mode();
  } else {
    clear_has_commercial_mode();
  }
  commercial_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commercial_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.commercial_mode)
}

// optional string physical_mode = 6;
inline bool Uris::has_physical_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Uris::set_has_physical_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Uris::clear_has_physical_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Uris::clear_physical_mode() {
  physical_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_physical_mode();
}
inline const ::std::string& Uris::physical_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.physical_mode)
  return physical_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_physical_mode(const ::std::string& value) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.physical_mode)
}
inline void Uris::set_physical_mode(const char* value) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.physical_mode)
}
inline void Uris::set_physical_mode(const char* value, size_t size) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.physical_mode)
}
inline ::std::string* Uris::mutable_physical_mode() {
  set_has_physical_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.physical_mode)
  return physical_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_physical_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.physical_mode)
  clear_has_physical_mode();
  return physical_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_physical_mode(::std::string* physical_mode) {
  if (physical_mode != NULL) {
    set_has_physical_mode();
  } else {
    clear_has_physical_mode();
  }
  physical_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.physical_mode)
}

// optional string network = 7;
inline bool Uris::has_network() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Uris::set_has_network() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Uris::clear_has_network() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Uris::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network();
}
inline const ::std::string& Uris::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_network(const ::std::string& value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.network)
}
inline void Uris::set_network(const char* value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.network)
}
inline void Uris::set_network(const char* value, size_t size) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.network)
}
inline ::std::string* Uris::mutable_network() {
  set_has_network();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.network)
  clear_has_network();
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    set_has_network();
  } else {
    clear_has_network();
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.network)
}

// optional string note = 8;
inline bool Uris::has_note() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Uris::set_has_note() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Uris::clear_has_note() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Uris::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_note();
}
inline const ::std::string& Uris::note() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.note)
  return note_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_note(const ::std::string& value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.note)
}
inline void Uris::set_note(const char* value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.note)
}
inline void Uris::set_note(const char* value, size_t size) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.note)
}
inline ::std::string* Uris::mutable_note() {
  set_has_note();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_note() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.note)
  clear_has_note();
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    set_has_note();
  } else {
    clear_has_note();
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.note)
}

// optional string journey_pattern = 9;
inline bool Uris::has_journey_pattern() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Uris::set_has_journey_pattern() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Uris::clear_has_journey_pattern() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Uris::clear_journey_pattern() {
  journey_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_journey_pattern();
}
inline const ::std::string& Uris::journey_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.journey_pattern)
  return journey_pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_journey_pattern(const ::std::string& value) {
  set_has_journey_pattern();
  journey_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.journey_pattern)
}
inline void Uris::set_journey_pattern(const char* value) {
  set_has_journey_pattern();
  journey_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.journey_pattern)
}
inline void Uris::set_journey_pattern(const char* value, size_t size) {
  set_has_journey_pattern();
  journey_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.journey_pattern)
}
inline ::std::string* Uris::mutable_journey_pattern() {
  set_has_journey_pattern();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.journey_pattern)
  return journey_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uris::release_journey_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.journey_pattern)
  clear_has_journey_pattern();
  return journey_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uris::set_allocated_journey_pattern(::std::string* journey_pattern) {
  if (journey_pattern != NULL) {
    set_has_journey_pattern();
  } else {
    clear_has_journey_pattern();
  }
  journey_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), journey_pattern);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.journey_pattern)
}

// -------------------------------------------------------------------

// Cost

// optional double value = 1;
inline bool Cost::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Cost::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Cost::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Cost::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double Cost::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Cost.value)
  return value_;
}
inline void Cost::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Cost.value)
}

// optional string currency = 2;
inline bool Cost::has_currency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Cost::set_has_currency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Cost::clear_has_currency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Cost::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
inline const ::std::string& Cost::currency() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Cost.currency)
  return currency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cost::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Cost.currency)
}
inline void Cost::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Cost.currency)
}
inline void Cost::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Cost.currency)
}
inline ::std::string* Cost::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Cost.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cost::release_currency() {
  // @@protoc_insertion_point(field_release:pbnavitia.Cost.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cost::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Cost.currency)
}

// -------------------------------------------------------------------

// Ticket

// optional string id = 1;
inline bool Ticket::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ticket::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ticket::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ticket::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Ticket::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.id)
}
inline void Ticket::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.id)
}
inline void Ticket::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.id)
}
inline ::std::string* Ticket::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ticket::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.id)
}

// optional string name = 2;
inline bool Ticket::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ticket::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ticket::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ticket::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Ticket::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.name)
}
inline void Ticket::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.name)
}
inline void Ticket::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.name)
}
inline ::std::string* Ticket::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ticket::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.name)
}

// optional .pbnavitia.Cost cost = 3;
inline bool Ticket::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ticket::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ticket::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ticket::clear_cost() {
  if (cost_ != NULL) cost_->::pbnavitia::Cost::Clear();
  clear_has_cost();
}
inline const ::pbnavitia::Cost& Ticket::cost() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.cost)
  return cost_ != NULL ? *cost_ : *default_instance_->cost_;
}
inline ::pbnavitia::Cost* Ticket::mutable_cost() {
  set_has_cost();
  if (cost_ == NULL) {
    cost_ = new ::pbnavitia::Cost;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.cost)
  return cost_;
}
inline ::pbnavitia::Cost* Ticket::release_cost() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.cost)
  clear_has_cost();
  ::pbnavitia::Cost* temp = cost_;
  cost_ = NULL;
  return temp;
}
inline void Ticket::set_allocated_cost(::pbnavitia::Cost* cost) {
  delete cost_;
  cost_ = cost;
  if (cost) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.cost)
}

// repeated string section_id = 4;
inline int Ticket::section_id_size() const {
  return section_id_.size();
}
inline void Ticket::clear_section_id() {
  section_id_.Clear();
}
inline const ::std::string& Ticket::section_id(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.section_id)
  return section_id_.Get(index);
}
inline ::std::string* Ticket::mutable_section_id(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.section_id)
  return section_id_.Mutable(index);
}
inline void Ticket::set_section_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.section_id)
  section_id_.Mutable(index)->assign(value);
}
inline void Ticket::set_section_id(int index, const char* value) {
  section_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.section_id)
}
inline void Ticket::set_section_id(int index, const char* value, size_t size) {
  section_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.section_id)
}
inline ::std::string* Ticket::add_section_id() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Ticket.section_id)
  return section_id_.Add();
}
inline void Ticket::add_section_id(const ::std::string& value) {
  section_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Ticket.section_id)
}
inline void Ticket::add_section_id(const char* value) {
  section_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Ticket.section_id)
}
inline void Ticket::add_section_id(const char* value, size_t size) {
  section_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Ticket.section_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Ticket::section_id() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Ticket.section_id)
  return section_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Ticket::mutable_section_id() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Ticket.section_id)
  return &section_id_;
}

// optional bool found = 5;
inline bool Ticket::has_found() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ticket::set_has_found() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ticket::clear_has_found() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ticket::clear_found() {
  found_ = false;
  clear_has_found();
}
inline bool Ticket::found() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.found)
  return found_;
}
inline void Ticket::set_found(bool value) {
  set_has_found();
  found_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.found)
}

// optional string comment = 6;
inline bool Ticket::has_comment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ticket::set_has_comment() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ticket::clear_has_comment() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ticket::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& Ticket::comment() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.comment)
}
inline void Ticket::set_comment(const char* value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.comment)
}
inline void Ticket::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.comment)
}
inline ::std::string* Ticket::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ticket::release_comment() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.comment)
}

// optional string source_id = 7;
inline bool Ticket::has_source_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ticket::set_has_source_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ticket::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ticket::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_id();
}
inline const ::std::string& Ticket::source_id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.source_id)
  return source_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_source_id(const ::std::string& value) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.source_id)
}
inline void Ticket::set_source_id(const char* value) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.source_id)
}
inline void Ticket::set_source_id(const char* value, size_t size) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.source_id)
}
inline ::std::string* Ticket::mutable_source_id() {
  set_has_source_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ticket::release_source_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.source_id)
  clear_has_source_id();
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticket::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    set_has_source_id();
  } else {
    clear_has_source_id();
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.source_id)
}

// -------------------------------------------------------------------

// Fare

// optional .pbnavitia.Cost total = 1;
inline bool Fare::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fare::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fare::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fare::clear_total() {
  if (total_ != NULL) total_->::pbnavitia::Cost::Clear();
  clear_has_total();
}
inline const ::pbnavitia::Cost& Fare::total() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Fare.total)
  return total_ != NULL ? *total_ : *default_instance_->total_;
}
inline ::pbnavitia::Cost* Fare::mutable_total() {
  set_has_total();
  if (total_ == NULL) {
    total_ = new ::pbnavitia::Cost;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Fare.total)
  return total_;
}
inline ::pbnavitia::Cost* Fare::release_total() {
  // @@protoc_insertion_point(field_release:pbnavitia.Fare.total)
  clear_has_total();
  ::pbnavitia::Cost* temp = total_;
  total_ = NULL;
  return temp;
}
inline void Fare::set_allocated_total(::pbnavitia::Cost* total) {
  delete total_;
  total_ = total;
  if (total) {
    set_has_total();
  } else {
    clear_has_total();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Fare.total)
}

// repeated string ticket_id = 2;
inline int Fare::ticket_id_size() const {
  return ticket_id_.size();
}
inline void Fare::clear_ticket_id() {
  ticket_id_.Clear();
}
inline const ::std::string& Fare::ticket_id(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Fare.ticket_id)
  return ticket_id_.Get(index);
}
inline ::std::string* Fare::mutable_ticket_id(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Fare.ticket_id)
  return ticket_id_.Mutable(index);
}
inline void Fare::set_ticket_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Fare.ticket_id)
  ticket_id_.Mutable(index)->assign(value);
}
inline void Fare::set_ticket_id(int index, const char* value) {
  ticket_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Fare.ticket_id)
}
inline void Fare::set_ticket_id(int index, const char* value, size_t size) {
  ticket_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Fare.ticket_id)
}
inline ::std::string* Fare::add_ticket_id() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Fare.ticket_id)
  return ticket_id_.Add();
}
inline void Fare::add_ticket_id(const ::std::string& value) {
  ticket_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Fare.ticket_id)
}
inline void Fare::add_ticket_id(const char* value) {
  ticket_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Fare.ticket_id)
}
inline void Fare::add_ticket_id(const char* value, size_t size) {
  ticket_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Fare.ticket_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Fare::ticket_id() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Fare.ticket_id)
  return ticket_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Fare::mutable_ticket_id() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Fare.ticket_id)
  return &ticket_id_;
}

// optional bool found = 3;
inline bool Fare::has_found() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fare::set_has_found() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fare::clear_has_found() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fare::clear_found() {
  found_ = false;
  clear_has_found();
}
inline bool Fare::found() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Fare.found)
  return found_;
}
inline void Fare::set_found(bool value) {
  set_has_found();
  found_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Fare.found)
}

// -------------------------------------------------------------------

// Co2Emission

// optional double value = 1;
inline bool Co2Emission::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Co2Emission::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Co2Emission::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Co2Emission::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double Co2Emission::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Co2Emission.value)
  return value_;
}
inline void Co2Emission::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Co2Emission.value)
}

// optional string unit = 2;
inline bool Co2Emission::has_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Co2Emission::set_has_unit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Co2Emission::clear_has_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Co2Emission::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit();
}
inline const ::std::string& Co2Emission::unit() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Co2Emission.unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Co2Emission::set_unit(const ::std::string& value) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Co2Emission.unit)
}
inline void Co2Emission::set_unit(const char* value) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Co2Emission.unit)
}
inline void Co2Emission::set_unit(const char* value, size_t size) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Co2Emission.unit)
}
inline ::std::string* Co2Emission::mutable_unit() {
  set_has_unit();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Co2Emission.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Co2Emission::release_unit() {
  // @@protoc_insertion_point(field_release:pbnavitia.Co2Emission.unit)
  clear_has_unit();
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Co2Emission::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Co2Emission.unit)
}

// -------------------------------------------------------------------

// Durations

// optional int32 total = 1;
inline bool Durations::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Durations::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Durations::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Durations::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 Durations::total() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.total)
  return total_;
}
inline void Durations::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.total)
}

// optional int32 walking = 2;
inline bool Durations::has_walking() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Durations::set_has_walking() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Durations::clear_has_walking() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Durations::clear_walking() {
  walking_ = 0;
  clear_has_walking();
}
inline ::google::protobuf::int32 Durations::walking() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.walking)
  return walking_;
}
inline void Durations::set_walking(::google::protobuf::int32 value) {
  set_has_walking();
  walking_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.walking)
}

// optional int32 bike = 3;
inline bool Durations::has_bike() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Durations::set_has_bike() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Durations::clear_has_bike() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Durations::clear_bike() {
  bike_ = 0;
  clear_has_bike();
}
inline ::google::protobuf::int32 Durations::bike() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.bike)
  return bike_;
}
inline void Durations::set_bike(::google::protobuf::int32 value) {
  set_has_bike();
  bike_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.bike)
}

// optional int32 car = 4;
inline bool Durations::has_car() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Durations::set_has_car() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Durations::clear_has_car() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Durations::clear_car() {
  car_ = 0;
  clear_has_car();
}
inline ::google::protobuf::int32 Durations::car() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.car)
  return car_;
}
inline void Durations::set_car(::google::protobuf::int32 value) {
  set_has_car();
  car_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.car)
}

// optional int32 ridesharing = 5;
inline bool Durations::has_ridesharing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Durations::set_has_ridesharing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Durations::clear_has_ridesharing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Durations::clear_ridesharing() {
  ridesharing_ = 0;
  clear_has_ridesharing();
}
inline ::google::protobuf::int32 Durations::ridesharing() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.ridesharing)
  return ridesharing_;
}
inline void Durations::set_ridesharing(::google::protobuf::int32 value) {
  set_has_ridesharing();
  ridesharing_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.ridesharing)
}

// optional int32 taxi = 6;
inline bool Durations::has_taxi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Durations::set_has_taxi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Durations::clear_has_taxi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Durations::clear_taxi() {
  taxi_ = 0;
  clear_has_taxi();
}
inline ::google::protobuf::int32 Durations::taxi() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.taxi)
  return taxi_;
}
inline void Durations::set_taxi(::google::protobuf::int32 value) {
  set_has_taxi();
  taxi_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.taxi)
}

// -------------------------------------------------------------------

// Distances

// optional int32 walking = 1;
inline bool Distances::has_walking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Distances::set_has_walking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Distances::clear_has_walking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Distances::clear_walking() {
  walking_ = 0;
  clear_has_walking();
}
inline ::google::protobuf::int32 Distances::walking() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.walking)
  return walking_;
}
inline void Distances::set_walking(::google::protobuf::int32 value) {
  set_has_walking();
  walking_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.walking)
}

// optional int32 bike = 2;
inline bool Distances::has_bike() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Distances::set_has_bike() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Distances::clear_has_bike() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Distances::clear_bike() {
  bike_ = 0;
  clear_has_bike();
}
inline ::google::protobuf::int32 Distances::bike() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.bike)
  return bike_;
}
inline void Distances::set_bike(::google::protobuf::int32 value) {
  set_has_bike();
  bike_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.bike)
}

// optional int32 car = 3;
inline bool Distances::has_car() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Distances::set_has_car() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Distances::clear_has_car() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Distances::clear_car() {
  car_ = 0;
  clear_has_car();
}
inline ::google::protobuf::int32 Distances::car() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.car)
  return car_;
}
inline void Distances::set_car(::google::protobuf::int32 value) {
  set_has_car();
  car_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.car)
}

// optional int32 ridesharing = 4;
inline bool Distances::has_ridesharing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Distances::set_has_ridesharing() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Distances::clear_has_ridesharing() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Distances::clear_ridesharing() {
  ridesharing_ = 0;
  clear_has_ridesharing();
}
inline ::google::protobuf::int32 Distances::ridesharing() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.ridesharing)
  return ridesharing_;
}
inline void Distances::set_ridesharing(::google::protobuf::int32 value) {
  set_has_ridesharing();
  ridesharing_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.ridesharing)
}

// optional int32 taxi = 5;
inline bool Distances::has_taxi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Distances::set_has_taxi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Distances::clear_has_taxi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Distances::clear_taxi() {
  taxi_ = 0;
  clear_has_taxi();
}
inline ::google::protobuf::int32 Distances::taxi() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.taxi)
  return taxi_;
}
inline void Distances::set_taxi(::google::protobuf::int32 value) {
  set_has_taxi();
  taxi_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.taxi)
}

// -------------------------------------------------------------------

// IndividualRating

// optional double value = 1;
inline bool IndividualRating::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndividualRating::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndividualRating::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndividualRating::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double IndividualRating::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualRating.value)
  return value_;
}
inline void IndividualRating::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualRating.value)
}

// optional uint32 count = 2;
inline bool IndividualRating::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndividualRating::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndividualRating::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndividualRating::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 IndividualRating::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualRating.count)
  return count_;
}
inline void IndividualRating::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualRating.count)
}

// optional double scale_min = 3;
inline bool IndividualRating::has_scale_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndividualRating::set_has_scale_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndividualRating::clear_has_scale_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndividualRating::clear_scale_min() {
  scale_min_ = 0;
  clear_has_scale_min();
}
inline double IndividualRating::scale_min() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualRating.scale_min)
  return scale_min_;
}
inline void IndividualRating::set_scale_min(double value) {
  set_has_scale_min();
  scale_min_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualRating.scale_min)
}

// optional double scale_max = 4;
inline bool IndividualRating::has_scale_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndividualRating::set_has_scale_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndividualRating::clear_has_scale_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndividualRating::clear_scale_max() {
  scale_max_ = 0;
  clear_has_scale_max();
}
inline double IndividualRating::scale_max() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualRating.scale_max)
  return scale_max_;
}
inline void IndividualRating::set_scale_max(double value) {
  set_has_scale_max();
  scale_max_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualRating.scale_max)
}

// -------------------------------------------------------------------

// IndividualInformation

// optional string alias = 1;
inline bool IndividualInformation::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndividualInformation::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndividualInformation::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndividualInformation::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& IndividualInformation::alias() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualInformation.alias)
  return alias_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndividualInformation::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualInformation.alias)
}
inline void IndividualInformation::set_alias(const char* value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.IndividualInformation.alias)
}
inline void IndividualInformation::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.IndividualInformation.alias)
}
inline ::std::string* IndividualInformation::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:pbnavitia.IndividualInformation.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndividualInformation::release_alias() {
  // @@protoc_insertion_point(field_release:pbnavitia.IndividualInformation.alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndividualInformation::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.IndividualInformation.alias)
}

// optional string image = 2;
inline bool IndividualInformation::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndividualInformation::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndividualInformation::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndividualInformation::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
inline const ::std::string& IndividualInformation::image() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualInformation.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndividualInformation::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualInformation.image)
}
inline void IndividualInformation::set_image(const char* value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.IndividualInformation.image)
}
inline void IndividualInformation::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.IndividualInformation.image)
}
inline ::std::string* IndividualInformation::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:pbnavitia.IndividualInformation.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndividualInformation::release_image() {
  // @@protoc_insertion_point(field_release:pbnavitia.IndividualInformation.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndividualInformation::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.IndividualInformation.image)
}

// optional .pbnavitia.GenderType gender = 3;
inline bool IndividualInformation::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IndividualInformation::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IndividualInformation::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IndividualInformation::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline ::pbnavitia::GenderType IndividualInformation::gender() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualInformation.gender)
  return static_cast< ::pbnavitia::GenderType >(gender_);
}
inline void IndividualInformation::set_gender(::pbnavitia::GenderType value) {
  assert(::pbnavitia::GenderType_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualInformation.gender)
}

// optional .pbnavitia.IndividualRating rating = 4;
inline bool IndividualInformation::has_rating() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IndividualInformation::set_has_rating() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IndividualInformation::clear_has_rating() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IndividualInformation::clear_rating() {
  if (rating_ != NULL) rating_->::pbnavitia::IndividualRating::Clear();
  clear_has_rating();
}
inline const ::pbnavitia::IndividualRating& IndividualInformation::rating() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualInformation.rating)
  return rating_ != NULL ? *rating_ : *default_instance_->rating_;
}
inline ::pbnavitia::IndividualRating* IndividualInformation::mutable_rating() {
  set_has_rating();
  if (rating_ == NULL) {
    rating_ = new ::pbnavitia::IndividualRating;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.IndividualInformation.rating)
  return rating_;
}
inline ::pbnavitia::IndividualRating* IndividualInformation::release_rating() {
  // @@protoc_insertion_point(field_release:pbnavitia.IndividualInformation.rating)
  clear_has_rating();
  ::pbnavitia::IndividualRating* temp = rating_;
  rating_ = NULL;
  return temp;
}
inline void IndividualInformation::set_allocated_rating(::pbnavitia::IndividualRating* rating) {
  delete rating_;
  rating_ = rating;
  if (rating) {
    set_has_rating();
  } else {
    clear_has_rating();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.IndividualInformation.rating)
}

// -------------------------------------------------------------------

// SeatsDescription

// optional uint32 total = 1;
inline bool SeatsDescription::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeatsDescription::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeatsDescription::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeatsDescription::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 SeatsDescription::total() const {
  // @@protoc_insertion_point(field_get:pbnavitia.SeatsDescription.total)
  return total_;
}
inline void SeatsDescription::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.SeatsDescription.total)
}

// optional uint32 available = 2;
inline bool SeatsDescription::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeatsDescription::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeatsDescription::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeatsDescription::clear_available() {
  available_ = 0u;
  clear_has_available();
}
inline ::google::protobuf::uint32 SeatsDescription::available() const {
  // @@protoc_insertion_point(field_get:pbnavitia.SeatsDescription.available)
  return available_;
}
inline void SeatsDescription::set_available(::google::protobuf::uint32 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.SeatsDescription.available)
}

// -------------------------------------------------------------------

// ExternalLink

// optional string key = 1;
inline bool ExternalLink::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalLink::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalLink::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalLink::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& ExternalLink::key() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ExternalLink.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalLink::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.ExternalLink.key)
}
inline void ExternalLink::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.ExternalLink.key)
}
inline void ExternalLink::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ExternalLink.key)
}
inline ::std::string* ExternalLink::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pbnavitia.ExternalLink.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalLink::release_key() {
  // @@protoc_insertion_point(field_release:pbnavitia.ExternalLink.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalLink::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ExternalLink.key)
}

// optional string href = 2;
inline bool ExternalLink::has_href() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternalLink::set_has_href() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExternalLink::clear_has_href() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExternalLink::clear_href() {
  href_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_href();
}
inline const ::std::string& ExternalLink::href() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ExternalLink.href)
  return href_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalLink::set_href(const ::std::string& value) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.ExternalLink.href)
}
inline void ExternalLink::set_href(const char* value) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.ExternalLink.href)
}
inline void ExternalLink::set_href(const char* value, size_t size) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ExternalLink.href)
}
inline ::std::string* ExternalLink::mutable_href() {
  set_has_href();
  // @@protoc_insertion_point(field_mutable:pbnavitia.ExternalLink.href)
  return href_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExternalLink::release_href() {
  // @@protoc_insertion_point(field_release:pbnavitia.ExternalLink.href)
  clear_has_href();
  return href_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalLink::set_allocated_href(::std::string* href) {
  if (href != NULL) {
    set_has_href();
  } else {
    clear_has_href();
  }
  href_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), href);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ExternalLink.href)
}

// -------------------------------------------------------------------

// RidesharingInformation

// optional string operator = 1;
inline bool RidesharingInformation::has_operator_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RidesharingInformation::set_has_operator_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RidesharingInformation::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RidesharingInformation::clear_operator_() {
  operator__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operator_();
}
inline const ::std::string& RidesharingInformation::operator_() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.operator)
  return operator__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RidesharingInformation::set_operator_(const ::std::string& value) {
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.RidesharingInformation.operator)
}
inline void RidesharingInformation::set_operator_(const char* value) {
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.RidesharingInformation.operator)
}
inline void RidesharingInformation::set_operator_(const char* value, size_t size) {
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.RidesharingInformation.operator)
}
inline ::std::string* RidesharingInformation::mutable_operator_() {
  set_has_operator_();
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.operator)
  return operator__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RidesharingInformation::release_operator_() {
  // @@protoc_insertion_point(field_release:pbnavitia.RidesharingInformation.operator)
  clear_has_operator_();
  return operator__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RidesharingInformation::set_allocated_operator_(::std::string* operator_) {
  if (operator_ != NULL) {
    set_has_operator_();
  } else {
    clear_has_operator_();
  }
  operator__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operator_);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RidesharingInformation.operator)
}

// optional string network = 2;
inline bool RidesharingInformation::has_network() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RidesharingInformation::set_has_network() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RidesharingInformation::clear_has_network() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RidesharingInformation::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network();
}
inline const ::std::string& RidesharingInformation::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RidesharingInformation::set_network(const ::std::string& value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.RidesharingInformation.network)
}
inline void RidesharingInformation::set_network(const char* value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.RidesharingInformation.network)
}
inline void RidesharingInformation::set_network(const char* value, size_t size) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.RidesharingInformation.network)
}
inline ::std::string* RidesharingInformation::mutable_network() {
  set_has_network();
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RidesharingInformation::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.RidesharingInformation.network)
  clear_has_network();
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RidesharingInformation::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    set_has_network();
  } else {
    clear_has_network();
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RidesharingInformation.network)
}

// optional .pbnavitia.IndividualInformation driver = 3;
inline bool RidesharingInformation::has_driver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RidesharingInformation::set_has_driver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RidesharingInformation::clear_has_driver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RidesharingInformation::clear_driver() {
  if (driver_ != NULL) driver_->::pbnavitia::IndividualInformation::Clear();
  clear_has_driver();
}
inline const ::pbnavitia::IndividualInformation& RidesharingInformation::driver() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.driver)
  return driver_ != NULL ? *driver_ : *default_instance_->driver_;
}
inline ::pbnavitia::IndividualInformation* RidesharingInformation::mutable_driver() {
  set_has_driver();
  if (driver_ == NULL) {
    driver_ = new ::pbnavitia::IndividualInformation;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.driver)
  return driver_;
}
inline ::pbnavitia::IndividualInformation* RidesharingInformation::release_driver() {
  // @@protoc_insertion_point(field_release:pbnavitia.RidesharingInformation.driver)
  clear_has_driver();
  ::pbnavitia::IndividualInformation* temp = driver_;
  driver_ = NULL;
  return temp;
}
inline void RidesharingInformation::set_allocated_driver(::pbnavitia::IndividualInformation* driver) {
  delete driver_;
  driver_ = driver;
  if (driver) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RidesharingInformation.driver)
}

// optional .pbnavitia.SeatsDescription seats = 4;
inline bool RidesharingInformation::has_seats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RidesharingInformation::set_has_seats() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RidesharingInformation::clear_has_seats() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RidesharingInformation::clear_seats() {
  if (seats_ != NULL) seats_->::pbnavitia::SeatsDescription::Clear();
  clear_has_seats();
}
inline const ::pbnavitia::SeatsDescription& RidesharingInformation::seats() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.seats)
  return seats_ != NULL ? *seats_ : *default_instance_->seats_;
}
inline ::pbnavitia::SeatsDescription* RidesharingInformation::mutable_seats() {
  set_has_seats();
  if (seats_ == NULL) {
    seats_ = new ::pbnavitia::SeatsDescription;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.seats)
  return seats_;
}
inline ::pbnavitia::SeatsDescription* RidesharingInformation::release_seats() {
  // @@protoc_insertion_point(field_release:pbnavitia.RidesharingInformation.seats)
  clear_has_seats();
  ::pbnavitia::SeatsDescription* temp = seats_;
  seats_ = NULL;
  return temp;
}
inline void RidesharingInformation::set_allocated_seats(::pbnavitia::SeatsDescription* seats) {
  delete seats_;
  seats_ = seats;
  if (seats) {
    set_has_seats();
  } else {
    clear_has_seats();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RidesharingInformation.seats)
}

// repeated .pbnavitia.ExternalLink links = 5;
inline int RidesharingInformation::links_size() const {
  return links_.size();
}
inline void RidesharingInformation::clear_links() {
  links_.Clear();
}
inline const ::pbnavitia::ExternalLink& RidesharingInformation::links(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.links)
  return links_.Get(index);
}
inline ::pbnavitia::ExternalLink* RidesharingInformation::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.links)
  return links_.Mutable(index);
}
inline ::pbnavitia::ExternalLink* RidesharingInformation::add_links() {
  // @@protoc_insertion_point(field_add:pbnavitia.RidesharingInformation.links)
  return links_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::ExternalLink >*
RidesharingInformation::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.RidesharingInformation.links)
  return &links_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ExternalLink >&
RidesharingInformation::links() const {
  // @@protoc_insertion_point(field_list:pbnavitia.RidesharingInformation.links)
  return links_;
}

// -------------------------------------------------------------------

// FeedPublisher

// required string id = 1;
inline bool FeedPublisher::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedPublisher::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedPublisher::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedPublisher::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& FeedPublisher::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FeedPublisher.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedPublisher::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FeedPublisher.id)
}
inline void FeedPublisher::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FeedPublisher.id)
}
inline void FeedPublisher::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FeedPublisher.id)
}
inline ::std::string* FeedPublisher::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FeedPublisher.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedPublisher::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.FeedPublisher.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedPublisher::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FeedPublisher.id)
}

// optional string name = 2;
inline bool FeedPublisher::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedPublisher::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedPublisher::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedPublisher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FeedPublisher::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FeedPublisher.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedPublisher::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FeedPublisher.name)
}
inline void FeedPublisher::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FeedPublisher.name)
}
inline void FeedPublisher::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FeedPublisher.name)
}
inline ::std::string* FeedPublisher::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FeedPublisher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedPublisher::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.FeedPublisher.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedPublisher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FeedPublisher.name)
}

// optional string url = 3;
inline bool FeedPublisher::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeedPublisher::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeedPublisher::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeedPublisher::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& FeedPublisher::url() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FeedPublisher.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedPublisher::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FeedPublisher.url)
}
inline void FeedPublisher::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FeedPublisher.url)
}
inline void FeedPublisher::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FeedPublisher.url)
}
inline ::std::string* FeedPublisher::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FeedPublisher.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedPublisher::release_url() {
  // @@protoc_insertion_point(field_release:pbnavitia.FeedPublisher.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedPublisher::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FeedPublisher.url)
}

// optional string license = 4;
inline bool FeedPublisher::has_license() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeedPublisher::set_has_license() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeedPublisher::clear_has_license() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeedPublisher::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_license();
}
inline const ::std::string& FeedPublisher::license() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FeedPublisher.license)
  return license_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedPublisher::set_license(const ::std::string& value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FeedPublisher.license)
}
inline void FeedPublisher::set_license(const char* value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FeedPublisher.license)
}
inline void FeedPublisher::set_license(const char* value, size_t size) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FeedPublisher.license)
}
inline ::std::string* FeedPublisher::mutable_license() {
  set_has_license();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FeedPublisher.license)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedPublisher::release_license() {
  // @@protoc_insertion_point(field_release:pbnavitia.FeedPublisher.license)
  clear_has_license();
  return license_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedPublisher::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    set_has_license();
  } else {
    clear_has_license();
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FeedPublisher.license)
}

// -------------------------------------------------------------------

// Section

// optional .pbnavitia.SectionType type = 1;
inline bool Section::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Section::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Section::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Section::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pbnavitia::SectionType Section::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.type)
  return static_cast< ::pbnavitia::SectionType >(type_);
}
inline void Section::set_type(::pbnavitia::SectionType value) {
  assert(::pbnavitia::SectionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.type)
}

// optional .pbnavitia.PtObject origin = 2;
inline bool Section::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Section::set_has_origin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Section::clear_has_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Section::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
  clear_has_origin();
}
inline const ::pbnavitia::PtObject& Section::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pbnavitia::PtObject* Section::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.origin)
  return origin_;
}
inline ::pbnavitia::PtObject* Section::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.origin)
  clear_has_origin();
  ::pbnavitia::PtObject* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void Section::set_allocated_origin(::pbnavitia::PtObject* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.origin)
}

// optional .pbnavitia.PtObject destination = 3;
inline bool Section::has_destination() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Section::set_has_destination() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Section::clear_has_destination() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Section::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
  clear_has_destination();
}
inline const ::pbnavitia::PtObject& Section::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
inline ::pbnavitia::PtObject* Section::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.destination)
  return destination_;
}
inline ::pbnavitia::PtObject* Section::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.destination)
  clear_has_destination();
  ::pbnavitia::PtObject* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline void Section::set_allocated_destination(::pbnavitia::PtObject* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.destination)
}

// optional .pbnavitia.PtDisplayInfo pt_display_informations = 4;
inline bool Section::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Section::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Section::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Section::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
inline const ::pbnavitia::PtDisplayInfo& Section::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* Section::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.pt_display_informations)
  return pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* Section::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
inline void Section::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.pt_display_informations)
}

// optional .pbnavitia.Uris uris = 5;
inline bool Section::has_uris() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Section::set_has_uris() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Section::clear_has_uris() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Section::clear_uris() {
  if (uris_ != NULL) uris_->::pbnavitia::Uris::Clear();
  clear_has_uris();
}
inline const ::pbnavitia::Uris& Section::uris() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.uris)
  return uris_ != NULL ? *uris_ : *default_instance_->uris_;
}
inline ::pbnavitia::Uris* Section::mutable_uris() {
  set_has_uris();
  if (uris_ == NULL) {
    uris_ = new ::pbnavitia::Uris;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.uris)
  return uris_;
}
inline ::pbnavitia::Uris* Section::release_uris() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.uris)
  clear_has_uris();
  ::pbnavitia::Uris* temp = uris_;
  uris_ = NULL;
  return temp;
}
inline void Section::set_allocated_uris(::pbnavitia::Uris* uris) {
  delete uris_;
  uris_ = uris;
  if (uris) {
    set_has_uris();
  } else {
    clear_has_uris();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.uris)
}

// optional .pbnavitia.VehicleJourney vehicle_journey = 9;
inline bool Section::has_vehicle_journey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Section::set_has_vehicle_journey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Section::clear_has_vehicle_journey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Section::clear_vehicle_journey() {
  if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
  clear_has_vehicle_journey();
}
inline const ::pbnavitia::VehicleJourney& Section::vehicle_journey() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.vehicle_journey)
  return vehicle_journey_ != NULL ? *vehicle_journey_ : *default_instance_->vehicle_journey_;
}
inline ::pbnavitia::VehicleJourney* Section::mutable_vehicle_journey() {
  set_has_vehicle_journey();
  if (vehicle_journey_ == NULL) {
    vehicle_journey_ = new ::pbnavitia::VehicleJourney;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.vehicle_journey)
  return vehicle_journey_;
}
inline ::pbnavitia::VehicleJourney* Section::release_vehicle_journey() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.vehicle_journey)
  clear_has_vehicle_journey();
  ::pbnavitia::VehicleJourney* temp = vehicle_journey_;
  vehicle_journey_ = NULL;
  return temp;
}
inline void Section::set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey) {
  delete vehicle_journey_;
  vehicle_journey_ = vehicle_journey;
  if (vehicle_journey) {
    set_has_vehicle_journey();
  } else {
    clear_has_vehicle_journey();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.vehicle_journey)
}

// repeated .pbnavitia.StopDateTime stop_date_times = 10;
inline int Section::stop_date_times_size() const {
  return stop_date_times_.size();
}
inline void Section::clear_stop_date_times() {
  stop_date_times_.Clear();
}
inline const ::pbnavitia::StopDateTime& Section::stop_date_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.stop_date_times)
  return stop_date_times_.Get(index);
}
inline ::pbnavitia::StopDateTime* Section::mutable_stop_date_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.stop_date_times)
  return stop_date_times_.Mutable(index);
}
inline ::pbnavitia::StopDateTime* Section::add_stop_date_times() {
  // @@protoc_insertion_point(field_add:pbnavitia.Section.stop_date_times)
  return stop_date_times_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopDateTime >*
Section::mutable_stop_date_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Section.stop_date_times)
  return &stop_date_times_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopDateTime >&
Section::stop_date_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Section.stop_date_times)
  return stop_date_times_;
}

// optional .pbnavitia.StreetNetwork street_network = 12;
inline bool Section::has_street_network() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Section::set_has_street_network() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Section::clear_has_street_network() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Section::clear_street_network() {
  if (street_network_ != NULL) street_network_->::pbnavitia::StreetNetwork::Clear();
  clear_has_street_network();
}
inline const ::pbnavitia::StreetNetwork& Section::street_network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.street_network)
  return street_network_ != NULL ? *street_network_ : *default_instance_->street_network_;
}
inline ::pbnavitia::StreetNetwork* Section::mutable_street_network() {
  set_has_street_network();
  if (street_network_ == NULL) {
    street_network_ = new ::pbnavitia::StreetNetwork;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.street_network)
  return street_network_;
}
inline ::pbnavitia::StreetNetwork* Section::release_street_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.street_network)
  clear_has_street_network();
  ::pbnavitia::StreetNetwork* temp = street_network_;
  street_network_ = NULL;
  return temp;
}
inline void Section::set_allocated_street_network(::pbnavitia::StreetNetwork* street_network) {
  delete street_network_;
  street_network_ = street_network;
  if (street_network) {
    set_has_street_network();
  } else {
    clear_has_street_network();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.street_network)
}

// optional int32 cycle_lane_length = 30;
inline bool Section::has_cycle_lane_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Section::set_has_cycle_lane_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Section::clear_has_cycle_lane_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Section::clear_cycle_lane_length() {
  cycle_lane_length_ = 0;
  clear_has_cycle_lane_length();
}
inline ::google::protobuf::int32 Section::cycle_lane_length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.cycle_lane_length)
  return cycle_lane_length_;
}
inline void Section::set_cycle_lane_length(::google::protobuf::int32 value) {
  set_has_cycle_lane_length();
  cycle_lane_length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.cycle_lane_length)
}

// optional .pbnavitia.TransferType transfer_type = 13;
inline bool Section::has_transfer_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Section::set_has_transfer_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Section::clear_has_transfer_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Section::clear_transfer_type() {
  transfer_type_ = 1;
  clear_has_transfer_type();
}
inline ::pbnavitia::TransferType Section::transfer_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.transfer_type)
  return static_cast< ::pbnavitia::TransferType >(transfer_type_);
}
inline void Section::set_transfer_type(::pbnavitia::TransferType value) {
  assert(::pbnavitia::TransferType_IsValid(value));
  set_has_transfer_type();
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.transfer_type)
}

// repeated .pbnavitia.Journey ridesharing_journeys = 28;
inline int Section::ridesharing_journeys_size() const {
  return ridesharing_journeys_.size();
}
inline void Section::clear_ridesharing_journeys() {
  ridesharing_journeys_.Clear();
}
inline const ::pbnavitia::Journey& Section::ridesharing_journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.ridesharing_journeys)
  return ridesharing_journeys_.Get(index);
}
inline ::pbnavitia::Journey* Section::mutable_ridesharing_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.ridesharing_journeys)
  return ridesharing_journeys_.Mutable(index);
}
inline ::pbnavitia::Journey* Section::add_ridesharing_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.Section.ridesharing_journeys)
  return ridesharing_journeys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
Section::mutable_ridesharing_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Section.ridesharing_journeys)
  return &ridesharing_journeys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
Section::ridesharing_journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Section.ridesharing_journeys)
  return ridesharing_journeys_;
}

// optional .pbnavitia.RidesharingInformation ridesharing_information = 29;
inline bool Section::has_ridesharing_information() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Section::set_has_ridesharing_information() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Section::clear_has_ridesharing_information() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Section::clear_ridesharing_information() {
  if (ridesharing_information_ != NULL) ridesharing_information_->::pbnavitia::RidesharingInformation::Clear();
  clear_has_ridesharing_information();
}
inline const ::pbnavitia::RidesharingInformation& Section::ridesharing_information() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.ridesharing_information)
  return ridesharing_information_ != NULL ? *ridesharing_information_ : *default_instance_->ridesharing_information_;
}
inline ::pbnavitia::RidesharingInformation* Section::mutable_ridesharing_information() {
  set_has_ridesharing_information();
  if (ridesharing_information_ == NULL) {
    ridesharing_information_ = new ::pbnavitia::RidesharingInformation;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.ridesharing_information)
  return ridesharing_information_;
}
inline ::pbnavitia::RidesharingInformation* Section::release_ridesharing_information() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.ridesharing_information)
  clear_has_ridesharing_information();
  ::pbnavitia::RidesharingInformation* temp = ridesharing_information_;
  ridesharing_information_ = NULL;
  return temp;
}
inline void Section::set_allocated_ridesharing_information(::pbnavitia::RidesharingInformation* ridesharing_information) {
  delete ridesharing_information_;
  ridesharing_information_ = ridesharing_information;
  if (ridesharing_information) {
    set_has_ridesharing_information();
  } else {
    clear_has_ridesharing_information();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.ridesharing_information)
}

// repeated .pbnavitia.GeographicalCoord shape = 24;
inline int Section::shape_size() const {
  return shape_.size();
}
inline void Section::clear_shape() {
  shape_.Clear();
}
inline const ::pbnavitia::GeographicalCoord& Section::shape(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.shape)
  return shape_.Get(index);
}
inline ::pbnavitia::GeographicalCoord* Section::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.shape)
  return shape_.Mutable(index);
}
inline ::pbnavitia::GeographicalCoord* Section::add_shape() {
  // @@protoc_insertion_point(field_add:pbnavitia.Section.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
Section::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Section.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
Section::shape() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Section.shape)
  return shape_;
}

// optional int32 duration = 15;
inline bool Section::has_duration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Section::set_has_duration() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Section::clear_has_duration() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Section::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 Section::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.duration)
  return duration_;
}
inline void Section::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.duration)
}

// optional uint64 begin_date_time = 16;
inline bool Section::has_begin_date_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Section::set_has_begin_date_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Section::clear_has_begin_date_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Section::clear_begin_date_time() {
  begin_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_date_time();
}
inline ::google::protobuf::uint64 Section::begin_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.begin_date_time)
  return begin_date_time_;
}
inline void Section::set_begin_date_time(::google::protobuf::uint64 value) {
  set_has_begin_date_time();
  begin_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.begin_date_time)
}

// optional uint64 end_date_time = 17;
inline bool Section::has_end_date_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Section::set_has_end_date_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Section::clear_has_end_date_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Section::clear_end_date_time() {
  end_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_date_time();
}
inline ::google::protobuf::uint64 Section::end_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.end_date_time)
  return end_date_time_;
}
inline void Section::set_end_date_time(::google::protobuf::uint64 value) {
  set_has_end_date_time();
  end_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.end_date_time)
}

// optional uint64 base_begin_date_time = 25;
inline bool Section::has_base_begin_date_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Section::set_has_base_begin_date_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Section::clear_has_base_begin_date_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Section::clear_base_begin_date_time() {
  base_begin_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_begin_date_time();
}
inline ::google::protobuf::uint64 Section::base_begin_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.base_begin_date_time)
  return base_begin_date_time_;
}
inline void Section::set_base_begin_date_time(::google::protobuf::uint64 value) {
  set_has_base_begin_date_time();
  base_begin_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.base_begin_date_time)
}

// optional uint64 base_end_date_time = 26;
inline bool Section::has_base_end_date_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Section::set_has_base_end_date_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Section::clear_has_base_end_date_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Section::clear_base_end_date_time() {
  base_end_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_end_date_time();
}
inline ::google::protobuf::uint64 Section::base_end_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.base_end_date_time)
  return base_end_date_time_;
}
inline void Section::set_base_end_date_time(::google::protobuf::uint64 value) {
  set_has_base_end_date_time();
  base_end_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.base_end_date_time)
}

// optional .pbnavitia.RTLevel realtime_level = 27;
inline bool Section::has_realtime_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Section::set_has_realtime_level() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Section::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Section::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
inline ::pbnavitia::RTLevel Section::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
inline void Section::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.realtime_level)
}

// optional int32 length = 19;
inline bool Section::has_length() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Section::set_has_length() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Section::clear_has_length() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Section::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 Section::length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.length)
  return length_;
}
inline void Section::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.length)
}

// optional string id = 20;
inline bool Section::has_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Section::set_has_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Section::clear_has_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Section::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Section::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Section::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Section.id)
}
inline void Section::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Section.id)
}
inline void Section::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Section.id)
}
inline ::std::string* Section::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Section::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Section::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.id)
}

// optional .pbnavitia.Co2Emission co2_emission = 21;
inline bool Section::has_co2_emission() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Section::set_has_co2_emission() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Section::clear_has_co2_emission() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Section::clear_co2_emission() {
  if (co2_emission_ != NULL) co2_emission_->::pbnavitia::Co2Emission::Clear();
  clear_has_co2_emission();
}
inline const ::pbnavitia::Co2Emission& Section::co2_emission() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.co2_emission)
  return co2_emission_ != NULL ? *co2_emission_ : *default_instance_->co2_emission_;
}
inline ::pbnavitia::Co2Emission* Section::mutable_co2_emission() {
  set_has_co2_emission();
  if (co2_emission_ == NULL) {
    co2_emission_ = new ::pbnavitia::Co2Emission;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.co2_emission)
  return co2_emission_;
}
inline ::pbnavitia::Co2Emission* Section::release_co2_emission() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.co2_emission)
  clear_has_co2_emission();
  ::pbnavitia::Co2Emission* temp = co2_emission_;
  co2_emission_ = NULL;
  return temp;
}
inline void Section::set_allocated_co2_emission(::pbnavitia::Co2Emission* co2_emission) {
  delete co2_emission_;
  co2_emission_ = co2_emission;
  if (co2_emission) {
    set_has_co2_emission();
  } else {
    clear_has_co2_emission();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.co2_emission)
}

// repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 22;
inline int Section::additional_informations_size() const {
  return additional_informations_.size();
}
inline void Section::clear_additional_informations() {
  additional_informations_.Clear();
}
inline ::pbnavitia::SectionAdditionalInformationType Section::additional_informations(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.additional_informations)
  return static_cast< ::pbnavitia::SectionAdditionalInformationType >(additional_informations_.Get(index));
}
inline void Section::set_additional_informations(int index, ::pbnavitia::SectionAdditionalInformationType value) {
  assert(::pbnavitia::SectionAdditionalInformationType_IsValid(value));
  additional_informations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.Section.additional_informations)
}
inline void Section::add_additional_informations(::pbnavitia::SectionAdditionalInformationType value) {
  assert(::pbnavitia::SectionAdditionalInformationType_IsValid(value));
  additional_informations_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Section.additional_informations)
}
inline const ::google::protobuf::RepeatedField<int>&
Section::additional_informations() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Section.additional_informations)
  return additional_informations_;
}
inline ::google::protobuf::RepeatedField<int>*
Section::mutable_additional_informations() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Section.additional_informations)
  return &additional_informations_;
}

// -------------------------------------------------------------------

// Journey

// optional int32 duration = 1;
inline bool Journey::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Journey::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Journey::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Journey::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 Journey::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.duration)
  return duration_;
}
inline void Journey::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.duration)
}

// optional int32 nb_transfers = 2;
inline bool Journey::has_nb_transfers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Journey::set_has_nb_transfers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Journey::clear_has_nb_transfers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Journey::clear_nb_transfers() {
  nb_transfers_ = 0;
  clear_has_nb_transfers();
}
inline ::google::protobuf::int32 Journey::nb_transfers() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.nb_transfers)
  return nb_transfers_;
}
inline void Journey::set_nb_transfers(::google::protobuf::int32 value) {
  set_has_nb_transfers();
  nb_transfers_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.nb_transfers)
}

// optional uint64 departure_date_time = 3;
inline bool Journey::has_departure_date_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Journey::set_has_departure_date_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Journey::clear_has_departure_date_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Journey::clear_departure_date_time() {
  departure_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_departure_date_time();
}
inline ::google::protobuf::uint64 Journey::departure_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.departure_date_time)
  return departure_date_time_;
}
inline void Journey::set_departure_date_time(::google::protobuf::uint64 value) {
  set_has_departure_date_time();
  departure_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.departure_date_time)
}

// optional uint64 arrival_date_time = 4;
inline bool Journey::has_arrival_date_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Journey::set_has_arrival_date_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Journey::clear_has_arrival_date_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Journey::clear_arrival_date_time() {
  arrival_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_arrival_date_time();
}
inline ::google::protobuf::uint64 Journey::arrival_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.arrival_date_time)
  return arrival_date_time_;
}
inline void Journey::set_arrival_date_time(::google::protobuf::uint64 value) {
  set_has_arrival_date_time();
  arrival_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.arrival_date_time)
}

// optional uint64 requested_date_time = 5;
inline bool Journey::has_requested_date_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Journey::set_has_requested_date_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Journey::clear_has_requested_date_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Journey::clear_requested_date_time() {
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_requested_date_time();
}
inline ::google::protobuf::uint64 Journey::requested_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.requested_date_time)
  return requested_date_time_;
}
inline void Journey::set_requested_date_time(::google::protobuf::uint64 value) {
  set_has_requested_date_time();
  requested_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.requested_date_time)
}

// repeated .pbnavitia.Section sections = 6;
inline int Journey::sections_size() const {
  return sections_.size();
}
inline void Journey::clear_sections() {
  sections_.Clear();
}
inline const ::pbnavitia::Section& Journey::sections(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.sections)
  return sections_.Get(index);
}
inline ::pbnavitia::Section* Journey::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.sections)
  return sections_.Mutable(index);
}
inline ::pbnavitia::Section* Journey::add_sections() {
  // @@protoc_insertion_point(field_add:pbnavitia.Journey.sections)
  return sections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Section >*
Journey::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Journey.sections)
  return &sections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Section >&
Journey::sections() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Journey.sections)
  return sections_;
}

// optional .pbnavitia.PtObject origin = 7;
inline bool Journey::has_origin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Journey::set_has_origin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Journey::clear_has_origin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Journey::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
  clear_has_origin();
}
inline const ::pbnavitia::PtObject& Journey::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pbnavitia::PtObject* Journey::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.origin)
  return origin_;
}
inline ::pbnavitia::PtObject* Journey::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.origin)
  clear_has_origin();
  ::pbnavitia::PtObject* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void Journey::set_allocated_origin(::pbnavitia::PtObject* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.origin)
}

// optional .pbnavitia.PtObject destination = 8;
inline bool Journey::has_destination() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Journey::set_has_destination() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Journey::clear_has_destination() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Journey::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
  clear_has_destination();
}
inline const ::pbnavitia::PtObject& Journey::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
inline ::pbnavitia::PtObject* Journey::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.destination)
  return destination_;
}
inline ::pbnavitia::PtObject* Journey::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.destination)
  clear_has_destination();
  ::pbnavitia::PtObject* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline void Journey::set_allocated_destination(::pbnavitia::PtObject* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.destination)
}

// optional string type = 9;
inline bool Journey::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Journey::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Journey::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Journey::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Journey::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Journey::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.type)
}
inline void Journey::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Journey.type)
}
inline void Journey::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Journey.type)
}
inline ::std::string* Journey::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Journey::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Journey::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.type)
}

// optional .pbnavitia.Fare fare = 10;
inline bool Journey::has_fare() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Journey::set_has_fare() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Journey::clear_has_fare() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Journey::clear_fare() {
  if (fare_ != NULL) fare_->::pbnavitia::Fare::Clear();
  clear_has_fare();
}
inline const ::pbnavitia::Fare& Journey::fare() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.fare)
  return fare_ != NULL ? *fare_ : *default_instance_->fare_;
}
inline ::pbnavitia::Fare* Journey::mutable_fare() {
  set_has_fare();
  if (fare_ == NULL) {
    fare_ = new ::pbnavitia::Fare;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.fare)
  return fare_;
}
inline ::pbnavitia::Fare* Journey::release_fare() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.fare)
  clear_has_fare();
  ::pbnavitia::Fare* temp = fare_;
  fare_ = NULL;
  return temp;
}
inline void Journey::set_allocated_fare(::pbnavitia::Fare* fare) {
  delete fare_;
  fare_ = fare;
  if (fare) {
    set_has_fare();
  } else {
    clear_has_fare();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.fare)
}

// repeated string tags = 11;
inline int Journey::tags_size() const {
  return tags_.size();
}
inline void Journey::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Journey::tags(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.tags)
  return tags_.Get(index);
}
inline ::std::string* Journey::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.tags)
  return tags_.Mutable(index);
}
inline void Journey::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Journey::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Journey.tags)
}
inline void Journey::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Journey.tags)
}
inline ::std::string* Journey::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Journey.tags)
  return tags_.Add();
}
inline void Journey::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Journey.tags)
}
inline void Journey::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Journey.tags)
}
inline void Journey::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Journey.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Journey::tags() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Journey.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Journey::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Journey.tags)
  return &tags_;
}

// repeated .pbnavitia.Calendar calendars = 12;
inline int Journey::calendars_size() const {
  return calendars_.size();
}
inline void Journey::clear_calendars() {
  calendars_.Clear();
}
inline const ::pbnavitia::Calendar& Journey::calendars(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.calendars)
  return calendars_.Get(index);
}
inline ::pbnavitia::Calendar* Journey::mutable_calendars(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.calendars)
  return calendars_.Mutable(index);
}
inline ::pbnavitia::Calendar* Journey::add_calendars() {
  // @@protoc_insertion_point(field_add:pbnavitia.Journey.calendars)
  return calendars_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
Journey::mutable_calendars() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Journey.calendars)
  return &calendars_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
Journey::calendars() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Journey.calendars)
  return calendars_;
}

// optional .pbnavitia.Co2Emission co2_emission = 13;
inline bool Journey::has_co2_emission() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Journey::set_has_co2_emission() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Journey::clear_has_co2_emission() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Journey::clear_co2_emission() {
  if (co2_emission_ != NULL) co2_emission_->::pbnavitia::Co2Emission::Clear();
  clear_has_co2_emission();
}
inline const ::pbnavitia::Co2Emission& Journey::co2_emission() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.co2_emission)
  return co2_emission_ != NULL ? *co2_emission_ : *default_instance_->co2_emission_;
}
inline ::pbnavitia::Co2Emission* Journey::mutable_co2_emission() {
  set_has_co2_emission();
  if (co2_emission_ == NULL) {
    co2_emission_ = new ::pbnavitia::Co2Emission;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.co2_emission)
  return co2_emission_;
}
inline ::pbnavitia::Co2Emission* Journey::release_co2_emission() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.co2_emission)
  clear_has_co2_emission();
  ::pbnavitia::Co2Emission* temp = co2_emission_;
  co2_emission_ = NULL;
  return temp;
}
inline void Journey::set_allocated_co2_emission(::pbnavitia::Co2Emission* co2_emission) {
  delete co2_emission_;
  co2_emission_ = co2_emission;
  if (co2_emission) {
    set_has_co2_emission();
  } else {
    clear_has_co2_emission();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.co2_emission)
}

// optional string most_serious_disruption_effect = 14;
inline bool Journey::has_most_serious_disruption_effect() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Journey::set_has_most_serious_disruption_effect() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Journey::clear_has_most_serious_disruption_effect() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Journey::clear_most_serious_disruption_effect() {
  most_serious_disruption_effect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_most_serious_disruption_effect();
}
inline const ::std::string& Journey::most_serious_disruption_effect() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.most_serious_disruption_effect)
  return most_serious_disruption_effect_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Journey::set_most_serious_disruption_effect(const ::std::string& value) {
  set_has_most_serious_disruption_effect();
  most_serious_disruption_effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.most_serious_disruption_effect)
}
inline void Journey::set_most_serious_disruption_effect(const char* value) {
  set_has_most_serious_disruption_effect();
  most_serious_disruption_effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Journey.most_serious_disruption_effect)
}
inline void Journey::set_most_serious_disruption_effect(const char* value, size_t size) {
  set_has_most_serious_disruption_effect();
  most_serious_disruption_effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Journey.most_serious_disruption_effect)
}
inline ::std::string* Journey::mutable_most_serious_disruption_effect() {
  set_has_most_serious_disruption_effect();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.most_serious_disruption_effect)
  return most_serious_disruption_effect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Journey::release_most_serious_disruption_effect() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.most_serious_disruption_effect)
  clear_has_most_serious_disruption_effect();
  return most_serious_disruption_effect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Journey::set_allocated_most_serious_disruption_effect(::std::string* most_serious_disruption_effect) {
  if (most_serious_disruption_effect != NULL) {
    set_has_most_serious_disruption_effect();
  } else {
    clear_has_most_serious_disruption_effect();
  }
  most_serious_disruption_effect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), most_serious_disruption_effect);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.most_serious_disruption_effect)
}

// optional string internal_id = 15;
inline bool Journey::has_internal_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Journey::set_has_internal_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Journey::clear_has_internal_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Journey::clear_internal_id() {
  internal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_internal_id();
}
inline const ::std::string& Journey::internal_id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.internal_id)
  return internal_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Journey::set_internal_id(const ::std::string& value) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.internal_id)
}
inline void Journey::set_internal_id(const char* value) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Journey.internal_id)
}
inline void Journey::set_internal_id(const char* value, size_t size) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Journey.internal_id)
}
inline ::std::string* Journey::mutable_internal_id() {
  set_has_internal_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.internal_id)
  return internal_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Journey::release_internal_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.internal_id)
  clear_has_internal_id();
  return internal_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Journey::set_allocated_internal_id(::std::string* internal_id) {
  if (internal_id != NULL) {
    set_has_internal_id();
  } else {
    clear_has_internal_id();
  }
  internal_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.internal_id)
}

// optional uint64 sn_dur = 16;
inline bool Journey::has_sn_dur() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Journey::set_has_sn_dur() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Journey::clear_has_sn_dur() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Journey::clear_sn_dur() {
  sn_dur_ = GOOGLE_ULONGLONG(0);
  clear_has_sn_dur();
}
inline ::google::protobuf::uint64 Journey::sn_dur() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.sn_dur)
  return sn_dur_;
}
inline void Journey::set_sn_dur(::google::protobuf::uint64 value) {
  set_has_sn_dur();
  sn_dur_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.sn_dur)
}

// optional uint64 transfer_dur = 17;
inline bool Journey::has_transfer_dur() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Journey::set_has_transfer_dur() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Journey::clear_has_transfer_dur() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Journey::clear_transfer_dur() {
  transfer_dur_ = GOOGLE_ULONGLONG(0);
  clear_has_transfer_dur();
}
inline ::google::protobuf::uint64 Journey::transfer_dur() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.transfer_dur)
  return transfer_dur_;
}
inline void Journey::set_transfer_dur(::google::protobuf::uint64 value) {
  set_has_transfer_dur();
  transfer_dur_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.transfer_dur)
}

// optional uint64 min_waiting_dur = 18;
inline bool Journey::has_min_waiting_dur() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Journey::set_has_min_waiting_dur() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Journey::clear_has_min_waiting_dur() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Journey::clear_min_waiting_dur() {
  min_waiting_dur_ = GOOGLE_ULONGLONG(0);
  clear_has_min_waiting_dur();
}
inline ::google::protobuf::uint64 Journey::min_waiting_dur() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.min_waiting_dur)
  return min_waiting_dur_;
}
inline void Journey::set_min_waiting_dur(::google::protobuf::uint64 value) {
  set_has_min_waiting_dur();
  min_waiting_dur_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.min_waiting_dur)
}

// optional uint32 nb_vj_extentions = 19;
inline bool Journey::has_nb_vj_extentions() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Journey::set_has_nb_vj_extentions() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Journey::clear_has_nb_vj_extentions() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Journey::clear_nb_vj_extentions() {
  nb_vj_extentions_ = 0u;
  clear_has_nb_vj_extentions();
}
inline ::google::protobuf::uint32 Journey::nb_vj_extentions() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.nb_vj_extentions)
  return nb_vj_extentions_;
}
inline void Journey::set_nb_vj_extentions(::google::protobuf::uint32 value) {
  set_has_nb_vj_extentions();
  nb_vj_extentions_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.nb_vj_extentions)
}

// optional uint32 nb_sections = 20;
inline bool Journey::has_nb_sections() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Journey::set_has_nb_sections() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Journey::clear_has_nb_sections() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Journey::clear_nb_sections() {
  nb_sections_ = 0u;
  clear_has_nb_sections();
}
inline ::google::protobuf::uint32 Journey::nb_sections() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.nb_sections)
  return nb_sections_;
}
inline void Journey::set_nb_sections(::google::protobuf::uint32 value) {
  set_has_nb_sections();
  nb_sections_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.nb_sections)
}

// optional .pbnavitia.Durations durations = 21;
inline bool Journey::has_durations() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Journey::set_has_durations() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Journey::clear_has_durations() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Journey::clear_durations() {
  if (durations_ != NULL) durations_->::pbnavitia::Durations::Clear();
  clear_has_durations();
}
inline const ::pbnavitia::Durations& Journey::durations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.durations)
  return durations_ != NULL ? *durations_ : *default_instance_->durations_;
}
inline ::pbnavitia::Durations* Journey::mutable_durations() {
  set_has_durations();
  if (durations_ == NULL) {
    durations_ = new ::pbnavitia::Durations;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.durations)
  return durations_;
}
inline ::pbnavitia::Durations* Journey::release_durations() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.durations)
  clear_has_durations();
  ::pbnavitia::Durations* temp = durations_;
  durations_ = NULL;
  return temp;
}
inline void Journey::set_allocated_durations(::pbnavitia::Durations* durations) {
  delete durations_;
  durations_ = durations;
  if (durations) {
    set_has_durations();
  } else {
    clear_has_durations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.durations)
}

// optional .pbnavitia.Distances distances = 22;
inline bool Journey::has_distances() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Journey::set_has_distances() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Journey::clear_has_distances() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Journey::clear_distances() {
  if (distances_ != NULL) distances_->::pbnavitia::Distances::Clear();
  clear_has_distances();
}
inline const ::pbnavitia::Distances& Journey::distances() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.distances)
  return distances_ != NULL ? *distances_ : *default_instance_->distances_;
}
inline ::pbnavitia::Distances* Journey::mutable_distances() {
  set_has_distances();
  if (distances_ == NULL) {
    distances_ = new ::pbnavitia::Distances;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.distances)
  return distances_;
}
inline ::pbnavitia::Distances* Journey::release_distances() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.distances)
  clear_has_distances();
  ::pbnavitia::Distances* temp = distances_;
  distances_ = NULL;
  return temp;
}
inline void Journey::set_allocated_distances(::pbnavitia::Distances* distances) {
  delete distances_;
  distances_ = distances;
  if (distances) {
    set_has_distances();
  } else {
    clear_has_distances();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.distances)
}

// -------------------------------------------------------------------

// Planner

// repeated .pbnavitia.Journey journeys = 1;
inline int Planner::journeys_size() const {
  return journeys_.size();
}
inline void Planner::clear_journeys() {
  journeys_.Clear();
}
inline const ::pbnavitia::Journey& Planner::journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Planner.journeys)
  return journeys_.Get(index);
}
inline ::pbnavitia::Journey* Planner::mutable_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Planner.journeys)
  return journeys_.Mutable(index);
}
inline ::pbnavitia::Journey* Planner::add_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.Planner.journeys)
  return journeys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
Planner::mutable_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Planner.journeys)
  return &journeys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
Planner::journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Planner.journeys)
  return journeys_;
}

// optional .pbnavitia.ResponseType response_type = 2;
inline bool Planner::has_response_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Planner::set_has_response_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Planner::clear_has_response_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Planner::clear_response_type() {
  response_type_ = 1;
  clear_has_response_type();
}
inline ::pbnavitia::ResponseType Planner::response_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Planner.response_type)
  return static_cast< ::pbnavitia::ResponseType >(response_type_);
}
inline void Planner::set_response_type(::pbnavitia::ResponseType value) {
  assert(::pbnavitia::ResponseType_IsValid(value));
  set_has_response_type();
  response_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Planner.response_type)
}

// optional string before = 3;
inline bool Planner::has_before() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Planner::set_has_before() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Planner::clear_has_before() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Planner::clear_before() {
  before_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_before();
}
inline const ::std::string& Planner::before() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Planner.before)
  return before_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Planner::set_before(const ::std::string& value) {
  set_has_before();
  before_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Planner.before)
}
inline void Planner::set_before(const char* value) {
  set_has_before();
  before_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Planner.before)
}
inline void Planner::set_before(const char* value, size_t size) {
  set_has_before();
  before_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Planner.before)
}
inline ::std::string* Planner::mutable_before() {
  set_has_before();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Planner.before)
  return before_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Planner::release_before() {
  // @@protoc_insertion_point(field_release:pbnavitia.Planner.before)
  clear_has_before();
  return before_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Planner::set_allocated_before(::std::string* before) {
  if (before != NULL) {
    set_has_before();
  } else {
    clear_has_before();
  }
  before_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), before);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Planner.before)
}

// optional string after = 4;
inline bool Planner::has_after() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Planner::set_has_after() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Planner::clear_has_after() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Planner::clear_after() {
  after_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_after();
}
inline const ::std::string& Planner::after() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Planner.after)
  return after_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Planner::set_after(const ::std::string& value) {
  set_has_after();
  after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Planner.after)
}
inline void Planner::set_after(const char* value) {
  set_has_after();
  after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Planner.after)
}
inline void Planner::set_after(const char* value, size_t size) {
  set_has_after();
  after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Planner.after)
}
inline ::std::string* Planner::mutable_after() {
  set_has_after();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Planner.after)
  return after_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Planner::release_after() {
  // @@protoc_insertion_point(field_release:pbnavitia.Planner.after)
  clear_has_after();
  return after_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Planner::set_allocated_after(::std::string* after) {
  if (after != NULL) {
    set_has_after();
  } else {
    clear_has_after();
  }
  after_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), after);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Planner.after)
}

// -------------------------------------------------------------------

// GeoStatus

// optional string street_network_source = 1;
inline bool GeoStatus::has_street_network_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoStatus::set_has_street_network_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoStatus::clear_has_street_network_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoStatus::clear_street_network_source() {
  street_network_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street_network_source();
}
inline const ::std::string& GeoStatus::street_network_source() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.street_network_source)
  return street_network_source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoStatus::set_street_network_source(const ::std::string& value) {
  set_has_street_network_source();
  street_network_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.street_network_source)
}
inline void GeoStatus::set_street_network_source(const char* value) {
  set_has_street_network_source();
  street_network_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.GeoStatus.street_network_source)
}
inline void GeoStatus::set_street_network_source(const char* value, size_t size) {
  set_has_street_network_source();
  street_network_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.GeoStatus.street_network_source)
}
inline ::std::string* GeoStatus::mutable_street_network_source() {
  set_has_street_network_source();
  // @@protoc_insertion_point(field_mutable:pbnavitia.GeoStatus.street_network_source)
  return street_network_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoStatus::release_street_network_source() {
  // @@protoc_insertion_point(field_release:pbnavitia.GeoStatus.street_network_source)
  clear_has_street_network_source();
  return street_network_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoStatus::set_allocated_street_network_source(::std::string* street_network_source) {
  if (street_network_source != NULL) {
    set_has_street_network_source();
  } else {
    clear_has_street_network_source();
  }
  street_network_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street_network_source);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GeoStatus.street_network_source)
}

// optional int32 nb_admins = 2;
inline bool GeoStatus::has_nb_admins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoStatus::set_has_nb_admins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoStatus::clear_has_nb_admins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoStatus::clear_nb_admins() {
  nb_admins_ = 0;
  clear_has_nb_admins();
}
inline ::google::protobuf::int32 GeoStatus::nb_admins() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_admins)
  return nb_admins_;
}
inline void GeoStatus::set_nb_admins(::google::protobuf::int32 value) {
  set_has_nb_admins();
  nb_admins_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_admins)
}

// optional int32 nb_admins_from_cities = 3;
inline bool GeoStatus::has_nb_admins_from_cities() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeoStatus::set_has_nb_admins_from_cities() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeoStatus::clear_has_nb_admins_from_cities() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeoStatus::clear_nb_admins_from_cities() {
  nb_admins_from_cities_ = 0;
  clear_has_nb_admins_from_cities();
}
inline ::google::protobuf::int32 GeoStatus::nb_admins_from_cities() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_admins_from_cities)
  return nb_admins_from_cities_;
}
inline void GeoStatus::set_nb_admins_from_cities(::google::protobuf::int32 value) {
  set_has_nb_admins_from_cities();
  nb_admins_from_cities_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_admins_from_cities)
}

// optional int32 nb_ways = 4;
inline bool GeoStatus::has_nb_ways() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GeoStatus::set_has_nb_ways() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GeoStatus::clear_has_nb_ways() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GeoStatus::clear_nb_ways() {
  nb_ways_ = 0;
  clear_has_nb_ways();
}
inline ::google::protobuf::int32 GeoStatus::nb_ways() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_ways)
  return nb_ways_;
}
inline void GeoStatus::set_nb_ways(::google::protobuf::int32 value) {
  set_has_nb_ways();
  nb_ways_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_ways)
}

// optional int32 nb_addresses = 5;
inline bool GeoStatus::has_nb_addresses() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GeoStatus::set_has_nb_addresses() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GeoStatus::clear_has_nb_addresses() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GeoStatus::clear_nb_addresses() {
  nb_addresses_ = 0;
  clear_has_nb_addresses();
}
inline ::google::protobuf::int32 GeoStatus::nb_addresses() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_addresses)
  return nb_addresses_;
}
inline void GeoStatus::set_nb_addresses(::google::protobuf::int32 value) {
  set_has_nb_addresses();
  nb_addresses_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_addresses)
}

// optional int32 nb_poi = 6;
inline bool GeoStatus::has_nb_poi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GeoStatus::set_has_nb_poi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GeoStatus::clear_has_nb_poi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GeoStatus::clear_nb_poi() {
  nb_poi_ = 0;
  clear_has_nb_poi();
}
inline ::google::protobuf::int32 GeoStatus::nb_poi() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_poi)
  return nb_poi_;
}
inline void GeoStatus::set_nb_poi(::google::protobuf::int32 value) {
  set_has_nb_poi();
  nb_poi_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_poi)
}

// optional string poi_source = 7;
inline bool GeoStatus::has_poi_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GeoStatus::set_has_poi_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GeoStatus::clear_has_poi_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GeoStatus::clear_poi_source() {
  poi_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_poi_source();
}
inline const ::std::string& GeoStatus::poi_source() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.poi_source)
  return poi_source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoStatus::set_poi_source(const ::std::string& value) {
  set_has_poi_source();
  poi_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.poi_source)
}
inline void GeoStatus::set_poi_source(const char* value) {
  set_has_poi_source();
  poi_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.GeoStatus.poi_source)
}
inline void GeoStatus::set_poi_source(const char* value, size_t size) {
  set_has_poi_source();
  poi_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.GeoStatus.poi_source)
}
inline ::std::string* GeoStatus::mutable_poi_source() {
  set_has_poi_source();
  // @@protoc_insertion_point(field_mutable:pbnavitia.GeoStatus.poi_source)
  return poi_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoStatus::release_poi_source() {
  // @@protoc_insertion_point(field_release:pbnavitia.GeoStatus.poi_source)
  clear_has_poi_source();
  return poi_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoStatus::set_allocated_poi_source(::std::string* poi_source) {
  if (poi_source != NULL) {
    set_has_poi_source();
  } else {
    clear_has_poi_source();
  }
  poi_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poi_source);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GeoStatus.poi_source)
}

// -------------------------------------------------------------------

// Status

// required string publication_date = 1;
inline bool Status::has_publication_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_publication_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_publication_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_publication_date() {
  publication_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publication_date();
}
inline const ::std::string& Status::publication_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.publication_date)
  return publication_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_publication_date(const ::std::string& value) {
  set_has_publication_date();
  publication_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.publication_date)
}
inline void Status::set_publication_date(const char* value) {
  set_has_publication_date();
  publication_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.publication_date)
}
inline void Status::set_publication_date(const char* value, size_t size) {
  set_has_publication_date();
  publication_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.publication_date)
}
inline ::std::string* Status::mutable_publication_date() {
  set_has_publication_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.publication_date)
  return publication_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_publication_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.publication_date)
  clear_has_publication_date();
  return publication_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_publication_date(::std::string* publication_date) {
  if (publication_date != NULL) {
    set_has_publication_date();
  } else {
    clear_has_publication_date();
  }
  publication_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publication_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.publication_date)
}

// required string start_production_date = 2;
inline bool Status::has_start_production_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_start_production_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_start_production_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_start_production_date() {
  start_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_production_date();
}
inline const ::std::string& Status::start_production_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.start_production_date)
  return start_production_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_start_production_date(const ::std::string& value) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.start_production_date)
}
inline void Status::set_start_production_date(const char* value) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.start_production_date)
}
inline void Status::set_start_production_date(const char* value, size_t size) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.start_production_date)
}
inline ::std::string* Status::mutable_start_production_date() {
  set_has_start_production_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.start_production_date)
  return start_production_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_start_production_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.start_production_date)
  clear_has_start_production_date();
  return start_production_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_start_production_date(::std::string* start_production_date) {
  if (start_production_date != NULL) {
    set_has_start_production_date();
  } else {
    clear_has_start_production_date();
  }
  start_production_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_production_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.start_production_date)
}

// required string end_production_date = 3;
inline bool Status::has_end_production_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Status::set_has_end_production_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Status::clear_has_end_production_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Status::clear_end_production_date() {
  end_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_production_date();
}
inline const ::std::string& Status::end_production_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.end_production_date)
  return end_production_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_end_production_date(const ::std::string& value) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.end_production_date)
}
inline void Status::set_end_production_date(const char* value) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.end_production_date)
}
inline void Status::set_end_production_date(const char* value, size_t size) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.end_production_date)
}
inline ::std::string* Status::mutable_end_production_date() {
  set_has_end_production_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.end_production_date)
  return end_production_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_end_production_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.end_production_date)
  clear_has_end_production_date();
  return end_production_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_end_production_date(::std::string* end_production_date) {
  if (end_production_date != NULL) {
    set_has_end_production_date();
  } else {
    clear_has_end_production_date();
  }
  end_production_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_production_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.end_production_date)
}

// optional int32 data_version = 4;
inline bool Status::has_data_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Status::set_has_data_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Status::clear_has_data_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Status::clear_data_version() {
  data_version_ = 0;
  clear_has_data_version();
}
inline ::google::protobuf::int32 Status::data_version() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.data_version)
  return data_version_;
}
inline void Status::set_data_version(::google::protobuf::int32 value) {
  set_has_data_version();
  data_version_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.data_version)
}

// optional string navitia_version = 6;
inline bool Status::has_navitia_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Status::set_has_navitia_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Status::clear_has_navitia_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Status::clear_navitia_version() {
  navitia_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_navitia_version();
}
inline const ::std::string& Status::navitia_version() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.navitia_version)
  return navitia_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_navitia_version(const ::std::string& value) {
  set_has_navitia_version();
  navitia_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.navitia_version)
}
inline void Status::set_navitia_version(const char* value) {
  set_has_navitia_version();
  navitia_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.navitia_version)
}
inline void Status::set_navitia_version(const char* value, size_t size) {
  set_has_navitia_version();
  navitia_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.navitia_version)
}
inline ::std::string* Status::mutable_navitia_version() {
  set_has_navitia_version();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.navitia_version)
  return navitia_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_navitia_version() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.navitia_version)
  clear_has_navitia_version();
  return navitia_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_navitia_version(::std::string* navitia_version) {
  if (navitia_version != NULL) {
    set_has_navitia_version();
  } else {
    clear_has_navitia_version();
  }
  navitia_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), navitia_version);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.navitia_version)
}

// repeated string data_sources = 7;
inline int Status::data_sources_size() const {
  return data_sources_.size();
}
inline void Status::clear_data_sources() {
  data_sources_.Clear();
}
inline const ::std::string& Status::data_sources(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.data_sources)
  return data_sources_.Get(index);
}
inline ::std::string* Status::mutable_data_sources(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.data_sources)
  return data_sources_.Mutable(index);
}
inline void Status::set_data_sources(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Status.data_sources)
  data_sources_.Mutable(index)->assign(value);
}
inline void Status::set_data_sources(int index, const char* value) {
  data_sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.data_sources)
}
inline void Status::set_data_sources(int index, const char* value, size_t size) {
  data_sources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.data_sources)
}
inline ::std::string* Status::add_data_sources() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Status.data_sources)
  return data_sources_.Add();
}
inline void Status::add_data_sources(const ::std::string& value) {
  data_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Status.data_sources)
}
inline void Status::add_data_sources(const char* value) {
  data_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Status.data_sources)
}
inline void Status::add_data_sources(const char* value, size_t size) {
  data_sources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Status.data_sources)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Status::data_sources() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Status.data_sources)
  return data_sources_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Status::mutable_data_sources() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Status.data_sources)
  return &data_sources_;
}

// optional string last_load_at = 8;
inline bool Status::has_last_load_at() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Status::set_has_last_load_at() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Status::clear_has_last_load_at() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Status::clear_last_load_at() {
  last_load_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_load_at();
}
inline const ::std::string& Status::last_load_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.last_load_at)
  return last_load_at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_last_load_at(const ::std::string& value) {
  set_has_last_load_at();
  last_load_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.last_load_at)
}
inline void Status::set_last_load_at(const char* value) {
  set_has_last_load_at();
  last_load_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.last_load_at)
}
inline void Status::set_last_load_at(const char* value, size_t size) {
  set_has_last_load_at();
  last_load_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.last_load_at)
}
inline ::std::string* Status::mutable_last_load_at() {
  set_has_last_load_at();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.last_load_at)
  return last_load_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_last_load_at() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.last_load_at)
  clear_has_last_load_at();
  return last_load_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_last_load_at(::std::string* last_load_at) {
  if (last_load_at != NULL) {
    set_has_last_load_at();
  } else {
    clear_has_last_load_at();
  }
  last_load_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_load_at);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.last_load_at)
}

// optional bool last_load_status = 9;
inline bool Status::has_last_load_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Status::set_has_last_load_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Status::clear_has_last_load_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Status::clear_last_load_status() {
  last_load_status_ = false;
  clear_has_last_load_status();
}
inline bool Status::last_load_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.last_load_status)
  return last_load_status_;
}
inline void Status::set_last_load_status(bool value) {
  set_has_last_load_status();
  last_load_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.last_load_status)
}

// optional bool loaded = 10;
inline bool Status::has_loaded() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Status::set_has_loaded() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Status::clear_has_loaded() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Status::clear_loaded() {
  loaded_ = false;
  clear_has_loaded();
}
inline bool Status::loaded() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.loaded)
  return loaded_;
}
inline void Status::set_loaded(bool value) {
  set_has_loaded();
  loaded_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.loaded)
}

// optional int32 nb_threads = 11;
inline bool Status::has_nb_threads() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Status::set_has_nb_threads() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Status::clear_has_nb_threads() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Status::clear_nb_threads() {
  nb_threads_ = 0;
  clear_has_nb_threads();
}
inline ::google::protobuf::int32 Status::nb_threads() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.nb_threads)
  return nb_threads_;
}
inline void Status::set_nb_threads(::google::protobuf::int32 value) {
  set_has_nb_threads();
  nb_threads_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.nb_threads)
}

// optional bool is_connected_to_rabbitmq = 12;
inline bool Status::has_is_connected_to_rabbitmq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Status::set_has_is_connected_to_rabbitmq() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Status::clear_has_is_connected_to_rabbitmq() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Status::clear_is_connected_to_rabbitmq() {
  is_connected_to_rabbitmq_ = false;
  clear_has_is_connected_to_rabbitmq();
}
inline bool Status::is_connected_to_rabbitmq() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.is_connected_to_rabbitmq)
  return is_connected_to_rabbitmq_;
}
inline void Status::set_is_connected_to_rabbitmq(bool value) {
  set_has_is_connected_to_rabbitmq();
  is_connected_to_rabbitmq_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.is_connected_to_rabbitmq)
}

// optional string status = 13;
inline bool Status::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Status::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Status::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Status::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
inline const ::std::string& Status::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.status)
}
inline void Status::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.status)
}
inline void Status::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.status)
}
inline ::std::string* Status::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_status() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.status)
}

// optional string last_rt_data_loaded = 14;
inline bool Status::has_last_rt_data_loaded() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Status::set_has_last_rt_data_loaded() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Status::clear_has_last_rt_data_loaded() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Status::clear_last_rt_data_loaded() {
  last_rt_data_loaded_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_rt_data_loaded();
}
inline const ::std::string& Status::last_rt_data_loaded() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.last_rt_data_loaded)
  return last_rt_data_loaded_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_last_rt_data_loaded(const ::std::string& value) {
  set_has_last_rt_data_loaded();
  last_rt_data_loaded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.last_rt_data_loaded)
}
inline void Status::set_last_rt_data_loaded(const char* value) {
  set_has_last_rt_data_loaded();
  last_rt_data_loaded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.last_rt_data_loaded)
}
inline void Status::set_last_rt_data_loaded(const char* value, size_t size) {
  set_has_last_rt_data_loaded();
  last_rt_data_loaded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.last_rt_data_loaded)
}
inline ::std::string* Status::mutable_last_rt_data_loaded() {
  set_has_last_rt_data_loaded();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.last_rt_data_loaded)
  return last_rt_data_loaded_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_last_rt_data_loaded() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.last_rt_data_loaded)
  clear_has_last_rt_data_loaded();
  return last_rt_data_loaded_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_last_rt_data_loaded(::std::string* last_rt_data_loaded) {
  if (last_rt_data_loaded != NULL) {
    set_has_last_rt_data_loaded();
  } else {
    clear_has_last_rt_data_loaded();
  }
  last_rt_data_loaded_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_rt_data_loaded);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.last_rt_data_loaded)
}

// optional bool is_realtime_loaded = 16;
inline bool Status::has_is_realtime_loaded() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Status::set_has_is_realtime_loaded() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Status::clear_has_is_realtime_loaded() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Status::clear_is_realtime_loaded() {
  is_realtime_loaded_ = false;
  clear_has_is_realtime_loaded();
}
inline bool Status::is_realtime_loaded() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.is_realtime_loaded)
  return is_realtime_loaded_;
}
inline void Status::set_is_realtime_loaded(bool value) {
  set_has_is_realtime_loaded();
  is_realtime_loaded_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.is_realtime_loaded)
}

// optional string dataset_created_at = 17;
inline bool Status::has_dataset_created_at() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Status::set_has_dataset_created_at() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Status::clear_has_dataset_created_at() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Status::clear_dataset_created_at() {
  dataset_created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataset_created_at();
}
inline const ::std::string& Status::dataset_created_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.dataset_created_at)
  return dataset_created_at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_dataset_created_at(const ::std::string& value) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.dataset_created_at)
}
inline void Status::set_dataset_created_at(const char* value) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.dataset_created_at)
}
inline void Status::set_dataset_created_at(const char* value, size_t size) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.dataset_created_at)
}
inline ::std::string* Status::mutable_dataset_created_at() {
  set_has_dataset_created_at();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.dataset_created_at)
  return dataset_created_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_dataset_created_at() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.dataset_created_at)
  clear_has_dataset_created_at();
  return dataset_created_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_dataset_created_at(::std::string* dataset_created_at) {
  if (dataset_created_at != NULL) {
    set_has_dataset_created_at();
  } else {
    clear_has_dataset_created_at();
  }
  dataset_created_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_created_at);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.dataset_created_at)
}

// repeated string rt_contributors = 18;
inline int Status::rt_contributors_size() const {
  return rt_contributors_.size();
}
inline void Status::clear_rt_contributors() {
  rt_contributors_.Clear();
}
inline const ::std::string& Status::rt_contributors(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.rt_contributors)
  return rt_contributors_.Get(index);
}
inline ::std::string* Status::mutable_rt_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.rt_contributors)
  return rt_contributors_.Mutable(index);
}
inline void Status::set_rt_contributors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Status.rt_contributors)
  rt_contributors_.Mutable(index)->assign(value);
}
inline void Status::set_rt_contributors(int index, const char* value) {
  rt_contributors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.rt_contributors)
}
inline void Status::set_rt_contributors(int index, const char* value, size_t size) {
  rt_contributors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.rt_contributors)
}
inline ::std::string* Status::add_rt_contributors() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Status.rt_contributors)
  return rt_contributors_.Add();
}
inline void Status::add_rt_contributors(const ::std::string& value) {
  rt_contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Status.rt_contributors)
}
inline void Status::add_rt_contributors(const char* value) {
  rt_contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Status.rt_contributors)
}
inline void Status::add_rt_contributors(const char* value, size_t size) {
  rt_contributors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Status.rt_contributors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Status::rt_contributors() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Status.rt_contributors)
  return rt_contributors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Status::mutable_rt_contributors() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Status.rt_contributors)
  return &rt_contributors_;
}

// optional bool disruption_error = 19;
inline bool Status::has_disruption_error() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Status::set_has_disruption_error() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Status::clear_has_disruption_error() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Status::clear_disruption_error() {
  disruption_error_ = false;
  clear_has_disruption_error();
}
inline bool Status::disruption_error() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.disruption_error)
  return disruption_error_;
}
inline void Status::set_disruption_error(bool value) {
  set_has_disruption_error();
  disruption_error_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.disruption_error)
}

// -------------------------------------------------------------------

// ScheduleStopTime

// optional .pbnavitia.Properties properties = 2;
inline bool ScheduleStopTime::has_properties() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScheduleStopTime::set_has_properties() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScheduleStopTime::clear_has_properties() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScheduleStopTime::clear_properties() {
  if (properties_ != NULL) properties_->::pbnavitia::Properties::Clear();
  clear_has_properties();
}
inline const ::pbnavitia::Properties& ScheduleStopTime::properties() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.properties)
  return properties_ != NULL ? *properties_ : *default_instance_->properties_;
}
inline ::pbnavitia::Properties* ScheduleStopTime::mutable_properties() {
  set_has_properties();
  if (properties_ == NULL) {
    properties_ = new ::pbnavitia::Properties;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.ScheduleStopTime.properties)
  return properties_;
}
inline ::pbnavitia::Properties* ScheduleStopTime::release_properties() {
  // @@protoc_insertion_point(field_release:pbnavitia.ScheduleStopTime.properties)
  clear_has_properties();
  ::pbnavitia::Properties* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline void ScheduleStopTime::set_allocated_properties(::pbnavitia::Properties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    set_has_properties();
  } else {
    clear_has_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ScheduleStopTime.properties)
}

// optional uint64 time = 3;
inline bool ScheduleStopTime::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScheduleStopTime::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScheduleStopTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScheduleStopTime::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 ScheduleStopTime::time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.time)
  return time_;
}
inline void ScheduleStopTime::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.time)
}

// optional uint64 date = 4;
inline bool ScheduleStopTime::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScheduleStopTime::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScheduleStopTime::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScheduleStopTime::clear_date() {
  date_ = GOOGLE_ULONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::uint64 ScheduleStopTime::date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.date)
  return date_;
}
inline void ScheduleStopTime::set_date(::google::protobuf::uint64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.date)
}

// optional .pbnavitia.ResponseStatus dt_status = 5;
inline bool ScheduleStopTime::has_dt_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScheduleStopTime::set_has_dt_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScheduleStopTime::clear_has_dt_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScheduleStopTime::clear_dt_status() {
  dt_status_ = 0;
  clear_has_dt_status();
}
inline ::pbnavitia::ResponseStatus ScheduleStopTime::dt_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.dt_status)
  return static_cast< ::pbnavitia::ResponseStatus >(dt_status_);
}
inline void ScheduleStopTime::set_dt_status(::pbnavitia::ResponseStatus value) {
  assert(::pbnavitia::ResponseStatus_IsValid(value));
  set_has_dt_status();
  dt_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.dt_status)
}

// optional .pbnavitia.RTLevel realtime_level = 6;
inline bool ScheduleStopTime::has_realtime_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScheduleStopTime::set_has_realtime_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScheduleStopTime::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScheduleStopTime::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
inline ::pbnavitia::RTLevel ScheduleStopTime::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
inline void ScheduleStopTime::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.realtime_level)
}

// optional uint64 base_date_time = 7;
inline bool ScheduleStopTime::has_base_date_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScheduleStopTime::set_has_base_date_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScheduleStopTime::clear_has_base_date_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScheduleStopTime::clear_base_date_time() {
  base_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_date_time();
}
inline ::google::protobuf::uint64 ScheduleStopTime::base_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.base_date_time)
  return base_date_time_;
}
inline void ScheduleStopTime::set_base_date_time(::google::protobuf::uint64 value) {
  set_has_base_date_time();
  base_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.base_date_time)
}

// repeated string impact_uris = 8;
inline int ScheduleStopTime::impact_uris_size() const {
  return impact_uris_.size();
}
inline void ScheduleStopTime::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& ScheduleStopTime::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* ScheduleStopTime::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.ScheduleStopTime.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void ScheduleStopTime::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void ScheduleStopTime::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.ScheduleStopTime.impact_uris)
}
inline void ScheduleStopTime::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ScheduleStopTime.impact_uris)
}
inline ::std::string* ScheduleStopTime::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.ScheduleStopTime.impact_uris)
  return impact_uris_.Add();
}
inline void ScheduleStopTime::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.ScheduleStopTime.impact_uris)
}
inline void ScheduleStopTime::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.ScheduleStopTime.impact_uris)
}
inline void ScheduleStopTime::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.ScheduleStopTime.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScheduleStopTime::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.ScheduleStopTime.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ScheduleStopTime::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.ScheduleStopTime.impact_uris)
  return &impact_uris_;
}

// -------------------------------------------------------------------

// RouteScheduleRow

// required .pbnavitia.StopPoint stop_point = 1;
inline bool RouteScheduleRow::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouteScheduleRow::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RouteScheduleRow::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RouteScheduleRow::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& RouteScheduleRow::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteScheduleRow.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* RouteScheduleRow::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteScheduleRow.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* RouteScheduleRow::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.RouteScheduleRow.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void RouteScheduleRow::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RouteScheduleRow.stop_point)
}

// repeated .pbnavitia.ScheduleStopTime date_times = 2;
inline int RouteScheduleRow::date_times_size() const {
  return date_times_.size();
}
inline void RouteScheduleRow::clear_date_times() {
  date_times_.Clear();
}
inline const ::pbnavitia::ScheduleStopTime& RouteScheduleRow::date_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteScheduleRow.date_times)
  return date_times_.Get(index);
}
inline ::pbnavitia::ScheduleStopTime* RouteScheduleRow::mutable_date_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteScheduleRow.date_times)
  return date_times_.Mutable(index);
}
inline ::pbnavitia::ScheduleStopTime* RouteScheduleRow::add_date_times() {
  // @@protoc_insertion_point(field_add:pbnavitia.RouteScheduleRow.date_times)
  return date_times_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >*
RouteScheduleRow::mutable_date_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.RouteScheduleRow.date_times)
  return &date_times_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >&
RouteScheduleRow::date_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.RouteScheduleRow.date_times)
  return date_times_;
}

// repeated string stop_times = 3;
inline int RouteScheduleRow::stop_times_size() const {
  return stop_times_.size();
}
inline void RouteScheduleRow::clear_stop_times() {
  stop_times_.Clear();
}
inline const ::std::string& RouteScheduleRow::stop_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteScheduleRow.stop_times)
  return stop_times_.Get(index);
}
inline ::std::string* RouteScheduleRow::mutable_stop_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteScheduleRow.stop_times)
  return stop_times_.Mutable(index);
}
inline void RouteScheduleRow::set_stop_times(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.RouteScheduleRow.stop_times)
  stop_times_.Mutable(index)->assign(value);
}
inline void RouteScheduleRow::set_stop_times(int index, const char* value) {
  stop_times_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.RouteScheduleRow.stop_times)
}
inline void RouteScheduleRow::set_stop_times(int index, const char* value, size_t size) {
  stop_times_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.RouteScheduleRow.stop_times)
}
inline ::std::string* RouteScheduleRow::add_stop_times() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.RouteScheduleRow.stop_times)
  return stop_times_.Add();
}
inline void RouteScheduleRow::add_stop_times(const ::std::string& value) {
  stop_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.RouteScheduleRow.stop_times)
}
inline void RouteScheduleRow::add_stop_times(const char* value) {
  stop_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.RouteScheduleRow.stop_times)
}
inline void RouteScheduleRow::add_stop_times(const char* value, size_t size) {
  stop_times_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.RouteScheduleRow.stop_times)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RouteScheduleRow::stop_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.RouteScheduleRow.stop_times)
  return stop_times_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RouteScheduleRow::mutable_stop_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.RouteScheduleRow.stop_times)
  return &stop_times_;
}

// -------------------------------------------------------------------

// Header

// required .pbnavitia.PtDisplayInfo pt_display_informations = 1;
inline bool Header::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
inline const ::pbnavitia::PtDisplayInfo& Header::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Header.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* Header::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Header.pt_display_informations)
  return pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* Header::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.Header.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
inline void Header::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Header.pt_display_informations)
}

// repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 3;
inline int Header::additional_informations_size() const {
  return additional_informations_.size();
}
inline void Header::clear_additional_informations() {
  additional_informations_.Clear();
}
inline ::pbnavitia::SectionAdditionalInformationType Header::additional_informations(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Header.additional_informations)
  return static_cast< ::pbnavitia::SectionAdditionalInformationType >(additional_informations_.Get(index));
}
inline void Header::set_additional_informations(int index, ::pbnavitia::SectionAdditionalInformationType value) {
  assert(::pbnavitia::SectionAdditionalInformationType_IsValid(value));
  additional_informations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.Header.additional_informations)
}
inline void Header::add_additional_informations(::pbnavitia::SectionAdditionalInformationType value) {
  assert(::pbnavitia::SectionAdditionalInformationType_IsValid(value));
  additional_informations_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Header.additional_informations)
}
inline const ::google::protobuf::RepeatedField<int>&
Header::additional_informations() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Header.additional_informations)
  return additional_informations_;
}
inline ::google::protobuf::RepeatedField<int>*
Header::mutable_additional_informations() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Header.additional_informations)
  return &additional_informations_;
}

// -------------------------------------------------------------------

// Table

// repeated .pbnavitia.RouteScheduleRow rows = 1;
inline int Table::rows_size() const {
  return rows_.size();
}
inline void Table::clear_rows() {
  rows_.Clear();
}
inline const ::pbnavitia::RouteScheduleRow& Table::rows(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Table.rows)
  return rows_.Get(index);
}
inline ::pbnavitia::RouteScheduleRow* Table::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Table.rows)
  return rows_.Mutable(index);
}
inline ::pbnavitia::RouteScheduleRow* Table::add_rows() {
  // @@protoc_insertion_point(field_add:pbnavitia.Table.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteScheduleRow >*
Table::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Table.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteScheduleRow >&
Table::rows() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Table.rows)
  return rows_;
}

// repeated .pbnavitia.Header headers = 2;
inline int Table::headers_size() const {
  return headers_.size();
}
inline void Table::clear_headers() {
  headers_.Clear();
}
inline const ::pbnavitia::Header& Table::headers(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Table.headers)
  return headers_.Get(index);
}
inline ::pbnavitia::Header* Table::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Table.headers)
  return headers_.Mutable(index);
}
inline ::pbnavitia::Header* Table::add_headers() {
  // @@protoc_insertion_point(field_add:pbnavitia.Table.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Header >*
Table::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Table.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Header >&
Table::headers() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Table.headers)
  return headers_;
}

// -------------------------------------------------------------------

// RouteSchedule

// required .pbnavitia.Table table = 1;
inline bool RouteSchedule::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouteSchedule::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RouteSchedule::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RouteSchedule::clear_table() {
  if (table_ != NULL) table_->::pbnavitia::Table::Clear();
  clear_has_table();
}
inline const ::pbnavitia::Table& RouteSchedule::table() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteSchedule.table)
  return table_ != NULL ? *table_ : *default_instance_->table_;
}
inline ::pbnavitia::Table* RouteSchedule::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    table_ = new ::pbnavitia::Table;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteSchedule.table)
  return table_;
}
inline ::pbnavitia::Table* RouteSchedule::release_table() {
  // @@protoc_insertion_point(field_release:pbnavitia.RouteSchedule.table)
  clear_has_table();
  ::pbnavitia::Table* temp = table_;
  table_ = NULL;
  return temp;
}
inline void RouteSchedule::set_allocated_table(::pbnavitia::Table* table) {
  delete table_;
  table_ = table;
  if (table) {
    set_has_table();
  } else {
    clear_has_table();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RouteSchedule.table)
}

// required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
inline bool RouteSchedule::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RouteSchedule::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RouteSchedule::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RouteSchedule::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
inline const ::pbnavitia::PtDisplayInfo& RouteSchedule::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteSchedule.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* RouteSchedule::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteSchedule.pt_display_informations)
  return pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* RouteSchedule::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.RouteSchedule.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
inline void RouteSchedule::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RouteSchedule.pt_display_informations)
}

// optional .pbnavitia.MultiLineString geojson = 3;
inline bool RouteSchedule::has_geojson() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RouteSchedule::set_has_geojson() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RouteSchedule::clear_has_geojson() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RouteSchedule::clear_geojson() {
  if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
  clear_has_geojson();
}
inline const ::pbnavitia::MultiLineString& RouteSchedule::geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteSchedule.geojson)
  return geojson_ != NULL ? *geojson_ : *default_instance_->geojson_;
}
inline ::pbnavitia::MultiLineString* RouteSchedule::mutable_geojson() {
  set_has_geojson();
  if (geojson_ == NULL) {
    geojson_ = new ::pbnavitia::MultiLineString;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteSchedule.geojson)
  return geojson_;
}
inline ::pbnavitia::MultiLineString* RouteSchedule::release_geojson() {
  // @@protoc_insertion_point(field_release:pbnavitia.RouteSchedule.geojson)
  clear_has_geojson();
  ::pbnavitia::MultiLineString* temp = geojson_;
  geojson_ = NULL;
  return temp;
}
inline void RouteSchedule::set_allocated_geojson(::pbnavitia::MultiLineString* geojson) {
  delete geojson_;
  geojson_ = geojson;
  if (geojson) {
    set_has_geojson();
  } else {
    clear_has_geojson();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RouteSchedule.geojson)
}

// optional .pbnavitia.ResponseStatus response_status = 4;
inline bool RouteSchedule::has_response_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RouteSchedule::set_has_response_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RouteSchedule::clear_has_response_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RouteSchedule::clear_response_status() {
  response_status_ = 0;
  clear_has_response_status();
}
inline ::pbnavitia::ResponseStatus RouteSchedule::response_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteSchedule.response_status)
  return static_cast< ::pbnavitia::ResponseStatus >(response_status_);
}
inline void RouteSchedule::set_response_status(::pbnavitia::ResponseStatus value) {
  assert(::pbnavitia::ResponseStatus_IsValid(value));
  set_has_response_status();
  response_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.RouteSchedule.response_status)
}

// -------------------------------------------------------------------

// Passage

// required .pbnavitia.StopDateTime stop_date_time = 1;
inline bool Passage::has_stop_date_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Passage::set_has_stop_date_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Passage::clear_has_stop_date_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Passage::clear_stop_date_time() {
  if (stop_date_time_ != NULL) stop_date_time_->::pbnavitia::StopDateTime::Clear();
  clear_has_stop_date_time();
}
inline const ::pbnavitia::StopDateTime& Passage::stop_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Passage.stop_date_time)
  return stop_date_time_ != NULL ? *stop_date_time_ : *default_instance_->stop_date_time_;
}
inline ::pbnavitia::StopDateTime* Passage::mutable_stop_date_time() {
  set_has_stop_date_time();
  if (stop_date_time_ == NULL) {
    stop_date_time_ = new ::pbnavitia::StopDateTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Passage.stop_date_time)
  return stop_date_time_;
}
inline ::pbnavitia::StopDateTime* Passage::release_stop_date_time() {
  // @@protoc_insertion_point(field_release:pbnavitia.Passage.stop_date_time)
  clear_has_stop_date_time();
  ::pbnavitia::StopDateTime* temp = stop_date_time_;
  stop_date_time_ = NULL;
  return temp;
}
inline void Passage::set_allocated_stop_date_time(::pbnavitia::StopDateTime* stop_date_time) {
  delete stop_date_time_;
  stop_date_time_ = stop_date_time;
  if (stop_date_time) {
    set_has_stop_date_time();
  } else {
    clear_has_stop_date_time();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Passage.stop_date_time)
}

// required .pbnavitia.StopPoint stop_point = 2;
inline bool Passage::has_stop_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Passage::set_has_stop_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Passage::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Passage::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& Passage::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Passage.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* Passage::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Passage.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* Passage::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.Passage.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void Passage::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Passage.stop_point)
}

// optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
inline bool Passage::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Passage::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Passage::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Passage::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
inline const ::pbnavitia::PtDisplayInfo& Passage::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Passage.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* Passage::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Passage.pt_display_informations)
  return pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* Passage::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.Passage.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
inline void Passage::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Passage.pt_display_informations)
}

// optional .pbnavitia.Route route = 4;
inline bool Passage::has_route() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Passage::set_has_route() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Passage::clear_has_route() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Passage::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
inline const ::pbnavitia::Route& Passage::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Passage.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
inline ::pbnavitia::Route* Passage::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Passage.route)
  return route_;
}
inline ::pbnavitia::Route* Passage::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.Passage.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
inline void Passage::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Passage.route)
}

// -------------------------------------------------------------------

// RoutePoint

// optional .pbnavitia.Route route = 1;
inline bool RoutePoint::has_route() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutePoint::set_has_route() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoutePoint::clear_has_route() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoutePoint::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
inline const ::pbnavitia::Route& RoutePoint::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutePoint.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
inline ::pbnavitia::Route* RoutePoint::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RoutePoint.route)
  return route_;
}
inline ::pbnavitia::Route* RoutePoint::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.RoutePoint.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
inline void RoutePoint::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RoutePoint.route)
}

// optional .pbnavitia.StopPoint stop_point = 2;
inline bool RoutePoint::has_stop_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutePoint::set_has_stop_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoutePoint::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoutePoint::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& RoutePoint::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutePoint.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* RoutePoint::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RoutePoint.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* RoutePoint::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.RoutePoint.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void RoutePoint::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RoutePoint.stop_point)
}

// optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
inline bool RoutePoint::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoutePoint::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoutePoint::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoutePoint::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
inline const ::pbnavitia::PtDisplayInfo& RoutePoint::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutePoint.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* RoutePoint::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RoutePoint.pt_display_informations)
  return pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* RoutePoint::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.RoutePoint.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
inline void RoutePoint::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RoutePoint.pt_display_informations)
}

// -------------------------------------------------------------------

// BoardItem

// required string hour = 1;
inline bool BoardItem::has_hour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoardItem::set_has_hour() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoardItem::clear_has_hour() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoardItem::clear_hour() {
  hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hour();
}
inline const ::std::string& BoardItem::hour() const {
  // @@protoc_insertion_point(field_get:pbnavitia.BoardItem.hour)
  return hour_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BoardItem::set_hour(const ::std::string& value) {
  set_has_hour();
  hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.BoardItem.hour)
}
inline void BoardItem::set_hour(const char* value) {
  set_has_hour();
  hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.BoardItem.hour)
}
inline void BoardItem::set_hour(const char* value, size_t size) {
  set_has_hour();
  hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.BoardItem.hour)
}
inline ::std::string* BoardItem::mutable_hour() {
  set_has_hour();
  // @@protoc_insertion_point(field_mutable:pbnavitia.BoardItem.hour)
  return hour_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BoardItem::release_hour() {
  // @@protoc_insertion_point(field_release:pbnavitia.BoardItem.hour)
  clear_has_hour();
  return hour_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BoardItem::set_allocated_hour(::std::string* hour) {
  if (hour != NULL) {
    set_has_hour();
  } else {
    clear_has_hour();
  }
  hour_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hour);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.BoardItem.hour)
}

// repeated string minutes = 2;
inline int BoardItem::minutes_size() const {
  return minutes_.size();
}
inline void BoardItem::clear_minutes() {
  minutes_.Clear();
}
inline const ::std::string& BoardItem::minutes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.BoardItem.minutes)
  return minutes_.Get(index);
}
inline ::std::string* BoardItem::mutable_minutes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.BoardItem.minutes)
  return minutes_.Mutable(index);
}
inline void BoardItem::set_minutes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.BoardItem.minutes)
  minutes_.Mutable(index)->assign(value);
}
inline void BoardItem::set_minutes(int index, const char* value) {
  minutes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.BoardItem.minutes)
}
inline void BoardItem::set_minutes(int index, const char* value, size_t size) {
  minutes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.BoardItem.minutes)
}
inline ::std::string* BoardItem::add_minutes() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.BoardItem.minutes)
  return minutes_.Add();
}
inline void BoardItem::add_minutes(const ::std::string& value) {
  minutes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.BoardItem.minutes)
}
inline void BoardItem::add_minutes(const char* value) {
  minutes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.BoardItem.minutes)
}
inline void BoardItem::add_minutes(const char* value, size_t size) {
  minutes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.BoardItem.minutes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BoardItem::minutes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.BoardItem.minutes)
  return minutes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BoardItem::mutable_minutes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.BoardItem.minutes)
  return &minutes_;
}

// -------------------------------------------------------------------

// DepartureBoard

// required .pbnavitia.StopPoint stop_point = 1;
inline bool DepartureBoard::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepartureBoard::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepartureBoard::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepartureBoard::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& DepartureBoard::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DepartureBoard.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* DepartureBoard::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DepartureBoard.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* DepartureBoard::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.DepartureBoard.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void DepartureBoard::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DepartureBoard.stop_point)
}

// required .pbnavitia.Route route = 2;
inline bool DepartureBoard::has_route() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepartureBoard::set_has_route() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepartureBoard::clear_has_route() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepartureBoard::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
inline const ::pbnavitia::Route& DepartureBoard::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DepartureBoard.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
inline ::pbnavitia::Route* DepartureBoard::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DepartureBoard.route)
  return route_;
}
inline ::pbnavitia::Route* DepartureBoard::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.DepartureBoard.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
inline void DepartureBoard::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DepartureBoard.route)
}

// repeated .pbnavitia.BoardItem board_items = 3;
inline int DepartureBoard::board_items_size() const {
  return board_items_.size();
}
inline void DepartureBoard::clear_board_items() {
  board_items_.Clear();
}
inline const ::pbnavitia::BoardItem& DepartureBoard::board_items(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.DepartureBoard.board_items)
  return board_items_.Get(index);
}
inline ::pbnavitia::BoardItem* DepartureBoard::mutable_board_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.DepartureBoard.board_items)
  return board_items_.Mutable(index);
}
inline ::pbnavitia::BoardItem* DepartureBoard::add_board_items() {
  // @@protoc_insertion_point(field_add:pbnavitia.DepartureBoard.board_items)
  return board_items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::BoardItem >*
DepartureBoard::mutable_board_items() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.DepartureBoard.board_items)
  return &board_items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::BoardItem >&
DepartureBoard::board_items() const {
  // @@protoc_insertion_point(field_list:pbnavitia.DepartureBoard.board_items)
  return board_items_;
}

// -------------------------------------------------------------------

// Load

// required bool ok = 1;
inline bool Load::has_ok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Load::set_has_ok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Load::clear_has_ok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Load::clear_ok() {
  ok_ = false;
  clear_has_ok();
}
inline bool Load::ok() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Load.ok)
  return ok_;
}
inline void Load::set_ok(bool value) {
  set_has_ok();
  ok_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Load.ok)
}

// -------------------------------------------------------------------

// Metadatas

// required string start_production_date = 1;
inline bool Metadatas::has_start_production_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metadatas::set_has_start_production_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metadatas::clear_has_start_production_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metadatas::clear_start_production_date() {
  start_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_production_date();
}
inline const ::std::string& Metadatas::start_production_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.start_production_date)
  return start_production_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_start_production_date(const ::std::string& value) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.start_production_date)
}
inline void Metadatas::set_start_production_date(const char* value) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.start_production_date)
}
inline void Metadatas::set_start_production_date(const char* value, size_t size) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.start_production_date)
}
inline ::std::string* Metadatas::mutable_start_production_date() {
  set_has_start_production_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.start_production_date)
  return start_production_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatas::release_start_production_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.start_production_date)
  clear_has_start_production_date();
  return start_production_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_allocated_start_production_date(::std::string* start_production_date) {
  if (start_production_date != NULL) {
    set_has_start_production_date();
  } else {
    clear_has_start_production_date();
  }
  start_production_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_production_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.start_production_date)
}

// required string end_production_date = 2;
inline bool Metadatas::has_end_production_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metadatas::set_has_end_production_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metadatas::clear_has_end_production_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metadatas::clear_end_production_date() {
  end_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_production_date();
}
inline const ::std::string& Metadatas::end_production_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.end_production_date)
  return end_production_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_end_production_date(const ::std::string& value) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.end_production_date)
}
inline void Metadatas::set_end_production_date(const char* value) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.end_production_date)
}
inline void Metadatas::set_end_production_date(const char* value, size_t size) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.end_production_date)
}
inline ::std::string* Metadatas::mutable_end_production_date() {
  set_has_end_production_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.end_production_date)
  return end_production_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatas::release_end_production_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.end_production_date)
  clear_has_end_production_date();
  return end_production_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_allocated_end_production_date(::std::string* end_production_date) {
  if (end_production_date != NULL) {
    set_has_end_production_date();
  } else {
    clear_has_end_production_date();
  }
  end_production_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_production_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.end_production_date)
}

// required string shape = 3;
inline bool Metadatas::has_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Metadatas::set_has_shape() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Metadatas::clear_has_shape() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Metadatas::clear_shape() {
  shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shape();
}
inline const ::std::string& Metadatas::shape() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.shape)
  return shape_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_shape(const ::std::string& value) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.shape)
}
inline void Metadatas::set_shape(const char* value) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.shape)
}
inline void Metadatas::set_shape(const char* value, size_t size) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.shape)
}
inline ::std::string* Metadatas::mutable_shape() {
  set_has_shape();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.shape)
  return shape_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatas::release_shape() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.shape)
  clear_has_shape();
  return shape_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_allocated_shape(::std::string* shape) {
  if (shape != NULL) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shape);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.shape)
}

// required string status = 4;
inline bool Metadatas::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Metadatas::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Metadatas::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Metadatas::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
inline const ::std::string& Metadatas::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.status)
}
inline void Metadatas::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.status)
}
inline void Metadatas::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.status)
}
inline ::std::string* Metadatas::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatas::release_status() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.status)
}

// repeated string contributors = 12;
inline int Metadatas::contributors_size() const {
  return contributors_.size();
}
inline void Metadatas::clear_contributors() {
  contributors_.Clear();
}
inline const ::std::string& Metadatas::contributors(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.contributors)
  return contributors_.Get(index);
}
inline ::std::string* Metadatas::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.contributors)
  return contributors_.Mutable(index);
}
inline void Metadatas::set_contributors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.contributors)
  contributors_.Mutable(index)->assign(value);
}
inline void Metadatas::set_contributors(int index, const char* value) {
  contributors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.contributors)
}
inline void Metadatas::set_contributors(int index, const char* value, size_t size) {
  contributors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.contributors)
}
inline ::std::string* Metadatas::add_contributors() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Metadatas.contributors)
  return contributors_.Add();
}
inline void Metadatas::add_contributors(const ::std::string& value) {
  contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Metadatas.contributors)
}
inline void Metadatas::add_contributors(const char* value) {
  contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Metadatas.contributors)
}
inline void Metadatas::add_contributors(const char* value, size_t size) {
  contributors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Metadatas.contributors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Metadatas::contributors() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Metadatas.contributors)
  return contributors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Metadatas::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Metadatas.contributors)
  return &contributors_;
}

// optional string timezone = 13;
inline bool Metadatas::has_timezone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Metadatas::set_has_timezone() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Metadatas::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Metadatas::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& Metadatas::timezone() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.timezone)
}
inline void Metadatas::set_timezone(const char* value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.timezone)
}
inline void Metadatas::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.timezone)
}
inline ::std::string* Metadatas::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatas::release_timezone() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.timezone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.timezone)
}

// optional string name = 14;
inline bool Metadatas::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Metadatas::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Metadatas::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Metadatas::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Metadatas::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.name)
}
inline void Metadatas::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.name)
}
inline void Metadatas::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.name)
}
inline ::std::string* Metadatas::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatas::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.name)
}

// optional uint64 last_load_at = 15;
inline bool Metadatas::has_last_load_at() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Metadatas::set_has_last_load_at() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Metadatas::clear_has_last_load_at() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Metadatas::clear_last_load_at() {
  last_load_at_ = GOOGLE_ULONGLONG(0);
  clear_has_last_load_at();
}
inline ::google::protobuf::uint64 Metadatas::last_load_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.last_load_at)
  return last_load_at_;
}
inline void Metadatas::set_last_load_at(::google::protobuf::uint64 value) {
  set_has_last_load_at();
  last_load_at_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.last_load_at)
}

// optional string dataset_created_at = 16;
inline bool Metadatas::has_dataset_created_at() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Metadatas::set_has_dataset_created_at() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Metadatas::clear_has_dataset_created_at() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Metadatas::clear_dataset_created_at() {
  dataset_created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataset_created_at();
}
inline const ::std::string& Metadatas::dataset_created_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.dataset_created_at)
  return dataset_created_at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_dataset_created_at(const ::std::string& value) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.dataset_created_at)
}
inline void Metadatas::set_dataset_created_at(const char* value) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.dataset_created_at)
}
inline void Metadatas::set_dataset_created_at(const char* value, size_t size) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.dataset_created_at)
}
inline ::std::string* Metadatas::mutable_dataset_created_at() {
  set_has_dataset_created_at();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.dataset_created_at)
  return dataset_created_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatas::release_dataset_created_at() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.dataset_created_at)
  clear_has_dataset_created_at();
  return dataset_created_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatas::set_allocated_dataset_created_at(::std::string* dataset_created_at) {
  if (dataset_created_at != NULL) {
    set_has_dataset_created_at();
  } else {
    clear_has_dataset_created_at();
  }
  dataset_created_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_created_at);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.dataset_created_at)
}

// -------------------------------------------------------------------

// Pagination

// required int32 totalResult = 1;
inline bool Pagination::has_totalresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pagination::set_has_totalresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pagination::clear_has_totalresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pagination::clear_totalresult() {
  totalresult_ = 0;
  clear_has_totalresult();
}
inline ::google::protobuf::int32 Pagination::totalresult() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.totalResult)
  return totalresult_;
}
inline void Pagination::set_totalresult(::google::protobuf::int32 value) {
  set_has_totalresult();
  totalresult_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.totalResult)
}

// required int32 startPage = 2;
inline bool Pagination::has_startpage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pagination::set_has_startpage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pagination::clear_has_startpage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pagination::clear_startpage() {
  startpage_ = 0;
  clear_has_startpage();
}
inline ::google::protobuf::int32 Pagination::startpage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.startPage)
  return startpage_;
}
inline void Pagination::set_startpage(::google::protobuf::int32 value) {
  set_has_startpage();
  startpage_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.startPage)
}

// required int32 itemsPerPage = 3;
inline bool Pagination::has_itemsperpage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pagination::set_has_itemsperpage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pagination::clear_has_itemsperpage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pagination::clear_itemsperpage() {
  itemsperpage_ = 0;
  clear_has_itemsperpage();
}
inline ::google::protobuf::int32 Pagination::itemsperpage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.itemsPerPage)
  return itemsperpage_;
}
inline void Pagination::set_itemsperpage(::google::protobuf::int32 value) {
  set_has_itemsperpage();
  itemsperpage_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.itemsPerPage)
}

// required int32 itemsOnPage = 4;
inline bool Pagination::has_itemsonpage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pagination::set_has_itemsonpage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pagination::clear_has_itemsonpage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pagination::clear_itemsonpage() {
  itemsonpage_ = 0;
  clear_has_itemsonpage();
}
inline ::google::protobuf::int32 Pagination::itemsonpage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.itemsOnPage)
  return itemsonpage_;
}
inline void Pagination::set_itemsonpage(::google::protobuf::int32 value) {
  set_has_itemsonpage();
  itemsonpage_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.itemsOnPage)
}

// optional string nextPage = 5;
inline bool Pagination::has_nextpage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pagination::set_has_nextpage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pagination::clear_has_nextpage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pagination::clear_nextpage() {
  nextpage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nextpage();
}
inline const ::std::string& Pagination::nextpage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.nextPage)
  return nextpage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pagination::set_nextpage(const ::std::string& value) {
  set_has_nextpage();
  nextpage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.nextPage)
}
inline void Pagination::set_nextpage(const char* value) {
  set_has_nextpage();
  nextpage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Pagination.nextPage)
}
inline void Pagination::set_nextpage(const char* value, size_t size) {
  set_has_nextpage();
  nextpage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Pagination.nextPage)
}
inline ::std::string* Pagination::mutable_nextpage() {
  set_has_nextpage();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Pagination.nextPage)
  return nextpage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pagination::release_nextpage() {
  // @@protoc_insertion_point(field_release:pbnavitia.Pagination.nextPage)
  clear_has_nextpage();
  return nextpage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pagination::set_allocated_nextpage(::std::string* nextpage) {
  if (nextpage != NULL) {
    set_has_nextpage();
  } else {
    clear_has_nextpage();
  }
  nextpage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nextpage);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Pagination.nextPage)
}

// optional string previousPage = 6;
inline bool Pagination::has_previouspage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pagination::set_has_previouspage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pagination::clear_has_previouspage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pagination::clear_previouspage() {
  previouspage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previouspage();
}
inline const ::std::string& Pagination::previouspage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.previousPage)
  return previouspage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pagination::set_previouspage(const ::std::string& value) {
  set_has_previouspage();
  previouspage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.previousPage)
}
inline void Pagination::set_previouspage(const char* value) {
  set_has_previouspage();
  previouspage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Pagination.previousPage)
}
inline void Pagination::set_previouspage(const char* value, size_t size) {
  set_has_previouspage();
  previouspage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Pagination.previousPage)
}
inline ::std::string* Pagination::mutable_previouspage() {
  set_has_previouspage();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Pagination.previousPage)
  return previouspage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pagination::release_previouspage() {
  // @@protoc_insertion_point(field_release:pbnavitia.Pagination.previousPage)
  clear_has_previouspage();
  return previouspage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pagination::set_allocated_previouspage(::std::string* previouspage) {
  if (previouspage != NULL) {
    set_has_previouspage();
  } else {
    clear_has_previouspage();
  }
  previouspage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previouspage);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Pagination.previousPage)
}

// -------------------------------------------------------------------

// StopSchedule

// required .pbnavitia.Route route = 1;
inline bool StopSchedule::has_route() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopSchedule::set_has_route() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopSchedule::clear_has_route() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopSchedule::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
inline const ::pbnavitia::Route& StopSchedule::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
inline ::pbnavitia::Route* StopSchedule::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.route)
  return route_;
}
inline ::pbnavitia::Route* StopSchedule::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
inline void StopSchedule::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.route)
}

// required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
inline bool StopSchedule::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopSchedule::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopSchedule::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopSchedule::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
inline const ::pbnavitia::PtDisplayInfo& StopSchedule::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* StopSchedule::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.pt_display_informations)
  return pt_display_informations_;
}
inline ::pbnavitia::PtDisplayInfo* StopSchedule::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
inline void StopSchedule::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.pt_display_informations)
}

// required .pbnavitia.StopPoint stop_point = 3;
inline bool StopSchedule::has_stop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopSchedule::set_has_stop_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopSchedule::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopSchedule::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& StopSchedule::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* StopSchedule::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* StopSchedule::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void StopSchedule::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.stop_point)
}

// repeated .pbnavitia.ScheduleStopTime date_times = 4;
inline int StopSchedule::date_times_size() const {
  return date_times_.size();
}
inline void StopSchedule::clear_date_times() {
  date_times_.Clear();
}
inline const ::pbnavitia::ScheduleStopTime& StopSchedule::date_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.date_times)
  return date_times_.Get(index);
}
inline ::pbnavitia::ScheduleStopTime* StopSchedule::mutable_date_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.date_times)
  return date_times_.Mutable(index);
}
inline ::pbnavitia::ScheduleStopTime* StopSchedule::add_date_times() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopSchedule.date_times)
  return date_times_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >*
StopSchedule::mutable_date_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopSchedule.date_times)
  return &date_times_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >&
StopSchedule::date_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopSchedule.date_times)
  return date_times_;
}

// optional .pbnavitia.ResponseStatus response_status = 5;
inline bool StopSchedule::has_response_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StopSchedule::set_has_response_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StopSchedule::clear_has_response_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StopSchedule::clear_response_status() {
  response_status_ = 0;
  clear_has_response_status();
}
inline ::pbnavitia::ResponseStatus StopSchedule::response_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.response_status)
  return static_cast< ::pbnavitia::ResponseStatus >(response_status_);
}
inline void StopSchedule::set_response_status(::pbnavitia::ResponseStatus value) {
  assert(::pbnavitia::ResponseStatus_IsValid(value));
  set_has_response_status();
  response_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopSchedule.response_status)
}

// optional .pbnavitia.ScheduleStopTime first_datetime = 6;
inline bool StopSchedule::has_first_datetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StopSchedule::set_has_first_datetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StopSchedule::clear_has_first_datetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StopSchedule::clear_first_datetime() {
  if (first_datetime_ != NULL) first_datetime_->::pbnavitia::ScheduleStopTime::Clear();
  clear_has_first_datetime();
}
inline const ::pbnavitia::ScheduleStopTime& StopSchedule::first_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.first_datetime)
  return first_datetime_ != NULL ? *first_datetime_ : *default_instance_->first_datetime_;
}
inline ::pbnavitia::ScheduleStopTime* StopSchedule::mutable_first_datetime() {
  set_has_first_datetime();
  if (first_datetime_ == NULL) {
    first_datetime_ = new ::pbnavitia::ScheduleStopTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.first_datetime)
  return first_datetime_;
}
inline ::pbnavitia::ScheduleStopTime* StopSchedule::release_first_datetime() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.first_datetime)
  clear_has_first_datetime();
  ::pbnavitia::ScheduleStopTime* temp = first_datetime_;
  first_datetime_ = NULL;
  return temp;
}
inline void StopSchedule::set_allocated_first_datetime(::pbnavitia::ScheduleStopTime* first_datetime) {
  delete first_datetime_;
  first_datetime_ = first_datetime;
  if (first_datetime) {
    set_has_first_datetime();
  } else {
    clear_has_first_datetime();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.first_datetime)
}

// optional .pbnavitia.ScheduleStopTime last_datetime = 7;
inline bool StopSchedule::has_last_datetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StopSchedule::set_has_last_datetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StopSchedule::clear_has_last_datetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StopSchedule::clear_last_datetime() {
  if (last_datetime_ != NULL) last_datetime_->::pbnavitia::ScheduleStopTime::Clear();
  clear_has_last_datetime();
}
inline const ::pbnavitia::ScheduleStopTime& StopSchedule::last_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.last_datetime)
  return last_datetime_ != NULL ? *last_datetime_ : *default_instance_->last_datetime_;
}
inline ::pbnavitia::ScheduleStopTime* StopSchedule::mutable_last_datetime() {
  set_has_last_datetime();
  if (last_datetime_ == NULL) {
    last_datetime_ = new ::pbnavitia::ScheduleStopTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.last_datetime)
  return last_datetime_;
}
inline ::pbnavitia::ScheduleStopTime* StopSchedule::release_last_datetime() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.last_datetime)
  clear_has_last_datetime();
  ::pbnavitia::ScheduleStopTime* temp = last_datetime_;
  last_datetime_ = NULL;
  return temp;
}
inline void StopSchedule::set_allocated_last_datetime(::pbnavitia::ScheduleStopTime* last_datetime) {
  delete last_datetime_;
  last_datetime_ = last_datetime;
  if (last_datetime) {
    set_has_last_datetime();
  } else {
    clear_has_last_datetime();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.last_datetime)
}

// -------------------------------------------------------------------

// Error

// optional .pbnavitia.Error.error_id id = 1;
inline bool Error::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_id() {
  id_ = 1;
  clear_has_id();
}
inline ::pbnavitia::Error_error_id Error::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Error.id)
  return static_cast< ::pbnavitia::Error_error_id >(id_);
}
inline void Error::set_id(::pbnavitia::Error_error_id value) {
  assert(::pbnavitia::Error_error_id_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Error.id)
}

// optional string message = 2;
inline bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Error.message)
}
inline void Error::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Error.message)
}
inline ::std::string* Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:pbnavitia.Error.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Error.message)
}

// -------------------------------------------------------------------

// TrafficReports

// optional .pbnavitia.Network network = 1;
inline bool TrafficReports::has_network() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficReports::set_has_network() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficReports::clear_has_network() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficReports::clear_network() {
  if (network_ != NULL) network_->::pbnavitia::Network::Clear();
  clear_has_network();
}
inline const ::pbnavitia::Network& TrafficReports::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReports.network)
  return network_ != NULL ? *network_ : *default_instance_->network_;
}
inline ::pbnavitia::Network* TrafficReports::mutable_network() {
  set_has_network();
  if (network_ == NULL) {
    network_ = new ::pbnavitia::Network;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReports.network)
  return network_;
}
inline ::pbnavitia::Network* TrafficReports::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.TrafficReports.network)
  clear_has_network();
  ::pbnavitia::Network* temp = network_;
  network_ = NULL;
  return temp;
}
inline void TrafficReports::set_allocated_network(::pbnavitia::Network* network) {
  delete network_;
  network_ = network;
  if (network) {
    set_has_network();
  } else {
    clear_has_network();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.TrafficReports.network)
}

// repeated .pbnavitia.Line lines = 2;
inline int TrafficReports::lines_size() const {
  return lines_.size();
}
inline void TrafficReports::clear_lines() {
  lines_.Clear();
}
inline const ::pbnavitia::Line& TrafficReports::lines(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReports.lines)
  return lines_.Get(index);
}
inline ::pbnavitia::Line* TrafficReports::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReports.lines)
  return lines_.Mutable(index);
}
inline ::pbnavitia::Line* TrafficReports::add_lines() {
  // @@protoc_insertion_point(field_add:pbnavitia.TrafficReports.lines)
  return lines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
TrafficReports::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.TrafficReports.lines)
  return &lines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
TrafficReports::lines() const {
  // @@protoc_insertion_point(field_list:pbnavitia.TrafficReports.lines)
  return lines_;
}

// repeated .pbnavitia.StopArea stop_areas = 3;
inline int TrafficReports::stop_areas_size() const {
  return stop_areas_.size();
}
inline void TrafficReports::clear_stop_areas() {
  stop_areas_.Clear();
}
inline const ::pbnavitia::StopArea& TrafficReports::stop_areas(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReports.stop_areas)
  return stop_areas_.Get(index);
}
inline ::pbnavitia::StopArea* TrafficReports::mutable_stop_areas(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReports.stop_areas)
  return stop_areas_.Mutable(index);
}
inline ::pbnavitia::StopArea* TrafficReports::add_stop_areas() {
  // @@protoc_insertion_point(field_add:pbnavitia.TrafficReports.stop_areas)
  return stop_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
TrafficReports::mutable_stop_areas() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.TrafficReports.stop_areas)
  return &stop_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
TrafficReports::stop_areas() const {
  // @@protoc_insertion_point(field_list:pbnavitia.TrafficReports.stop_areas)
  return stop_areas_;
}

// repeated .pbnavitia.VehicleJourney vehicle_journeys = 4;
inline int TrafficReports::vehicle_journeys_size() const {
  return vehicle_journeys_.size();
}
inline void TrafficReports::clear_vehicle_journeys() {
  vehicle_journeys_.Clear();
}
inline const ::pbnavitia::VehicleJourney& TrafficReports::vehicle_journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReports.vehicle_journeys)
  return vehicle_journeys_.Get(index);
}
inline ::pbnavitia::VehicleJourney* TrafficReports::mutable_vehicle_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReports.vehicle_journeys)
  return vehicle_journeys_.Mutable(index);
}
inline ::pbnavitia::VehicleJourney* TrafficReports::add_vehicle_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.TrafficReports.vehicle_journeys)
  return vehicle_journeys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >*
TrafficReports::mutable_vehicle_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.TrafficReports.vehicle_journeys)
  return &vehicle_journeys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >&
TrafficReports::vehicle_journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.TrafficReports.vehicle_journeys)
  return vehicle_journeys_;
}

// -------------------------------------------------------------------

// LineReport

// optional .pbnavitia.Line line = 1;
inline bool LineReport::has_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineReport::set_has_line() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineReport::clear_has_line() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineReport::clear_line() {
  if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  clear_has_line();
}
inline const ::pbnavitia::Line& LineReport::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReport.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::pbnavitia::Line* LineReport::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineReport.line)
  return line_;
}
inline ::pbnavitia::Line* LineReport::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineReport.line)
  clear_has_line();
  ::pbnavitia::Line* temp = line_;
  line_ = NULL;
  return temp;
}
inline void LineReport::set_allocated_line(::pbnavitia::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineReport.line)
}

// repeated .pbnavitia.PtObject pt_objects = 2;
inline int LineReport::pt_objects_size() const {
  return pt_objects_.size();
}
inline void LineReport::clear_pt_objects() {
  pt_objects_.Clear();
}
inline const ::pbnavitia::PtObject& LineReport::pt_objects(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReport.pt_objects)
  return pt_objects_.Get(index);
}
inline ::pbnavitia::PtObject* LineReport::mutable_pt_objects(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineReport.pt_objects)
  return pt_objects_.Mutable(index);
}
inline ::pbnavitia::PtObject* LineReport::add_pt_objects() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineReport.pt_objects)
  return pt_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
LineReport::mutable_pt_objects() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineReport.pt_objects)
  return &pt_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
LineReport::pt_objects() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineReport.pt_objects)
  return pt_objects_;
}

// -------------------------------------------------------------------

// LinkArgs

// optional string key = 1;
inline bool LinkArgs::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkArgs::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkArgs::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkArgs::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& LinkArgs::key() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LinkArgs.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkArgs::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LinkArgs.key)
}
inline void LinkArgs::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LinkArgs.key)
}
inline void LinkArgs::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LinkArgs.key)
}
inline ::std::string* LinkArgs::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LinkArgs.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkArgs::release_key() {
  // @@protoc_insertion_point(field_release:pbnavitia.LinkArgs.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkArgs::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LinkArgs.key)
}

// repeated string values = 2;
inline int LinkArgs::values_size() const {
  return values_.size();
}
inline void LinkArgs::clear_values() {
  values_.Clear();
}
inline const ::std::string& LinkArgs::values(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LinkArgs.values)
  return values_.Get(index);
}
inline ::std::string* LinkArgs::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LinkArgs.values)
  return values_.Mutable(index);
}
inline void LinkArgs::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.LinkArgs.values)
  values_.Mutable(index)->assign(value);
}
inline void LinkArgs::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.LinkArgs.values)
}
inline void LinkArgs::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LinkArgs.values)
}
inline ::std::string* LinkArgs::add_values() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.LinkArgs.values)
  return values_.Add();
}
inline void LinkArgs::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.LinkArgs.values)
}
inline void LinkArgs::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.LinkArgs.values)
}
inline void LinkArgs::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.LinkArgs.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LinkArgs::values() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LinkArgs.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LinkArgs::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LinkArgs.values)
  return &values_;
}

// -------------------------------------------------------------------

// Link

// optional string rel = 1;
inline bool Link::has_rel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Link::set_has_rel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Link::clear_has_rel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Link::clear_rel() {
  rel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rel();
}
inline const ::std::string& Link::rel() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.rel)
  return rel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_rel(const ::std::string& value) {
  set_has_rel();
  rel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Link.rel)
}
inline void Link::set_rel(const char* value) {
  set_has_rel();
  rel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Link.rel)
}
inline void Link::set_rel(const char* value, size_t size) {
  set_has_rel();
  rel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Link.rel)
}
inline ::std::string* Link::mutable_rel() {
  set_has_rel();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.rel)
  return rel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_rel() {
  // @@protoc_insertion_point(field_release:pbnavitia.Link.rel)
  clear_has_rel();
  return rel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_rel(::std::string* rel) {
  if (rel != NULL) {
    set_has_rel();
  } else {
    clear_has_rel();
  }
  rel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rel);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Link.rel)
}

// optional string type = 2;
inline bool Link::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Link::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Link::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Link::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Link::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Link.type)
}
inline void Link::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Link.type)
}
inline void Link::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Link.type)
}
inline ::std::string* Link::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Link.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Link.type)
}

// optional bool is_templated = 3;
inline bool Link::has_is_templated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Link::set_has_is_templated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Link::clear_has_is_templated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Link::clear_is_templated() {
  is_templated_ = false;
  clear_has_is_templated();
}
inline bool Link::is_templated() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.is_templated)
  return is_templated_;
}
inline void Link::set_is_templated(bool value) {
  set_has_is_templated();
  is_templated_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Link.is_templated)
}

// optional string description = 4;
inline bool Link::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Link::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Link::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Link::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& Link::description() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Link.description)
}
inline void Link::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Link.description)
}
inline void Link::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Link.description)
}
inline ::std::string* Link::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_description() {
  // @@protoc_insertion_point(field_release:pbnavitia.Link.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Link.description)
}

// repeated .pbnavitia.LinkArgs kwargs = 5;
inline int Link::kwargs_size() const {
  return kwargs_.size();
}
inline void Link::clear_kwargs() {
  kwargs_.Clear();
}
inline const ::pbnavitia::LinkArgs& Link::kwargs(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.kwargs)
  return kwargs_.Get(index);
}
inline ::pbnavitia::LinkArgs* Link::mutable_kwargs(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.kwargs)
  return kwargs_.Mutable(index);
}
inline ::pbnavitia::LinkArgs* Link::add_kwargs() {
  // @@protoc_insertion_point(field_add:pbnavitia.Link.kwargs)
  return kwargs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LinkArgs >*
Link::mutable_kwargs() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Link.kwargs)
  return &kwargs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LinkArgs >&
Link::kwargs() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Link.kwargs)
  return kwargs_;
}

// optional string ressource_name = 6;
inline bool Link::has_ressource_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Link::set_has_ressource_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Link::clear_has_ressource_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Link::clear_ressource_name() {
  ressource_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ressource_name();
}
inline const ::std::string& Link::ressource_name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.ressource_name)
  return ressource_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_ressource_name(const ::std::string& value) {
  set_has_ressource_name();
  ressource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Link.ressource_name)
}
inline void Link::set_ressource_name(const char* value) {
  set_has_ressource_name();
  ressource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Link.ressource_name)
}
inline void Link::set_ressource_name(const char* value, size_t size) {
  set_has_ressource_name();
  ressource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Link.ressource_name)
}
inline ::std::string* Link::mutable_ressource_name() {
  set_has_ressource_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.ressource_name)
  return ressource_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Link::release_ressource_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Link.ressource_name)
  clear_has_ressource_name();
  return ressource_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Link::set_allocated_ressource_name(::std::string* ressource_name) {
  if (ressource_name != NULL) {
    set_has_ressource_name();
  } else {
    clear_has_ressource_name();
  }
  ressource_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ressource_name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Link.ressource_name)
}

// -------------------------------------------------------------------

// GraphicalIsochrone

// optional string geojson = 1;
inline bool GraphicalIsochrone::has_geojson() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GraphicalIsochrone::set_has_geojson() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GraphicalIsochrone::clear_has_geojson() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GraphicalIsochrone::clear_geojson() {
  geojson_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geojson();
}
inline const ::std::string& GraphicalIsochrone::geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.geojson)
  return geojson_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicalIsochrone::set_geojson(const ::std::string& value) {
  set_has_geojson();
  geojson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.geojson)
}
inline void GraphicalIsochrone::set_geojson(const char* value) {
  set_has_geojson();
  geojson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.GraphicalIsochrone.geojson)
}
inline void GraphicalIsochrone::set_geojson(const char* value, size_t size) {
  set_has_geojson();
  geojson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.GraphicalIsochrone.geojson)
}
inline ::std::string* GraphicalIsochrone::mutable_geojson() {
  set_has_geojson();
  // @@protoc_insertion_point(field_mutable:pbnavitia.GraphicalIsochrone.geojson)
  return geojson_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphicalIsochrone::release_geojson() {
  // @@protoc_insertion_point(field_release:pbnavitia.GraphicalIsochrone.geojson)
  clear_has_geojson();
  return geojson_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphicalIsochrone::set_allocated_geojson(::std::string* geojson) {
  if (geojson != NULL) {
    set_has_geojson();
  } else {
    clear_has_geojson();
  }
  geojson_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geojson);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GraphicalIsochrone.geojson)
}

// optional int32 max_duration = 2;
inline bool GraphicalIsochrone::has_max_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GraphicalIsochrone::set_has_max_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GraphicalIsochrone::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GraphicalIsochrone::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
inline ::google::protobuf::int32 GraphicalIsochrone::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.max_duration)
  return max_duration_;
}
inline void GraphicalIsochrone::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.max_duration)
}

// optional int32 min_duration = 3;
inline bool GraphicalIsochrone::has_min_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GraphicalIsochrone::set_has_min_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GraphicalIsochrone::clear_has_min_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GraphicalIsochrone::clear_min_duration() {
  min_duration_ = 0;
  clear_has_min_duration();
}
inline ::google::protobuf::int32 GraphicalIsochrone::min_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.min_duration)
  return min_duration_;
}
inline void GraphicalIsochrone::set_min_duration(::google::protobuf::int32 value) {
  set_has_min_duration();
  min_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.min_duration)
}

// optional .pbnavitia.PtObject origin = 4;
inline bool GraphicalIsochrone::has_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GraphicalIsochrone::set_has_origin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GraphicalIsochrone::clear_has_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GraphicalIsochrone::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
  clear_has_origin();
}
inline const ::pbnavitia::PtObject& GraphicalIsochrone::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pbnavitia::PtObject* GraphicalIsochrone::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.GraphicalIsochrone.origin)
  return origin_;
}
inline ::pbnavitia::PtObject* GraphicalIsochrone::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.GraphicalIsochrone.origin)
  clear_has_origin();
  ::pbnavitia::PtObject* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void GraphicalIsochrone::set_allocated_origin(::pbnavitia::PtObject* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GraphicalIsochrone.origin)
}

// optional .pbnavitia.PtObject destination = 5;
inline bool GraphicalIsochrone::has_destination() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GraphicalIsochrone::set_has_destination() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GraphicalIsochrone::clear_has_destination() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GraphicalIsochrone::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
  clear_has_destination();
}
inline const ::pbnavitia::PtObject& GraphicalIsochrone::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
inline ::pbnavitia::PtObject* GraphicalIsochrone::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.GraphicalIsochrone.destination)
  return destination_;
}
inline ::pbnavitia::PtObject* GraphicalIsochrone::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.GraphicalIsochrone.destination)
  clear_has_destination();
  ::pbnavitia::PtObject* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline void GraphicalIsochrone::set_allocated_destination(::pbnavitia::PtObject* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GraphicalIsochrone.destination)
}

// optional uint64 requested_date_time = 6;
inline bool GraphicalIsochrone::has_requested_date_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GraphicalIsochrone::set_has_requested_date_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GraphicalIsochrone::clear_has_requested_date_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GraphicalIsochrone::clear_requested_date_time() {
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_requested_date_time();
}
inline ::google::protobuf::uint64 GraphicalIsochrone::requested_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.requested_date_time)
  return requested_date_time_;
}
inline void GraphicalIsochrone::set_requested_date_time(::google::protobuf::uint64 value) {
  set_has_requested_date_time();
  requested_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.requested_date_time)
}

// optional uint64 min_date_time = 7;
inline bool GraphicalIsochrone::has_min_date_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GraphicalIsochrone::set_has_min_date_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GraphicalIsochrone::clear_has_min_date_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GraphicalIsochrone::clear_min_date_time() {
  min_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_min_date_time();
}
inline ::google::protobuf::uint64 GraphicalIsochrone::min_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.min_date_time)
  return min_date_time_;
}
inline void GraphicalIsochrone::set_min_date_time(::google::protobuf::uint64 value) {
  set_has_min_date_time();
  min_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.min_date_time)
}

// optional uint64 max_date_time = 8;
inline bool GraphicalIsochrone::has_max_date_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GraphicalIsochrone::set_has_max_date_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GraphicalIsochrone::clear_has_max_date_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GraphicalIsochrone::clear_max_date_time() {
  max_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_max_date_time();
}
inline ::google::protobuf::uint64 GraphicalIsochrone::max_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.max_date_time)
  return max_date_time_;
}
inline void GraphicalIsochrone::set_max_date_time(::google::protobuf::uint64 value) {
  set_has_max_date_time();
  max_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.max_date_time)
}

// -------------------------------------------------------------------

// HeatMap

// optional string heat_matrix = 1;
inline bool HeatMap::has_heat_matrix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeatMap::set_has_heat_matrix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeatMap::clear_has_heat_matrix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeatMap::clear_heat_matrix() {
  heat_matrix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_heat_matrix();
}
inline const ::std::string& HeatMap::heat_matrix() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMap.heat_matrix)
  return heat_matrix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeatMap::set_heat_matrix(const ::std::string& value) {
  set_has_heat_matrix();
  heat_matrix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.HeatMap.heat_matrix)
}
inline void HeatMap::set_heat_matrix(const char* value) {
  set_has_heat_matrix();
  heat_matrix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.HeatMap.heat_matrix)
}
inline void HeatMap::set_heat_matrix(const char* value, size_t size) {
  set_has_heat_matrix();
  heat_matrix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.HeatMap.heat_matrix)
}
inline ::std::string* HeatMap::mutable_heat_matrix() {
  set_has_heat_matrix();
  // @@protoc_insertion_point(field_mutable:pbnavitia.HeatMap.heat_matrix)
  return heat_matrix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeatMap::release_heat_matrix() {
  // @@protoc_insertion_point(field_release:pbnavitia.HeatMap.heat_matrix)
  clear_has_heat_matrix();
  return heat_matrix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeatMap::set_allocated_heat_matrix(::std::string* heat_matrix) {
  if (heat_matrix != NULL) {
    set_has_heat_matrix();
  } else {
    clear_has_heat_matrix();
  }
  heat_matrix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heat_matrix);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.HeatMap.heat_matrix)
}

// optional .pbnavitia.PtObject origin = 2;
inline bool HeatMap::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeatMap::set_has_origin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeatMap::clear_has_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeatMap::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
  clear_has_origin();
}
inline const ::pbnavitia::PtObject& HeatMap::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMap.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pbnavitia::PtObject* HeatMap::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.HeatMap.origin)
  return origin_;
}
inline ::pbnavitia::PtObject* HeatMap::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.HeatMap.origin)
  clear_has_origin();
  ::pbnavitia::PtObject* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void HeatMap::set_allocated_origin(::pbnavitia::PtObject* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.HeatMap.origin)
}

// optional .pbnavitia.PtObject destination = 3;
inline bool HeatMap::has_destination() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeatMap::set_has_destination() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeatMap::clear_has_destination() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeatMap::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
  clear_has_destination();
}
inline const ::pbnavitia::PtObject& HeatMap::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMap.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
inline ::pbnavitia::PtObject* HeatMap::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.HeatMap.destination)
  return destination_;
}
inline ::pbnavitia::PtObject* HeatMap::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.HeatMap.destination)
  clear_has_destination();
  ::pbnavitia::PtObject* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline void HeatMap::set_allocated_destination(::pbnavitia::PtObject* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.HeatMap.destination)
}

// optional uint64 requested_date_time = 4;
inline bool HeatMap::has_requested_date_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeatMap::set_has_requested_date_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeatMap::clear_has_requested_date_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeatMap::clear_requested_date_time() {
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_requested_date_time();
}
inline ::google::protobuf::uint64 HeatMap::requested_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMap.requested_date_time)
  return requested_date_time_;
}
inline void HeatMap::set_requested_date_time(::google::protobuf::uint64 value) {
  set_has_requested_date_time();
  requested_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.HeatMap.requested_date_time)
}

// -------------------------------------------------------------------

// RoutingElement

// required int32 duration = 1;
inline bool RoutingElement::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutingElement::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoutingElement::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoutingElement::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 RoutingElement::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutingElement.duration)
  return duration_;
}
inline void RoutingElement::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.RoutingElement.duration)
}

// required .pbnavitia.RoutingStatus routing_status = 2;
inline bool RoutingElement::has_routing_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutingElement::set_has_routing_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoutingElement::clear_has_routing_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoutingElement::clear_routing_status() {
  routing_status_ = 0;
  clear_has_routing_status();
}
inline ::pbnavitia::RoutingStatus RoutingElement::routing_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutingElement.routing_status)
  return static_cast< ::pbnavitia::RoutingStatus >(routing_status_);
}
inline void RoutingElement::set_routing_status(::pbnavitia::RoutingStatus value) {
  assert(::pbnavitia::RoutingStatus_IsValid(value));
  set_has_routing_status();
  routing_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.RoutingElement.routing_status)
}

// -------------------------------------------------------------------

// StreetNetworkRoutingRow

// repeated .pbnavitia.RoutingElement routing_response = 2;
inline int StreetNetworkRoutingRow::routing_response_size() const {
  return routing_response_.size();
}
inline void StreetNetworkRoutingRow::clear_routing_response() {
  routing_response_.Clear();
}
inline const ::pbnavitia::RoutingElement& StreetNetworkRoutingRow::routing_response(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return routing_response_.Get(index);
}
inline ::pbnavitia::RoutingElement* StreetNetworkRoutingRow::mutable_routing_response(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return routing_response_.Mutable(index);
}
inline ::pbnavitia::RoutingElement* StreetNetworkRoutingRow::add_routing_response() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return routing_response_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutingElement >*
StreetNetworkRoutingRow::mutable_routing_response() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return &routing_response_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutingElement >&
StreetNetworkRoutingRow::routing_response() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return routing_response_;
}

// -------------------------------------------------------------------

// StreetNetworkRoutingMatrix

// repeated .pbnavitia.StreetNetworkRoutingRow rows = 1;
inline int StreetNetworkRoutingMatrix::rows_size() const {
  return rows_.size();
}
inline void StreetNetworkRoutingMatrix::clear_rows() {
  rows_.Clear();
}
inline const ::pbnavitia::StreetNetworkRoutingRow& StreetNetworkRoutingMatrix::rows(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return rows_.Get(index);
}
inline ::pbnavitia::StreetNetworkRoutingRow* StreetNetworkRoutingMatrix::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return rows_.Mutable(index);
}
inline ::pbnavitia::StreetNetworkRoutingRow* StreetNetworkRoutingMatrix::add_rows() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return rows_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StreetNetworkRoutingRow >*
StreetNetworkRoutingMatrix::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return &rows_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StreetNetworkRoutingRow >&
StreetNetworkRoutingMatrix::rows() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return rows_;
}

// -------------------------------------------------------------------

// Response

// optional int32 status_code = 1;
inline bool Response::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
inline ::google::protobuf::int32 Response::status_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.status_code)
  return status_code_;
}
inline void Response::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Response.status_code)
}

// optional .pbnavitia.Error error = 2;
inline bool Response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_error() {
  if (error_ != NULL) error_->::pbnavitia::Error::Clear();
  clear_has_error();
}
inline const ::pbnavitia::Error& Response::error() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::pbnavitia::Error* Response::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::pbnavitia::Error;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.error)
  return error_;
}
inline ::pbnavitia::Error* Response::release_error() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.error)
  clear_has_error();
  ::pbnavitia::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void Response::set_allocated_error(::pbnavitia::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.error)
}

// optional string info = 3;
inline bool Response::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
inline const ::std::string& Response::info() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Response.info)
}
inline void Response::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.info)
}
inline void Response::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.info)
}
inline ::std::string* Response::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_info() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.info)
}

// optional .pbnavitia.Status status = 4;
inline bool Response::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_status() {
  if (status_ != NULL) status_->::pbnavitia::Status::Clear();
  clear_has_status();
}
inline const ::pbnavitia::Status& Response::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::pbnavitia::Status* Response::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::pbnavitia::Status;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.status)
  return status_;
}
inline ::pbnavitia::Status* Response::release_status() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.status)
  clear_has_status();
  ::pbnavitia::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void Response::set_allocated_status(::pbnavitia::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.status)
}

// optional int32 publication_date = 5;
inline bool Response::has_publication_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_publication_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_publication_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_publication_date() {
  publication_date_ = 0;
  clear_has_publication_date();
}
inline ::google::protobuf::int32 Response::publication_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.publication_date)
  return publication_date_;
}
inline void Response::set_publication_date(::google::protobuf::int32 value) {
  set_has_publication_date();
  publication_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Response.publication_date)
}

// repeated string ignored_words = 11;
inline int Response::ignored_words_size() const {
  return ignored_words_.size();
}
inline void Response::clear_ignored_words() {
  ignored_words_.Clear();
}
inline const ::std::string& Response::ignored_words(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.ignored_words)
  return ignored_words_.Get(index);
}
inline ::std::string* Response::mutable_ignored_words(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.ignored_words)
  return ignored_words_.Mutable(index);
}
inline void Response::set_ignored_words(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Response.ignored_words)
  ignored_words_.Mutable(index)->assign(value);
}
inline void Response::set_ignored_words(int index, const char* value) {
  ignored_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.ignored_words)
}
inline void Response::set_ignored_words(int index, const char* value, size_t size) {
  ignored_words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.ignored_words)
}
inline ::std::string* Response::add_ignored_words() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Response.ignored_words)
  return ignored_words_.Add();
}
inline void Response::add_ignored_words(const ::std::string& value) {
  ignored_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Response.ignored_words)
}
inline void Response::add_ignored_words(const char* value) {
  ignored_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Response.ignored_words)
}
inline void Response::add_ignored_words(const char* value, size_t size) {
  ignored_words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Response.ignored_words)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::ignored_words() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.ignored_words)
  return ignored_words_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_ignored_words() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.ignored_words)
  return &ignored_words_;
}

// repeated string bad_words = 12;
inline int Response::bad_words_size() const {
  return bad_words_.size();
}
inline void Response::clear_bad_words() {
  bad_words_.Clear();
}
inline const ::std::string& Response::bad_words(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.bad_words)
  return bad_words_.Get(index);
}
inline ::std::string* Response::mutable_bad_words(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.bad_words)
  return bad_words_.Mutable(index);
}
inline void Response::set_bad_words(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Response.bad_words)
  bad_words_.Mutable(index)->assign(value);
}
inline void Response::set_bad_words(int index, const char* value) {
  bad_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.bad_words)
}
inline void Response::set_bad_words(int index, const char* value, size_t size) {
  bad_words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.bad_words)
}
inline ::std::string* Response::add_bad_words() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Response.bad_words)
  return bad_words_.Add();
}
inline void Response::add_bad_words(const ::std::string& value) {
  bad_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Response.bad_words)
}
inline void Response::add_bad_words(const char* value) {
  bad_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Response.bad_words)
}
inline void Response::add_bad_words(const char* value, size_t size) {
  bad_words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Response.bad_words)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::bad_words() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.bad_words)
  return bad_words_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_bad_words() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.bad_words)
  return &bad_words_;
}

// repeated .pbnavitia.PtObject places = 13;
inline int Response::places_size() const {
  return places_.size();
}
inline void Response::clear_places() {
  places_.Clear();
}
inline const ::pbnavitia::PtObject& Response::places(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.places)
  return places_.Get(index);
}
inline ::pbnavitia::PtObject* Response::mutable_places(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.places)
  return places_.Mutable(index);
}
inline ::pbnavitia::PtObject* Response::add_places() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.places)
  return places_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
Response::mutable_places() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.places)
  return &places_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
Response::places() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.places)
  return places_;
}

// repeated .pbnavitia.PtObject places_nearby = 14;
inline int Response::places_nearby_size() const {
  return places_nearby_.size();
}
inline void Response::clear_places_nearby() {
  places_nearby_.Clear();
}
inline const ::pbnavitia::PtObject& Response::places_nearby(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.places_nearby)
  return places_nearby_.Get(index);
}
inline ::pbnavitia::PtObject* Response::mutable_places_nearby(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.places_nearby)
  return places_nearby_.Mutable(index);
}
inline ::pbnavitia::PtObject* Response::add_places_nearby() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.places_nearby)
  return places_nearby_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
Response::mutable_places_nearby() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.places_nearby)
  return &places_nearby_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
Response::places_nearby() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.places_nearby)
  return places_nearby_;
}

// repeated .pbnavitia.ValidityPattern validity_patterns = 15;
inline int Response::validity_patterns_size() const {
  return validity_patterns_.size();
}
inline void Response::clear_validity_patterns() {
  validity_patterns_.Clear();
}
inline const ::pbnavitia::ValidityPattern& Response::validity_patterns(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.validity_patterns)
  return validity_patterns_.Get(index);
}
inline ::pbnavitia::ValidityPattern* Response::mutable_validity_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.validity_patterns)
  return validity_patterns_.Mutable(index);
}
inline ::pbnavitia::ValidityPattern* Response::add_validity_patterns() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.validity_patterns)
  return validity_patterns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::ValidityPattern >*
Response::mutable_validity_patterns() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.validity_patterns)
  return &validity_patterns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ValidityPattern >&
Response::validity_patterns() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.validity_patterns)
  return validity_patterns_;
}

// repeated .pbnavitia.Line lines = 16;
inline int Response::lines_size() const {
  return lines_.size();
}
inline void Response::clear_lines() {
  lines_.Clear();
}
inline const ::pbnavitia::Line& Response::lines(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.lines)
  return lines_.Get(index);
}
inline ::pbnavitia::Line* Response::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.lines)
  return lines_.Mutable(index);
}
inline ::pbnavitia::Line* Response::add_lines() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.lines)
  return lines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
Response::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.lines)
  return &lines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
Response::lines() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.lines)
  return lines_;
}

// repeated .pbnavitia.JourneyPattern journey_patterns = 17;
inline int Response::journey_patterns_size() const {
  return journey_patterns_.size();
}
inline void Response::clear_journey_patterns() {
  journey_patterns_.Clear();
}
inline const ::pbnavitia::JourneyPattern& Response::journey_patterns(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.journey_patterns)
  return journey_patterns_.Get(index);
}
inline ::pbnavitia::JourneyPattern* Response::mutable_journey_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.journey_patterns)
  return journey_patterns_.Mutable(index);
}
inline ::pbnavitia::JourneyPattern* Response::add_journey_patterns() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.journey_patterns)
  return journey_patterns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >*
Response::mutable_journey_patterns() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.journey_patterns)
  return &journey_patterns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >&
Response::journey_patterns() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.journey_patterns)
  return journey_patterns_;
}

// repeated .pbnavitia.VehicleJourney vehicle_journeys = 18;
inline int Response::vehicle_journeys_size() const {
  return vehicle_journeys_.size();
}
inline void Response::clear_vehicle_journeys() {
  vehicle_journeys_.Clear();
}
inline const ::pbnavitia::VehicleJourney& Response::vehicle_journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.vehicle_journeys)
  return vehicle_journeys_.Get(index);
}
inline ::pbnavitia::VehicleJourney* Response::mutable_vehicle_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.vehicle_journeys)
  return vehicle_journeys_.Mutable(index);
}
inline ::pbnavitia::VehicleJourney* Response::add_vehicle_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.vehicle_journeys)
  return vehicle_journeys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >*
Response::mutable_vehicle_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.vehicle_journeys)
  return &vehicle_journeys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >&
Response::vehicle_journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.vehicle_journeys)
  return vehicle_journeys_;
}

// repeated .pbnavitia.StopPoint stop_points = 19;
inline int Response::stop_points_size() const {
  return stop_points_.size();
}
inline void Response::clear_stop_points() {
  stop_points_.Clear();
}
inline const ::pbnavitia::StopPoint& Response::stop_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.stop_points)
  return stop_points_.Get(index);
}
inline ::pbnavitia::StopPoint* Response::mutable_stop_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.stop_points)
  return stop_points_.Mutable(index);
}
inline ::pbnavitia::StopPoint* Response::add_stop_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.stop_points)
  return stop_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
Response::mutable_stop_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.stop_points)
  return &stop_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
Response::stop_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.stop_points)
  return stop_points_;
}

// repeated .pbnavitia.StopArea stop_areas = 20;
inline int Response::stop_areas_size() const {
  return stop_areas_.size();
}
inline void Response::clear_stop_areas() {
  stop_areas_.Clear();
}
inline const ::pbnavitia::StopArea& Response::stop_areas(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.stop_areas)
  return stop_areas_.Get(index);
}
inline ::pbnavitia::StopArea* Response::mutable_stop_areas(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.stop_areas)
  return stop_areas_.Mutable(index);
}
inline ::pbnavitia::StopArea* Response::add_stop_areas() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.stop_areas)
  return stop_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
Response::mutable_stop_areas() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.stop_areas)
  return &stop_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
Response::stop_areas() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.stop_areas)
  return stop_areas_;
}

// repeated .pbnavitia.Network networks = 21;
inline int Response::networks_size() const {
  return networks_.size();
}
inline void Response::clear_networks() {
  networks_.Clear();
}
inline const ::pbnavitia::Network& Response::networks(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.networks)
  return networks_.Get(index);
}
inline ::pbnavitia::Network* Response::mutable_networks(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.networks)
  return networks_.Mutable(index);
}
inline ::pbnavitia::Network* Response::add_networks() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.networks)
  return networks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Network >*
Response::mutable_networks() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.networks)
  return &networks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Network >&
Response::networks() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.networks)
  return networks_;
}

// repeated .pbnavitia.PhysicalMode physical_modes = 22;
inline int Response::physical_modes_size() const {
  return physical_modes_.size();
}
inline void Response::clear_physical_modes() {
  physical_modes_.Clear();
}
inline const ::pbnavitia::PhysicalMode& Response::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.physical_modes)
  return physical_modes_.Get(index);
}
inline ::pbnavitia::PhysicalMode* Response::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.physical_modes)
  return physical_modes_.Mutable(index);
}
inline ::pbnavitia::PhysicalMode* Response::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.physical_modes)
  return physical_modes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
Response::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.physical_modes)
  return &physical_modes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
Response::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.physical_modes)
  return physical_modes_;
}

// repeated .pbnavitia.CommercialMode commercial_modes = 23;
inline int Response::commercial_modes_size() const {
  return commercial_modes_.size();
}
inline void Response::clear_commercial_modes() {
  commercial_modes_.Clear();
}
inline const ::pbnavitia::CommercialMode& Response::commercial_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.commercial_modes)
  return commercial_modes_.Get(index);
}
inline ::pbnavitia::CommercialMode* Response::mutable_commercial_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.commercial_modes)
  return commercial_modes_.Mutable(index);
}
inline ::pbnavitia::CommercialMode* Response::add_commercial_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.commercial_modes)
  return commercial_modes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
Response::mutable_commercial_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.commercial_modes)
  return &commercial_modes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
Response::commercial_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.commercial_modes)
  return commercial_modes_;
}

// repeated .pbnavitia.Connection connections = 24;
inline int Response::connections_size() const {
  return connections_.size();
}
inline void Response::clear_connections() {
  connections_.Clear();
}
inline const ::pbnavitia::Connection& Response::connections(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.connections)
  return connections_.Get(index);
}
inline ::pbnavitia::Connection* Response::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.connections)
  return connections_.Mutable(index);
}
inline ::pbnavitia::Connection* Response::add_connections() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.connections)
  return connections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Connection >*
Response::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.connections)
  return &connections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Connection >&
Response::connections() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.connections)
  return connections_;
}

// repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 25;
inline int Response::journey_pattern_points_size() const {
  return journey_pattern_points_.size();
}
inline void Response::clear_journey_pattern_points() {
  journey_pattern_points_.Clear();
}
inline const ::pbnavitia::JourneyPatternPoint& Response::journey_pattern_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.journey_pattern_points)
  return journey_pattern_points_.Get(index);
}
inline ::pbnavitia::JourneyPatternPoint* Response::mutable_journey_pattern_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.journey_pattern_points)
  return journey_pattern_points_.Mutable(index);
}
inline ::pbnavitia::JourneyPatternPoint* Response::add_journey_pattern_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.journey_pattern_points)
  return journey_pattern_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >*
Response::mutable_journey_pattern_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.journey_pattern_points)
  return &journey_pattern_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >&
Response::journey_pattern_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.journey_pattern_points)
  return journey_pattern_points_;
}

// repeated .pbnavitia.Company companies = 26;
inline int Response::companies_size() const {
  return companies_.size();
}
inline void Response::clear_companies() {
  companies_.Clear();
}
inline const ::pbnavitia::Company& Response::companies(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.companies)
  return companies_.Get(index);
}
inline ::pbnavitia::Company* Response::mutable_companies(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.companies)
  return companies_.Mutable(index);
}
inline ::pbnavitia::Company* Response::add_companies() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.companies)
  return companies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Company >*
Response::mutable_companies() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.companies)
  return &companies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Company >&
Response::companies() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.companies)
  return companies_;
}

// repeated .pbnavitia.Route routes = 27;
inline int Response::routes_size() const {
  return routes_.size();
}
inline void Response::clear_routes() {
  routes_.Clear();
}
inline const ::pbnavitia::Route& Response::routes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.routes)
  return routes_.Get(index);
}
inline ::pbnavitia::Route* Response::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.routes)
  return routes_.Mutable(index);
}
inline ::pbnavitia::Route* Response::add_routes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.routes)
  return routes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
Response::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.routes)
  return &routes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
Response::routes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.routes)
  return routes_;
}

// repeated .pbnavitia.Poi pois = 28;
inline int Response::pois_size() const {
  return pois_.size();
}
inline void Response::clear_pois() {
  pois_.Clear();
}
inline const ::pbnavitia::Poi& Response::pois(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.pois)
  return pois_.Get(index);
}
inline ::pbnavitia::Poi* Response::mutable_pois(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.pois)
  return pois_.Mutable(index);
}
inline ::pbnavitia::Poi* Response::add_pois() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.pois)
  return pois_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Poi >*
Response::mutable_pois() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.pois)
  return &pois_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Poi >&
Response::pois() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.pois)
  return pois_;
}

// repeated .pbnavitia.PoiType poi_types = 29;
inline int Response::poi_types_size() const {
  return poi_types_.size();
}
inline void Response::clear_poi_types() {
  poi_types_.Clear();
}
inline const ::pbnavitia::PoiType& Response::poi_types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.poi_types)
  return poi_types_.Get(index);
}
inline ::pbnavitia::PoiType* Response::mutable_poi_types(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.poi_types)
  return poi_types_.Mutable(index);
}
inline ::pbnavitia::PoiType* Response::add_poi_types() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.poi_types)
  return poi_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PoiType >*
Response::mutable_poi_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.poi_types)
  return &poi_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PoiType >&
Response::poi_types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.poi_types)
  return poi_types_;
}

// repeated .pbnavitia.Calendar calendars = 55;
inline int Response::calendars_size() const {
  return calendars_.size();
}
inline void Response::clear_calendars() {
  calendars_.Clear();
}
inline const ::pbnavitia::Calendar& Response::calendars(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.calendars)
  return calendars_.Get(index);
}
inline ::pbnavitia::Calendar* Response::mutable_calendars(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.calendars)
  return calendars_.Mutable(index);
}
inline ::pbnavitia::Calendar* Response::add_calendars() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.calendars)
  return calendars_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
Response::mutable_calendars() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.calendars)
  return &calendars_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
Response::calendars() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.calendars)
  return calendars_;
}

// repeated .pbnavitia.LineGroup line_groups = 56;
inline int Response::line_groups_size() const {
  return line_groups_.size();
}
inline void Response::clear_line_groups() {
  line_groups_.Clear();
}
inline const ::pbnavitia::LineGroup& Response::line_groups(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.line_groups)
  return line_groups_.Get(index);
}
inline ::pbnavitia::LineGroup* Response::mutable_line_groups(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.line_groups)
  return line_groups_.Mutable(index);
}
inline ::pbnavitia::LineGroup* Response::add_line_groups() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.line_groups)
  return line_groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >*
Response::mutable_line_groups() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.line_groups)
  return &line_groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >&
Response::line_groups() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.line_groups)
  return line_groups_;
}

// repeated .pbnavitia.Trip trips = 62;
inline int Response::trips_size() const {
  return trips_.size();
}
inline void Response::clear_trips() {
  trips_.Clear();
}
inline const ::pbnavitia::Trip& Response::trips(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.trips)
  return trips_.Get(index);
}
inline ::pbnavitia::Trip* Response::mutable_trips(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.trips)
  return trips_.Mutable(index);
}
inline ::pbnavitia::Trip* Response::add_trips() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.trips)
  return trips_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Trip >*
Response::mutable_trips() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.trips)
  return &trips_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Trip >&
Response::trips() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.trips)
  return trips_;
}

// repeated .pbnavitia.Contributor contributors = 64;
inline int Response::contributors_size() const {
  return contributors_.size();
}
inline void Response::clear_contributors() {
  contributors_.Clear();
}
inline const ::pbnavitia::Contributor& Response::contributors(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.contributors)
  return contributors_.Get(index);
}
inline ::pbnavitia::Contributor* Response::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.contributors)
  return contributors_.Mutable(index);
}
inline ::pbnavitia::Contributor* Response::add_contributors() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.contributors)
  return contributors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Contributor >*
Response::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.contributors)
  return &contributors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Contributor >&
Response::contributors() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.contributors)
  return contributors_;
}

// repeated .pbnavitia.Dataset datasets = 65;
inline int Response::datasets_size() const {
  return datasets_.size();
}
inline void Response::clear_datasets() {
  datasets_.Clear();
}
inline const ::pbnavitia::Dataset& Response::datasets(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.datasets)
  return datasets_.Get(index);
}
inline ::pbnavitia::Dataset* Response::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.datasets)
  return datasets_.Mutable(index);
}
inline ::pbnavitia::Dataset* Response::add_datasets() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.datasets)
  return datasets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Dataset >*
Response::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.datasets)
  return &datasets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Dataset >&
Response::datasets() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.datasets)
  return datasets_;
}

// repeated .pbnavitia.RoutePoint route_points = 66;
inline int Response::route_points_size() const {
  return route_points_.size();
}
inline void Response::clear_route_points() {
  route_points_.Clear();
}
inline const ::pbnavitia::RoutePoint& Response::route_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.route_points)
  return route_points_.Get(index);
}
inline ::pbnavitia::RoutePoint* Response::mutable_route_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.route_points)
  return route_points_.Mutable(index);
}
inline ::pbnavitia::RoutePoint* Response::add_route_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.route_points)
  return route_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutePoint >*
Response::mutable_route_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.route_points)
  return &route_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutePoint >&
Response::route_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.route_points)
  return route_points_;
}

// repeated .pbnavitia.Impact impacts = 57;
inline int Response::impacts_size() const {
  return impacts_.size();
}
inline void Response::clear_impacts() {
  impacts_.Clear();
}
inline const ::pbnavitia::Impact& Response::impacts(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.impacts)
  return impacts_.Get(index);
}
inline ::pbnavitia::Impact* Response::mutable_impacts(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.impacts)
  return impacts_.Mutable(index);
}
inline ::pbnavitia::Impact* Response::add_impacts() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.impacts)
  return impacts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Impact >*
Response::mutable_impacts() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.impacts)
  return &impacts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Impact >&
Response::impacts() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.impacts)
  return impacts_;
}

// repeated .pbnavitia.Journey journeys = 30;
inline int Response::journeys_size() const {
  return journeys_.size();
}
inline void Response::clear_journeys() {
  journeys_.Clear();
}
inline const ::pbnavitia::Journey& Response::journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.journeys)
  return journeys_.Get(index);
}
inline ::pbnavitia::Journey* Response::mutable_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.journeys)
  return journeys_.Mutable(index);
}
inline ::pbnavitia::Journey* Response::add_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.journeys)
  return journeys_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
Response::mutable_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.journeys)
  return &journeys_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
Response::journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.journeys)
  return journeys_;
}

// optional .pbnavitia.ResponseType response_type = 31;
inline bool Response::has_response_type() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Response::set_has_response_type() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Response::clear_has_response_type() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Response::clear_response_type() {
  response_type_ = 1;
  clear_has_response_type();
}
inline ::pbnavitia::ResponseType Response::response_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.response_type)
  return static_cast< ::pbnavitia::ResponseType >(response_type_);
}
inline void Response::set_response_type(::pbnavitia::ResponseType value) {
  assert(::pbnavitia::ResponseType_IsValid(value));
  set_has_response_type();
  response_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Response.response_type)
}

// optional string prev = 32;
inline bool Response::has_prev() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Response::set_has_prev() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Response::clear_has_prev() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Response::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& Response::prev() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.prev)
  return prev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Response.prev)
}
inline void Response::set_prev(const char* value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.prev)
}
inline void Response::set_prev(const char* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.prev)
}
inline ::std::string* Response::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_prev() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.prev)
}

// optional string next = 33;
inline bool Response::has_next() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Response::set_has_next() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Response::clear_has_next() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Response::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& Response::next() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.next)
  return next_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Response.next)
}
inline void Response::set_next(const char* value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.next)
}
inline void Response::set_next(const char* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.next)
}
inline ::std::string* Response::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_next() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.next)
}

// optional uint32 next_request_date_time = 34;
inline bool Response::has_next_request_date_time() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Response::set_has_next_request_date_time() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Response::clear_has_next_request_date_time() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Response::clear_next_request_date_time() {
  next_request_date_time_ = 0u;
  clear_has_next_request_date_time();
}
inline ::google::protobuf::uint32 Response::next_request_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.next_request_date_time)
  return next_request_date_time_;
}
inline void Response::set_next_request_date_time(::google::protobuf::uint32 value) {
  set_has_next_request_date_time();
  next_request_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Response.next_request_date_time)
}

// repeated .pbnavitia.RouteSchedule route_schedules = 35;
inline int Response::route_schedules_size() const {
  return route_schedules_.size();
}
inline void Response::clear_route_schedules() {
  route_schedules_.Clear();
}
inline const ::pbnavitia::RouteSchedule& Response::route_schedules(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.route_schedules)
  return route_schedules_.Get(index);
}
inline ::pbnavitia::RouteSchedule* Response::mutable_route_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.route_schedules)
  return route_schedules_.Mutable(index);
}
inline ::pbnavitia::RouteSchedule* Response::add_route_schedules() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.route_schedules)
  return route_schedules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteSchedule >*
Response::mutable_route_schedules() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.route_schedules)
  return &route_schedules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteSchedule >&
Response::route_schedules() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.route_schedules)
  return route_schedules_;
}

// repeated .pbnavitia.DepartureBoard departure_boards = 36;
inline int Response::departure_boards_size() const {
  return departure_boards_.size();
}
inline void Response::clear_departure_boards() {
  departure_boards_.Clear();
}
inline const ::pbnavitia::DepartureBoard& Response::departure_boards(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.departure_boards)
  return departure_boards_.Get(index);
}
inline ::pbnavitia::DepartureBoard* Response::mutable_departure_boards(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.departure_boards)
  return departure_boards_.Mutable(index);
}
inline ::pbnavitia::DepartureBoard* Response::add_departure_boards() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.departure_boards)
  return departure_boards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::DepartureBoard >*
Response::mutable_departure_boards() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.departure_boards)
  return &departure_boards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::DepartureBoard >&
Response::departure_boards() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.departure_boards)
  return departure_boards_;
}

// repeated .pbnavitia.Passage next_departures = 37;
inline int Response::next_departures_size() const {
  return next_departures_.size();
}
inline void Response::clear_next_departures() {
  next_departures_.Clear();
}
inline const ::pbnavitia::Passage& Response::next_departures(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.next_departures)
  return next_departures_.Get(index);
}
inline ::pbnavitia::Passage* Response::mutable_next_departures(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.next_departures)
  return next_departures_.Mutable(index);
}
inline ::pbnavitia::Passage* Response::add_next_departures() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.next_departures)
  return next_departures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >*
Response::mutable_next_departures() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.next_departures)
  return &next_departures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >&
Response::next_departures() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.next_departures)
  return next_departures_;
}

// repeated .pbnavitia.Passage next_arrivals = 38;
inline int Response::next_arrivals_size() const {
  return next_arrivals_.size();
}
inline void Response::clear_next_arrivals() {
  next_arrivals_.Clear();
}
inline const ::pbnavitia::Passage& Response::next_arrivals(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.next_arrivals)
  return next_arrivals_.Get(index);
}
inline ::pbnavitia::Passage* Response::mutable_next_arrivals(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.next_arrivals)
  return next_arrivals_.Mutable(index);
}
inline ::pbnavitia::Passage* Response::add_next_arrivals() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.next_arrivals)
  return next_arrivals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >*
Response::mutable_next_arrivals() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.next_arrivals)
  return &next_arrivals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >&
Response::next_arrivals() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.next_arrivals)
  return next_arrivals_;
}

// repeated .pbnavitia.StopSchedule stop_schedules = 39;
inline int Response::stop_schedules_size() const {
  return stop_schedules_.size();
}
inline void Response::clear_stop_schedules() {
  stop_schedules_.Clear();
}
inline const ::pbnavitia::StopSchedule& Response::stop_schedules(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.stop_schedules)
  return stop_schedules_.Get(index);
}
inline ::pbnavitia::StopSchedule* Response::mutable_stop_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.stop_schedules)
  return stop_schedules_.Mutable(index);
}
inline ::pbnavitia::StopSchedule* Response::add_stop_schedules() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.stop_schedules)
  return stop_schedules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >*
Response::mutable_stop_schedules() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.stop_schedules)
  return &stop_schedules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >&
Response::stop_schedules() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.stop_schedules)
  return stop_schedules_;
}

// optional .pbnavitia.Load load = 46;
inline bool Response::has_load() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Response::set_has_load() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Response::clear_has_load() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Response::clear_load() {
  if (load_ != NULL) load_->::pbnavitia::Load::Clear();
  clear_has_load();
}
inline const ::pbnavitia::Load& Response::load() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.load)
  return load_ != NULL ? *load_ : *default_instance_->load_;
}
inline ::pbnavitia::Load* Response::mutable_load() {
  set_has_load();
  if (load_ == NULL) {
    load_ = new ::pbnavitia::Load;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.load)
  return load_;
}
inline ::pbnavitia::Load* Response::release_load() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.load)
  clear_has_load();
  ::pbnavitia::Load* temp = load_;
  load_ = NULL;
  return temp;
}
inline void Response::set_allocated_load(::pbnavitia::Load* load) {
  delete load_;
  load_ = load;
  if (load) {
    set_has_load();
  } else {
    clear_has_load();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.load)
}

// optional .pbnavitia.Metadatas metadatas = 48;
inline bool Response::has_metadatas() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Response::set_has_metadatas() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Response::clear_has_metadatas() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Response::clear_metadatas() {
  if (metadatas_ != NULL) metadatas_->::pbnavitia::Metadatas::Clear();
  clear_has_metadatas();
}
inline const ::pbnavitia::Metadatas& Response::metadatas() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.metadatas)
  return metadatas_ != NULL ? *metadatas_ : *default_instance_->metadatas_;
}
inline ::pbnavitia::Metadatas* Response::mutable_metadatas() {
  set_has_metadatas();
  if (metadatas_ == NULL) {
    metadatas_ = new ::pbnavitia::Metadatas;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.metadatas)
  return metadatas_;
}
inline ::pbnavitia::Metadatas* Response::release_metadatas() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.metadatas)
  clear_has_metadatas();
  ::pbnavitia::Metadatas* temp = metadatas_;
  metadatas_ = NULL;
  return temp;
}
inline void Response::set_allocated_metadatas(::pbnavitia::Metadatas* metadatas) {
  delete metadatas_;
  metadatas_ = metadatas;
  if (metadatas) {
    set_has_metadatas();
  } else {
    clear_has_metadatas();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.metadatas)
}

// optional .pbnavitia.Pagination pagination = 49;
inline bool Response::has_pagination() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Response::set_has_pagination() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Response::clear_has_pagination() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Response::clear_pagination() {
  if (pagination_ != NULL) pagination_->::pbnavitia::Pagination::Clear();
  clear_has_pagination();
}
inline const ::pbnavitia::Pagination& Response::pagination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.pagination)
  return pagination_ != NULL ? *pagination_ : *default_instance_->pagination_;
}
inline ::pbnavitia::Pagination* Response::mutable_pagination() {
  set_has_pagination();
  if (pagination_ == NULL) {
    pagination_ = new ::pbnavitia::Pagination;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.pagination)
  return pagination_;
}
inline ::pbnavitia::Pagination* Response::release_pagination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.pagination)
  clear_has_pagination();
  ::pbnavitia::Pagination* temp = pagination_;
  pagination_ = NULL;
  return temp;
}
inline void Response::set_allocated_pagination(::pbnavitia::Pagination* pagination) {
  delete pagination_;
  pagination_ = pagination;
  if (pagination) {
    set_has_pagination();
  } else {
    clear_has_pagination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.pagination)
}

// repeated .pbnavitia.TrafficReports traffic_reports = 61;
inline int Response::traffic_reports_size() const {
  return traffic_reports_.size();
}
inline void Response::clear_traffic_reports() {
  traffic_reports_.Clear();
}
inline const ::pbnavitia::TrafficReports& Response::traffic_reports(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.traffic_reports)
  return traffic_reports_.Get(index);
}
inline ::pbnavitia::TrafficReports* Response::mutable_traffic_reports(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.traffic_reports)
  return traffic_reports_.Mutable(index);
}
inline ::pbnavitia::TrafficReports* Response::add_traffic_reports() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.traffic_reports)
  return traffic_reports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::TrafficReports >*
Response::mutable_traffic_reports() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.traffic_reports)
  return &traffic_reports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::TrafficReports >&
Response::traffic_reports() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.traffic_reports)
  return traffic_reports_;
}

// repeated .pbnavitia.LineReport line_reports = 73;
inline int Response::line_reports_size() const {
  return line_reports_.size();
}
inline void Response::clear_line_reports() {
  line_reports_.Clear();
}
inline const ::pbnavitia::LineReport& Response::line_reports(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.line_reports)
  return line_reports_.Get(index);
}
inline ::pbnavitia::LineReport* Response::mutable_line_reports(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.line_reports)
  return line_reports_.Mutable(index);
}
inline ::pbnavitia::LineReport* Response::add_line_reports() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.line_reports)
  return line_reports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineReport >*
Response::mutable_line_reports() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.line_reports)
  return &line_reports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineReport >&
Response::line_reports() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.line_reports)
  return line_reports_;
}

// repeated .pbnavitia.Ticket tickets = 51;
inline int Response::tickets_size() const {
  return tickets_.size();
}
inline void Response::clear_tickets() {
  tickets_.Clear();
}
inline const ::pbnavitia::Ticket& Response::tickets(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.tickets)
  return tickets_.Get(index);
}
inline ::pbnavitia::Ticket* Response::mutable_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.tickets)
  return tickets_.Mutable(index);
}
inline ::pbnavitia::Ticket* Response::add_tickets() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.tickets)
  return tickets_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Ticket >*
Response::mutable_tickets() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.tickets)
  return &tickets_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Ticket >&
Response::tickets() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.tickets)
  return tickets_;
}

// repeated .pbnavitia.PtObject pt_objects = 52;
inline int Response::pt_objects_size() const {
  return pt_objects_.size();
}
inline void Response::clear_pt_objects() {
  pt_objects_.Clear();
}
inline const ::pbnavitia::PtObject& Response::pt_objects(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.pt_objects)
  return pt_objects_.Get(index);
}
inline ::pbnavitia::PtObject* Response::mutable_pt_objects(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.pt_objects)
  return pt_objects_.Mutable(index);
}
inline ::pbnavitia::PtObject* Response::add_pt_objects() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.pt_objects)
  return pt_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
Response::mutable_pt_objects() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.pt_objects)
  return &pt_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
Response::pt_objects() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.pt_objects)
  return pt_objects_;
}

// repeated .pbnavitia.FeedPublisher feed_publishers = 53;
inline int Response::feed_publishers_size() const {
  return feed_publishers_.size();
}
inline void Response::clear_feed_publishers() {
  feed_publishers_.Clear();
}
inline const ::pbnavitia::FeedPublisher& Response::feed_publishers(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.feed_publishers)
  return feed_publishers_.Get(index);
}
inline ::pbnavitia::FeedPublisher* Response::mutable_feed_publishers(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.feed_publishers)
  return feed_publishers_.Mutable(index);
}
inline ::pbnavitia::FeedPublisher* Response::add_feed_publishers() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.feed_publishers)
  return feed_publishers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::FeedPublisher >*
Response::mutable_feed_publishers() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.feed_publishers)
  return &feed_publishers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::FeedPublisher >&
Response::feed_publishers() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.feed_publishers)
  return feed_publishers_;
}

// repeated .pbnavitia.NearestStopPoint nearest_stop_points = 63;
inline int Response::nearest_stop_points_size() const {
  return nearest_stop_points_.size();
}
inline void Response::clear_nearest_stop_points() {
  nearest_stop_points_.Clear();
}
inline const ::pbnavitia::NearestStopPoint& Response::nearest_stop_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.nearest_stop_points)
  return nearest_stop_points_.Get(index);
}
inline ::pbnavitia::NearestStopPoint* Response::mutable_nearest_stop_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.nearest_stop_points)
  return nearest_stop_points_.Mutable(index);
}
inline ::pbnavitia::NearestStopPoint* Response::add_nearest_stop_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.nearest_stop_points)
  return nearest_stop_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::NearestStopPoint >*
Response::mutable_nearest_stop_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.nearest_stop_points)
  return &nearest_stop_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::NearestStopPoint >&
Response::nearest_stop_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.nearest_stop_points)
  return nearest_stop_points_;
}

// repeated .pbnavitia.Link links = 67;
inline int Response::links_size() const {
  return links_.size();
}
inline void Response::clear_links() {
  links_.Clear();
}
inline const ::pbnavitia::Link& Response::links(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.links)
  return links_.Get(index);
}
inline ::pbnavitia::Link* Response::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.links)
  return links_.Mutable(index);
}
inline ::pbnavitia::Link* Response::add_links() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.links)
  return links_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Link >*
Response::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.links)
  return &links_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Link >&
Response::links() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.links)
  return links_;
}

// repeated .pbnavitia.GraphicalIsochrone graphical_isochrones = 68;
inline int Response::graphical_isochrones_size() const {
  return graphical_isochrones_.size();
}
inline void Response::clear_graphical_isochrones() {
  graphical_isochrones_.Clear();
}
inline const ::pbnavitia::GraphicalIsochrone& Response::graphical_isochrones(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.graphical_isochrones)
  return graphical_isochrones_.Get(index);
}
inline ::pbnavitia::GraphicalIsochrone* Response::mutable_graphical_isochrones(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.graphical_isochrones)
  return graphical_isochrones_.Mutable(index);
}
inline ::pbnavitia::GraphicalIsochrone* Response::add_graphical_isochrones() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.graphical_isochrones)
  return graphical_isochrones_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::GraphicalIsochrone >*
Response::mutable_graphical_isochrones() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.graphical_isochrones)
  return &graphical_isochrones_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GraphicalIsochrone >&
Response::graphical_isochrones() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.graphical_isochrones)
  return graphical_isochrones_;
}

// repeated .pbnavitia.HeatMap heat_maps = 71;
inline int Response::heat_maps_size() const {
  return heat_maps_.size();
}
inline void Response::clear_heat_maps() {
  heat_maps_.Clear();
}
inline const ::pbnavitia::HeatMap& Response::heat_maps(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.heat_maps)
  return heat_maps_.Get(index);
}
inline ::pbnavitia::HeatMap* Response::mutable_heat_maps(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.heat_maps)
  return heat_maps_.Mutable(index);
}
inline ::pbnavitia::HeatMap* Response::add_heat_maps() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.heat_maps)
  return heat_maps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::HeatMap >*
Response::mutable_heat_maps() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.heat_maps)
  return &heat_maps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::HeatMap >&
Response::heat_maps() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.heat_maps)
  return heat_maps_;
}

// optional .pbnavitia.GeoStatus geo_status = 69;
inline bool Response::has_geo_status() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Response::set_has_geo_status() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Response::clear_has_geo_status() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Response::clear_geo_status() {
  if (geo_status_ != NULL) geo_status_->::pbnavitia::GeoStatus::Clear();
  clear_has_geo_status();
}
inline const ::pbnavitia::GeoStatus& Response::geo_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.geo_status)
  return geo_status_ != NULL ? *geo_status_ : *default_instance_->geo_status_;
}
inline ::pbnavitia::GeoStatus* Response::mutable_geo_status() {
  set_has_geo_status();
  if (geo_status_ == NULL) {
    geo_status_ = new ::pbnavitia::GeoStatus;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.geo_status)
  return geo_status_;
}
inline ::pbnavitia::GeoStatus* Response::release_geo_status() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.geo_status)
  clear_has_geo_status();
  ::pbnavitia::GeoStatus* temp = geo_status_;
  geo_status_ = NULL;
  return temp;
}
inline void Response::set_allocated_geo_status(::pbnavitia::GeoStatus* geo_status) {
  delete geo_status_;
  geo_status_ = geo_status;
  if (geo_status) {
    set_has_geo_status();
  } else {
    clear_has_geo_status();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.geo_status)
}

// optional .pbnavitia.Co2Emission car_co2_emission = 70;
inline bool Response::has_car_co2_emission() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Response::set_has_car_co2_emission() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Response::clear_has_car_co2_emission() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Response::clear_car_co2_emission() {
  if (car_co2_emission_ != NULL) car_co2_emission_->::pbnavitia::Co2Emission::Clear();
  clear_has_car_co2_emission();
}
inline const ::pbnavitia::Co2Emission& Response::car_co2_emission() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.car_co2_emission)
  return car_co2_emission_ != NULL ? *car_co2_emission_ : *default_instance_->car_co2_emission_;
}
inline ::pbnavitia::Co2Emission* Response::mutable_car_co2_emission() {
  set_has_car_co2_emission();
  if (car_co2_emission_ == NULL) {
    car_co2_emission_ = new ::pbnavitia::Co2Emission;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.car_co2_emission)
  return car_co2_emission_;
}
inline ::pbnavitia::Co2Emission* Response::release_car_co2_emission() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.car_co2_emission)
  clear_has_car_co2_emission();
  ::pbnavitia::Co2Emission* temp = car_co2_emission_;
  car_co2_emission_ = NULL;
  return temp;
}
inline void Response::set_allocated_car_co2_emission(::pbnavitia::Co2Emission* car_co2_emission) {
  delete car_co2_emission_;
  car_co2_emission_ = car_co2_emission;
  if (car_co2_emission) {
    set_has_car_co2_emission();
  } else {
    clear_has_car_co2_emission();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.car_co2_emission)
}

// optional .pbnavitia.StreetNetworkRoutingMatrix sn_routing_matrix = 72;
inline bool Response::has_sn_routing_matrix() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Response::set_has_sn_routing_matrix() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Response::clear_has_sn_routing_matrix() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Response::clear_sn_routing_matrix() {
  if (sn_routing_matrix_ != NULL) sn_routing_matrix_->::pbnavitia::StreetNetworkRoutingMatrix::Clear();
  clear_has_sn_routing_matrix();
}
inline const ::pbnavitia::StreetNetworkRoutingMatrix& Response::sn_routing_matrix() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.sn_routing_matrix)
  return sn_routing_matrix_ != NULL ? *sn_routing_matrix_ : *default_instance_->sn_routing_matrix_;
}
inline ::pbnavitia::StreetNetworkRoutingMatrix* Response::mutable_sn_routing_matrix() {
  set_has_sn_routing_matrix();
  if (sn_routing_matrix_ == NULL) {
    sn_routing_matrix_ = new ::pbnavitia::StreetNetworkRoutingMatrix;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.sn_routing_matrix)
  return sn_routing_matrix_;
}
inline ::pbnavitia::StreetNetworkRoutingMatrix* Response::release_sn_routing_matrix() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.sn_routing_matrix)
  clear_has_sn_routing_matrix();
  ::pbnavitia::StreetNetworkRoutingMatrix* temp = sn_routing_matrix_;
  sn_routing_matrix_ = NULL;
  return temp;
}
inline void Response::set_allocated_sn_routing_matrix(::pbnavitia::StreetNetworkRoutingMatrix* sn_routing_matrix) {
  delete sn_routing_matrix_;
  sn_routing_matrix_ = sn_routing_matrix;
  if (sn_routing_matrix) {
    set_has_sn_routing_matrix();
  } else {
    clear_has_sn_routing_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.sn_routing_matrix)
}

// repeated .pbnavitia.EquipmentReport equipment_reports = 74;
inline int Response::equipment_reports_size() const {
  return equipment_reports_.size();
}
inline void Response::clear_equipment_reports() {
  equipment_reports_.Clear();
}
inline const ::pbnavitia::EquipmentReport& Response::equipment_reports(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.equipment_reports)
  return equipment_reports_.Get(index);
}
inline ::pbnavitia::EquipmentReport* Response::mutable_equipment_reports(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.equipment_reports)
  return equipment_reports_.Mutable(index);
}
inline ::pbnavitia::EquipmentReport* Response::add_equipment_reports() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.equipment_reports)
  return equipment_reports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentReport >*
Response::mutable_equipment_reports() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.equipment_reports)
  return &equipment_reports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentReport >&
Response::equipment_reports() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.equipment_reports)
  return equipment_reports_;
}

// repeated .pbnavitia.StopSchedule terminus_schedules = 75;
inline int Response::terminus_schedules_size() const {
  return terminus_schedules_.size();
}
inline void Response::clear_terminus_schedules() {
  terminus_schedules_.Clear();
}
inline const ::pbnavitia::StopSchedule& Response::terminus_schedules(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.terminus_schedules)
  return terminus_schedules_.Get(index);
}
inline ::pbnavitia::StopSchedule* Response::mutable_terminus_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.terminus_schedules)
  return terminus_schedules_.Mutable(index);
}
inline ::pbnavitia::StopSchedule* Response::add_terminus_schedules() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.terminus_schedules)
  return terminus_schedules_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >*
Response::mutable_terminus_schedules() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.terminus_schedules)
  return &terminus_schedules_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >&
Response::terminus_schedules() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.terminus_schedules)
  return terminus_schedules_;
}

// -------------------------------------------------------------------

// NearestStopPoint

// optional .pbnavitia.StopPoint stop_point = 1;
inline bool NearestStopPoint::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearestStopPoint::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NearestStopPoint::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NearestStopPoint::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& NearestStopPoint::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPoint.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* NearestStopPoint::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.NearestStopPoint.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* NearestStopPoint::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.NearestStopPoint.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void NearestStopPoint::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NearestStopPoint.stop_point)
}

// optional int32 access_duration = 2;
inline bool NearestStopPoint::has_access_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearestStopPoint::set_has_access_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NearestStopPoint::clear_has_access_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NearestStopPoint::clear_access_duration() {
  access_duration_ = 0;
  clear_has_access_duration();
}
inline ::google::protobuf::int32 NearestStopPoint::access_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPoint.access_duration)
  return access_duration_;
}
inline void NearestStopPoint::set_access_duration(::google::protobuf::int32 value) {
  set_has_access_duration();
  access_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPoint.access_duration)
}

// -------------------------------------------------------------------

// EquipmentReport

// optional .pbnavitia.Line line = 1;
inline bool EquipmentReport::has_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentReport::set_has_line() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentReport::clear_has_line() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentReport::clear_line() {
  if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  clear_has_line();
}
inline const ::pbnavitia::Line& EquipmentReport::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReport.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::pbnavitia::Line* EquipmentReport::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentReport.line)
  return line_;
}
inline ::pbnavitia::Line* EquipmentReport::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentReport.line)
  clear_has_line();
  ::pbnavitia::Line* temp = line_;
  line_ = NULL;
  return temp;
}
inline void EquipmentReport::set_allocated_line(::pbnavitia::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentReport.line)
}

// repeated .pbnavitia.StopAreaEquipment stop_area_equipments = 2;
inline int EquipmentReport::stop_area_equipments_size() const {
  return stop_area_equipments_.size();
}
inline void EquipmentReport::clear_stop_area_equipments() {
  stop_area_equipments_.Clear();
}
inline const ::pbnavitia::StopAreaEquipment& EquipmentReport::stop_area_equipments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReport.stop_area_equipments)
  return stop_area_equipments_.Get(index);
}
inline ::pbnavitia::StopAreaEquipment* EquipmentReport::mutable_stop_area_equipments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentReport.stop_area_equipments)
  return stop_area_equipments_.Mutable(index);
}
inline ::pbnavitia::StopAreaEquipment* EquipmentReport::add_stop_area_equipments() {
  // @@protoc_insertion_point(field_add:pbnavitia.EquipmentReport.stop_area_equipments)
  return stop_area_equipments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopAreaEquipment >*
EquipmentReport::mutable_stop_area_equipments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.EquipmentReport.stop_area_equipments)
  return &stop_area_equipments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopAreaEquipment >&
EquipmentReport::stop_area_equipments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.EquipmentReport.stop_area_equipments)
  return stop_area_equipments_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnavitia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pbnavitia::Error_error_id> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::Error_error_id>() {
  return ::pbnavitia::Error_error_id_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::CyclePathType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::CyclePathType>() {
  return ::pbnavitia::CyclePathType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::StreetNetworkMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::StreetNetworkMode>() {
  return ::pbnavitia::StreetNetworkMode_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::SectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::SectionType>() {
  return ::pbnavitia::SectionType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::TransferType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::TransferType>() {
  return ::pbnavitia::TransferType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::SectionAdditionalInformationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::SectionAdditionalInformationType>() {
  return ::pbnavitia::SectionAdditionalInformationType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::GenderType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::GenderType>() {
  return ::pbnavitia::GenderType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::ResponseType>() {
  return ::pbnavitia::ResponseType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::RoutingStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::RoutingStatus>() {
  return ::pbnavitia::RoutingStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_response_2eproto__INCLUDED
