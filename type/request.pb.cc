// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbnavitia {

namespace {

const ::google::protobuf::Descriptor* CalendarsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalendarsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficReportsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficReportsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineReportsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineReportsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlacesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlacesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NextStopTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NextStopTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreetNetworkParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreetNetworkParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* JourneysRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JourneysRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlacesNearbyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlacesNearbyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceUriRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceUriRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceCodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceCodeRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlaceCodeRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PTRefRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PTRefRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarCO2EmissionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarCO2EmissionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirectPathRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectPathRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreetNetworkRoutingMatrixRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreetNetworkRoutingMatrixRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchingRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchingRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* NearestStopPointsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NearestStopPointsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphicalIsochroneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphicalIsochroneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeatMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeatMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PtobjectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PtobjectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentReportsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentReportsRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_request_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_request_2eproto() {
  protobuf_AddDesc_request_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "request.proto");
  GOOGLE_CHECK(file != NULL);
  CalendarsRequest_descriptor_ = file->message_type(0);
  static const int CalendarsRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, start_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, forbidden_uris_),
  };
  CalendarsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalendarsRequest_descriptor_,
      CalendarsRequest::default_instance_,
      CalendarsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CalendarsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarsRequest, _internal_metadata_),
      -1);
  TrafficReportsRequest_descriptor_ = file->message_type(1);
  static const int TrafficReportsRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, application_period_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, application_period_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, _current_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, start_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, forbidden_uris_),
  };
  TrafficReportsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficReportsRequest_descriptor_,
      TrafficReportsRequest::default_instance_,
      TrafficReportsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficReportsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReportsRequest, _internal_metadata_),
      -1);
  LineReportsRequest_descriptor_ = file->message_type(2);
  static const int LineReportsRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, start_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, forbidden_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, since_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, until_datetime_),
  };
  LineReportsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LineReportsRequest_descriptor_,
      LineReportsRequest::default_instance_,
      LineReportsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LineReportsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReportsRequest, _internal_metadata_),
      -1);
  PlacesRequest_descriptor_ = file->message_type(3);
  static const int PlacesRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, admin_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, search_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, main_stop_area_weight_factor_),
  };
  PlacesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlacesRequest_descriptor_,
      PlacesRequest::default_instance_,
      PlacesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlacesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesRequest, _internal_metadata_),
      -1);
  NextStopTimeRequest_descriptor_ = file->message_type(4);
  static const int NextStopTimeRequest_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, departure_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, arrival_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, from_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, nb_stoptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, interface_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, start_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, max_date_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, forbidden_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, calendar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, show_codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, until_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, _current_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, realtime_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, items_per_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, disable_geojson_),
  };
  NextStopTimeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NextStopTimeRequest_descriptor_,
      NextStopTimeRequest::default_instance_,
      NextStopTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(NextStopTimeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStopTimeRequest, _internal_metadata_),
      -1);
  StreetNetworkParams_descriptor_ = file->message_type(5);
  static const int StreetNetworkParams_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, origin_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, destination_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, walking_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, bike_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, car_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, bss_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, origin_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, destination_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, max_walking_duration_to_pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, max_bike_duration_to_pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, max_bss_duration_to_pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, max_car_duration_to_pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, enable_direct_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, car_no_park_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, max_car_no_park_duration_to_pt_),
  };
  StreetNetworkParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreetNetworkParams_descriptor_,
      StreetNetworkParams::default_instance_,
      StreetNetworkParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreetNetworkParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkParams, _internal_metadata_),
      -1);
  JourneysRequest_descriptor_ = file->message_type(6);
  static const int JourneysRequest_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, datetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, clockwise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, forbidden_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, max_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, max_transfers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, streetnetwork_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, wheelchair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, show_codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, realtime_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, max_extra_second_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, walking_transfer_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, direct_path_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, bike_in_pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, allowed_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, free_radius_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, free_radius_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, min_nb_journeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, night_bus_filter_max_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, night_bus_filter_base_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, timeframe_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, isochrone_center_),
  };
  JourneysRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JourneysRequest_descriptor_,
      JourneysRequest::default_instance_,
      JourneysRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(JourneysRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneysRequest, _internal_metadata_),
      -1);
  PlacesNearbyRequest_descriptor_ = file->message_type(7);
  static const int PlacesNearbyRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, start_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, stop_points_nearby_radius_),
  };
  PlacesNearbyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlacesNearbyRequest_descriptor_,
      PlacesNearbyRequest::default_instance_,
      PlacesNearbyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlacesNearbyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlacesNearbyRequest, _internal_metadata_),
      -1);
  PlaceUriRequest_descriptor_ = file->message_type(8);
  static const int PlaceUriRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceUriRequest, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceUriRequest, depth_),
  };
  PlaceUriRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlaceUriRequest_descriptor_,
      PlaceUriRequest::default_instance_,
      PlaceUriRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceUriRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlaceUriRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceUriRequest, _internal_metadata_),
      -1);
  PlaceCodeRequest_descriptor_ = file->message_type(9);
  static const int PlaceCodeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceCodeRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceCodeRequest, type_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceCodeRequest, code_),
  };
  PlaceCodeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlaceCodeRequest_descriptor_,
      PlaceCodeRequest::default_instance_,
      PlaceCodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceCodeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlaceCodeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceCodeRequest, _internal_metadata_),
      -1);
  PlaceCodeRequest_Type_descriptor_ = PlaceCodeRequest_descriptor_->enum_type(0);
  PTRefRequest_descriptor_ = file->message_type(10);
  static const int PTRefRequest_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, requested_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, start_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, show_codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, odt_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, forbidden_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, since_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, until_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, disable_geojson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, realtime_level_),
  };
  PTRefRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PTRefRequest_descriptor_,
      PTRefRequest::default_instance_,
      PTRefRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PTRefRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PTRefRequest, _internal_metadata_),
      -1);
  CarCO2EmissionRequest_descriptor_ = file->message_type(11);
  static const int CarCO2EmissionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarCO2EmissionRequest, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarCO2EmissionRequest, destination_),
  };
  CarCO2EmissionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CarCO2EmissionRequest_descriptor_,
      CarCO2EmissionRequest::default_instance_,
      CarCO2EmissionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarCO2EmissionRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CarCO2EmissionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarCO2EmissionRequest, _internal_metadata_),
      -1);
  DirectPathRequest_descriptor_ = file->message_type(12);
  static const int DirectPathRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectPathRequest, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectPathRequest, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectPathRequest, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectPathRequest, clockwise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectPathRequest, streetnetwork_params_),
  };
  DirectPathRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DirectPathRequest_descriptor_,
      DirectPathRequest::default_instance_,
      DirectPathRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectPathRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(DirectPathRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectPathRequest, _internal_metadata_),
      -1);
  StreetNetworkRoutingMatrixRequest_descriptor_ = file->message_type(13);
  static const int StreetNetworkRoutingMatrixRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrixRequest, origins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrixRequest, destinations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrixRequest, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrixRequest, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrixRequest, max_duration_),
  };
  StreetNetworkRoutingMatrixRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreetNetworkRoutingMatrixRequest_descriptor_,
      StreetNetworkRoutingMatrixRequest::default_instance_,
      StreetNetworkRoutingMatrixRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrixRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreetNetworkRoutingMatrixRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrixRequest, _internal_metadata_),
      -1);
  MatchingRoute_descriptor_ = file->message_type(14);
  static const int MatchingRoute_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingRoute, line_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingRoute, start_stop_point_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingRoute, destination_code_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingRoute, destination_code_),
  };
  MatchingRoute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchingRoute_descriptor_,
      MatchingRoute::default_instance_,
      MatchingRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingRoute, _has_bits_[0]),
      -1,
      -1,
      sizeof(MatchingRoute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchingRoute, _internal_metadata_),
      -1);
  Request_descriptor_ = file->message_type(15);
  static const int Request_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, requested_api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, next_stop_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, places_nearby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, journeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, ptref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, place_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, traffic_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, calendars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, pt_objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, place_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, nearest_stop_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _current_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, isochrone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, car_co2_emission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, direct_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, heat_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sn_routing_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, matching_routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, line_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, disable_feedpublisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, disable_disruption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, equipment_reports_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  NearestStopPointsRequest_descriptor_ = file->message_type(16);
  static const int NearestStopPointsRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, walking_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, bike_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, car_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, bss_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, max_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, reverse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, car_no_park_speed_),
  };
  NearestStopPointsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NearestStopPointsRequest_descriptor_,
      NearestStopPointsRequest::default_instance_,
      NearestStopPointsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(NearestStopPointsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPointsRequest, _internal_metadata_),
      -1);
  GraphicalIsochroneRequest_descriptor_ = file->message_type(17);
  static const int GraphicalIsochroneRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochroneRequest, journeys_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochroneRequest, boundary_duration_),
  };
  GraphicalIsochroneRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphicalIsochroneRequest_descriptor_,
      GraphicalIsochroneRequest::default_instance_,
      GraphicalIsochroneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochroneRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(GraphicalIsochroneRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochroneRequest, _internal_metadata_),
      -1);
  HeatMapRequest_descriptor_ = file->message_type(18);
  static const int HeatMapRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMapRequest, journeys_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMapRequest, resolution_),
  };
  HeatMapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeatMapRequest_descriptor_,
      HeatMapRequest::default_instance_,
      HeatMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMapRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeatMapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMapRequest, _internal_metadata_),
      -1);
  PtobjectRequest_descriptor_ = file->message_type(19);
  static const int PtobjectRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, admin_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, search_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, disable_geojson_),
  };
  PtobjectRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PtobjectRequest_descriptor_,
      PtobjectRequest::default_instance_,
      PtobjectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(PtobjectRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtobjectRequest, _internal_metadata_),
      -1);
  EquipmentReportsRequest_descriptor_ = file->message_type(20);
  static const int EquipmentReportsRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReportsRequest, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReportsRequest, start_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReportsRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReportsRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReportsRequest, forbidden_uris_),
  };
  EquipmentReportsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EquipmentReportsRequest_descriptor_,
      EquipmentReportsRequest::default_instance_,
      EquipmentReportsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReportsRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(EquipmentReportsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReportsRequest, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_request_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalendarsRequest_descriptor_, &CalendarsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficReportsRequest_descriptor_, &TrafficReportsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LineReportsRequest_descriptor_, &LineReportsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlacesRequest_descriptor_, &PlacesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NextStopTimeRequest_descriptor_, &NextStopTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreetNetworkParams_descriptor_, &StreetNetworkParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JourneysRequest_descriptor_, &JourneysRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlacesNearbyRequest_descriptor_, &PlacesNearbyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlaceUriRequest_descriptor_, &PlaceUriRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlaceCodeRequest_descriptor_, &PlaceCodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PTRefRequest_descriptor_, &PTRefRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CarCO2EmissionRequest_descriptor_, &CarCO2EmissionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DirectPathRequest_descriptor_, &DirectPathRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreetNetworkRoutingMatrixRequest_descriptor_, &StreetNetworkRoutingMatrixRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchingRoute_descriptor_, &MatchingRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NearestStopPointsRequest_descriptor_, &NearestStopPointsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphicalIsochroneRequest_descriptor_, &GraphicalIsochroneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeatMapRequest_descriptor_, &HeatMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PtobjectRequest_descriptor_, &PtobjectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EquipmentReportsRequest_descriptor_, &EquipmentReportsRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_request_2eproto() {
  delete CalendarsRequest::default_instance_;
  delete CalendarsRequest_reflection_;
  delete TrafficReportsRequest::default_instance_;
  delete TrafficReportsRequest_reflection_;
  delete LineReportsRequest::default_instance_;
  delete LineReportsRequest_reflection_;
  delete PlacesRequest::default_instance_;
  delete PlacesRequest_reflection_;
  delete NextStopTimeRequest::default_instance_;
  delete NextStopTimeRequest_reflection_;
  delete StreetNetworkParams::default_instance_;
  delete StreetNetworkParams_reflection_;
  delete JourneysRequest::default_instance_;
  delete JourneysRequest_reflection_;
  delete PlacesNearbyRequest::default_instance_;
  delete PlacesNearbyRequest_reflection_;
  delete PlaceUriRequest::default_instance_;
  delete PlaceUriRequest_reflection_;
  delete PlaceCodeRequest::default_instance_;
  delete PlaceCodeRequest_reflection_;
  delete PTRefRequest::default_instance_;
  delete PTRefRequest_reflection_;
  delete CarCO2EmissionRequest::default_instance_;
  delete CarCO2EmissionRequest_reflection_;
  delete DirectPathRequest::default_instance_;
  delete DirectPathRequest_reflection_;
  delete StreetNetworkRoutingMatrixRequest::default_instance_;
  delete StreetNetworkRoutingMatrixRequest_reflection_;
  delete MatchingRoute::default_instance_;
  delete MatchingRoute_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete NearestStopPointsRequest::default_instance_;
  delete NearestStopPointsRequest_reflection_;
  delete GraphicalIsochroneRequest::default_instance_;
  delete GraphicalIsochroneRequest_reflection_;
  delete HeatMapRequest::default_instance_;
  delete HeatMapRequest_reflection_;
  delete PtobjectRequest::default_instance_;
  delete PtobjectRequest_reflection_;
  delete EquipmentReportsRequest::default_instance_;
  delete EquipmentReportsRequest_reflection_;
}

void protobuf_AddDesc_request_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_request_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pbnavitia::protobuf_AddDesc_type_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrequest.proto\022\tpbnavitia\032\ntype.proto\"\222"
    "\001\n\020CalendarsRequest\022\022\n\nstart_date\030\001 \001(\t\022"
    "\020\n\010end_date\030\002 \001(\t\022\r\n\005depth\030\003 \001(\005\022\022\n\nstar"
    "t_page\030\004 \001(\005\022\r\n\005count\030\005 \001(\005\022\016\n\006filter\030\006 "
    "\001(\t\022\026\n\016forbidden_uris\030\007 \003(\t\"\316\001\n\025TrafficR"
    "eportsRequest\022 \n\030application_period_begi"
    "n\030\010 \001(\004\022\036\n\026application_period_end\030\t \001(\004\022"
    "\031\n\021_current_datetime\030\n \001(\004\022\r\n\005depth\030\003 \001("
    "\005\022\022\n\nstart_page\030\004 \001(\005\022\r\n\005count\030\005 \001(\005\022\016\n\006"
    "filter\030\006 \001(\t\022\026\n\016forbidden_uris\030\007 \003(\t\"\236\001\n"
    "\022LineReportsRequest\022\r\n\005depth\030\001 \001(\005\022\022\n\nst"
    "art_page\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\016\n\006filter\030"
    "\004 \001(\t\022\026\n\016forbidden_uris\030\005 \003(\t\022\026\n\016since_d"
    "atetime\030\006 \001(\004\022\026\n\016until_datetime\030\007 \001(\004\"\261\001"
    "\n\rPlacesRequest\022\t\n\001q\030\001 \002(\t\022%\n\005types\030\002 \003("
    "\0162\026.pbnavitia.NavitiaType\022\r\n\005depth\030\003 \002(\005"
    "\022\r\n\005count\030\004 \002(\005\022\022\n\nadmin_uris\030\005 \003(\t\022\023\n\013s"
    "earch_type\030\006 \001(\005\022\'\n\034main_stop_area_weigh"
    "t_factor\030\007 \001(\002:\0011\"\274\003\n\023NextStopTimeReques"
    "t\022\030\n\020departure_filter\030\001 \002(\t\022\026\n\016arrival_f"
    "ilter\030\002 \002(\t\022\025\n\rfrom_datetime\030\003 \001(\004\022\020\n\010du"
    "ration\030\004 \002(\005\022\r\n\005depth\030\005 \002(\005\022\024\n\014nb_stopti"
    "mes\030\007 \002(\005\022\031\n\021interface_version\030\010 \001(\005\022\022\n\n"
    "start_page\030\t \002(\005\022\r\n\005count\030\n \002(\005\022\026\n\016max_d"
    "ate_times\030\013 \001(\005\022\025\n\rforbidden_uri\030\014 \003(\t\022\020"
    "\n\010calendar\030\r \001(\t\022\022\n\nshow_codes\030\016 \001(\010\022\026\n\016"
    "until_datetime\030\017 \001(\004\022\031\n\021_current_datetim"
    "e\030\020 \001(\004\022*\n\016realtime_level\030\021 \001(\0162\022.pbnavi"
    "tia.RTLevel\022\032\n\022items_per_schedule\030\022 \001(\005\022"
    "\027\n\017disable_geojson\030\023 \001(\010\"\262\003\n\023StreetNetwo"
    "rkParams\022\023\n\013origin_mode\030\001 \001(\t\022\030\n\020destina"
    "tion_mode\030\002 \001(\t\022\025\n\rwalking_speed\030\003 \001(\001\022\022"
    "\n\nbike_speed\030\005 \001(\001\022\021\n\tcar_speed\030\007 \001(\001\022\021\n"
    "\tbss_speed\030\t \001(\001\022\025\n\rorigin_filter\030\013 \001(\t\022"
    "\032\n\022destination_filter\030\014 \001(\t\022\"\n\032max_walki"
    "ng_duration_to_pt\030\r \001(\005\022\037\n\027max_bike_dura"
    "tion_to_pt\030\016 \001(\005\022\036\n\026max_bss_duration_to_"
    "pt\030\017 \001(\005\022\036\n\026max_car_duration_to_pt\030\020 \001(\005"
    "\022 \n\022enable_direct_path\030\021 \001(\010:\004true\022\031\n\021ca"
    "r_no_park_speed\030\022 \001(\001\022&\n\036max_car_no_park"
    "_duration_to_pt\030\023 \001(\005\"\234\006\n\017JourneysReques"
    "t\022*\n\006origin\030\001 \003(\0132\032.pbnavitia.LocationCo"
    "ntext\022/\n\013destination\030\002 \003(\0132\032.pbnavitia.L"
    "ocationContext\022\021\n\tdatetimes\030\003 \003(\004\022\021\n\tclo"
    "ckwise\030\004 \002(\010\022\026\n\016forbidden_uris\030\005 \003(\t\022\024\n\014"
    "max_duration\030\006 \002(\005\022\025\n\rmax_transfers\030\007 \002("
    "\005\022<\n\024streetnetwork_params\030\010 \001(\0132\036.pbnavi"
    "tia.StreetNetworkParams\022\031\n\nwheelchair\030\t "
    "\001(\010:\005false\022\022\n\nshow_codes\030\013 \001(\010\022\017\n\007detail"
    "s\030\r \001(\010\022*\n\016realtime_level\030\016 \001(\0162\022.pbnavi"
    "tia.RTLevel\022 \n\025max_extra_second_pass\030\017 \001"
    "(\005:\0010\022%\n\030walking_transfer_penalty\030\020 \001(\005:"
    "\003120\022\034\n\024direct_path_duration\030\021 \001(\005\022\022\n\nbi"
    "ke_in_pt\030\022 \001(\010\022\022\n\nallowed_id\030\023 \003(\t\022\033\n\020fr"
    "ee_radius_from\030\024 \001(\005:\0010\022\031\n\016free_radius_t"
    "o\030\025 \001(\005:\0010\022\027\n\017min_nb_journeys\030\026 \001(\005\022(\n\033n"
    "ight_bus_filter_max_factor\030\027 \001(\001:\0031.5\022)\n"
    "\034night_bus_filter_base_factor\030\030 \001(\005:\003900"
    "\022\032\n\022timeframe_duration\030\031 \001(\r\022\020\n\005depth\030\032 "
    "\001(\005:\0011\0224\n\020isochrone_center\030\033 \001(\0132\032.pbnav"
    "itia.LocationContext\"\300\001\n\023PlacesNearbyReq"
    "uest\022\013\n\003uri\030\001 \002(\t\022\020\n\010distance\030\002 \002(\001\022%\n\005t"
    "ypes\030\003 \003(\0162\026.pbnavitia.NavitiaType\022\r\n\005de"
    "pth\030\004 \002(\005\022\r\n\005count\030\005 \002(\005\022\022\n\nstart_page\030\006"
    " \002(\005\022\016\n\006filter\030\007 \001(\t\022!\n\031stop_points_near"
    "by_radius\030\010 \001(\001\"0\n\017PlaceUriRequest\022\013\n\003ur"
    "i\030\001 \002(\t\022\020\n\005depth\030\002 \001(\005:\0011\"\331\001\n\020PlaceCodeR"
    "equest\022.\n\004type\030\001 \002(\0162 .pbnavitia.PlaceCo"
    "deRequest.Type\022\021\n\ttype_code\030\002 \002(\t\022\014\n\004cod"
    "e\030\003 \002(\t\"t\n\004Type\022\014\n\010StopArea\020\000\022\013\n\007Network"
    "\020\001\022\013\n\007Company\020\002\022\010\n\004Line\020\003\022\t\n\005Route\020\004\022\022\n\016"
    "VehicleJourney\020\005\022\r\n\tStopPoint\020\006\022\014\n\010Calen"
    "dar\020\007\"\332\002\n\014PTRefRequest\022.\n\016requested_type"
    "\030\001 \002(\0162\026.pbnavitia.NavitiaType\022\016\n\006filter"
    "\030\002 \002(\t\022\r\n\005depth\030\003 \002(\005\022\022\n\nstart_page\030\004 \002("
    "\005\022\r\n\005count\030\005 \002(\005\022\022\n\nshow_codes\030\007 \001(\010\022&\n\t"
    "odt_level\030\010 \001(\0162\023.pbnavitia.OdtLevel\022\025\n\r"
    "forbidden_uri\030\006 \003(\t\022\020\n\010datetime\030\t \001(\004\022\026\n"
    "\016since_datetime\030\n \001(\004\022\026\n\016until_datetime\030"
    "\013 \001(\004\022\027\n\017disable_geojson\030\014 \001(\010\022*\n\016realti"
    "me_level\030\r \001(\0162\022.pbnavitia.RTLevel\"t\n\025Ca"
    "rCO2EmissionRequest\022*\n\006origin\030\001 \001(\0132\032.pb"
    "navitia.LocationContext\022/\n\013destination\030\002"
    " \001(\0132\032.pbnavitia.LocationContext\"\323\001\n\021Dir"
    "ectPathRequest\022*\n\006origin\030\001 \001(\0132\032.pbnavit"
    "ia.LocationContext\022/\n\013destination\030\002 \001(\0132"
    "\032.pbnavitia.LocationContext\022\020\n\010datetime\030"
    "\003 \001(\004\022\021\n\tclockwise\030\004 \002(\010\022<\n\024streetnetwor"
    "k_params\030\005 \001(\0132\036.pbnavitia.StreetNetwork"
    "Params\"\265\001\n!StreetNetworkRoutingMatrixReq"
    "uest\022+\n\007origins\030\001 \003(\0132\032.pbnavitia.Locati"
    "onContext\0220\n\014destinations\030\002 \003(\0132\032.pbnavi"
    "tia.LocationContext\022\014\n\004mode\030\003 \001(\t\022\r\n\005spe"
    "ed\030\004 \001(\002\022\024\n\014max_duration\030\005 \001(\005\"w\n\rMatchi"
    "ngRoute\022\020\n\010line_uri\030\001 \001(\t\022\034\n\024start_stop_"
    "point_uri\030\002 \001(\t\022\034\n\024destination_code_key\030"
    "\003 \001(\t\022\030\n\020destination_code\030\004 \001(\t\"\322\t\n\007Requ"
    "est\022%\n\rrequested_api\030\001 \002(\0162\016.pbnavitia.A"
    "PI\022(\n\006places\030\002 \001(\0132\030.pbnavitia.PlacesReq"
    "uest\0227\n\017next_stop_times\030\003 \001(\0132\036.pbnaviti"
    "a.NextStopTimeRequest\0225\n\rplaces_nearby\030\004"
    " \001(\0132\036.pbnavitia.PlacesNearbyRequest\022,\n\010"
    "journeys\030\005 \001(\0132\032.pbnavitia.JourneysReque"
    "st\022&\n\005ptref\030\006 \001(\0132\027.pbnavitia.PTRefReque"
    "st\022-\n\tplace_uri\030\007 \001(\0132\032.pbnavitia.PlaceU"
    "riRequest\0229\n\017traffic_reports\030\r \001(\0132 .pbn"
    "avitia.TrafficReportsRequest\022.\n\tcalendar"
    "s\030\t \001(\0132\033.pbnavitia.CalendarsRequest\022.\n\n"
    "pt_objects\030\n \001(\0132\032.pbnavitia.PtobjectReq"
    "uest\022/\n\nplace_code\030\013 \001(\0132\033.pbnavitia.Pla"
    "ceCodeRequest\022@\n\023nearest_stop_points\030\016 \001"
    "(\0132#.pbnavitia.NearestStopPointsRequest\022"
    "\031\n\021_current_datetime\030\017 \001(\004\0227\n\tisochrone\030"
    "\020 \001(\0132$.pbnavitia.GraphicalIsochroneRequ"
    "est\022:\n\020car_co2_emission\030\021 \001(\0132 .pbnaviti"
    "a.CarCO2EmissionRequest\0221\n\013direct_path\030\022"
    " \001(\0132\034.pbnavitia.DirectPathRequest\022+\n\010he"
    "at_map\030\023 \001(\0132\031.pbnavitia.HeatMapRequest\022"
    "G\n\021sn_routing_matrix\030\024 \001(\0132,.pbnavitia.S"
    "treetNetworkRoutingMatrixRequest\022+\n\005coor"
    "d\030\025 \001(\0132\034.pbnavitia.GeographicalCoord\0221\n"
    "\017matching_routes\030\027 \001(\0132\030.pbnavitia.Match"
    "ingRoute\0223\n\014line_reports\030\030 \001(\0132\035.pbnavit"
    "ia.LineReportsRequest\022\022\n\nrequest_id\030\014 \001("
    "\t\022\035\n\025disable_feedpublisher\030\026 \001(\010\022!\n\022disa"
    "ble_disruption\030\031 \001(\010:\005false\022\020\n\010deadline\030"
    "\032 \001(\t\022=\n\021equipment_reports\030\033 \001(\0132\".pbnav"
    "itia.EquipmentReportsRequest\"\332\001\n\030Nearest"
    "StopPointsRequest\022\r\n\005place\030\001 \001(\t\022\014\n\004mode"
    "\030\002 \001(\t\022\025\n\rwalking_speed\030\003 \001(\001\022\022\n\nbike_sp"
    "eed\030\004 \001(\001\022\021\n\tcar_speed\030\005 \001(\001\022\021\n\tbss_spee"
    "d\030\006 \001(\001\022\016\n\006filter\030\007 \001(\t\022\024\n\014max_duration\030"
    "\010 \001(\005\022\017\n\007reverse\030\t \001(\010\022\031\n\021car_no_park_sp"
    "eed\030\n \001(\001\"l\n\031GraphicalIsochroneRequest\0224"
    "\n\020journeys_request\030\001 \001(\0132\032.pbnavitia.Jou"
    "rneysRequest\022\031\n\021boundary_duration\030\002 \003(\005\""
    "Z\n\016HeatMapRequest\0224\n\020journeys_request\030\001 "
    "\001(\0132\032.pbnavitia.JourneysRequest\022\022\n\nresol"
    "ution\030\002 \001(\005\"\243\001\n\017PtobjectRequest\022\t\n\001q\030\001 \002"
    "(\t\022%\n\005types\030\002 \003(\0162\026.pbnavitia.NavitiaTyp"
    "e\022\r\n\005depth\030\003 \002(\005\022\r\n\005count\030\004 \002(\005\022\022\n\nadmin"
    "_uris\030\005 \003(\t\022\023\n\013search_type\030\006 \001(\005\022\027\n\017disa"
    "ble_geojson\030\007 \001(\010\"s\n\027EquipmentReportsReq"
    "uest\022\r\n\005depth\030\001 \001(\005\022\022\n\nstart_page\030\002 \001(\005\022"
    "\r\n\005count\030\003 \001(\005\022\016\n\006filter\030\004 \001(\t\022\026\n\016forbid"
    "den_uris\030\005 \003(\t", 5814);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "request.proto", &protobuf_RegisterTypes);
  CalendarsRequest::default_instance_ = new CalendarsRequest();
  TrafficReportsRequest::default_instance_ = new TrafficReportsRequest();
  LineReportsRequest::default_instance_ = new LineReportsRequest();
  PlacesRequest::default_instance_ = new PlacesRequest();
  NextStopTimeRequest::default_instance_ = new NextStopTimeRequest();
  StreetNetworkParams::default_instance_ = new StreetNetworkParams();
  JourneysRequest::default_instance_ = new JourneysRequest();
  PlacesNearbyRequest::default_instance_ = new PlacesNearbyRequest();
  PlaceUriRequest::default_instance_ = new PlaceUriRequest();
  PlaceCodeRequest::default_instance_ = new PlaceCodeRequest();
  PTRefRequest::default_instance_ = new PTRefRequest();
  CarCO2EmissionRequest::default_instance_ = new CarCO2EmissionRequest();
  DirectPathRequest::default_instance_ = new DirectPathRequest();
  StreetNetworkRoutingMatrixRequest::default_instance_ = new StreetNetworkRoutingMatrixRequest();
  MatchingRoute::default_instance_ = new MatchingRoute();
  Request::default_instance_ = new Request();
  NearestStopPointsRequest::default_instance_ = new NearestStopPointsRequest();
  GraphicalIsochroneRequest::default_instance_ = new GraphicalIsochroneRequest();
  HeatMapRequest::default_instance_ = new HeatMapRequest();
  PtobjectRequest::default_instance_ = new PtobjectRequest();
  EquipmentReportsRequest::default_instance_ = new EquipmentReportsRequest();
  CalendarsRequest::default_instance_->InitAsDefaultInstance();
  TrafficReportsRequest::default_instance_->InitAsDefaultInstance();
  LineReportsRequest::default_instance_->InitAsDefaultInstance();
  PlacesRequest::default_instance_->InitAsDefaultInstance();
  NextStopTimeRequest::default_instance_->InitAsDefaultInstance();
  StreetNetworkParams::default_instance_->InitAsDefaultInstance();
  JourneysRequest::default_instance_->InitAsDefaultInstance();
  PlacesNearbyRequest::default_instance_->InitAsDefaultInstance();
  PlaceUriRequest::default_instance_->InitAsDefaultInstance();
  PlaceCodeRequest::default_instance_->InitAsDefaultInstance();
  PTRefRequest::default_instance_->InitAsDefaultInstance();
  CarCO2EmissionRequest::default_instance_->InitAsDefaultInstance();
  DirectPathRequest::default_instance_->InitAsDefaultInstance();
  StreetNetworkRoutingMatrixRequest::default_instance_->InitAsDefaultInstance();
  MatchingRoute::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  NearestStopPointsRequest::default_instance_->InitAsDefaultInstance();
  GraphicalIsochroneRequest::default_instance_->InitAsDefaultInstance();
  HeatMapRequest::default_instance_->InitAsDefaultInstance();
  PtobjectRequest::default_instance_->InitAsDefaultInstance();
  EquipmentReportsRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_request_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_request_2eproto {
  StaticDescriptorInitializer_request_2eproto() {
    protobuf_AddDesc_request_2eproto();
  }
} static_descriptor_initializer_request_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalendarsRequest::kStartDateFieldNumber;
const int CalendarsRequest::kEndDateFieldNumber;
const int CalendarsRequest::kDepthFieldNumber;
const int CalendarsRequest::kStartPageFieldNumber;
const int CalendarsRequest::kCountFieldNumber;
const int CalendarsRequest::kFilterFieldNumber;
const int CalendarsRequest::kForbiddenUrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalendarsRequest::CalendarsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.CalendarsRequest)
}

void CalendarsRequest::InitAsDefaultInstance() {
}

CalendarsRequest::CalendarsRequest(const CalendarsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.CalendarsRequest)
}

void CalendarsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depth_ = 0;
  start_page_ = 0;
  count_ = 0;
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalendarsRequest::~CalendarsRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.CalendarsRequest)
  SharedDtor();
}

void CalendarsRequest::SharedDtor() {
  start_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CalendarsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalendarsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalendarsRequest_descriptor_;
}

const CalendarsRequest& CalendarsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

CalendarsRequest* CalendarsRequest::default_instance_ = NULL;

CalendarsRequest* CalendarsRequest::New(::google::protobuf::Arena* arena) const {
  CalendarsRequest* n = new CalendarsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalendarsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.CalendarsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CalendarsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CalendarsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(depth_, start_page_);
    if (has_start_date()) {
      start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_date()) {
      end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    count_ = 0;
    if (has_filter()) {
      filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  forbidden_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CalendarsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.CalendarsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string start_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_date().data(), this->start_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CalendarsRequest.start_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_date;
        break;
      }

      // optional string end_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end_date().data(), this->end_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CalendarsRequest.end_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_depth;
        break;
      }

      // optional int32 depth = 3;
      case 3: {
        if (tag == 24) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_page;
        break;
      }

      // optional int32 start_page = 4;
      case 4: {
        if (tag == 32) {
         parse_start_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_page_)));
          set_has_start_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }

      // optional string filter = 6;
      case 6: {
        if (tag == 50) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CalendarsRequest.filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_forbidden_uris;
        break;
      }

      // repeated string forbidden_uris = 7;
      case 7: {
        if (tag == 58) {
         parse_forbidden_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forbidden_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forbidden_uris(this->forbidden_uris_size() - 1).data(),
            this->forbidden_uris(this->forbidden_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CalendarsRequest.forbidden_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_forbidden_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.CalendarsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.CalendarsRequest)
  return false;
#undef DO_
}

void CalendarsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.CalendarsRequest)
  // optional string start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_date().data(), this->start_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarsRequest.start_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_date(), output);
  }

  // optional string end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_date().data(), this->end_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarsRequest.end_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end_date(), output);
  }

  // optional int32 depth = 3;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depth(), output);
  }

  // optional int32 start_page = 4;
  if (has_start_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_page(), output);
  }

  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarsRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filter(), output);
  }

  // repeated string forbidden_uris = 7;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarsRequest.forbidden_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->forbidden_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.CalendarsRequest)
}

::google::protobuf::uint8* CalendarsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.CalendarsRequest)
  // optional string start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_date().data(), this->start_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarsRequest.start_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_date(), target);
  }

  // optional string end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_date().data(), this->end_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarsRequest.end_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->end_date(), target);
  }

  // optional int32 depth = 3;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depth(), target);
  }

  // optional int32 start_page = 4;
  if (has_start_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_page(), target);
  }

  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarsRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filter(), target);
  }

  // repeated string forbidden_uris = 7;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarsRequest.forbidden_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->forbidden_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.CalendarsRequest)
  return target;
}

int CalendarsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.CalendarsRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string start_date = 1;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_date());
    }

    // optional string end_date = 2;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_date());
    }

    // optional int32 depth = 3;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional int32 start_page = 4;
    if (has_start_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_page());
    }

    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional string filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

  }
  // repeated string forbidden_uris = 7;
  total_size += 1 * this->forbidden_uris_size();
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forbidden_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalendarsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.CalendarsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CalendarsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CalendarsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.CalendarsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.CalendarsRequest)
    MergeFrom(*source);
  }
}

void CalendarsRequest::MergeFrom(const CalendarsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.CalendarsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  forbidden_uris_.MergeFrom(from.forbidden_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_has_start_date();
      start_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_date_);
    }
    if (from.has_end_date()) {
      set_has_end_date();
      end_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_date_);
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_start_page()) {
      set_start_page(from.start_page());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_filter()) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CalendarsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.CalendarsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarsRequest::CopyFrom(const CalendarsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.CalendarsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarsRequest::IsInitialized() const {

  return true;
}

void CalendarsRequest::Swap(CalendarsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarsRequest::InternalSwap(CalendarsRequest* other) {
  start_date_.Swap(&other->start_date_);
  end_date_.Swap(&other->end_date_);
  std::swap(depth_, other->depth_);
  std::swap(start_page_, other->start_page_);
  std::swap(count_, other->count_);
  filter_.Swap(&other->filter_);
  forbidden_uris_.UnsafeArenaSwap(&other->forbidden_uris_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalendarsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalendarsRequest_descriptor_;
  metadata.reflection = CalendarsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalendarsRequest

// optional string start_date = 1;
bool CalendarsRequest::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CalendarsRequest::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
void CalendarsRequest::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void CalendarsRequest::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_date();
}
 const ::std::string& CalendarsRequest::start_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.start_date)
  return start_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarsRequest::set_start_date(const ::std::string& value) {
  set_has_start_date();
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.start_date)
}
 void CalendarsRequest::set_start_date(const char* value) {
  set_has_start_date();
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarsRequest.start_date)
}
 void CalendarsRequest::set_start_date(const char* value, size_t size) {
  set_has_start_date();
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarsRequest.start_date)
}
 ::std::string* CalendarsRequest::mutable_start_date() {
  set_has_start_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarsRequest.start_date)
  return start_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarsRequest::release_start_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarsRequest.start_date)
  clear_has_start_date();
  return start_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarsRequest::set_allocated_start_date(::std::string* start_date) {
  if (start_date != NULL) {
    set_has_start_date();
  } else {
    clear_has_start_date();
  }
  start_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarsRequest.start_date)
}

// optional string end_date = 2;
bool CalendarsRequest::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CalendarsRequest::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
void CalendarsRequest::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void CalendarsRequest::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_date();
}
 const ::std::string& CalendarsRequest::end_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.end_date)
  return end_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarsRequest::set_end_date(const ::std::string& value) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.end_date)
}
 void CalendarsRequest::set_end_date(const char* value) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarsRequest.end_date)
}
 void CalendarsRequest::set_end_date(const char* value, size_t size) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarsRequest.end_date)
}
 ::std::string* CalendarsRequest::mutable_end_date() {
  set_has_end_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarsRequest.end_date)
  return end_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarsRequest::release_end_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarsRequest.end_date)
  clear_has_end_date();
  return end_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarsRequest::set_allocated_end_date(::std::string* end_date) {
  if (end_date != NULL) {
    set_has_end_date();
  } else {
    clear_has_end_date();
  }
  end_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarsRequest.end_date)
}

// optional int32 depth = 3;
bool CalendarsRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CalendarsRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
void CalendarsRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
void CalendarsRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 CalendarsRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.depth)
  return depth_;
}
 void CalendarsRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.depth)
}

// optional int32 start_page = 4;
bool CalendarsRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CalendarsRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000008u;
}
void CalendarsRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000008u;
}
void CalendarsRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
 ::google::protobuf::int32 CalendarsRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.start_page)
  return start_page_;
}
 void CalendarsRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.start_page)
}

// optional int32 count = 5;
bool CalendarsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CalendarsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
void CalendarsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void CalendarsRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 CalendarsRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.count)
  return count_;
}
 void CalendarsRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.count)
}

// optional string filter = 6;
bool CalendarsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CalendarsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000020u;
}
void CalendarsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
void CalendarsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
 const ::std::string& CalendarsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.filter)
}
 void CalendarsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarsRequest.filter)
}
 void CalendarsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarsRequest.filter)
}
 ::std::string* CalendarsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarsRequest.filter)
}

// repeated string forbidden_uris = 7;
int CalendarsRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
void CalendarsRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
 const ::std::string& CalendarsRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
 ::std::string* CalendarsRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarsRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
 void CalendarsRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
 void CalendarsRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarsRequest.forbidden_uris)
}
 void CalendarsRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarsRequest.forbidden_uris)
}
 ::std::string* CalendarsRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.CalendarsRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
 void CalendarsRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.CalendarsRequest.forbidden_uris)
}
 void CalendarsRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.CalendarsRequest.forbidden_uris)
}
 void CalendarsRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.CalendarsRequest.forbidden_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CalendarsRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.CalendarsRequest.forbidden_uris)
  return forbidden_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CalendarsRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.CalendarsRequest.forbidden_uris)
  return &forbidden_uris_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficReportsRequest::kApplicationPeriodBeginFieldNumber;
const int TrafficReportsRequest::kApplicationPeriodEndFieldNumber;
const int TrafficReportsRequest::kCurrentDatetimeFieldNumber;
const int TrafficReportsRequest::kDepthFieldNumber;
const int TrafficReportsRequest::kStartPageFieldNumber;
const int TrafficReportsRequest::kCountFieldNumber;
const int TrafficReportsRequest::kFilterFieldNumber;
const int TrafficReportsRequest::kForbiddenUrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficReportsRequest::TrafficReportsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.TrafficReportsRequest)
}

void TrafficReportsRequest::InitAsDefaultInstance() {
}

TrafficReportsRequest::TrafficReportsRequest(const TrafficReportsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.TrafficReportsRequest)
}

void TrafficReportsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  application_period_begin_ = GOOGLE_ULONGLONG(0);
  application_period_end_ = GOOGLE_ULONGLONG(0);
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  depth_ = 0;
  start_page_ = 0;
  count_ = 0;
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficReportsRequest::~TrafficReportsRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.TrafficReportsRequest)
  SharedDtor();
}

void TrafficReportsRequest::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrafficReportsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficReportsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficReportsRequest_descriptor_;
}

const TrafficReportsRequest& TrafficReportsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

TrafficReportsRequest* TrafficReportsRequest::default_instance_ = NULL;

TrafficReportsRequest* TrafficReportsRequest::New(::google::protobuf::Arena* arena) const {
  TrafficReportsRequest* n = new TrafficReportsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficReportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.TrafficReportsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrafficReportsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrafficReportsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(application_period_begin_, start_page_);
    count_ = 0;
    if (has_filter()) {
      filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  forbidden_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficReportsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.TrafficReportsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 depth = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_page;
        break;
      }

      // optional int32 start_page = 4;
      case 4: {
        if (tag == 32) {
         parse_start_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_page_)));
          set_has_start_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }

      // optional string filter = 6;
      case 6: {
        if (tag == 50) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.TrafficReportsRequest.filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_forbidden_uris;
        break;
      }

      // repeated string forbidden_uris = 7;
      case 7: {
        if (tag == 58) {
         parse_forbidden_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forbidden_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forbidden_uris(this->forbidden_uris_size() - 1).data(),
            this->forbidden_uris(this->forbidden_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.TrafficReportsRequest.forbidden_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_forbidden_uris;
        if (input->ExpectTag(64)) goto parse_application_period_begin;
        break;
      }

      // optional uint64 application_period_begin = 8;
      case 8: {
        if (tag == 64) {
         parse_application_period_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &application_period_begin_)));
          set_has_application_period_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_application_period_end;
        break;
      }

      // optional uint64 application_period_end = 9;
      case 9: {
        if (tag == 72) {
         parse_application_period_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &application_period_end_)));
          set_has_application_period_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse__current_datetime;
        break;
      }

      // optional uint64 _current_datetime = 10;
      case 10: {
        if (tag == 80) {
         parse__current_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &_current_datetime_)));
          set_has__current_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.TrafficReportsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.TrafficReportsRequest)
  return false;
#undef DO_
}

void TrafficReportsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.TrafficReportsRequest)
  // optional int32 depth = 3;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depth(), output);
  }

  // optional int32 start_page = 4;
  if (has_start_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_page(), output);
  }

  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.TrafficReportsRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filter(), output);
  }

  // repeated string forbidden_uris = 7;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.TrafficReportsRequest.forbidden_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->forbidden_uris(i), output);
  }

  // optional uint64 application_period_begin = 8;
  if (has_application_period_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->application_period_begin(), output);
  }

  // optional uint64 application_period_end = 9;
  if (has_application_period_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->application_period_end(), output);
  }

  // optional uint64 _current_datetime = 10;
  if (has__current_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->_current_datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.TrafficReportsRequest)
}

::google::protobuf::uint8* TrafficReportsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.TrafficReportsRequest)
  // optional int32 depth = 3;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depth(), target);
  }

  // optional int32 start_page = 4;
  if (has_start_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_page(), target);
  }

  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.TrafficReportsRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filter(), target);
  }

  // repeated string forbidden_uris = 7;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.TrafficReportsRequest.forbidden_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->forbidden_uris(i), target);
  }

  // optional uint64 application_period_begin = 8;
  if (has_application_period_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->application_period_begin(), target);
  }

  // optional uint64 application_period_end = 9;
  if (has_application_period_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->application_period_end(), target);
  }

  // optional uint64 _current_datetime = 10;
  if (has__current_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->_current_datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.TrafficReportsRequest)
  return target;
}

int TrafficReportsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.TrafficReportsRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint64 application_period_begin = 8;
    if (has_application_period_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->application_period_begin());
    }

    // optional uint64 application_period_end = 9;
    if (has_application_period_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->application_period_end());
    }

    // optional uint64 _current_datetime = 10;
    if (has__current_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->_current_datetime());
    }

    // optional int32 depth = 3;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional int32 start_page = 4;
    if (has_start_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_page());
    }

    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional string filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

  }
  // repeated string forbidden_uris = 7;
  total_size += 1 * this->forbidden_uris_size();
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forbidden_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficReportsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.TrafficReportsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficReportsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficReportsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.TrafficReportsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.TrafficReportsRequest)
    MergeFrom(*source);
  }
}

void TrafficReportsRequest::MergeFrom(const TrafficReportsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.TrafficReportsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  forbidden_uris_.MergeFrom(from.forbidden_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_period_begin()) {
      set_application_period_begin(from.application_period_begin());
    }
    if (from.has_application_period_end()) {
      set_application_period_end(from.application_period_end());
    }
    if (from.has__current_datetime()) {
      set__current_datetime(from._current_datetime());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_start_page()) {
      set_start_page(from.start_page());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_filter()) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficReportsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.TrafficReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficReportsRequest::CopyFrom(const TrafficReportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.TrafficReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficReportsRequest::IsInitialized() const {

  return true;
}

void TrafficReportsRequest::Swap(TrafficReportsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficReportsRequest::InternalSwap(TrafficReportsRequest* other) {
  std::swap(application_period_begin_, other->application_period_begin_);
  std::swap(application_period_end_, other->application_period_end_);
  std::swap(_current_datetime_, other->_current_datetime_);
  std::swap(depth_, other->depth_);
  std::swap(start_page_, other->start_page_);
  std::swap(count_, other->count_);
  filter_.Swap(&other->filter_);
  forbidden_uris_.UnsafeArenaSwap(&other->forbidden_uris_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficReportsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficReportsRequest_descriptor_;
  metadata.reflection = TrafficReportsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficReportsRequest

// optional uint64 application_period_begin = 8;
bool TrafficReportsRequest::has_application_period_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficReportsRequest::set_has_application_period_begin() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficReportsRequest::clear_has_application_period_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficReportsRequest::clear_application_period_begin() {
  application_period_begin_ = GOOGLE_ULONGLONG(0);
  clear_has_application_period_begin();
}
 ::google::protobuf::uint64 TrafficReportsRequest::application_period_begin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.application_period_begin)
  return application_period_begin_;
}
 void TrafficReportsRequest::set_application_period_begin(::google::protobuf::uint64 value) {
  set_has_application_period_begin();
  application_period_begin_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.application_period_begin)
}

// optional uint64 application_period_end = 9;
bool TrafficReportsRequest::has_application_period_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrafficReportsRequest::set_has_application_period_end() {
  _has_bits_[0] |= 0x00000002u;
}
void TrafficReportsRequest::clear_has_application_period_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrafficReportsRequest::clear_application_period_end() {
  application_period_end_ = GOOGLE_ULONGLONG(0);
  clear_has_application_period_end();
}
 ::google::protobuf::uint64 TrafficReportsRequest::application_period_end() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.application_period_end)
  return application_period_end_;
}
 void TrafficReportsRequest::set_application_period_end(::google::protobuf::uint64 value) {
  set_has_application_period_end();
  application_period_end_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.application_period_end)
}

// optional uint64 _current_datetime = 10;
bool TrafficReportsRequest::has__current_datetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrafficReportsRequest::set_has__current_datetime() {
  _has_bits_[0] |= 0x00000004u;
}
void TrafficReportsRequest::clear_has__current_datetime() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrafficReportsRequest::clear__current_datetime() {
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has__current_datetime();
}
 ::google::protobuf::uint64 TrafficReportsRequest::_current_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest._current_datetime)
  return _current_datetime_;
}
 void TrafficReportsRequest::set__current_datetime(::google::protobuf::uint64 value) {
  set_has__current_datetime();
  _current_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest._current_datetime)
}

// optional int32 depth = 3;
bool TrafficReportsRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrafficReportsRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
void TrafficReportsRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrafficReportsRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 TrafficReportsRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.depth)
  return depth_;
}
 void TrafficReportsRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.depth)
}

// optional int32 start_page = 4;
bool TrafficReportsRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrafficReportsRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000010u;
}
void TrafficReportsRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrafficReportsRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
 ::google::protobuf::int32 TrafficReportsRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.start_page)
  return start_page_;
}
 void TrafficReportsRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.start_page)
}

// optional int32 count = 5;
bool TrafficReportsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrafficReportsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
void TrafficReportsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrafficReportsRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 TrafficReportsRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.count)
  return count_;
}
 void TrafficReportsRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.count)
}

// optional string filter = 6;
bool TrafficReportsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrafficReportsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000040u;
}
void TrafficReportsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrafficReportsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
 const ::std::string& TrafficReportsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficReportsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.filter)
}
 void TrafficReportsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.TrafficReportsRequest.filter)
}
 void TrafficReportsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.TrafficReportsRequest.filter)
}
 ::std::string* TrafficReportsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReportsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrafficReportsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.TrafficReportsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficReportsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.TrafficReportsRequest.filter)
}

// repeated string forbidden_uris = 7;
int TrafficReportsRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
void TrafficReportsRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
 const ::std::string& TrafficReportsRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
 ::std::string* TrafficReportsRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
 void TrafficReportsRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
 void TrafficReportsRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
 void TrafficReportsRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
 ::std::string* TrafficReportsRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
 void TrafficReportsRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
 void TrafficReportsRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
 void TrafficReportsRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrafficReportsRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return forbidden_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TrafficReportsRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return &forbidden_uris_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineReportsRequest::kDepthFieldNumber;
const int LineReportsRequest::kStartPageFieldNumber;
const int LineReportsRequest::kCountFieldNumber;
const int LineReportsRequest::kFilterFieldNumber;
const int LineReportsRequest::kForbiddenUrisFieldNumber;
const int LineReportsRequest::kSinceDatetimeFieldNumber;
const int LineReportsRequest::kUntilDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineReportsRequest::LineReportsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.LineReportsRequest)
}

void LineReportsRequest::InitAsDefaultInstance() {
}

LineReportsRequest::LineReportsRequest(const LineReportsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.LineReportsRequest)
}

void LineReportsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  depth_ = 0;
  start_page_ = 0;
  count_ = 0;
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  since_datetime_ = GOOGLE_ULONGLONG(0);
  until_datetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineReportsRequest::~LineReportsRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.LineReportsRequest)
  SharedDtor();
}

void LineReportsRequest::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LineReportsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineReportsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineReportsRequest_descriptor_;
}

const LineReportsRequest& LineReportsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

LineReportsRequest* LineReportsRequest::default_instance_ = NULL;

LineReportsRequest* LineReportsRequest::New(::google::protobuf::Arena* arena) const {
  LineReportsRequest* n = new LineReportsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineReportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.LineReportsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LineReportsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LineReportsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 111u) {
    ZR_(depth_, start_page_);
    ZR_(since_datetime_, count_);
    if (has_filter()) {
      filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  forbidden_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LineReportsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.LineReportsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 depth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_page;
        break;
      }

      // optional int32 start_page = 2;
      case 2: {
        if (tag == 16) {
         parse_start_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_page_)));
          set_has_start_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_filter;
        break;
      }

      // optional string filter = 4;
      case 4: {
        if (tag == 34) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LineReportsRequest.filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_forbidden_uris;
        break;
      }

      // repeated string forbidden_uris = 5;
      case 5: {
        if (tag == 42) {
         parse_forbidden_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forbidden_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forbidden_uris(this->forbidden_uris_size() - 1).data(),
            this->forbidden_uris(this->forbidden_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LineReportsRequest.forbidden_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_forbidden_uris;
        if (input->ExpectTag(48)) goto parse_since_datetime;
        break;
      }

      // optional uint64 since_datetime = 6;
      case 6: {
        if (tag == 48) {
         parse_since_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &since_datetime_)));
          set_has_since_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_until_datetime;
        break;
      }

      // optional uint64 until_datetime = 7;
      case 7: {
        if (tag == 56) {
         parse_until_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &until_datetime_)));
          set_has_until_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.LineReportsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.LineReportsRequest)
  return false;
#undef DO_
}

void LineReportsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.LineReportsRequest)
  // optional int32 depth = 1;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->depth(), output);
  }

  // optional int32 start_page = 2;
  if (has_start_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_page(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional string filter = 4;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LineReportsRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filter(), output);
  }

  // repeated string forbidden_uris = 5;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LineReportsRequest.forbidden_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->forbidden_uris(i), output);
  }

  // optional uint64 since_datetime = 6;
  if (has_since_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->since_datetime(), output);
  }

  // optional uint64 until_datetime = 7;
  if (has_until_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->until_datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.LineReportsRequest)
}

::google::protobuf::uint8* LineReportsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.LineReportsRequest)
  // optional int32 depth = 1;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->depth(), target);
  }

  // optional int32 start_page = 2;
  if (has_start_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_page(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional string filter = 4;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LineReportsRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter(), target);
  }

  // repeated string forbidden_uris = 5;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LineReportsRequest.forbidden_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->forbidden_uris(i), target);
  }

  // optional uint64 since_datetime = 6;
  if (has_since_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->since_datetime(), target);
  }

  // optional uint64 until_datetime = 7;
  if (has_until_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->until_datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.LineReportsRequest)
  return target;
}

int LineReportsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.LineReportsRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 111u) {
    // optional int32 depth = 1;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional int32 start_page = 2;
    if (has_start_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_page());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional string filter = 4;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

    // optional uint64 since_datetime = 6;
    if (has_since_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->since_datetime());
    }

    // optional uint64 until_datetime = 7;
    if (has_until_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->until_datetime());
    }

  }
  // repeated string forbidden_uris = 5;
  total_size += 1 * this->forbidden_uris_size();
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forbidden_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineReportsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.LineReportsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LineReportsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LineReportsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.LineReportsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.LineReportsRequest)
    MergeFrom(*source);
  }
}

void LineReportsRequest::MergeFrom(const LineReportsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.LineReportsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  forbidden_uris_.MergeFrom(from.forbidden_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_start_page()) {
      set_start_page(from.start_page());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_filter()) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
    if (from.has_since_datetime()) {
      set_since_datetime(from.since_datetime());
    }
    if (from.has_until_datetime()) {
      set_until_datetime(from.until_datetime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LineReportsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.LineReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineReportsRequest::CopyFrom(const LineReportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.LineReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineReportsRequest::IsInitialized() const {

  return true;
}

void LineReportsRequest::Swap(LineReportsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineReportsRequest::InternalSwap(LineReportsRequest* other) {
  std::swap(depth_, other->depth_);
  std::swap(start_page_, other->start_page_);
  std::swap(count_, other->count_);
  filter_.Swap(&other->filter_);
  forbidden_uris_.UnsafeArenaSwap(&other->forbidden_uris_);
  std::swap(since_datetime_, other->since_datetime_);
  std::swap(until_datetime_, other->until_datetime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineReportsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineReportsRequest_descriptor_;
  metadata.reflection = LineReportsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineReportsRequest

// optional int32 depth = 1;
bool LineReportsRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LineReportsRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
void LineReportsRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
void LineReportsRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 LineReportsRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.depth)
  return depth_;
}
 void LineReportsRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.depth)
}

// optional int32 start_page = 2;
bool LineReportsRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LineReportsRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000002u;
}
void LineReportsRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000002u;
}
void LineReportsRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
 ::google::protobuf::int32 LineReportsRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.start_page)
  return start_page_;
}
 void LineReportsRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.start_page)
}

// optional int32 count = 3;
bool LineReportsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LineReportsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void LineReportsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void LineReportsRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 LineReportsRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.count)
  return count_;
}
 void LineReportsRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.count)
}

// optional string filter = 4;
bool LineReportsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LineReportsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000008u;
}
void LineReportsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
void LineReportsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
 const ::std::string& LineReportsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LineReportsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.filter)
}
 void LineReportsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LineReportsRequest.filter)
}
 void LineReportsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LineReportsRequest.filter)
}
 ::std::string* LineReportsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineReportsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LineReportsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineReportsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LineReportsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineReportsRequest.filter)
}

// repeated string forbidden_uris = 5;
int LineReportsRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
void LineReportsRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
 const ::std::string& LineReportsRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
 ::std::string* LineReportsRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineReportsRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
 void LineReportsRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
 void LineReportsRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.LineReportsRequest.forbidden_uris)
}
 void LineReportsRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LineReportsRequest.forbidden_uris)
}
 ::std::string* LineReportsRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.LineReportsRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
 void LineReportsRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.LineReportsRequest.forbidden_uris)
}
 void LineReportsRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.LineReportsRequest.forbidden_uris)
}
 void LineReportsRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.LineReportsRequest.forbidden_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LineReportsRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineReportsRequest.forbidden_uris)
  return forbidden_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LineReportsRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineReportsRequest.forbidden_uris)
  return &forbidden_uris_;
}

// optional uint64 since_datetime = 6;
bool LineReportsRequest::has_since_datetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LineReportsRequest::set_has_since_datetime() {
  _has_bits_[0] |= 0x00000020u;
}
void LineReportsRequest::clear_has_since_datetime() {
  _has_bits_[0] &= ~0x00000020u;
}
void LineReportsRequest::clear_since_datetime() {
  since_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_since_datetime();
}
 ::google::protobuf::uint64 LineReportsRequest::since_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.since_datetime)
  return since_datetime_;
}
 void LineReportsRequest::set_since_datetime(::google::protobuf::uint64 value) {
  set_has_since_datetime();
  since_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.since_datetime)
}

// optional uint64 until_datetime = 7;
bool LineReportsRequest::has_until_datetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LineReportsRequest::set_has_until_datetime() {
  _has_bits_[0] |= 0x00000040u;
}
void LineReportsRequest::clear_has_until_datetime() {
  _has_bits_[0] &= ~0x00000040u;
}
void LineReportsRequest::clear_until_datetime() {
  until_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_until_datetime();
}
 ::google::protobuf::uint64 LineReportsRequest::until_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.until_datetime)
  return until_datetime_;
}
 void LineReportsRequest::set_until_datetime(::google::protobuf::uint64 value) {
  set_has_until_datetime();
  until_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.until_datetime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlacesRequest::kQFieldNumber;
const int PlacesRequest::kTypesFieldNumber;
const int PlacesRequest::kDepthFieldNumber;
const int PlacesRequest::kCountFieldNumber;
const int PlacesRequest::kAdminUrisFieldNumber;
const int PlacesRequest::kSearchTypeFieldNumber;
const int PlacesRequest::kMainStopAreaWeightFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlacesRequest::PlacesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PlacesRequest)
}

void PlacesRequest::InitAsDefaultInstance() {
}

PlacesRequest::PlacesRequest(const PlacesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PlacesRequest)
}

void PlacesRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  q_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depth_ = 0;
  count_ = 0;
  search_type_ = 0;
  main_stop_area_weight_factor_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlacesRequest::~PlacesRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.PlacesRequest)
  SharedDtor();
}

void PlacesRequest::SharedDtor() {
  q_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlacesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlacesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlacesRequest_descriptor_;
}

const PlacesRequest& PlacesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

PlacesRequest* PlacesRequest::default_instance_ = NULL;

PlacesRequest* PlacesRequest::New(::google::protobuf::Arena* arena) const {
  PlacesRequest* n = new PlacesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlacesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PlacesRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlacesRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlacesRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 109u) {
    ZR_(depth_, count_);
    if (has_q()) {
      q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    search_type_ = 0;
    main_stop_area_weight_factor_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  types_.Clear();
  admin_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlacesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PlacesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string q = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_q()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->q().data(), this->q().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PlacesRequest.q");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_types;
        break;
      }

      // repeated .pbnavitia.NavitiaType types = 2;
      case 2: {
        if (tag == 16) {
         parse_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::NavitiaType_IsValid(value)) {
            add_types(static_cast< ::pbnavitia::NavitiaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::pbnavitia::NavitiaType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_types;
        if (input->ExpectTag(24)) goto parse_depth;
        break;
      }

      // required int32 depth = 3;
      case 3: {
        if (tag == 24) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_admin_uris;
        break;
      }

      // repeated string admin_uris = 5;
      case 5: {
        if (tag == 42) {
         parse_admin_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_admin_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->admin_uris(this->admin_uris_size() - 1).data(),
            this->admin_uris(this->admin_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PlacesRequest.admin_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_admin_uris;
        if (input->ExpectTag(48)) goto parse_search_type;
        break;
      }

      // optional int32 search_type = 6;
      case 6: {
        if (tag == 48) {
         parse_search_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_type_)));
          set_has_search_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_main_stop_area_weight_factor;
        break;
      }

      // optional float main_stop_area_weight_factor = 7 [default = 1];
      case 7: {
        if (tag == 61) {
         parse_main_stop_area_weight_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &main_stop_area_weight_factor_)));
          set_has_main_stop_area_weight_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PlacesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PlacesRequest)
  return false;
#undef DO_
}

void PlacesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PlacesRequest)
  // required string q = 1;
  if (has_q()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->q().data(), this->q().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlacesRequest.q");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->q(), output);
  }

  // repeated .pbnavitia.NavitiaType types = 2;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->types(i), output);
  }

  // required int32 depth = 3;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depth(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // repeated string admin_uris = 5;
  for (int i = 0; i < this->admin_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->admin_uris(i).data(), this->admin_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlacesRequest.admin_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->admin_uris(i), output);
  }

  // optional int32 search_type = 6;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->search_type(), output);
  }

  // optional float main_stop_area_weight_factor = 7 [default = 1];
  if (has_main_stop_area_weight_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->main_stop_area_weight_factor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PlacesRequest)
}

::google::protobuf::uint8* PlacesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PlacesRequest)
  // required string q = 1;
  if (has_q()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->q().data(), this->q().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlacesRequest.q");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->q(), target);
  }

  // repeated .pbnavitia.NavitiaType types = 2;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->types(i), target);
  }

  // required int32 depth = 3;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depth(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // repeated string admin_uris = 5;
  for (int i = 0; i < this->admin_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->admin_uris(i).data(), this->admin_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlacesRequest.admin_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->admin_uris(i), target);
  }

  // optional int32 search_type = 6;
  if (has_search_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->search_type(), target);
  }

  // optional float main_stop_area_weight_factor = 7 [default = 1];
  if (has_main_stop_area_weight_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->main_stop_area_weight_factor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PlacesRequest)
  return target;
}

int PlacesRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.PlacesRequest)
  int total_size = 0;

  if (has_q()) {
    // required string q = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->q());
  }

  if (has_depth()) {
    // required int32 depth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  if (has_count()) {
    // required int32 count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
int PlacesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PlacesRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string q = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->q());

    // required int32 depth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());

    // required int32 count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96u) {
    // optional int32 search_type = 6;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_type());
    }

    // optional float main_stop_area_weight_factor = 7 [default = 1];
    if (has_main_stop_area_weight_factor()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pbnavitia.NavitiaType types = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    total_size += 1 * this->types_size() + data_size;
  }

  // repeated string admin_uris = 5;
  total_size += 1 * this->admin_uris_size();
  for (int i = 0; i < this->admin_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->admin_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlacesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PlacesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlacesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlacesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PlacesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PlacesRequest)
    MergeFrom(*source);
  }
}

void PlacesRequest::MergeFrom(const PlacesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PlacesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  types_.MergeFrom(from.types_);
  admin_uris_.MergeFrom(from.admin_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_q()) {
      set_has_q();
      q_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.q_);
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
    if (from.has_main_stop_area_weight_factor()) {
      set_main_stop_area_weight_factor(from.main_stop_area_weight_factor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlacesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PlacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlacesRequest::CopyFrom(const PlacesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PlacesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void PlacesRequest::Swap(PlacesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlacesRequest::InternalSwap(PlacesRequest* other) {
  q_.Swap(&other->q_);
  types_.UnsafeArenaSwap(&other->types_);
  std::swap(depth_, other->depth_);
  std::swap(count_, other->count_);
  admin_uris_.UnsafeArenaSwap(&other->admin_uris_);
  std::swap(search_type_, other->search_type_);
  std::swap(main_stop_area_weight_factor_, other->main_stop_area_weight_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlacesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlacesRequest_descriptor_;
  metadata.reflection = PlacesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlacesRequest

// required string q = 1;
bool PlacesRequest::has_q() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlacesRequest::set_has_q() {
  _has_bits_[0] |= 0x00000001u;
}
void PlacesRequest::clear_has_q() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlacesRequest::clear_q() {
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_q();
}
 const ::std::string& PlacesRequest::q() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.q)
  return q_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlacesRequest::set_q(const ::std::string& value) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.q)
}
 void PlacesRequest::set_q(const char* value) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlacesRequest.q)
}
 void PlacesRequest::set_q(const char* value, size_t size) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlacesRequest.q)
}
 ::std::string* PlacesRequest::mutable_q() {
  set_has_q();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlacesRequest.q)
  return q_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlacesRequest::release_q() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlacesRequest.q)
  clear_has_q();
  return q_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlacesRequest::set_allocated_q(::std::string* q) {
  if (q != NULL) {
    set_has_q();
  } else {
    clear_has_q();
  }
  q_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), q);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlacesRequest.q)
}

// repeated .pbnavitia.NavitiaType types = 2;
int PlacesRequest::types_size() const {
  return types_.size();
}
void PlacesRequest::clear_types() {
  types_.Clear();
}
 ::pbnavitia::NavitiaType PlacesRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.types)
  return static_cast< ::pbnavitia::NavitiaType >(types_.Get(index));
}
 void PlacesRequest::set_types(int index, ::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.types)
}
 void PlacesRequest::add_types(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PlacesRequest.types)
}
 const ::google::protobuf::RepeatedField<int>&
PlacesRequest::types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PlacesRequest.types)
  return types_;
}
 ::google::protobuf::RepeatedField<int>*
PlacesRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PlacesRequest.types)
  return &types_;
}

// required int32 depth = 3;
bool PlacesRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlacesRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
void PlacesRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlacesRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 PlacesRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.depth)
  return depth_;
}
 void PlacesRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.depth)
}

// required int32 count = 4;
bool PlacesRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlacesRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void PlacesRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlacesRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 PlacesRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.count)
  return count_;
}
 void PlacesRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.count)
}

// repeated string admin_uris = 5;
int PlacesRequest::admin_uris_size() const {
  return admin_uris_.size();
}
void PlacesRequest::clear_admin_uris() {
  admin_uris_.Clear();
}
 const ::std::string& PlacesRequest::admin_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.admin_uris)
  return admin_uris_.Get(index);
}
 ::std::string* PlacesRequest::mutable_admin_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlacesRequest.admin_uris)
  return admin_uris_.Mutable(index);
}
 void PlacesRequest::set_admin_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.admin_uris)
  admin_uris_.Mutable(index)->assign(value);
}
 void PlacesRequest::set_admin_uris(int index, const char* value) {
  admin_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlacesRequest.admin_uris)
}
 void PlacesRequest::set_admin_uris(int index, const char* value, size_t size) {
  admin_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlacesRequest.admin_uris)
}
 ::std::string* PlacesRequest::add_admin_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PlacesRequest.admin_uris)
  return admin_uris_.Add();
}
 void PlacesRequest::add_admin_uris(const ::std::string& value) {
  admin_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PlacesRequest.admin_uris)
}
 void PlacesRequest::add_admin_uris(const char* value) {
  admin_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PlacesRequest.admin_uris)
}
 void PlacesRequest::add_admin_uris(const char* value, size_t size) {
  admin_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PlacesRequest.admin_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlacesRequest::admin_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PlacesRequest.admin_uris)
  return admin_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PlacesRequest::mutable_admin_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PlacesRequest.admin_uris)
  return &admin_uris_;
}

// optional int32 search_type = 6;
bool PlacesRequest::has_search_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlacesRequest::set_has_search_type() {
  _has_bits_[0] |= 0x00000020u;
}
void PlacesRequest::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlacesRequest::clear_search_type() {
  search_type_ = 0;
  clear_has_search_type();
}
 ::google::protobuf::int32 PlacesRequest::search_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.search_type)
  return search_type_;
}
 void PlacesRequest::set_search_type(::google::protobuf::int32 value) {
  set_has_search_type();
  search_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.search_type)
}

// optional float main_stop_area_weight_factor = 7 [default = 1];
bool PlacesRequest::has_main_stop_area_weight_factor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlacesRequest::set_has_main_stop_area_weight_factor() {
  _has_bits_[0] |= 0x00000040u;
}
void PlacesRequest::clear_has_main_stop_area_weight_factor() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlacesRequest::clear_main_stop_area_weight_factor() {
  main_stop_area_weight_factor_ = 1;
  clear_has_main_stop_area_weight_factor();
}
 float PlacesRequest::main_stop_area_weight_factor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.main_stop_area_weight_factor)
  return main_stop_area_weight_factor_;
}
 void PlacesRequest::set_main_stop_area_weight_factor(float value) {
  set_has_main_stop_area_weight_factor();
  main_stop_area_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.main_stop_area_weight_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NextStopTimeRequest::kDepartureFilterFieldNumber;
const int NextStopTimeRequest::kArrivalFilterFieldNumber;
const int NextStopTimeRequest::kFromDatetimeFieldNumber;
const int NextStopTimeRequest::kDurationFieldNumber;
const int NextStopTimeRequest::kDepthFieldNumber;
const int NextStopTimeRequest::kNbStoptimesFieldNumber;
const int NextStopTimeRequest::kInterfaceVersionFieldNumber;
const int NextStopTimeRequest::kStartPageFieldNumber;
const int NextStopTimeRequest::kCountFieldNumber;
const int NextStopTimeRequest::kMaxDateTimesFieldNumber;
const int NextStopTimeRequest::kForbiddenUriFieldNumber;
const int NextStopTimeRequest::kCalendarFieldNumber;
const int NextStopTimeRequest::kShowCodesFieldNumber;
const int NextStopTimeRequest::kUntilDatetimeFieldNumber;
const int NextStopTimeRequest::kCurrentDatetimeFieldNumber;
const int NextStopTimeRequest::kRealtimeLevelFieldNumber;
const int NextStopTimeRequest::kItemsPerScheduleFieldNumber;
const int NextStopTimeRequest::kDisableGeojsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NextStopTimeRequest::NextStopTimeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.NextStopTimeRequest)
}

void NextStopTimeRequest::InitAsDefaultInstance() {
}

NextStopTimeRequest::NextStopTimeRequest(const NextStopTimeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.NextStopTimeRequest)
}

void NextStopTimeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  departure_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arrival_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_datetime_ = GOOGLE_ULONGLONG(0);
  duration_ = 0;
  depth_ = 0;
  nb_stoptimes_ = 0;
  interface_version_ = 0;
  start_page_ = 0;
  count_ = 0;
  max_date_times_ = 0;
  calendar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_codes_ = false;
  until_datetime_ = GOOGLE_ULONGLONG(0);
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  realtime_level_ = 1;
  items_per_schedule_ = 0;
  disable_geojson_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextStopTimeRequest::~NextStopTimeRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.NextStopTimeRequest)
  SharedDtor();
}

void NextStopTimeRequest::SharedDtor() {
  departure_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arrival_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calendar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NextStopTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NextStopTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NextStopTimeRequest_descriptor_;
}

const NextStopTimeRequest& NextStopTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

NextStopTimeRequest* NextStopTimeRequest::default_instance_ = NULL;

NextStopTimeRequest* NextStopTimeRequest::New(::google::protobuf::Arena* arena) const {
  NextStopTimeRequest* n = new NextStopTimeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NextStopTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.NextStopTimeRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NextStopTimeRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NextStopTimeRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(from_datetime_, start_page_);
    if (has_departure_filter()) {
      departure_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_arrival_filter()) {
      arrival_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 64256u) {
    ZR_(max_date_times_, show_codes_);
    ZR_(until_datetime_, _current_datetime_);
    count_ = 0;
    if (has_calendar()) {
      calendar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    realtime_level_ = 1;
  }
  if (_has_bits_[16 / 32] & 196608u) {
    items_per_schedule_ = 0;
    disable_geojson_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  forbidden_uri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NextStopTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.NextStopTimeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string departure_filter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_departure_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->departure_filter().data(), this->departure_filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.NextStopTimeRequest.departure_filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arrival_filter;
        break;
      }

      // required string arrival_filter = 2;
      case 2: {
        if (tag == 18) {
         parse_arrival_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arrival_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arrival_filter().data(), this->arrival_filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.NextStopTimeRequest.arrival_filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from_datetime;
        break;
      }

      // optional uint64 from_datetime = 3;
      case 3: {
        if (tag == 24) {
         parse_from_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_datetime_)));
          set_has_from_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duration;
        break;
      }

      // required int32 duration = 4;
      case 4: {
        if (tag == 32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_depth;
        break;
      }

      // required int32 depth = 5;
      case 5: {
        if (tag == 40) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nb_stoptimes;
        break;
      }

      // required int32 nb_stoptimes = 7;
      case 7: {
        if (tag == 56) {
         parse_nb_stoptimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nb_stoptimes_)));
          set_has_nb_stoptimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_interface_version;
        break;
      }

      // optional int32 interface_version = 8;
      case 8: {
        if (tag == 64) {
         parse_interface_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interface_version_)));
          set_has_interface_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_start_page;
        break;
      }

      // required int32 start_page = 9;
      case 9: {
        if (tag == 72) {
         parse_start_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_page_)));
          set_has_start_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }

      // required int32 count = 10;
      case 10: {
        if (tag == 80) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_date_times;
        break;
      }

      // optional int32 max_date_times = 11;
      case 11: {
        if (tag == 88) {
         parse_max_date_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_date_times_)));
          set_has_max_date_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_forbidden_uri;
        break;
      }

      // repeated string forbidden_uri = 12;
      case 12: {
        if (tag == 98) {
         parse_forbidden_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forbidden_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forbidden_uri(this->forbidden_uri_size() - 1).data(),
            this->forbidden_uri(this->forbidden_uri_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.NextStopTimeRequest.forbidden_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_forbidden_uri;
        if (input->ExpectTag(106)) goto parse_calendar;
        break;
      }

      // optional string calendar = 13;
      case 13: {
        if (tag == 106) {
         parse_calendar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calendar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calendar().data(), this->calendar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.NextStopTimeRequest.calendar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_show_codes;
        break;
      }

      // optional bool show_codes = 14;
      case 14: {
        if (tag == 112) {
         parse_show_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_codes_)));
          set_has_show_codes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_until_datetime;
        break;
      }

      // optional uint64 until_datetime = 15;
      case 15: {
        if (tag == 120) {
         parse_until_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &until_datetime_)));
          set_has_until_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse__current_datetime;
        break;
      }

      // optional uint64 _current_datetime = 16;
      case 16: {
        if (tag == 128) {
         parse__current_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &_current_datetime_)));
          set_has__current_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_realtime_level;
        break;
      }

      // optional .pbnavitia.RTLevel realtime_level = 17;
      case 17: {
        if (tag == 136) {
         parse_realtime_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::RTLevel_IsValid(value)) {
            set_realtime_level(static_cast< ::pbnavitia::RTLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_items_per_schedule;
        break;
      }

      // optional int32 items_per_schedule = 18;
      case 18: {
        if (tag == 144) {
         parse_items_per_schedule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &items_per_schedule_)));
          set_has_items_per_schedule();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_disable_geojson;
        break;
      }

      // optional bool disable_geojson = 19;
      case 19: {
        if (tag == 152) {
         parse_disable_geojson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_geojson_)));
          set_has_disable_geojson();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.NextStopTimeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.NextStopTimeRequest)
  return false;
#undef DO_
}

void NextStopTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.NextStopTimeRequest)
  // required string departure_filter = 1;
  if (has_departure_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->departure_filter().data(), this->departure_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NextStopTimeRequest.departure_filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->departure_filter(), output);
  }

  // required string arrival_filter = 2;
  if (has_arrival_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrival_filter().data(), this->arrival_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NextStopTimeRequest.arrival_filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->arrival_filter(), output);
  }

  // optional uint64 from_datetime = 3;
  if (has_from_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from_datetime(), output);
  }

  // required int32 duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duration(), output);
  }

  // required int32 depth = 5;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->depth(), output);
  }

  // required int32 nb_stoptimes = 7;
  if (has_nb_stoptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nb_stoptimes(), output);
  }

  // optional int32 interface_version = 8;
  if (has_interface_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->interface_version(), output);
  }

  // required int32 start_page = 9;
  if (has_start_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->start_page(), output);
  }

  // required int32 count = 10;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->count(), output);
  }

  // optional int32 max_date_times = 11;
  if (has_max_date_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_date_times(), output);
  }

  // repeated string forbidden_uri = 12;
  for (int i = 0; i < this->forbidden_uri_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uri(i).data(), this->forbidden_uri(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NextStopTimeRequest.forbidden_uri");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->forbidden_uri(i), output);
  }

  // optional string calendar = 13;
  if (has_calendar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calendar().data(), this->calendar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NextStopTimeRequest.calendar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->calendar(), output);
  }

  // optional bool show_codes = 14;
  if (has_show_codes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->show_codes(), output);
  }

  // optional uint64 until_datetime = 15;
  if (has_until_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->until_datetime(), output);
  }

  // optional uint64 _current_datetime = 16;
  if (has__current_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->_current_datetime(), output);
  }

  // optional .pbnavitia.RTLevel realtime_level = 17;
  if (has_realtime_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->realtime_level(), output);
  }

  // optional int32 items_per_schedule = 18;
  if (has_items_per_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->items_per_schedule(), output);
  }

  // optional bool disable_geojson = 19;
  if (has_disable_geojson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->disable_geojson(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.NextStopTimeRequest)
}

::google::protobuf::uint8* NextStopTimeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.NextStopTimeRequest)
  // required string departure_filter = 1;
  if (has_departure_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->departure_filter().data(), this->departure_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NextStopTimeRequest.departure_filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->departure_filter(), target);
  }

  // required string arrival_filter = 2;
  if (has_arrival_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrival_filter().data(), this->arrival_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NextStopTimeRequest.arrival_filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->arrival_filter(), target);
  }

  // optional uint64 from_datetime = 3;
  if (has_from_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from_datetime(), target);
  }

  // required int32 duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duration(), target);
  }

  // required int32 depth = 5;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->depth(), target);
  }

  // required int32 nb_stoptimes = 7;
  if (has_nb_stoptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nb_stoptimes(), target);
  }

  // optional int32 interface_version = 8;
  if (has_interface_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->interface_version(), target);
  }

  // required int32 start_page = 9;
  if (has_start_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->start_page(), target);
  }

  // required int32 count = 10;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->count(), target);
  }

  // optional int32 max_date_times = 11;
  if (has_max_date_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_date_times(), target);
  }

  // repeated string forbidden_uri = 12;
  for (int i = 0; i < this->forbidden_uri_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uri(i).data(), this->forbidden_uri(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NextStopTimeRequest.forbidden_uri");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->forbidden_uri(i), target);
  }

  // optional string calendar = 13;
  if (has_calendar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calendar().data(), this->calendar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NextStopTimeRequest.calendar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->calendar(), target);
  }

  // optional bool show_codes = 14;
  if (has_show_codes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->show_codes(), target);
  }

  // optional uint64 until_datetime = 15;
  if (has_until_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->until_datetime(), target);
  }

  // optional uint64 _current_datetime = 16;
  if (has__current_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->_current_datetime(), target);
  }

  // optional .pbnavitia.RTLevel realtime_level = 17;
  if (has_realtime_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->realtime_level(), target);
  }

  // optional int32 items_per_schedule = 18;
  if (has_items_per_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->items_per_schedule(), target);
  }

  // optional bool disable_geojson = 19;
  if (has_disable_geojson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->disable_geojson(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.NextStopTimeRequest)
  return target;
}

int NextStopTimeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.NextStopTimeRequest)
  int total_size = 0;

  if (has_departure_filter()) {
    // required string departure_filter = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->departure_filter());
  }

  if (has_arrival_filter()) {
    // required string arrival_filter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arrival_filter());
  }

  if (has_duration()) {
    // required int32 duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  if (has_depth()) {
    // required int32 depth = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  if (has_nb_stoptimes()) {
    // required int32 nb_stoptimes = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nb_stoptimes());
  }

  if (has_start_page()) {
    // required int32 start_page = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_page());
  }

  if (has_count()) {
    // required int32 count = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
int NextStopTimeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.NextStopTimeRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001bb) ^ 0x000001bb) == 0) {  // All required fields are present.
    // required string departure_filter = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->departure_filter());

    // required string arrival_filter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arrival_filter());

    // required int32 duration = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());

    // required int32 depth = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());

    // required int32 nb_stoptimes = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nb_stoptimes());

    // required int32 start_page = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_page());

    // required int32 count = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 68u) {
    // optional uint64 from_datetime = 3;
    if (has_from_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_datetime());
    }

    // optional int32 interface_version = 8;
    if (has_interface_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interface_version());
    }

  }
  if (_has_bits_[9 / 32] & 64000u) {
    // optional int32 max_date_times = 11;
    if (has_max_date_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_date_times());
    }

    // optional string calendar = 13;
    if (has_calendar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calendar());
    }

    // optional bool show_codes = 14;
    if (has_show_codes()) {
      total_size += 1 + 1;
    }

    // optional uint64 until_datetime = 15;
    if (has_until_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->until_datetime());
    }

    // optional uint64 _current_datetime = 16;
    if (has__current_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->_current_datetime());
    }

    // optional .pbnavitia.RTLevel realtime_level = 17;
    if (has_realtime_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->realtime_level());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 items_per_schedule = 18;
    if (has_items_per_schedule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->items_per_schedule());
    }

    // optional bool disable_geojson = 19;
    if (has_disable_geojson()) {
      total_size += 2 + 1;
    }

  }
  // repeated string forbidden_uri = 12;
  total_size += 1 * this->forbidden_uri_size();
  for (int i = 0; i < this->forbidden_uri_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forbidden_uri(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextStopTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.NextStopTimeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NextStopTimeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NextStopTimeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.NextStopTimeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.NextStopTimeRequest)
    MergeFrom(*source);
  }
}

void NextStopTimeRequest::MergeFrom(const NextStopTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.NextStopTimeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  forbidden_uri_.MergeFrom(from.forbidden_uri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_departure_filter()) {
      set_has_departure_filter();
      departure_filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.departure_filter_);
    }
    if (from.has_arrival_filter()) {
      set_has_arrival_filter();
      arrival_filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arrival_filter_);
    }
    if (from.has_from_datetime()) {
      set_from_datetime(from.from_datetime());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_nb_stoptimes()) {
      set_nb_stoptimes(from.nb_stoptimes());
    }
    if (from.has_interface_version()) {
      set_interface_version(from.interface_version());
    }
    if (from.has_start_page()) {
      set_start_page(from.start_page());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_max_date_times()) {
      set_max_date_times(from.max_date_times());
    }
    if (from.has_calendar()) {
      set_has_calendar();
      calendar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.calendar_);
    }
    if (from.has_show_codes()) {
      set_show_codes(from.show_codes());
    }
    if (from.has_until_datetime()) {
      set_until_datetime(from.until_datetime());
    }
    if (from.has__current_datetime()) {
      set__current_datetime(from._current_datetime());
    }
    if (from.has_realtime_level()) {
      set_realtime_level(from.realtime_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_items_per_schedule()) {
      set_items_per_schedule(from.items_per_schedule());
    }
    if (from.has_disable_geojson()) {
      set_disable_geojson(from.disable_geojson());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NextStopTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.NextStopTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextStopTimeRequest::CopyFrom(const NextStopTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.NextStopTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextStopTimeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001bb) != 0x000001bb) return false;

  return true;
}

void NextStopTimeRequest::Swap(NextStopTimeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NextStopTimeRequest::InternalSwap(NextStopTimeRequest* other) {
  departure_filter_.Swap(&other->departure_filter_);
  arrival_filter_.Swap(&other->arrival_filter_);
  std::swap(from_datetime_, other->from_datetime_);
  std::swap(duration_, other->duration_);
  std::swap(depth_, other->depth_);
  std::swap(nb_stoptimes_, other->nb_stoptimes_);
  std::swap(interface_version_, other->interface_version_);
  std::swap(start_page_, other->start_page_);
  std::swap(count_, other->count_);
  std::swap(max_date_times_, other->max_date_times_);
  forbidden_uri_.UnsafeArenaSwap(&other->forbidden_uri_);
  calendar_.Swap(&other->calendar_);
  std::swap(show_codes_, other->show_codes_);
  std::swap(until_datetime_, other->until_datetime_);
  std::swap(_current_datetime_, other->_current_datetime_);
  std::swap(realtime_level_, other->realtime_level_);
  std::swap(items_per_schedule_, other->items_per_schedule_);
  std::swap(disable_geojson_, other->disable_geojson_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NextStopTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NextStopTimeRequest_descriptor_;
  metadata.reflection = NextStopTimeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NextStopTimeRequest

// required string departure_filter = 1;
bool NextStopTimeRequest::has_departure_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NextStopTimeRequest::set_has_departure_filter() {
  _has_bits_[0] |= 0x00000001u;
}
void NextStopTimeRequest::clear_has_departure_filter() {
  _has_bits_[0] &= ~0x00000001u;
}
void NextStopTimeRequest::clear_departure_filter() {
  departure_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_departure_filter();
}
 const ::std::string& NextStopTimeRequest::departure_filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.departure_filter)
  return departure_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NextStopTimeRequest::set_departure_filter(const ::std::string& value) {
  set_has_departure_filter();
  departure_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.departure_filter)
}
 void NextStopTimeRequest::set_departure_filter(const char* value) {
  set_has_departure_filter();
  departure_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NextStopTimeRequest.departure_filter)
}
 void NextStopTimeRequest::set_departure_filter(const char* value, size_t size) {
  set_has_departure_filter();
  departure_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NextStopTimeRequest.departure_filter)
}
 ::std::string* NextStopTimeRequest::mutable_departure_filter() {
  set_has_departure_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NextStopTimeRequest.departure_filter)
  return departure_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NextStopTimeRequest::release_departure_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.NextStopTimeRequest.departure_filter)
  clear_has_departure_filter();
  return departure_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NextStopTimeRequest::set_allocated_departure_filter(::std::string* departure_filter) {
  if (departure_filter != NULL) {
    set_has_departure_filter();
  } else {
    clear_has_departure_filter();
  }
  departure_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), departure_filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NextStopTimeRequest.departure_filter)
}

// required string arrival_filter = 2;
bool NextStopTimeRequest::has_arrival_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NextStopTimeRequest::set_has_arrival_filter() {
  _has_bits_[0] |= 0x00000002u;
}
void NextStopTimeRequest::clear_has_arrival_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
void NextStopTimeRequest::clear_arrival_filter() {
  arrival_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arrival_filter();
}
 const ::std::string& NextStopTimeRequest::arrival_filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.arrival_filter)
  return arrival_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NextStopTimeRequest::set_arrival_filter(const ::std::string& value) {
  set_has_arrival_filter();
  arrival_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.arrival_filter)
}
 void NextStopTimeRequest::set_arrival_filter(const char* value) {
  set_has_arrival_filter();
  arrival_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NextStopTimeRequest.arrival_filter)
}
 void NextStopTimeRequest::set_arrival_filter(const char* value, size_t size) {
  set_has_arrival_filter();
  arrival_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NextStopTimeRequest.arrival_filter)
}
 ::std::string* NextStopTimeRequest::mutable_arrival_filter() {
  set_has_arrival_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NextStopTimeRequest.arrival_filter)
  return arrival_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NextStopTimeRequest::release_arrival_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.NextStopTimeRequest.arrival_filter)
  clear_has_arrival_filter();
  return arrival_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NextStopTimeRequest::set_allocated_arrival_filter(::std::string* arrival_filter) {
  if (arrival_filter != NULL) {
    set_has_arrival_filter();
  } else {
    clear_has_arrival_filter();
  }
  arrival_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arrival_filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NextStopTimeRequest.arrival_filter)
}

// optional uint64 from_datetime = 3;
bool NextStopTimeRequest::has_from_datetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NextStopTimeRequest::set_has_from_datetime() {
  _has_bits_[0] |= 0x00000004u;
}
void NextStopTimeRequest::clear_has_from_datetime() {
  _has_bits_[0] &= ~0x00000004u;
}
void NextStopTimeRequest::clear_from_datetime() {
  from_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_from_datetime();
}
 ::google::protobuf::uint64 NextStopTimeRequest::from_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.from_datetime)
  return from_datetime_;
}
 void NextStopTimeRequest::set_from_datetime(::google::protobuf::uint64 value) {
  set_has_from_datetime();
  from_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.from_datetime)
}

// required int32 duration = 4;
bool NextStopTimeRequest::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NextStopTimeRequest::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void NextStopTimeRequest::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void NextStopTimeRequest::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
 ::google::protobuf::int32 NextStopTimeRequest::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.duration)
  return duration_;
}
 void NextStopTimeRequest::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.duration)
}

// required int32 depth = 5;
bool NextStopTimeRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NextStopTimeRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000010u;
}
void NextStopTimeRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000010u;
}
void NextStopTimeRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 NextStopTimeRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.depth)
  return depth_;
}
 void NextStopTimeRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.depth)
}

// required int32 nb_stoptimes = 7;
bool NextStopTimeRequest::has_nb_stoptimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NextStopTimeRequest::set_has_nb_stoptimes() {
  _has_bits_[0] |= 0x00000020u;
}
void NextStopTimeRequest::clear_has_nb_stoptimes() {
  _has_bits_[0] &= ~0x00000020u;
}
void NextStopTimeRequest::clear_nb_stoptimes() {
  nb_stoptimes_ = 0;
  clear_has_nb_stoptimes();
}
 ::google::protobuf::int32 NextStopTimeRequest::nb_stoptimes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.nb_stoptimes)
  return nb_stoptimes_;
}
 void NextStopTimeRequest::set_nb_stoptimes(::google::protobuf::int32 value) {
  set_has_nb_stoptimes();
  nb_stoptimes_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.nb_stoptimes)
}

// optional int32 interface_version = 8;
bool NextStopTimeRequest::has_interface_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NextStopTimeRequest::set_has_interface_version() {
  _has_bits_[0] |= 0x00000040u;
}
void NextStopTimeRequest::clear_has_interface_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void NextStopTimeRequest::clear_interface_version() {
  interface_version_ = 0;
  clear_has_interface_version();
}
 ::google::protobuf::int32 NextStopTimeRequest::interface_version() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.interface_version)
  return interface_version_;
}
 void NextStopTimeRequest::set_interface_version(::google::protobuf::int32 value) {
  set_has_interface_version();
  interface_version_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.interface_version)
}

// required int32 start_page = 9;
bool NextStopTimeRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NextStopTimeRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000080u;
}
void NextStopTimeRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000080u;
}
void NextStopTimeRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
 ::google::protobuf::int32 NextStopTimeRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.start_page)
  return start_page_;
}
 void NextStopTimeRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.start_page)
}

// required int32 count = 10;
bool NextStopTimeRequest::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NextStopTimeRequest::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
void NextStopTimeRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void NextStopTimeRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 NextStopTimeRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.count)
  return count_;
}
 void NextStopTimeRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.count)
}

// optional int32 max_date_times = 11;
bool NextStopTimeRequest::has_max_date_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NextStopTimeRequest::set_has_max_date_times() {
  _has_bits_[0] |= 0x00000200u;
}
void NextStopTimeRequest::clear_has_max_date_times() {
  _has_bits_[0] &= ~0x00000200u;
}
void NextStopTimeRequest::clear_max_date_times() {
  max_date_times_ = 0;
  clear_has_max_date_times();
}
 ::google::protobuf::int32 NextStopTimeRequest::max_date_times() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.max_date_times)
  return max_date_times_;
}
 void NextStopTimeRequest::set_max_date_times(::google::protobuf::int32 value) {
  set_has_max_date_times();
  max_date_times_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.max_date_times)
}

// repeated string forbidden_uri = 12;
int NextStopTimeRequest::forbidden_uri_size() const {
  return forbidden_uri_.size();
}
void NextStopTimeRequest::clear_forbidden_uri() {
  forbidden_uri_.Clear();
}
 const ::std::string& NextStopTimeRequest::forbidden_uri(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return forbidden_uri_.Get(index);
}
 ::std::string* NextStopTimeRequest::mutable_forbidden_uri(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return forbidden_uri_.Mutable(index);
}
 void NextStopTimeRequest::set_forbidden_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.forbidden_uri)
  forbidden_uri_.Mutable(index)->assign(value);
}
 void NextStopTimeRequest::set_forbidden_uri(int index, const char* value) {
  forbidden_uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
 void NextStopTimeRequest::set_forbidden_uri(int index, const char* value, size_t size) {
  forbidden_uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
 ::std::string* NextStopTimeRequest::add_forbidden_uri() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return forbidden_uri_.Add();
}
 void NextStopTimeRequest::add_forbidden_uri(const ::std::string& value) {
  forbidden_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
 void NextStopTimeRequest::add_forbidden_uri(const char* value) {
  forbidden_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
 void NextStopTimeRequest::add_forbidden_uri(const char* value, size_t size) {
  forbidden_uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NextStopTimeRequest::forbidden_uri() const {
  // @@protoc_insertion_point(field_list:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return forbidden_uri_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NextStopTimeRequest::mutable_forbidden_uri() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return &forbidden_uri_;
}

// optional string calendar = 13;
bool NextStopTimeRequest::has_calendar() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NextStopTimeRequest::set_has_calendar() {
  _has_bits_[0] |= 0x00000800u;
}
void NextStopTimeRequest::clear_has_calendar() {
  _has_bits_[0] &= ~0x00000800u;
}
void NextStopTimeRequest::clear_calendar() {
  calendar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_calendar();
}
 const ::std::string& NextStopTimeRequest::calendar() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.calendar)
  return calendar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NextStopTimeRequest::set_calendar(const ::std::string& value) {
  set_has_calendar();
  calendar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.calendar)
}
 void NextStopTimeRequest::set_calendar(const char* value) {
  set_has_calendar();
  calendar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NextStopTimeRequest.calendar)
}
 void NextStopTimeRequest::set_calendar(const char* value, size_t size) {
  set_has_calendar();
  calendar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NextStopTimeRequest.calendar)
}
 ::std::string* NextStopTimeRequest::mutable_calendar() {
  set_has_calendar();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NextStopTimeRequest.calendar)
  return calendar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NextStopTimeRequest::release_calendar() {
  // @@protoc_insertion_point(field_release:pbnavitia.NextStopTimeRequest.calendar)
  clear_has_calendar();
  return calendar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NextStopTimeRequest::set_allocated_calendar(::std::string* calendar) {
  if (calendar != NULL) {
    set_has_calendar();
  } else {
    clear_has_calendar();
  }
  calendar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calendar);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NextStopTimeRequest.calendar)
}

// optional bool show_codes = 14;
bool NextStopTimeRequest::has_show_codes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NextStopTimeRequest::set_has_show_codes() {
  _has_bits_[0] |= 0x00001000u;
}
void NextStopTimeRequest::clear_has_show_codes() {
  _has_bits_[0] &= ~0x00001000u;
}
void NextStopTimeRequest::clear_show_codes() {
  show_codes_ = false;
  clear_has_show_codes();
}
 bool NextStopTimeRequest::show_codes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.show_codes)
  return show_codes_;
}
 void NextStopTimeRequest::set_show_codes(bool value) {
  set_has_show_codes();
  show_codes_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.show_codes)
}

// optional uint64 until_datetime = 15;
bool NextStopTimeRequest::has_until_datetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void NextStopTimeRequest::set_has_until_datetime() {
  _has_bits_[0] |= 0x00002000u;
}
void NextStopTimeRequest::clear_has_until_datetime() {
  _has_bits_[0] &= ~0x00002000u;
}
void NextStopTimeRequest::clear_until_datetime() {
  until_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_until_datetime();
}
 ::google::protobuf::uint64 NextStopTimeRequest::until_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.until_datetime)
  return until_datetime_;
}
 void NextStopTimeRequest::set_until_datetime(::google::protobuf::uint64 value) {
  set_has_until_datetime();
  until_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.until_datetime)
}

// optional uint64 _current_datetime = 16;
bool NextStopTimeRequest::has__current_datetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NextStopTimeRequest::set_has__current_datetime() {
  _has_bits_[0] |= 0x00004000u;
}
void NextStopTimeRequest::clear_has__current_datetime() {
  _has_bits_[0] &= ~0x00004000u;
}
void NextStopTimeRequest::clear__current_datetime() {
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has__current_datetime();
}
 ::google::protobuf::uint64 NextStopTimeRequest::_current_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest._current_datetime)
  return _current_datetime_;
}
 void NextStopTimeRequest::set__current_datetime(::google::protobuf::uint64 value) {
  set_has__current_datetime();
  _current_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest._current_datetime)
}

// optional .pbnavitia.RTLevel realtime_level = 17;
bool NextStopTimeRequest::has_realtime_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void NextStopTimeRequest::set_has_realtime_level() {
  _has_bits_[0] |= 0x00008000u;
}
void NextStopTimeRequest::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00008000u;
}
void NextStopTimeRequest::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
 ::pbnavitia::RTLevel NextStopTimeRequest::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
 void NextStopTimeRequest::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.realtime_level)
}

// optional int32 items_per_schedule = 18;
bool NextStopTimeRequest::has_items_per_schedule() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void NextStopTimeRequest::set_has_items_per_schedule() {
  _has_bits_[0] |= 0x00010000u;
}
void NextStopTimeRequest::clear_has_items_per_schedule() {
  _has_bits_[0] &= ~0x00010000u;
}
void NextStopTimeRequest::clear_items_per_schedule() {
  items_per_schedule_ = 0;
  clear_has_items_per_schedule();
}
 ::google::protobuf::int32 NextStopTimeRequest::items_per_schedule() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.items_per_schedule)
  return items_per_schedule_;
}
 void NextStopTimeRequest::set_items_per_schedule(::google::protobuf::int32 value) {
  set_has_items_per_schedule();
  items_per_schedule_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.items_per_schedule)
}

// optional bool disable_geojson = 19;
bool NextStopTimeRequest::has_disable_geojson() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void NextStopTimeRequest::set_has_disable_geojson() {
  _has_bits_[0] |= 0x00020000u;
}
void NextStopTimeRequest::clear_has_disable_geojson() {
  _has_bits_[0] &= ~0x00020000u;
}
void NextStopTimeRequest::clear_disable_geojson() {
  disable_geojson_ = false;
  clear_has_disable_geojson();
}
 bool NextStopTimeRequest::disable_geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.disable_geojson)
  return disable_geojson_;
}
 void NextStopTimeRequest::set_disable_geojson(bool value) {
  set_has_disable_geojson();
  disable_geojson_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.disable_geojson)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetNetworkParams::kOriginModeFieldNumber;
const int StreetNetworkParams::kDestinationModeFieldNumber;
const int StreetNetworkParams::kWalkingSpeedFieldNumber;
const int StreetNetworkParams::kBikeSpeedFieldNumber;
const int StreetNetworkParams::kCarSpeedFieldNumber;
const int StreetNetworkParams::kBssSpeedFieldNumber;
const int StreetNetworkParams::kOriginFilterFieldNumber;
const int StreetNetworkParams::kDestinationFilterFieldNumber;
const int StreetNetworkParams::kMaxWalkingDurationToPtFieldNumber;
const int StreetNetworkParams::kMaxBikeDurationToPtFieldNumber;
const int StreetNetworkParams::kMaxBssDurationToPtFieldNumber;
const int StreetNetworkParams::kMaxCarDurationToPtFieldNumber;
const int StreetNetworkParams::kEnableDirectPathFieldNumber;
const int StreetNetworkParams::kCarNoParkSpeedFieldNumber;
const int StreetNetworkParams::kMaxCarNoParkDurationToPtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetNetworkParams::StreetNetworkParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StreetNetworkParams)
}

void StreetNetworkParams::InitAsDefaultInstance() {
}

StreetNetworkParams::StreetNetworkParams(const StreetNetworkParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StreetNetworkParams)
}

void StreetNetworkParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  origin_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  walking_speed_ = 0;
  bike_speed_ = 0;
  car_speed_ = 0;
  bss_speed_ = 0;
  origin_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_walking_duration_to_pt_ = 0;
  max_bike_duration_to_pt_ = 0;
  max_bss_duration_to_pt_ = 0;
  max_car_duration_to_pt_ = 0;
  enable_direct_path_ = true;
  car_no_park_speed_ = 0;
  max_car_no_park_duration_to_pt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetNetworkParams::~StreetNetworkParams() {
  // @@protoc_insertion_point(destructor:pbnavitia.StreetNetworkParams)
  SharedDtor();
}

void StreetNetworkParams::SharedDtor() {
  origin_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StreetNetworkParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetNetworkParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetNetworkParams_descriptor_;
}

const StreetNetworkParams& StreetNetworkParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

StreetNetworkParams* StreetNetworkParams::default_instance_ = NULL;

StreetNetworkParams* StreetNetworkParams::New(::google::protobuf::Arena* arena) const {
  StreetNetworkParams* n = new StreetNetworkParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreetNetworkParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StreetNetworkParams)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreetNetworkParams, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreetNetworkParams*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(walking_speed_, bss_speed_);
    if (has_origin_mode()) {
      origin_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_destination_mode()) {
      destination_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_origin_filter()) {
      origin_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_destination_filter()) {
      destination_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(max_walking_duration_to_pt_, car_no_park_speed_);
    enable_direct_path_ = true;
    max_car_no_park_duration_to_pt_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreetNetworkParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StreetNetworkParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string origin_mode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origin_mode().data(), this->origin_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StreetNetworkParams.origin_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_destination_mode;
        break;
      }

      // optional string destination_mode = 2;
      case 2: {
        if (tag == 18) {
         parse_destination_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination_mode().data(), this->destination_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StreetNetworkParams.destination_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_walking_speed;
        break;
      }

      // optional double walking_speed = 3;
      case 3: {
        if (tag == 25) {
         parse_walking_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &walking_speed_)));
          set_has_walking_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_bike_speed;
        break;
      }

      // optional double bike_speed = 5;
      case 5: {
        if (tag == 41) {
         parse_bike_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bike_speed_)));
          set_has_bike_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_car_speed;
        break;
      }

      // optional double car_speed = 7;
      case 7: {
        if (tag == 57) {
         parse_car_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &car_speed_)));
          set_has_car_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_bss_speed;
        break;
      }

      // optional double bss_speed = 9;
      case 9: {
        if (tag == 73) {
         parse_bss_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bss_speed_)));
          set_has_bss_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_origin_filter;
        break;
      }

      // optional string origin_filter = 11;
      case 11: {
        if (tag == 90) {
         parse_origin_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origin_filter().data(), this->origin_filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StreetNetworkParams.origin_filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_destination_filter;
        break;
      }

      // optional string destination_filter = 12;
      case 12: {
        if (tag == 98) {
         parse_destination_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination_filter().data(), this->destination_filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StreetNetworkParams.destination_filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_max_walking_duration_to_pt;
        break;
      }

      // optional int32 max_walking_duration_to_pt = 13;
      case 13: {
        if (tag == 104) {
         parse_max_walking_duration_to_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_walking_duration_to_pt_)));
          set_has_max_walking_duration_to_pt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_max_bike_duration_to_pt;
        break;
      }

      // optional int32 max_bike_duration_to_pt = 14;
      case 14: {
        if (tag == 112) {
         parse_max_bike_duration_to_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bike_duration_to_pt_)));
          set_has_max_bike_duration_to_pt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_max_bss_duration_to_pt;
        break;
      }

      // optional int32 max_bss_duration_to_pt = 15;
      case 15: {
        if (tag == 120) {
         parse_max_bss_duration_to_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bss_duration_to_pt_)));
          set_has_max_bss_duration_to_pt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_max_car_duration_to_pt;
        break;
      }

      // optional int32 max_car_duration_to_pt = 16;
      case 16: {
        if (tag == 128) {
         parse_max_car_duration_to_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_car_duration_to_pt_)));
          set_has_max_car_duration_to_pt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_enable_direct_path;
        break;
      }

      // optional bool enable_direct_path = 17 [default = true];
      case 17: {
        if (tag == 136) {
         parse_enable_direct_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_direct_path_)));
          set_has_enable_direct_path();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_car_no_park_speed;
        break;
      }

      // optional double car_no_park_speed = 18;
      case 18: {
        if (tag == 145) {
         parse_car_no_park_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &car_no_park_speed_)));
          set_has_car_no_park_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_max_car_no_park_duration_to_pt;
        break;
      }

      // optional int32 max_car_no_park_duration_to_pt = 19;
      case 19: {
        if (tag == 152) {
         parse_max_car_no_park_duration_to_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_car_no_park_duration_to_pt_)));
          set_has_max_car_no_park_duration_to_pt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StreetNetworkParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StreetNetworkParams)
  return false;
#undef DO_
}

void StreetNetworkParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StreetNetworkParams)
  // optional string origin_mode = 1;
  if (has_origin_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin_mode().data(), this->origin_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkParams.origin_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->origin_mode(), output);
  }

  // optional string destination_mode = 2;
  if (has_destination_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_mode().data(), this->destination_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkParams.destination_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination_mode(), output);
  }

  // optional double walking_speed = 3;
  if (has_walking_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->walking_speed(), output);
  }

  // optional double bike_speed = 5;
  if (has_bike_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bike_speed(), output);
  }

  // optional double car_speed = 7;
  if (has_car_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->car_speed(), output);
  }

  // optional double bss_speed = 9;
  if (has_bss_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bss_speed(), output);
  }

  // optional string origin_filter = 11;
  if (has_origin_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin_filter().data(), this->origin_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkParams.origin_filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->origin_filter(), output);
  }

  // optional string destination_filter = 12;
  if (has_destination_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_filter().data(), this->destination_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkParams.destination_filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->destination_filter(), output);
  }

  // optional int32 max_walking_duration_to_pt = 13;
  if (has_max_walking_duration_to_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->max_walking_duration_to_pt(), output);
  }

  // optional int32 max_bike_duration_to_pt = 14;
  if (has_max_bike_duration_to_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_bike_duration_to_pt(), output);
  }

  // optional int32 max_bss_duration_to_pt = 15;
  if (has_max_bss_duration_to_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_bss_duration_to_pt(), output);
  }

  // optional int32 max_car_duration_to_pt = 16;
  if (has_max_car_duration_to_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_car_duration_to_pt(), output);
  }

  // optional bool enable_direct_path = 17 [default = true];
  if (has_enable_direct_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->enable_direct_path(), output);
  }

  // optional double car_no_park_speed = 18;
  if (has_car_no_park_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->car_no_park_speed(), output);
  }

  // optional int32 max_car_no_park_duration_to_pt = 19;
  if (has_max_car_no_park_duration_to_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->max_car_no_park_duration_to_pt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StreetNetworkParams)
}

::google::protobuf::uint8* StreetNetworkParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StreetNetworkParams)
  // optional string origin_mode = 1;
  if (has_origin_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin_mode().data(), this->origin_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkParams.origin_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->origin_mode(), target);
  }

  // optional string destination_mode = 2;
  if (has_destination_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_mode().data(), this->destination_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkParams.destination_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination_mode(), target);
  }

  // optional double walking_speed = 3;
  if (has_walking_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->walking_speed(), target);
  }

  // optional double bike_speed = 5;
  if (has_bike_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bike_speed(), target);
  }

  // optional double car_speed = 7;
  if (has_car_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->car_speed(), target);
  }

  // optional double bss_speed = 9;
  if (has_bss_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bss_speed(), target);
  }

  // optional string origin_filter = 11;
  if (has_origin_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin_filter().data(), this->origin_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkParams.origin_filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->origin_filter(), target);
  }

  // optional string destination_filter = 12;
  if (has_destination_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_filter().data(), this->destination_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkParams.destination_filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->destination_filter(), target);
  }

  // optional int32 max_walking_duration_to_pt = 13;
  if (has_max_walking_duration_to_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->max_walking_duration_to_pt(), target);
  }

  // optional int32 max_bike_duration_to_pt = 14;
  if (has_max_bike_duration_to_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_bike_duration_to_pt(), target);
  }

  // optional int32 max_bss_duration_to_pt = 15;
  if (has_max_bss_duration_to_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->max_bss_duration_to_pt(), target);
  }

  // optional int32 max_car_duration_to_pt = 16;
  if (has_max_car_duration_to_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->max_car_duration_to_pt(), target);
  }

  // optional bool enable_direct_path = 17 [default = true];
  if (has_enable_direct_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->enable_direct_path(), target);
  }

  // optional double car_no_park_speed = 18;
  if (has_car_no_park_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->car_no_park_speed(), target);
  }

  // optional int32 max_car_no_park_duration_to_pt = 19;
  if (has_max_car_no_park_duration_to_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->max_car_no_park_duration_to_pt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StreetNetworkParams)
  return target;
}

int StreetNetworkParams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StreetNetworkParams)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string origin_mode = 1;
    if (has_origin_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin_mode());
    }

    // optional string destination_mode = 2;
    if (has_destination_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_mode());
    }

    // optional double walking_speed = 3;
    if (has_walking_speed()) {
      total_size += 1 + 8;
    }

    // optional double bike_speed = 5;
    if (has_bike_speed()) {
      total_size += 1 + 8;
    }

    // optional double car_speed = 7;
    if (has_car_speed()) {
      total_size += 1 + 8;
    }

    // optional double bss_speed = 9;
    if (has_bss_speed()) {
      total_size += 1 + 8;
    }

    // optional string origin_filter = 11;
    if (has_origin_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin_filter());
    }

    // optional string destination_filter = 12;
    if (has_destination_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_filter());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int32 max_walking_duration_to_pt = 13;
    if (has_max_walking_duration_to_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_walking_duration_to_pt());
    }

    // optional int32 max_bike_duration_to_pt = 14;
    if (has_max_bike_duration_to_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_bike_duration_to_pt());
    }

    // optional int32 max_bss_duration_to_pt = 15;
    if (has_max_bss_duration_to_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_bss_duration_to_pt());
    }

    // optional int32 max_car_duration_to_pt = 16;
    if (has_max_car_duration_to_pt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_car_duration_to_pt());
    }

    // optional bool enable_direct_path = 17 [default = true];
    if (has_enable_direct_path()) {
      total_size += 2 + 1;
    }

    // optional double car_no_park_speed = 18;
    if (has_car_no_park_speed()) {
      total_size += 2 + 8;
    }

    // optional int32 max_car_no_park_duration_to_pt = 19;
    if (has_max_car_no_park_duration_to_pt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_car_no_park_duration_to_pt());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetNetworkParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StreetNetworkParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreetNetworkParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreetNetworkParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StreetNetworkParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StreetNetworkParams)
    MergeFrom(*source);
  }
}

void StreetNetworkParams::MergeFrom(const StreetNetworkParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StreetNetworkParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin_mode()) {
      set_has_origin_mode();
      origin_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_mode_);
    }
    if (from.has_destination_mode()) {
      set_has_destination_mode();
      destination_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_mode_);
    }
    if (from.has_walking_speed()) {
      set_walking_speed(from.walking_speed());
    }
    if (from.has_bike_speed()) {
      set_bike_speed(from.bike_speed());
    }
    if (from.has_car_speed()) {
      set_car_speed(from.car_speed());
    }
    if (from.has_bss_speed()) {
      set_bss_speed(from.bss_speed());
    }
    if (from.has_origin_filter()) {
      set_has_origin_filter();
      origin_filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_filter_);
    }
    if (from.has_destination_filter()) {
      set_has_destination_filter();
      destination_filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_filter_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_walking_duration_to_pt()) {
      set_max_walking_duration_to_pt(from.max_walking_duration_to_pt());
    }
    if (from.has_max_bike_duration_to_pt()) {
      set_max_bike_duration_to_pt(from.max_bike_duration_to_pt());
    }
    if (from.has_max_bss_duration_to_pt()) {
      set_max_bss_duration_to_pt(from.max_bss_duration_to_pt());
    }
    if (from.has_max_car_duration_to_pt()) {
      set_max_car_duration_to_pt(from.max_car_duration_to_pt());
    }
    if (from.has_enable_direct_path()) {
      set_enable_direct_path(from.enable_direct_path());
    }
    if (from.has_car_no_park_speed()) {
      set_car_no_park_speed(from.car_no_park_speed());
    }
    if (from.has_max_car_no_park_duration_to_pt()) {
      set_max_car_no_park_duration_to_pt(from.max_car_no_park_duration_to_pt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreetNetworkParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StreetNetworkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetNetworkParams::CopyFrom(const StreetNetworkParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StreetNetworkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetNetworkParams::IsInitialized() const {

  return true;
}

void StreetNetworkParams::Swap(StreetNetworkParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetNetworkParams::InternalSwap(StreetNetworkParams* other) {
  origin_mode_.Swap(&other->origin_mode_);
  destination_mode_.Swap(&other->destination_mode_);
  std::swap(walking_speed_, other->walking_speed_);
  std::swap(bike_speed_, other->bike_speed_);
  std::swap(car_speed_, other->car_speed_);
  std::swap(bss_speed_, other->bss_speed_);
  origin_filter_.Swap(&other->origin_filter_);
  destination_filter_.Swap(&other->destination_filter_);
  std::swap(max_walking_duration_to_pt_, other->max_walking_duration_to_pt_);
  std::swap(max_bike_duration_to_pt_, other->max_bike_duration_to_pt_);
  std::swap(max_bss_duration_to_pt_, other->max_bss_duration_to_pt_);
  std::swap(max_car_duration_to_pt_, other->max_car_duration_to_pt_);
  std::swap(enable_direct_path_, other->enable_direct_path_);
  std::swap(car_no_park_speed_, other->car_no_park_speed_);
  std::swap(max_car_no_park_duration_to_pt_, other->max_car_no_park_duration_to_pt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreetNetworkParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreetNetworkParams_descriptor_;
  metadata.reflection = StreetNetworkParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreetNetworkParams

// optional string origin_mode = 1;
bool StreetNetworkParams::has_origin_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreetNetworkParams::set_has_origin_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void StreetNetworkParams::clear_has_origin_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreetNetworkParams::clear_origin_mode() {
  origin_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin_mode();
}
 const ::std::string& StreetNetworkParams::origin_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.origin_mode)
  return origin_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkParams::set_origin_mode(const ::std::string& value) {
  set_has_origin_mode();
  origin_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.origin_mode)
}
 void StreetNetworkParams::set_origin_mode(const char* value) {
  set_has_origin_mode();
  origin_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkParams.origin_mode)
}
 void StreetNetworkParams::set_origin_mode(const char* value, size_t size) {
  set_has_origin_mode();
  origin_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkParams.origin_mode)
}
 ::std::string* StreetNetworkParams::mutable_origin_mode() {
  set_has_origin_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkParams.origin_mode)
  return origin_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreetNetworkParams::release_origin_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkParams.origin_mode)
  clear_has_origin_mode();
  return origin_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkParams::set_allocated_origin_mode(::std::string* origin_mode) {
  if (origin_mode != NULL) {
    set_has_origin_mode();
  } else {
    clear_has_origin_mode();
  }
  origin_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkParams.origin_mode)
}

// optional string destination_mode = 2;
bool StreetNetworkParams::has_destination_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreetNetworkParams::set_has_destination_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void StreetNetworkParams::clear_has_destination_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreetNetworkParams::clear_destination_mode() {
  destination_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_mode();
}
 const ::std::string& StreetNetworkParams::destination_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.destination_mode)
  return destination_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkParams::set_destination_mode(const ::std::string& value) {
  set_has_destination_mode();
  destination_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.destination_mode)
}
 void StreetNetworkParams::set_destination_mode(const char* value) {
  set_has_destination_mode();
  destination_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkParams.destination_mode)
}
 void StreetNetworkParams::set_destination_mode(const char* value, size_t size) {
  set_has_destination_mode();
  destination_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkParams.destination_mode)
}
 ::std::string* StreetNetworkParams::mutable_destination_mode() {
  set_has_destination_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkParams.destination_mode)
  return destination_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreetNetworkParams::release_destination_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkParams.destination_mode)
  clear_has_destination_mode();
  return destination_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkParams::set_allocated_destination_mode(::std::string* destination_mode) {
  if (destination_mode != NULL) {
    set_has_destination_mode();
  } else {
    clear_has_destination_mode();
  }
  destination_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkParams.destination_mode)
}

// optional double walking_speed = 3;
bool StreetNetworkParams::has_walking_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreetNetworkParams::set_has_walking_speed() {
  _has_bits_[0] |= 0x00000004u;
}
void StreetNetworkParams::clear_has_walking_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreetNetworkParams::clear_walking_speed() {
  walking_speed_ = 0;
  clear_has_walking_speed();
}
 double StreetNetworkParams::walking_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.walking_speed)
  return walking_speed_;
}
 void StreetNetworkParams::set_walking_speed(double value) {
  set_has_walking_speed();
  walking_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.walking_speed)
}

// optional double bike_speed = 5;
bool StreetNetworkParams::has_bike_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StreetNetworkParams::set_has_bike_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void StreetNetworkParams::clear_has_bike_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void StreetNetworkParams::clear_bike_speed() {
  bike_speed_ = 0;
  clear_has_bike_speed();
}
 double StreetNetworkParams::bike_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.bike_speed)
  return bike_speed_;
}
 void StreetNetworkParams::set_bike_speed(double value) {
  set_has_bike_speed();
  bike_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.bike_speed)
}

// optional double car_speed = 7;
bool StreetNetworkParams::has_car_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StreetNetworkParams::set_has_car_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void StreetNetworkParams::clear_has_car_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void StreetNetworkParams::clear_car_speed() {
  car_speed_ = 0;
  clear_has_car_speed();
}
 double StreetNetworkParams::car_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.car_speed)
  return car_speed_;
}
 void StreetNetworkParams::set_car_speed(double value) {
  set_has_car_speed();
  car_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.car_speed)
}

// optional double bss_speed = 9;
bool StreetNetworkParams::has_bss_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StreetNetworkParams::set_has_bss_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void StreetNetworkParams::clear_has_bss_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void StreetNetworkParams::clear_bss_speed() {
  bss_speed_ = 0;
  clear_has_bss_speed();
}
 double StreetNetworkParams::bss_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.bss_speed)
  return bss_speed_;
}
 void StreetNetworkParams::set_bss_speed(double value) {
  set_has_bss_speed();
  bss_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.bss_speed)
}

// optional string origin_filter = 11;
bool StreetNetworkParams::has_origin_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StreetNetworkParams::set_has_origin_filter() {
  _has_bits_[0] |= 0x00000040u;
}
void StreetNetworkParams::clear_has_origin_filter() {
  _has_bits_[0] &= ~0x00000040u;
}
void StreetNetworkParams::clear_origin_filter() {
  origin_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin_filter();
}
 const ::std::string& StreetNetworkParams::origin_filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.origin_filter)
  return origin_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkParams::set_origin_filter(const ::std::string& value) {
  set_has_origin_filter();
  origin_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.origin_filter)
}
 void StreetNetworkParams::set_origin_filter(const char* value) {
  set_has_origin_filter();
  origin_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkParams.origin_filter)
}
 void StreetNetworkParams::set_origin_filter(const char* value, size_t size) {
  set_has_origin_filter();
  origin_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkParams.origin_filter)
}
 ::std::string* StreetNetworkParams::mutable_origin_filter() {
  set_has_origin_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkParams.origin_filter)
  return origin_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreetNetworkParams::release_origin_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkParams.origin_filter)
  clear_has_origin_filter();
  return origin_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkParams::set_allocated_origin_filter(::std::string* origin_filter) {
  if (origin_filter != NULL) {
    set_has_origin_filter();
  } else {
    clear_has_origin_filter();
  }
  origin_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkParams.origin_filter)
}

// optional string destination_filter = 12;
bool StreetNetworkParams::has_destination_filter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StreetNetworkParams::set_has_destination_filter() {
  _has_bits_[0] |= 0x00000080u;
}
void StreetNetworkParams::clear_has_destination_filter() {
  _has_bits_[0] &= ~0x00000080u;
}
void StreetNetworkParams::clear_destination_filter() {
  destination_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_filter();
}
 const ::std::string& StreetNetworkParams::destination_filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.destination_filter)
  return destination_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkParams::set_destination_filter(const ::std::string& value) {
  set_has_destination_filter();
  destination_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.destination_filter)
}
 void StreetNetworkParams::set_destination_filter(const char* value) {
  set_has_destination_filter();
  destination_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkParams.destination_filter)
}
 void StreetNetworkParams::set_destination_filter(const char* value, size_t size) {
  set_has_destination_filter();
  destination_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkParams.destination_filter)
}
 ::std::string* StreetNetworkParams::mutable_destination_filter() {
  set_has_destination_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkParams.destination_filter)
  return destination_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreetNetworkParams::release_destination_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkParams.destination_filter)
  clear_has_destination_filter();
  return destination_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkParams::set_allocated_destination_filter(::std::string* destination_filter) {
  if (destination_filter != NULL) {
    set_has_destination_filter();
  } else {
    clear_has_destination_filter();
  }
  destination_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkParams.destination_filter)
}

// optional int32 max_walking_duration_to_pt = 13;
bool StreetNetworkParams::has_max_walking_duration_to_pt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StreetNetworkParams::set_has_max_walking_duration_to_pt() {
  _has_bits_[0] |= 0x00000100u;
}
void StreetNetworkParams::clear_has_max_walking_duration_to_pt() {
  _has_bits_[0] &= ~0x00000100u;
}
void StreetNetworkParams::clear_max_walking_duration_to_pt() {
  max_walking_duration_to_pt_ = 0;
  clear_has_max_walking_duration_to_pt();
}
 ::google::protobuf::int32 StreetNetworkParams::max_walking_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_walking_duration_to_pt)
  return max_walking_duration_to_pt_;
}
 void StreetNetworkParams::set_max_walking_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_walking_duration_to_pt();
  max_walking_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_walking_duration_to_pt)
}

// optional int32 max_bike_duration_to_pt = 14;
bool StreetNetworkParams::has_max_bike_duration_to_pt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StreetNetworkParams::set_has_max_bike_duration_to_pt() {
  _has_bits_[0] |= 0x00000200u;
}
void StreetNetworkParams::clear_has_max_bike_duration_to_pt() {
  _has_bits_[0] &= ~0x00000200u;
}
void StreetNetworkParams::clear_max_bike_duration_to_pt() {
  max_bike_duration_to_pt_ = 0;
  clear_has_max_bike_duration_to_pt();
}
 ::google::protobuf::int32 StreetNetworkParams::max_bike_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_bike_duration_to_pt)
  return max_bike_duration_to_pt_;
}
 void StreetNetworkParams::set_max_bike_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_bike_duration_to_pt();
  max_bike_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_bike_duration_to_pt)
}

// optional int32 max_bss_duration_to_pt = 15;
bool StreetNetworkParams::has_max_bss_duration_to_pt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void StreetNetworkParams::set_has_max_bss_duration_to_pt() {
  _has_bits_[0] |= 0x00000400u;
}
void StreetNetworkParams::clear_has_max_bss_duration_to_pt() {
  _has_bits_[0] &= ~0x00000400u;
}
void StreetNetworkParams::clear_max_bss_duration_to_pt() {
  max_bss_duration_to_pt_ = 0;
  clear_has_max_bss_duration_to_pt();
}
 ::google::protobuf::int32 StreetNetworkParams::max_bss_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_bss_duration_to_pt)
  return max_bss_duration_to_pt_;
}
 void StreetNetworkParams::set_max_bss_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_bss_duration_to_pt();
  max_bss_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_bss_duration_to_pt)
}

// optional int32 max_car_duration_to_pt = 16;
bool StreetNetworkParams::has_max_car_duration_to_pt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void StreetNetworkParams::set_has_max_car_duration_to_pt() {
  _has_bits_[0] |= 0x00000800u;
}
void StreetNetworkParams::clear_has_max_car_duration_to_pt() {
  _has_bits_[0] &= ~0x00000800u;
}
void StreetNetworkParams::clear_max_car_duration_to_pt() {
  max_car_duration_to_pt_ = 0;
  clear_has_max_car_duration_to_pt();
}
 ::google::protobuf::int32 StreetNetworkParams::max_car_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_car_duration_to_pt)
  return max_car_duration_to_pt_;
}
 void StreetNetworkParams::set_max_car_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_car_duration_to_pt();
  max_car_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_car_duration_to_pt)
}

// optional bool enable_direct_path = 17 [default = true];
bool StreetNetworkParams::has_enable_direct_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void StreetNetworkParams::set_has_enable_direct_path() {
  _has_bits_[0] |= 0x00001000u;
}
void StreetNetworkParams::clear_has_enable_direct_path() {
  _has_bits_[0] &= ~0x00001000u;
}
void StreetNetworkParams::clear_enable_direct_path() {
  enable_direct_path_ = true;
  clear_has_enable_direct_path();
}
 bool StreetNetworkParams::enable_direct_path() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.enable_direct_path)
  return enable_direct_path_;
}
 void StreetNetworkParams::set_enable_direct_path(bool value) {
  set_has_enable_direct_path();
  enable_direct_path_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.enable_direct_path)
}

// optional double car_no_park_speed = 18;
bool StreetNetworkParams::has_car_no_park_speed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void StreetNetworkParams::set_has_car_no_park_speed() {
  _has_bits_[0] |= 0x00002000u;
}
void StreetNetworkParams::clear_has_car_no_park_speed() {
  _has_bits_[0] &= ~0x00002000u;
}
void StreetNetworkParams::clear_car_no_park_speed() {
  car_no_park_speed_ = 0;
  clear_has_car_no_park_speed();
}
 double StreetNetworkParams::car_no_park_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.car_no_park_speed)
  return car_no_park_speed_;
}
 void StreetNetworkParams::set_car_no_park_speed(double value) {
  set_has_car_no_park_speed();
  car_no_park_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.car_no_park_speed)
}

// optional int32 max_car_no_park_duration_to_pt = 19;
bool StreetNetworkParams::has_max_car_no_park_duration_to_pt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void StreetNetworkParams::set_has_max_car_no_park_duration_to_pt() {
  _has_bits_[0] |= 0x00004000u;
}
void StreetNetworkParams::clear_has_max_car_no_park_duration_to_pt() {
  _has_bits_[0] &= ~0x00004000u;
}
void StreetNetworkParams::clear_max_car_no_park_duration_to_pt() {
  max_car_no_park_duration_to_pt_ = 0;
  clear_has_max_car_no_park_duration_to_pt();
}
 ::google::protobuf::int32 StreetNetworkParams::max_car_no_park_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_car_no_park_duration_to_pt)
  return max_car_no_park_duration_to_pt_;
}
 void StreetNetworkParams::set_max_car_no_park_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_car_no_park_duration_to_pt();
  max_car_no_park_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_car_no_park_duration_to_pt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JourneysRequest::kOriginFieldNumber;
const int JourneysRequest::kDestinationFieldNumber;
const int JourneysRequest::kDatetimesFieldNumber;
const int JourneysRequest::kClockwiseFieldNumber;
const int JourneysRequest::kForbiddenUrisFieldNumber;
const int JourneysRequest::kMaxDurationFieldNumber;
const int JourneysRequest::kMaxTransfersFieldNumber;
const int JourneysRequest::kStreetnetworkParamsFieldNumber;
const int JourneysRequest::kWheelchairFieldNumber;
const int JourneysRequest::kShowCodesFieldNumber;
const int JourneysRequest::kDetailsFieldNumber;
const int JourneysRequest::kRealtimeLevelFieldNumber;
const int JourneysRequest::kMaxExtraSecondPassFieldNumber;
const int JourneysRequest::kWalkingTransferPenaltyFieldNumber;
const int JourneysRequest::kDirectPathDurationFieldNumber;
const int JourneysRequest::kBikeInPtFieldNumber;
const int JourneysRequest::kAllowedIdFieldNumber;
const int JourneysRequest::kFreeRadiusFromFieldNumber;
const int JourneysRequest::kFreeRadiusToFieldNumber;
const int JourneysRequest::kMinNbJourneysFieldNumber;
const int JourneysRequest::kNightBusFilterMaxFactorFieldNumber;
const int JourneysRequest::kNightBusFilterBaseFactorFieldNumber;
const int JourneysRequest::kTimeframeDurationFieldNumber;
const int JourneysRequest::kDepthFieldNumber;
const int JourneysRequest::kIsochroneCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JourneysRequest::JourneysRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.JourneysRequest)
}

void JourneysRequest::InitAsDefaultInstance() {
  streetnetwork_params_ = const_cast< ::pbnavitia::StreetNetworkParams*>(&::pbnavitia::StreetNetworkParams::default_instance());
  isochrone_center_ = const_cast< ::pbnavitia::LocationContext*>(&::pbnavitia::LocationContext::default_instance());
}

JourneysRequest::JourneysRequest(const JourneysRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.JourneysRequest)
}

void JourneysRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clockwise_ = false;
  max_duration_ = 0;
  max_transfers_ = 0;
  streetnetwork_params_ = NULL;
  wheelchair_ = false;
  show_codes_ = false;
  details_ = false;
  realtime_level_ = 1;
  max_extra_second_pass_ = 0;
  walking_transfer_penalty_ = 120;
  direct_path_duration_ = 0;
  bike_in_pt_ = false;
  free_radius_from_ = 0;
  free_radius_to_ = 0;
  min_nb_journeys_ = 0;
  night_bus_filter_max_factor_ = 1.5;
  night_bus_filter_base_factor_ = 900;
  timeframe_duration_ = 0u;
  depth_ = 1;
  isochrone_center_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JourneysRequest::~JourneysRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.JourneysRequest)
  SharedDtor();
}

void JourneysRequest::SharedDtor() {
  if (this != default_instance_) {
    delete streetnetwork_params_;
    delete isochrone_center_;
  }
}

void JourneysRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JourneysRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JourneysRequest_descriptor_;
}

const JourneysRequest& JourneysRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

JourneysRequest* JourneysRequest::default_instance_ = NULL;

JourneysRequest* JourneysRequest::New(::google::protobuf::Arena* arena) const {
  JourneysRequest* n = new JourneysRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JourneysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.JourneysRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(JourneysRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JourneysRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 232u) {
    ZR_(max_duration_, max_transfers_);
    clockwise_ = false;
    if (has_streetnetwork_params()) {
      if (streetnetwork_params_ != NULL) streetnetwork_params_->::pbnavitia::StreetNetworkParams::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(wheelchair_, details_);
    ZR_(direct_path_duration_, bike_in_pt_);
    realtime_level_ = 1;
    max_extra_second_pass_ = 0;
    walking_transfer_penalty_ = 120;
  }
  if (_has_bits_[16 / 32] & 16646144u) {
    ZR_(free_radius_from_, free_radius_to_);
    min_nb_journeys_ = 0;
    night_bus_filter_max_factor_ = 1.5;
    night_bus_filter_base_factor_ = 900;
    timeframe_duration_ = 0u;
    depth_ = 1;
  }
  if (has_isochrone_center()) {
    if (isochrone_center_ != NULL) isochrone_center_->::pbnavitia::LocationContext::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  origin_.Clear();
  destination_.Clear();
  datetimes_.Clear();
  forbidden_uris_.Clear();
  allowed_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool JourneysRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.JourneysRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.LocationContext origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_origin;
        if (input->ExpectTag(18)) goto parse_loop_destination;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.LocationContext destination = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_destination;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_datetimes;
        break;
      }

      // repeated uint64 datetimes = 3;
      case 3: {
        if (tag == 24) {
         parse_datetimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_datetimes())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_datetimes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_datetimes;
        if (input->ExpectTag(32)) goto parse_clockwise;
        break;
      }

      // required bool clockwise = 4;
      case 4: {
        if (tag == 32) {
         parse_clockwise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clockwise_)));
          set_has_clockwise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_forbidden_uris;
        break;
      }

      // repeated string forbidden_uris = 5;
      case 5: {
        if (tag == 42) {
         parse_forbidden_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forbidden_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forbidden_uris(this->forbidden_uris_size() - 1).data(),
            this->forbidden_uris(this->forbidden_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.JourneysRequest.forbidden_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_forbidden_uris;
        if (input->ExpectTag(48)) goto parse_max_duration;
        break;
      }

      // required int32 max_duration = 6;
      case 6: {
        if (tag == 48) {
         parse_max_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_duration_)));
          set_has_max_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_transfers;
        break;
      }

      // required int32 max_transfers = 7;
      case 7: {
        if (tag == 56) {
         parse_max_transfers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_transfers_)));
          set_has_max_transfers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_streetnetwork_params;
        break;
      }

      // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 8;
      case 8: {
        if (tag == 66) {
         parse_streetnetwork_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streetnetwork_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_wheelchair;
        break;
      }

      // optional bool wheelchair = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_wheelchair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheelchair_)));
          set_has_wheelchair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_show_codes;
        break;
      }

      // optional bool show_codes = 11;
      case 11: {
        if (tag == 88) {
         parse_show_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_codes_)));
          set_has_show_codes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_details;
        break;
      }

      // optional bool details = 13;
      case 13: {
        if (tag == 104) {
         parse_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &details_)));
          set_has_details();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_realtime_level;
        break;
      }

      // optional .pbnavitia.RTLevel realtime_level = 14;
      case 14: {
        if (tag == 112) {
         parse_realtime_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::RTLevel_IsValid(value)) {
            set_realtime_level(static_cast< ::pbnavitia::RTLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_max_extra_second_pass;
        break;
      }

      // optional int32 max_extra_second_pass = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_max_extra_second_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_extra_second_pass_)));
          set_has_max_extra_second_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_walking_transfer_penalty;
        break;
      }

      // optional int32 walking_transfer_penalty = 16 [default = 120];
      case 16: {
        if (tag == 128) {
         parse_walking_transfer_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &walking_transfer_penalty_)));
          set_has_walking_transfer_penalty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_direct_path_duration;
        break;
      }

      // optional int32 direct_path_duration = 17;
      case 17: {
        if (tag == 136) {
         parse_direct_path_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_path_duration_)));
          set_has_direct_path_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_bike_in_pt;
        break;
      }

      // optional bool bike_in_pt = 18;
      case 18: {
        if (tag == 144) {
         parse_bike_in_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bike_in_pt_)));
          set_has_bike_in_pt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_allowed_id;
        break;
      }

      // repeated string allowed_id = 19;
      case 19: {
        if (tag == 154) {
         parse_allowed_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allowed_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->allowed_id(this->allowed_id_size() - 1).data(),
            this->allowed_id(this->allowed_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.JourneysRequest.allowed_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_allowed_id;
        if (input->ExpectTag(160)) goto parse_free_radius_from;
        break;
      }

      // optional int32 free_radius_from = 20 [default = 0];
      case 20: {
        if (tag == 160) {
         parse_free_radius_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_radius_from_)));
          set_has_free_radius_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_free_radius_to;
        break;
      }

      // optional int32 free_radius_to = 21 [default = 0];
      case 21: {
        if (tag == 168) {
         parse_free_radius_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_radius_to_)));
          set_has_free_radius_to();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_min_nb_journeys;
        break;
      }

      // optional int32 min_nb_journeys = 22;
      case 22: {
        if (tag == 176) {
         parse_min_nb_journeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_nb_journeys_)));
          set_has_min_nb_journeys();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_night_bus_filter_max_factor;
        break;
      }

      // optional double night_bus_filter_max_factor = 23 [default = 1.5];
      case 23: {
        if (tag == 185) {
         parse_night_bus_filter_max_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &night_bus_filter_max_factor_)));
          set_has_night_bus_filter_max_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_night_bus_filter_base_factor;
        break;
      }

      // optional int32 night_bus_filter_base_factor = 24 [default = 900];
      case 24: {
        if (tag == 192) {
         parse_night_bus_filter_base_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &night_bus_filter_base_factor_)));
          set_has_night_bus_filter_base_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_timeframe_duration;
        break;
      }

      // optional uint32 timeframe_duration = 25;
      case 25: {
        if (tag == 200) {
         parse_timeframe_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeframe_duration_)));
          set_has_timeframe_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_depth;
        break;
      }

      // optional int32 depth = 26 [default = 1];
      case 26: {
        if (tag == 208) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_isochrone_center;
        break;
      }

      // optional .pbnavitia.LocationContext isochrone_center = 27;
      case 27: {
        if (tag == 218) {
         parse_isochrone_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_isochrone_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.JourneysRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.JourneysRequest)
  return false;
#undef DO_
}

void JourneysRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.JourneysRequest)
  // repeated .pbnavitia.LocationContext origin = 1;
  for (unsigned int i = 0, n = this->origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(i), output);
  }

  // repeated .pbnavitia.LocationContext destination = 2;
  for (unsigned int i = 0, n = this->destination_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->destination(i), output);
  }

  // repeated uint64 datetimes = 3;
  for (int i = 0; i < this->datetimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->datetimes(i), output);
  }

  // required bool clockwise = 4;
  if (has_clockwise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->clockwise(), output);
  }

  // repeated string forbidden_uris = 5;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneysRequest.forbidden_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->forbidden_uris(i), output);
  }

  // required int32 max_duration = 6;
  if (has_max_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_duration(), output);
  }

  // required int32 max_transfers = 7;
  if (has_max_transfers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_transfers(), output);
  }

  // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 8;
  if (has_streetnetwork_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->streetnetwork_params_, output);
  }

  // optional bool wheelchair = 9 [default = false];
  if (has_wheelchair()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->wheelchair(), output);
  }

  // optional bool show_codes = 11;
  if (has_show_codes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->show_codes(), output);
  }

  // optional bool details = 13;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->details(), output);
  }

  // optional .pbnavitia.RTLevel realtime_level = 14;
  if (has_realtime_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->realtime_level(), output);
  }

  // optional int32 max_extra_second_pass = 15 [default = 0];
  if (has_max_extra_second_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_extra_second_pass(), output);
  }

  // optional int32 walking_transfer_penalty = 16 [default = 120];
  if (has_walking_transfer_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->walking_transfer_penalty(), output);
  }

  // optional int32 direct_path_duration = 17;
  if (has_direct_path_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->direct_path_duration(), output);
  }

  // optional bool bike_in_pt = 18;
  if (has_bike_in_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bike_in_pt(), output);
  }

  // repeated string allowed_id = 19;
  for (int i = 0; i < this->allowed_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_id(i).data(), this->allowed_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneysRequest.allowed_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->allowed_id(i), output);
  }

  // optional int32 free_radius_from = 20 [default = 0];
  if (has_free_radius_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->free_radius_from(), output);
  }

  // optional int32 free_radius_to = 21 [default = 0];
  if (has_free_radius_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->free_radius_to(), output);
  }

  // optional int32 min_nb_journeys = 22;
  if (has_min_nb_journeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->min_nb_journeys(), output);
  }

  // optional double night_bus_filter_max_factor = 23 [default = 1.5];
  if (has_night_bus_filter_max_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->night_bus_filter_max_factor(), output);
  }

  // optional int32 night_bus_filter_base_factor = 24 [default = 900];
  if (has_night_bus_filter_base_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->night_bus_filter_base_factor(), output);
  }

  // optional uint32 timeframe_duration = 25;
  if (has_timeframe_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->timeframe_duration(), output);
  }

  // optional int32 depth = 26 [default = 1];
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->depth(), output);
  }

  // optional .pbnavitia.LocationContext isochrone_center = 27;
  if (has_isochrone_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->isochrone_center_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.JourneysRequest)
}

::google::protobuf::uint8* JourneysRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.JourneysRequest)
  // repeated .pbnavitia.LocationContext origin = 1;
  for (unsigned int i = 0, n = this->origin_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->origin(i), false, target);
  }

  // repeated .pbnavitia.LocationContext destination = 2;
  for (unsigned int i = 0, n = this->destination_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->destination(i), false, target);
  }

  // repeated uint64 datetimes = 3;
  for (int i = 0; i < this->datetimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->datetimes(i), target);
  }

  // required bool clockwise = 4;
  if (has_clockwise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->clockwise(), target);
  }

  // repeated string forbidden_uris = 5;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneysRequest.forbidden_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->forbidden_uris(i), target);
  }

  // required int32 max_duration = 6;
  if (has_max_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_duration(), target);
  }

  // required int32 max_transfers = 7;
  if (has_max_transfers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_transfers(), target);
  }

  // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 8;
  if (has_streetnetwork_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->streetnetwork_params_, false, target);
  }

  // optional bool wheelchair = 9 [default = false];
  if (has_wheelchair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->wheelchair(), target);
  }

  // optional bool show_codes = 11;
  if (has_show_codes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->show_codes(), target);
  }

  // optional bool details = 13;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->details(), target);
  }

  // optional .pbnavitia.RTLevel realtime_level = 14;
  if (has_realtime_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->realtime_level(), target);
  }

  // optional int32 max_extra_second_pass = 15 [default = 0];
  if (has_max_extra_second_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->max_extra_second_pass(), target);
  }

  // optional int32 walking_transfer_penalty = 16 [default = 120];
  if (has_walking_transfer_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->walking_transfer_penalty(), target);
  }

  // optional int32 direct_path_duration = 17;
  if (has_direct_path_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->direct_path_duration(), target);
  }

  // optional bool bike_in_pt = 18;
  if (has_bike_in_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bike_in_pt(), target);
  }

  // repeated string allowed_id = 19;
  for (int i = 0; i < this->allowed_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->allowed_id(i).data(), this->allowed_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneysRequest.allowed_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->allowed_id(i), target);
  }

  // optional int32 free_radius_from = 20 [default = 0];
  if (has_free_radius_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->free_radius_from(), target);
  }

  // optional int32 free_radius_to = 21 [default = 0];
  if (has_free_radius_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->free_radius_to(), target);
  }

  // optional int32 min_nb_journeys = 22;
  if (has_min_nb_journeys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->min_nb_journeys(), target);
  }

  // optional double night_bus_filter_max_factor = 23 [default = 1.5];
  if (has_night_bus_filter_max_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->night_bus_filter_max_factor(), target);
  }

  // optional int32 night_bus_filter_base_factor = 24 [default = 900];
  if (has_night_bus_filter_base_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->night_bus_filter_base_factor(), target);
  }

  // optional uint32 timeframe_duration = 25;
  if (has_timeframe_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->timeframe_duration(), target);
  }

  // optional int32 depth = 26 [default = 1];
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->depth(), target);
  }

  // optional .pbnavitia.LocationContext isochrone_center = 27;
  if (has_isochrone_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->isochrone_center_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.JourneysRequest)
  return target;
}

int JourneysRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.JourneysRequest)
  int total_size = 0;

  if (has_clockwise()) {
    // required bool clockwise = 4;
    total_size += 1 + 1;
  }

  if (has_max_duration()) {
    // required int32 max_duration = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_duration());
  }

  if (has_max_transfers()) {
    // required int32 max_transfers = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_transfers());
  }

  return total_size;
}
int JourneysRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.JourneysRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000068) ^ 0x00000068) == 0) {  // All required fields are present.
    // required bool clockwise = 4;
    total_size += 1 + 1;

    // required int32 max_duration = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_duration());

    // required int32 max_transfers = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_transfers());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 8;
  if (has_streetnetwork_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->streetnetwork_params_);
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool wheelchair = 9 [default = false];
    if (has_wheelchair()) {
      total_size += 1 + 1;
    }

    // optional bool show_codes = 11;
    if (has_show_codes()) {
      total_size += 1 + 1;
    }

    // optional bool details = 13;
    if (has_details()) {
      total_size += 1 + 1;
    }

    // optional .pbnavitia.RTLevel realtime_level = 14;
    if (has_realtime_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->realtime_level());
    }

    // optional int32 max_extra_second_pass = 15 [default = 0];
    if (has_max_extra_second_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_extra_second_pass());
    }

    // optional int32 walking_transfer_penalty = 16 [default = 120];
    if (has_walking_transfer_penalty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->walking_transfer_penalty());
    }

    // optional int32 direct_path_duration = 17;
    if (has_direct_path_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direct_path_duration());
    }

    // optional bool bike_in_pt = 18;
    if (has_bike_in_pt()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[17 / 32] & 16646144u) {
    // optional int32 free_radius_from = 20 [default = 0];
    if (has_free_radius_from()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_radius_from());
    }

    // optional int32 free_radius_to = 21 [default = 0];
    if (has_free_radius_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_radius_to());
    }

    // optional int32 min_nb_journeys = 22;
    if (has_min_nb_journeys()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_nb_journeys());
    }

    // optional double night_bus_filter_max_factor = 23 [default = 1.5];
    if (has_night_bus_filter_max_factor()) {
      total_size += 2 + 8;
    }

    // optional int32 night_bus_filter_base_factor = 24 [default = 900];
    if (has_night_bus_filter_base_factor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->night_bus_filter_base_factor());
    }

    // optional uint32 timeframe_duration = 25;
    if (has_timeframe_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeframe_duration());
    }

    // optional int32 depth = 26 [default = 1];
    if (has_depth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

  }
  // optional .pbnavitia.LocationContext isochrone_center = 27;
  if (has_isochrone_center()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->isochrone_center_);
  }

  // repeated .pbnavitia.LocationContext origin = 1;
  total_size += 1 * this->origin_size();
  for (int i = 0; i < this->origin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->origin(i));
  }

  // repeated .pbnavitia.LocationContext destination = 2;
  total_size += 1 * this->destination_size();
  for (int i = 0; i < this->destination_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destination(i));
  }

  // repeated uint64 datetimes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->datetimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->datetimes(i));
    }
    total_size += 1 * this->datetimes_size() + data_size;
  }

  // repeated string forbidden_uris = 5;
  total_size += 1 * this->forbidden_uris_size();
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forbidden_uris(i));
  }

  // repeated string allowed_id = 19;
  total_size += 2 * this->allowed_id_size();
  for (int i = 0; i < this->allowed_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allowed_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JourneysRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.JourneysRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JourneysRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JourneysRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.JourneysRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.JourneysRequest)
    MergeFrom(*source);
  }
}

void JourneysRequest::MergeFrom(const JourneysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.JourneysRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  origin_.MergeFrom(from.origin_);
  destination_.MergeFrom(from.destination_);
  datetimes_.MergeFrom(from.datetimes_);
  forbidden_uris_.MergeFrom(from.forbidden_uris_);
  allowed_id_.MergeFrom(from.allowed_id_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_clockwise()) {
      set_clockwise(from.clockwise());
    }
    if (from.has_max_duration()) {
      set_max_duration(from.max_duration());
    }
    if (from.has_max_transfers()) {
      set_max_transfers(from.max_transfers());
    }
    if (from.has_streetnetwork_params()) {
      mutable_streetnetwork_params()->::pbnavitia::StreetNetworkParams::MergeFrom(from.streetnetwork_params());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wheelchair()) {
      set_wheelchair(from.wheelchair());
    }
    if (from.has_show_codes()) {
      set_show_codes(from.show_codes());
    }
    if (from.has_details()) {
      set_details(from.details());
    }
    if (from.has_realtime_level()) {
      set_realtime_level(from.realtime_level());
    }
    if (from.has_max_extra_second_pass()) {
      set_max_extra_second_pass(from.max_extra_second_pass());
    }
    if (from.has_walking_transfer_penalty()) {
      set_walking_transfer_penalty(from.walking_transfer_penalty());
    }
    if (from.has_direct_path_duration()) {
      set_direct_path_duration(from.direct_path_duration());
    }
    if (from.has_bike_in_pt()) {
      set_bike_in_pt(from.bike_in_pt());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_free_radius_from()) {
      set_free_radius_from(from.free_radius_from());
    }
    if (from.has_free_radius_to()) {
      set_free_radius_to(from.free_radius_to());
    }
    if (from.has_min_nb_journeys()) {
      set_min_nb_journeys(from.min_nb_journeys());
    }
    if (from.has_night_bus_filter_max_factor()) {
      set_night_bus_filter_max_factor(from.night_bus_filter_max_factor());
    }
    if (from.has_night_bus_filter_base_factor()) {
      set_night_bus_filter_base_factor(from.night_bus_filter_base_factor());
    }
    if (from.has_timeframe_duration()) {
      set_timeframe_duration(from.timeframe_duration());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_isochrone_center()) {
      mutable_isochrone_center()->::pbnavitia::LocationContext::MergeFrom(from.isochrone_center());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void JourneysRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.JourneysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JourneysRequest::CopyFrom(const JourneysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.JourneysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JourneysRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000068) != 0x00000068) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->origin())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->destination())) return false;
  if (has_isochrone_center()) {
    if (!this->isochrone_center_->IsInitialized()) return false;
  }
  return true;
}

void JourneysRequest::Swap(JourneysRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JourneysRequest::InternalSwap(JourneysRequest* other) {
  origin_.UnsafeArenaSwap(&other->origin_);
  destination_.UnsafeArenaSwap(&other->destination_);
  datetimes_.UnsafeArenaSwap(&other->datetimes_);
  std::swap(clockwise_, other->clockwise_);
  forbidden_uris_.UnsafeArenaSwap(&other->forbidden_uris_);
  std::swap(max_duration_, other->max_duration_);
  std::swap(max_transfers_, other->max_transfers_);
  std::swap(streetnetwork_params_, other->streetnetwork_params_);
  std::swap(wheelchair_, other->wheelchair_);
  std::swap(show_codes_, other->show_codes_);
  std::swap(details_, other->details_);
  std::swap(realtime_level_, other->realtime_level_);
  std::swap(max_extra_second_pass_, other->max_extra_second_pass_);
  std::swap(walking_transfer_penalty_, other->walking_transfer_penalty_);
  std::swap(direct_path_duration_, other->direct_path_duration_);
  std::swap(bike_in_pt_, other->bike_in_pt_);
  allowed_id_.UnsafeArenaSwap(&other->allowed_id_);
  std::swap(free_radius_from_, other->free_radius_from_);
  std::swap(free_radius_to_, other->free_radius_to_);
  std::swap(min_nb_journeys_, other->min_nb_journeys_);
  std::swap(night_bus_filter_max_factor_, other->night_bus_filter_max_factor_);
  std::swap(night_bus_filter_base_factor_, other->night_bus_filter_base_factor_);
  std::swap(timeframe_duration_, other->timeframe_duration_);
  std::swap(depth_, other->depth_);
  std::swap(isochrone_center_, other->isochrone_center_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JourneysRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JourneysRequest_descriptor_;
  metadata.reflection = JourneysRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JourneysRequest

// repeated .pbnavitia.LocationContext origin = 1;
int JourneysRequest::origin_size() const {
  return origin_.size();
}
void JourneysRequest::clear_origin() {
  origin_.Clear();
}
const ::pbnavitia::LocationContext& JourneysRequest::origin(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.origin)
  return origin_.Get(index);
}
::pbnavitia::LocationContext* JourneysRequest::mutable_origin(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.origin)
  return origin_.Mutable(index);
}
::pbnavitia::LocationContext* JourneysRequest::add_origin() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.origin)
  return origin_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
JourneysRequest::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.origin)
  return &origin_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
JourneysRequest::origin() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.origin)
  return origin_;
}

// repeated .pbnavitia.LocationContext destination = 2;
int JourneysRequest::destination_size() const {
  return destination_.size();
}
void JourneysRequest::clear_destination() {
  destination_.Clear();
}
const ::pbnavitia::LocationContext& JourneysRequest::destination(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.destination)
  return destination_.Get(index);
}
::pbnavitia::LocationContext* JourneysRequest::mutable_destination(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.destination)
  return destination_.Mutable(index);
}
::pbnavitia::LocationContext* JourneysRequest::add_destination() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.destination)
  return destination_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
JourneysRequest::mutable_destination() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.destination)
  return &destination_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
JourneysRequest::destination() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.destination)
  return destination_;
}

// repeated uint64 datetimes = 3;
int JourneysRequest::datetimes_size() const {
  return datetimes_.size();
}
void JourneysRequest::clear_datetimes() {
  datetimes_.Clear();
}
 ::google::protobuf::uint64 JourneysRequest::datetimes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.datetimes)
  return datetimes_.Get(index);
}
 void JourneysRequest::set_datetimes(int index, ::google::protobuf::uint64 value) {
  datetimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.datetimes)
}
 void JourneysRequest::add_datetimes(::google::protobuf::uint64 value) {
  datetimes_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.datetimes)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
JourneysRequest::datetimes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.datetimes)
  return datetimes_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
JourneysRequest::mutable_datetimes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.datetimes)
  return &datetimes_;
}

// required bool clockwise = 4;
bool JourneysRequest::has_clockwise() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void JourneysRequest::set_has_clockwise() {
  _has_bits_[0] |= 0x00000008u;
}
void JourneysRequest::clear_has_clockwise() {
  _has_bits_[0] &= ~0x00000008u;
}
void JourneysRequest::clear_clockwise() {
  clockwise_ = false;
  clear_has_clockwise();
}
 bool JourneysRequest::clockwise() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.clockwise)
  return clockwise_;
}
 void JourneysRequest::set_clockwise(bool value) {
  set_has_clockwise();
  clockwise_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.clockwise)
}

// repeated string forbidden_uris = 5;
int JourneysRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
void JourneysRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
 const ::std::string& JourneysRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
 ::std::string* JourneysRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
 void JourneysRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
 void JourneysRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneysRequest.forbidden_uris)
}
 void JourneysRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneysRequest.forbidden_uris)
}
 ::std::string* JourneysRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.JourneysRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
 void JourneysRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.forbidden_uris)
}
 void JourneysRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.JourneysRequest.forbidden_uris)
}
 void JourneysRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.JourneysRequest.forbidden_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
JourneysRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.forbidden_uris)
  return forbidden_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
JourneysRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.forbidden_uris)
  return &forbidden_uris_;
}

// required int32 max_duration = 6;
bool JourneysRequest::has_max_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void JourneysRequest::set_has_max_duration() {
  _has_bits_[0] |= 0x00000020u;
}
void JourneysRequest::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
void JourneysRequest::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
 ::google::protobuf::int32 JourneysRequest::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.max_duration)
  return max_duration_;
}
 void JourneysRequest::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.max_duration)
}

// required int32 max_transfers = 7;
bool JourneysRequest::has_max_transfers() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void JourneysRequest::set_has_max_transfers() {
  _has_bits_[0] |= 0x00000040u;
}
void JourneysRequest::clear_has_max_transfers() {
  _has_bits_[0] &= ~0x00000040u;
}
void JourneysRequest::clear_max_transfers() {
  max_transfers_ = 0;
  clear_has_max_transfers();
}
 ::google::protobuf::int32 JourneysRequest::max_transfers() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.max_transfers)
  return max_transfers_;
}
 void JourneysRequest::set_max_transfers(::google::protobuf::int32 value) {
  set_has_max_transfers();
  max_transfers_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.max_transfers)
}

// optional .pbnavitia.StreetNetworkParams streetnetwork_params = 8;
bool JourneysRequest::has_streetnetwork_params() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void JourneysRequest::set_has_streetnetwork_params() {
  _has_bits_[0] |= 0x00000080u;
}
void JourneysRequest::clear_has_streetnetwork_params() {
  _has_bits_[0] &= ~0x00000080u;
}
void JourneysRequest::clear_streetnetwork_params() {
  if (streetnetwork_params_ != NULL) streetnetwork_params_->::pbnavitia::StreetNetworkParams::Clear();
  clear_has_streetnetwork_params();
}
const ::pbnavitia::StreetNetworkParams& JourneysRequest::streetnetwork_params() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.streetnetwork_params)
  return streetnetwork_params_ != NULL ? *streetnetwork_params_ : *default_instance_->streetnetwork_params_;
}
::pbnavitia::StreetNetworkParams* JourneysRequest::mutable_streetnetwork_params() {
  set_has_streetnetwork_params();
  if (streetnetwork_params_ == NULL) {
    streetnetwork_params_ = new ::pbnavitia::StreetNetworkParams;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.streetnetwork_params)
  return streetnetwork_params_;
}
::pbnavitia::StreetNetworkParams* JourneysRequest::release_streetnetwork_params() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneysRequest.streetnetwork_params)
  clear_has_streetnetwork_params();
  ::pbnavitia::StreetNetworkParams* temp = streetnetwork_params_;
  streetnetwork_params_ = NULL;
  return temp;
}
void JourneysRequest::set_allocated_streetnetwork_params(::pbnavitia::StreetNetworkParams* streetnetwork_params) {
  delete streetnetwork_params_;
  streetnetwork_params_ = streetnetwork_params;
  if (streetnetwork_params) {
    set_has_streetnetwork_params();
  } else {
    clear_has_streetnetwork_params();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneysRequest.streetnetwork_params)
}

// optional bool wheelchair = 9 [default = false];
bool JourneysRequest::has_wheelchair() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void JourneysRequest::set_has_wheelchair() {
  _has_bits_[0] |= 0x00000100u;
}
void JourneysRequest::clear_has_wheelchair() {
  _has_bits_[0] &= ~0x00000100u;
}
void JourneysRequest::clear_wheelchair() {
  wheelchair_ = false;
  clear_has_wheelchair();
}
 bool JourneysRequest::wheelchair() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.wheelchair)
  return wheelchair_;
}
 void JourneysRequest::set_wheelchair(bool value) {
  set_has_wheelchair();
  wheelchair_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.wheelchair)
}

// optional bool show_codes = 11;
bool JourneysRequest::has_show_codes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void JourneysRequest::set_has_show_codes() {
  _has_bits_[0] |= 0x00000200u;
}
void JourneysRequest::clear_has_show_codes() {
  _has_bits_[0] &= ~0x00000200u;
}
void JourneysRequest::clear_show_codes() {
  show_codes_ = false;
  clear_has_show_codes();
}
 bool JourneysRequest::show_codes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.show_codes)
  return show_codes_;
}
 void JourneysRequest::set_show_codes(bool value) {
  set_has_show_codes();
  show_codes_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.show_codes)
}

// optional bool details = 13;
bool JourneysRequest::has_details() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void JourneysRequest::set_has_details() {
  _has_bits_[0] |= 0x00000400u;
}
void JourneysRequest::clear_has_details() {
  _has_bits_[0] &= ~0x00000400u;
}
void JourneysRequest::clear_details() {
  details_ = false;
  clear_has_details();
}
 bool JourneysRequest::details() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.details)
  return details_;
}
 void JourneysRequest::set_details(bool value) {
  set_has_details();
  details_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.details)
}

// optional .pbnavitia.RTLevel realtime_level = 14;
bool JourneysRequest::has_realtime_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void JourneysRequest::set_has_realtime_level() {
  _has_bits_[0] |= 0x00000800u;
}
void JourneysRequest::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00000800u;
}
void JourneysRequest::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
 ::pbnavitia::RTLevel JourneysRequest::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
 void JourneysRequest::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.realtime_level)
}

// optional int32 max_extra_second_pass = 15 [default = 0];
bool JourneysRequest::has_max_extra_second_pass() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void JourneysRequest::set_has_max_extra_second_pass() {
  _has_bits_[0] |= 0x00001000u;
}
void JourneysRequest::clear_has_max_extra_second_pass() {
  _has_bits_[0] &= ~0x00001000u;
}
void JourneysRequest::clear_max_extra_second_pass() {
  max_extra_second_pass_ = 0;
  clear_has_max_extra_second_pass();
}
 ::google::protobuf::int32 JourneysRequest::max_extra_second_pass() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.max_extra_second_pass)
  return max_extra_second_pass_;
}
 void JourneysRequest::set_max_extra_second_pass(::google::protobuf::int32 value) {
  set_has_max_extra_second_pass();
  max_extra_second_pass_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.max_extra_second_pass)
}

// optional int32 walking_transfer_penalty = 16 [default = 120];
bool JourneysRequest::has_walking_transfer_penalty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void JourneysRequest::set_has_walking_transfer_penalty() {
  _has_bits_[0] |= 0x00002000u;
}
void JourneysRequest::clear_has_walking_transfer_penalty() {
  _has_bits_[0] &= ~0x00002000u;
}
void JourneysRequest::clear_walking_transfer_penalty() {
  walking_transfer_penalty_ = 120;
  clear_has_walking_transfer_penalty();
}
 ::google::protobuf::int32 JourneysRequest::walking_transfer_penalty() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.walking_transfer_penalty)
  return walking_transfer_penalty_;
}
 void JourneysRequest::set_walking_transfer_penalty(::google::protobuf::int32 value) {
  set_has_walking_transfer_penalty();
  walking_transfer_penalty_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.walking_transfer_penalty)
}

// optional int32 direct_path_duration = 17;
bool JourneysRequest::has_direct_path_duration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void JourneysRequest::set_has_direct_path_duration() {
  _has_bits_[0] |= 0x00004000u;
}
void JourneysRequest::clear_has_direct_path_duration() {
  _has_bits_[0] &= ~0x00004000u;
}
void JourneysRequest::clear_direct_path_duration() {
  direct_path_duration_ = 0;
  clear_has_direct_path_duration();
}
 ::google::protobuf::int32 JourneysRequest::direct_path_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.direct_path_duration)
  return direct_path_duration_;
}
 void JourneysRequest::set_direct_path_duration(::google::protobuf::int32 value) {
  set_has_direct_path_duration();
  direct_path_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.direct_path_duration)
}

// optional bool bike_in_pt = 18;
bool JourneysRequest::has_bike_in_pt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void JourneysRequest::set_has_bike_in_pt() {
  _has_bits_[0] |= 0x00008000u;
}
void JourneysRequest::clear_has_bike_in_pt() {
  _has_bits_[0] &= ~0x00008000u;
}
void JourneysRequest::clear_bike_in_pt() {
  bike_in_pt_ = false;
  clear_has_bike_in_pt();
}
 bool JourneysRequest::bike_in_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.bike_in_pt)
  return bike_in_pt_;
}
 void JourneysRequest::set_bike_in_pt(bool value) {
  set_has_bike_in_pt();
  bike_in_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.bike_in_pt)
}

// repeated string allowed_id = 19;
int JourneysRequest::allowed_id_size() const {
  return allowed_id_.size();
}
void JourneysRequest::clear_allowed_id() {
  allowed_id_.Clear();
}
 const ::std::string& JourneysRequest::allowed_id(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.allowed_id)
  return allowed_id_.Get(index);
}
 ::std::string* JourneysRequest::mutable_allowed_id(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.allowed_id)
  return allowed_id_.Mutable(index);
}
 void JourneysRequest::set_allowed_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.allowed_id)
  allowed_id_.Mutable(index)->assign(value);
}
 void JourneysRequest::set_allowed_id(int index, const char* value) {
  allowed_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneysRequest.allowed_id)
}
 void JourneysRequest::set_allowed_id(int index, const char* value, size_t size) {
  allowed_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneysRequest.allowed_id)
}
 ::std::string* JourneysRequest::add_allowed_id() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.JourneysRequest.allowed_id)
  return allowed_id_.Add();
}
 void JourneysRequest::add_allowed_id(const ::std::string& value) {
  allowed_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.allowed_id)
}
 void JourneysRequest::add_allowed_id(const char* value) {
  allowed_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.JourneysRequest.allowed_id)
}
 void JourneysRequest::add_allowed_id(const char* value, size_t size) {
  allowed_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.JourneysRequest.allowed_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
JourneysRequest::allowed_id() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.allowed_id)
  return allowed_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
JourneysRequest::mutable_allowed_id() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.allowed_id)
  return &allowed_id_;
}

// optional int32 free_radius_from = 20 [default = 0];
bool JourneysRequest::has_free_radius_from() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void JourneysRequest::set_has_free_radius_from() {
  _has_bits_[0] |= 0x00020000u;
}
void JourneysRequest::clear_has_free_radius_from() {
  _has_bits_[0] &= ~0x00020000u;
}
void JourneysRequest::clear_free_radius_from() {
  free_radius_from_ = 0;
  clear_has_free_radius_from();
}
 ::google::protobuf::int32 JourneysRequest::free_radius_from() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.free_radius_from)
  return free_radius_from_;
}
 void JourneysRequest::set_free_radius_from(::google::protobuf::int32 value) {
  set_has_free_radius_from();
  free_radius_from_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.free_radius_from)
}

// optional int32 free_radius_to = 21 [default = 0];
bool JourneysRequest::has_free_radius_to() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void JourneysRequest::set_has_free_radius_to() {
  _has_bits_[0] |= 0x00040000u;
}
void JourneysRequest::clear_has_free_radius_to() {
  _has_bits_[0] &= ~0x00040000u;
}
void JourneysRequest::clear_free_radius_to() {
  free_radius_to_ = 0;
  clear_has_free_radius_to();
}
 ::google::protobuf::int32 JourneysRequest::free_radius_to() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.free_radius_to)
  return free_radius_to_;
}
 void JourneysRequest::set_free_radius_to(::google::protobuf::int32 value) {
  set_has_free_radius_to();
  free_radius_to_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.free_radius_to)
}

// optional int32 min_nb_journeys = 22;
bool JourneysRequest::has_min_nb_journeys() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void JourneysRequest::set_has_min_nb_journeys() {
  _has_bits_[0] |= 0x00080000u;
}
void JourneysRequest::clear_has_min_nb_journeys() {
  _has_bits_[0] &= ~0x00080000u;
}
void JourneysRequest::clear_min_nb_journeys() {
  min_nb_journeys_ = 0;
  clear_has_min_nb_journeys();
}
 ::google::protobuf::int32 JourneysRequest::min_nb_journeys() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.min_nb_journeys)
  return min_nb_journeys_;
}
 void JourneysRequest::set_min_nb_journeys(::google::protobuf::int32 value) {
  set_has_min_nb_journeys();
  min_nb_journeys_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.min_nb_journeys)
}

// optional double night_bus_filter_max_factor = 23 [default = 1.5];
bool JourneysRequest::has_night_bus_filter_max_factor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void JourneysRequest::set_has_night_bus_filter_max_factor() {
  _has_bits_[0] |= 0x00100000u;
}
void JourneysRequest::clear_has_night_bus_filter_max_factor() {
  _has_bits_[0] &= ~0x00100000u;
}
void JourneysRequest::clear_night_bus_filter_max_factor() {
  night_bus_filter_max_factor_ = 1.5;
  clear_has_night_bus_filter_max_factor();
}
 double JourneysRequest::night_bus_filter_max_factor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.night_bus_filter_max_factor)
  return night_bus_filter_max_factor_;
}
 void JourneysRequest::set_night_bus_filter_max_factor(double value) {
  set_has_night_bus_filter_max_factor();
  night_bus_filter_max_factor_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.night_bus_filter_max_factor)
}

// optional int32 night_bus_filter_base_factor = 24 [default = 900];
bool JourneysRequest::has_night_bus_filter_base_factor() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void JourneysRequest::set_has_night_bus_filter_base_factor() {
  _has_bits_[0] |= 0x00200000u;
}
void JourneysRequest::clear_has_night_bus_filter_base_factor() {
  _has_bits_[0] &= ~0x00200000u;
}
void JourneysRequest::clear_night_bus_filter_base_factor() {
  night_bus_filter_base_factor_ = 900;
  clear_has_night_bus_filter_base_factor();
}
 ::google::protobuf::int32 JourneysRequest::night_bus_filter_base_factor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.night_bus_filter_base_factor)
  return night_bus_filter_base_factor_;
}
 void JourneysRequest::set_night_bus_filter_base_factor(::google::protobuf::int32 value) {
  set_has_night_bus_filter_base_factor();
  night_bus_filter_base_factor_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.night_bus_filter_base_factor)
}

// optional uint32 timeframe_duration = 25;
bool JourneysRequest::has_timeframe_duration() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void JourneysRequest::set_has_timeframe_duration() {
  _has_bits_[0] |= 0x00400000u;
}
void JourneysRequest::clear_has_timeframe_duration() {
  _has_bits_[0] &= ~0x00400000u;
}
void JourneysRequest::clear_timeframe_duration() {
  timeframe_duration_ = 0u;
  clear_has_timeframe_duration();
}
 ::google::protobuf::uint32 JourneysRequest::timeframe_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.timeframe_duration)
  return timeframe_duration_;
}
 void JourneysRequest::set_timeframe_duration(::google::protobuf::uint32 value) {
  set_has_timeframe_duration();
  timeframe_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.timeframe_duration)
}

// optional int32 depth = 26 [default = 1];
bool JourneysRequest::has_depth() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void JourneysRequest::set_has_depth() {
  _has_bits_[0] |= 0x00800000u;
}
void JourneysRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00800000u;
}
void JourneysRequest::clear_depth() {
  depth_ = 1;
  clear_has_depth();
}
 ::google::protobuf::int32 JourneysRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.depth)
  return depth_;
}
 void JourneysRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.depth)
}

// optional .pbnavitia.LocationContext isochrone_center = 27;
bool JourneysRequest::has_isochrone_center() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void JourneysRequest::set_has_isochrone_center() {
  _has_bits_[0] |= 0x01000000u;
}
void JourneysRequest::clear_has_isochrone_center() {
  _has_bits_[0] &= ~0x01000000u;
}
void JourneysRequest::clear_isochrone_center() {
  if (isochrone_center_ != NULL) isochrone_center_->::pbnavitia::LocationContext::Clear();
  clear_has_isochrone_center();
}
const ::pbnavitia::LocationContext& JourneysRequest::isochrone_center() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.isochrone_center)
  return isochrone_center_ != NULL ? *isochrone_center_ : *default_instance_->isochrone_center_;
}
::pbnavitia::LocationContext* JourneysRequest::mutable_isochrone_center() {
  set_has_isochrone_center();
  if (isochrone_center_ == NULL) {
    isochrone_center_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.isochrone_center)
  return isochrone_center_;
}
::pbnavitia::LocationContext* JourneysRequest::release_isochrone_center() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneysRequest.isochrone_center)
  clear_has_isochrone_center();
  ::pbnavitia::LocationContext* temp = isochrone_center_;
  isochrone_center_ = NULL;
  return temp;
}
void JourneysRequest::set_allocated_isochrone_center(::pbnavitia::LocationContext* isochrone_center) {
  delete isochrone_center_;
  isochrone_center_ = isochrone_center;
  if (isochrone_center) {
    set_has_isochrone_center();
  } else {
    clear_has_isochrone_center();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneysRequest.isochrone_center)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlacesNearbyRequest::kUriFieldNumber;
const int PlacesNearbyRequest::kDistanceFieldNumber;
const int PlacesNearbyRequest::kTypesFieldNumber;
const int PlacesNearbyRequest::kDepthFieldNumber;
const int PlacesNearbyRequest::kCountFieldNumber;
const int PlacesNearbyRequest::kStartPageFieldNumber;
const int PlacesNearbyRequest::kFilterFieldNumber;
const int PlacesNearbyRequest::kStopPointsNearbyRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlacesNearbyRequest::PlacesNearbyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PlacesNearbyRequest)
}

void PlacesNearbyRequest::InitAsDefaultInstance() {
}

PlacesNearbyRequest::PlacesNearbyRequest(const PlacesNearbyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PlacesNearbyRequest)
}

void PlacesNearbyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
  depth_ = 0;
  count_ = 0;
  start_page_ = 0;
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_points_nearby_radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlacesNearbyRequest::~PlacesNearbyRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.PlacesNearbyRequest)
  SharedDtor();
}

void PlacesNearbyRequest::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlacesNearbyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlacesNearbyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlacesNearbyRequest_descriptor_;
}

const PlacesNearbyRequest& PlacesNearbyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

PlacesNearbyRequest* PlacesNearbyRequest::default_instance_ = NULL;

PlacesNearbyRequest* PlacesNearbyRequest::New(::google::protobuf::Arena* arena) const {
  PlacesNearbyRequest* n = new PlacesNearbyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlacesNearbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PlacesNearbyRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlacesNearbyRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlacesNearbyRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(depth_, count_);
    ZR_(stop_points_nearby_radius_, start_page_);
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    distance_ = 0;
    if (has_filter()) {
      filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlacesNearbyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PlacesNearbyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PlacesNearbyRequest.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_distance;
        break;
      }

      // required double distance = 2;
      case 2: {
        if (tag == 17) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_types;
        break;
      }

      // repeated .pbnavitia.NavitiaType types = 3;
      case 3: {
        if (tag == 24) {
         parse_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::NavitiaType_IsValid(value)) {
            add_types(static_cast< ::pbnavitia::NavitiaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::pbnavitia::NavitiaType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_types;
        if (input->ExpectTag(32)) goto parse_depth;
        break;
      }

      // required int32 depth = 4;
      case 4: {
        if (tag == 32) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_start_page;
        break;
      }

      // required int32 start_page = 6;
      case 6: {
        if (tag == 48) {
         parse_start_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_page_)));
          set_has_start_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_filter;
        break;
      }

      // optional string filter = 7;
      case 7: {
        if (tag == 58) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PlacesNearbyRequest.filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_stop_points_nearby_radius;
        break;
      }

      // optional double stop_points_nearby_radius = 8;
      case 8: {
        if (tag == 65) {
         parse_stop_points_nearby_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_points_nearby_radius_)));
          set_has_stop_points_nearby_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PlacesNearbyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PlacesNearbyRequest)
  return false;
#undef DO_
}

void PlacesNearbyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PlacesNearbyRequest)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlacesNearbyRequest.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // required double distance = 2;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  // repeated .pbnavitia.NavitiaType types = 3;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->types(i), output);
  }

  // required int32 depth = 4;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->depth(), output);
  }

  // required int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // required int32 start_page = 6;
  if (has_start_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->start_page(), output);
  }

  // optional string filter = 7;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlacesNearbyRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter(), output);
  }

  // optional double stop_points_nearby_radius = 8;
  if (has_stop_points_nearby_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->stop_points_nearby_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PlacesNearbyRequest)
}

::google::protobuf::uint8* PlacesNearbyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PlacesNearbyRequest)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlacesNearbyRequest.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // required double distance = 2;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  // repeated .pbnavitia.NavitiaType types = 3;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->types(i), target);
  }

  // required int32 depth = 4;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->depth(), target);
  }

  // required int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // required int32 start_page = 6;
  if (has_start_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->start_page(), target);
  }

  // optional string filter = 7;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlacesNearbyRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter(), target);
  }

  // optional double stop_points_nearby_radius = 8;
  if (has_stop_points_nearby_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->stop_points_nearby_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PlacesNearbyRequest)
  return target;
}

int PlacesNearbyRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.PlacesNearbyRequest)
  int total_size = 0;

  if (has_uri()) {
    // required string uri = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  if (has_distance()) {
    // required double distance = 2;
    total_size += 1 + 8;
  }

  if (has_depth()) {
    // required int32 depth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  if (has_count()) {
    // required int32 count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_start_page()) {
    // required int32 start_page = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_page());
  }

  return total_size;
}
int PlacesNearbyRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PlacesNearbyRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003b) ^ 0x0000003b) == 0) {  // All required fields are present.
    // required string uri = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());

    // required double distance = 2;
    total_size += 1 + 8;

    // required int32 depth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());

    // required int32 count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required int32 start_page = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_page());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional string filter = 7;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

    // optional double stop_points_nearby_radius = 8;
    if (has_stop_points_nearby_radius()) {
      total_size += 1 + 8;
    }

  }
  // repeated .pbnavitia.NavitiaType types = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    total_size += 1 * this->types_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlacesNearbyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PlacesNearbyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlacesNearbyRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlacesNearbyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PlacesNearbyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PlacesNearbyRequest)
    MergeFrom(*source);
  }
}

void PlacesNearbyRequest::MergeFrom(const PlacesNearbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PlacesNearbyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  types_.MergeFrom(from.types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_start_page()) {
      set_start_page(from.start_page());
    }
    if (from.has_filter()) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
    if (from.has_stop_points_nearby_radius()) {
      set_stop_points_nearby_radius(from.stop_points_nearby_radius());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlacesNearbyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PlacesNearbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlacesNearbyRequest::CopyFrom(const PlacesNearbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PlacesNearbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacesNearbyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void PlacesNearbyRequest::Swap(PlacesNearbyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlacesNearbyRequest::InternalSwap(PlacesNearbyRequest* other) {
  uri_.Swap(&other->uri_);
  std::swap(distance_, other->distance_);
  types_.UnsafeArenaSwap(&other->types_);
  std::swap(depth_, other->depth_);
  std::swap(count_, other->count_);
  std::swap(start_page_, other->start_page_);
  filter_.Swap(&other->filter_);
  std::swap(stop_points_nearby_radius_, other->stop_points_nearby_radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlacesNearbyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlacesNearbyRequest_descriptor_;
  metadata.reflection = PlacesNearbyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlacesNearbyRequest

// required string uri = 1;
bool PlacesNearbyRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlacesNearbyRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void PlacesNearbyRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlacesNearbyRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& PlacesNearbyRequest::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlacesNearbyRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.uri)
}
 void PlacesNearbyRequest::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlacesNearbyRequest.uri)
}
 void PlacesNearbyRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlacesNearbyRequest.uri)
}
 ::std::string* PlacesNearbyRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlacesNearbyRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlacesNearbyRequest::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlacesNearbyRequest.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlacesNearbyRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlacesNearbyRequest.uri)
}

// required double distance = 2;
bool PlacesNearbyRequest::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlacesNearbyRequest::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void PlacesNearbyRequest::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlacesNearbyRequest::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
 double PlacesNearbyRequest::distance() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.distance)
  return distance_;
}
 void PlacesNearbyRequest::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.distance)
}

// repeated .pbnavitia.NavitiaType types = 3;
int PlacesNearbyRequest::types_size() const {
  return types_.size();
}
void PlacesNearbyRequest::clear_types() {
  types_.Clear();
}
 ::pbnavitia::NavitiaType PlacesNearbyRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.types)
  return static_cast< ::pbnavitia::NavitiaType >(types_.Get(index));
}
 void PlacesNearbyRequest::set_types(int index, ::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.types)
}
 void PlacesNearbyRequest::add_types(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PlacesNearbyRequest.types)
}
 const ::google::protobuf::RepeatedField<int>&
PlacesNearbyRequest::types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PlacesNearbyRequest.types)
  return types_;
}
 ::google::protobuf::RepeatedField<int>*
PlacesNearbyRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PlacesNearbyRequest.types)
  return &types_;
}

// required int32 depth = 4;
bool PlacesNearbyRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlacesNearbyRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
void PlacesNearbyRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlacesNearbyRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 PlacesNearbyRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.depth)
  return depth_;
}
 void PlacesNearbyRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.depth)
}

// required int32 count = 5;
bool PlacesNearbyRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlacesNearbyRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
void PlacesNearbyRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlacesNearbyRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 PlacesNearbyRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.count)
  return count_;
}
 void PlacesNearbyRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.count)
}

// required int32 start_page = 6;
bool PlacesNearbyRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlacesNearbyRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000020u;
}
void PlacesNearbyRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlacesNearbyRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
 ::google::protobuf::int32 PlacesNearbyRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.start_page)
  return start_page_;
}
 void PlacesNearbyRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.start_page)
}

// optional string filter = 7;
bool PlacesNearbyRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlacesNearbyRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000040u;
}
void PlacesNearbyRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlacesNearbyRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
 const ::std::string& PlacesNearbyRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlacesNearbyRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.filter)
}
 void PlacesNearbyRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlacesNearbyRequest.filter)
}
 void PlacesNearbyRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlacesNearbyRequest.filter)
}
 ::std::string* PlacesNearbyRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlacesNearbyRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlacesNearbyRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlacesNearbyRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlacesNearbyRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlacesNearbyRequest.filter)
}

// optional double stop_points_nearby_radius = 8;
bool PlacesNearbyRequest::has_stop_points_nearby_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlacesNearbyRequest::set_has_stop_points_nearby_radius() {
  _has_bits_[0] |= 0x00000080u;
}
void PlacesNearbyRequest::clear_has_stop_points_nearby_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlacesNearbyRequest::clear_stop_points_nearby_radius() {
  stop_points_nearby_radius_ = 0;
  clear_has_stop_points_nearby_radius();
}
 double PlacesNearbyRequest::stop_points_nearby_radius() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.stop_points_nearby_radius)
  return stop_points_nearby_radius_;
}
 void PlacesNearbyRequest::set_stop_points_nearby_radius(double value) {
  set_has_stop_points_nearby_radius();
  stop_points_nearby_radius_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.stop_points_nearby_radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaceUriRequest::kUriFieldNumber;
const int PlaceUriRequest::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaceUriRequest::PlaceUriRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PlaceUriRequest)
}

void PlaceUriRequest::InitAsDefaultInstance() {
}

PlaceUriRequest::PlaceUriRequest(const PlaceUriRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PlaceUriRequest)
}

void PlaceUriRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depth_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceUriRequest::~PlaceUriRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.PlaceUriRequest)
  SharedDtor();
}

void PlaceUriRequest::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlaceUriRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceUriRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceUriRequest_descriptor_;
}

const PlaceUriRequest& PlaceUriRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

PlaceUriRequest* PlaceUriRequest::default_instance_ = NULL;

PlaceUriRequest* PlaceUriRequest::New(::google::protobuf::Arena* arena) const {
  PlaceUriRequest* n = new PlaceUriRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaceUriRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PlaceUriRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    depth_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlaceUriRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PlaceUriRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PlaceUriRequest.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_depth;
        break;
      }

      // optional int32 depth = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PlaceUriRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PlaceUriRequest)
  return false;
#undef DO_
}

void PlaceUriRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PlaceUriRequest)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlaceUriRequest.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional int32 depth = 2 [default = 1];
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PlaceUriRequest)
}

::google::protobuf::uint8* PlaceUriRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PlaceUriRequest)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlaceUriRequest.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional int32 depth = 2 [default = 1];
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PlaceUriRequest)
  return target;
}

int PlaceUriRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PlaceUriRequest)
  int total_size = 0;

  // required string uri = 1;
  if (has_uri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }
  // optional int32 depth = 2 [default = 1];
  if (has_depth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceUriRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PlaceUriRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlaceUriRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaceUriRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PlaceUriRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PlaceUriRequest)
    MergeFrom(*source);
  }
}

void PlaceUriRequest::MergeFrom(const PlaceUriRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PlaceUriRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlaceUriRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PlaceUriRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceUriRequest::CopyFrom(const PlaceUriRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PlaceUriRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceUriRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlaceUriRequest::Swap(PlaceUriRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceUriRequest::InternalSwap(PlaceUriRequest* other) {
  uri_.Swap(&other->uri_);
  std::swap(depth_, other->depth_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaceUriRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceUriRequest_descriptor_;
  metadata.reflection = PlaceUriRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceUriRequest

// required string uri = 1;
bool PlaceUriRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlaceUriRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void PlaceUriRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlaceUriRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& PlaceUriRequest::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceUriRequest.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceUriRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceUriRequest.uri)
}
 void PlaceUriRequest::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlaceUriRequest.uri)
}
 void PlaceUriRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlaceUriRequest.uri)
}
 ::std::string* PlaceUriRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlaceUriRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaceUriRequest::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlaceUriRequest.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceUriRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlaceUriRequest.uri)
}

// optional int32 depth = 2 [default = 1];
bool PlaceUriRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlaceUriRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000002u;
}
void PlaceUriRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlaceUriRequest::clear_depth() {
  depth_ = 1;
  clear_has_depth();
}
 ::google::protobuf::int32 PlaceUriRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceUriRequest.depth)
  return depth_;
}
 void PlaceUriRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceUriRequest.depth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PlaceCodeRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceCodeRequest_Type_descriptor_;
}
bool PlaceCodeRequest_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlaceCodeRequest_Type PlaceCodeRequest::StopArea;
const PlaceCodeRequest_Type PlaceCodeRequest::Network;
const PlaceCodeRequest_Type PlaceCodeRequest::Company;
const PlaceCodeRequest_Type PlaceCodeRequest::Line;
const PlaceCodeRequest_Type PlaceCodeRequest::Route;
const PlaceCodeRequest_Type PlaceCodeRequest::VehicleJourney;
const PlaceCodeRequest_Type PlaceCodeRequest::StopPoint;
const PlaceCodeRequest_Type PlaceCodeRequest::Calendar;
const PlaceCodeRequest_Type PlaceCodeRequest::Type_MIN;
const PlaceCodeRequest_Type PlaceCodeRequest::Type_MAX;
const int PlaceCodeRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaceCodeRequest::kTypeFieldNumber;
const int PlaceCodeRequest::kTypeCodeFieldNumber;
const int PlaceCodeRequest::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaceCodeRequest::PlaceCodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PlaceCodeRequest)
}

void PlaceCodeRequest::InitAsDefaultInstance() {
}

PlaceCodeRequest::PlaceCodeRequest(const PlaceCodeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PlaceCodeRequest)
}

void PlaceCodeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  type_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceCodeRequest::~PlaceCodeRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.PlaceCodeRequest)
  SharedDtor();
}

void PlaceCodeRequest::SharedDtor() {
  type_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlaceCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceCodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceCodeRequest_descriptor_;
}

const PlaceCodeRequest& PlaceCodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

PlaceCodeRequest* PlaceCodeRequest::default_instance_ = NULL;

PlaceCodeRequest* PlaceCodeRequest::New(::google::protobuf::Arena* arena) const {
  PlaceCodeRequest* n = new PlaceCodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaceCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PlaceCodeRequest)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 0;
    if (has_type_code()) {
      type_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_code()) {
      code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlaceCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PlaceCodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.PlaceCodeRequest.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::PlaceCodeRequest_Type_IsValid(value)) {
            set_type(static_cast< ::pbnavitia::PlaceCodeRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type_code;
        break;
      }

      // required string type_code = 2;
      case 2: {
        if (tag == 18) {
         parse_type_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_code().data(), this->type_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PlaceCodeRequest.type_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // required string code = 3;
      case 3: {
        if (tag == 26) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PlaceCodeRequest.code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PlaceCodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PlaceCodeRequest)
  return false;
#undef DO_
}

void PlaceCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PlaceCodeRequest)
  // required .pbnavitia.PlaceCodeRequest.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string type_code = 2;
  if (has_type_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_code().data(), this->type_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlaceCodeRequest.type_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type_code(), output);
  }

  // required string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlaceCodeRequest.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PlaceCodeRequest)
}

::google::protobuf::uint8* PlaceCodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PlaceCodeRequest)
  // required .pbnavitia.PlaceCodeRequest.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string type_code = 2;
  if (has_type_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_code().data(), this->type_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlaceCodeRequest.type_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type_code(), target);
  }

  // required string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PlaceCodeRequest.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PlaceCodeRequest)
  return target;
}

int PlaceCodeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.PlaceCodeRequest)
  int total_size = 0;

  if (has_type()) {
    // required .pbnavitia.PlaceCodeRequest.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_type_code()) {
    // required string type_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_code());
  }

  if (has_code()) {
    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  return total_size;
}
int PlaceCodeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PlaceCodeRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pbnavitia.PlaceCodeRequest.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required string type_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type_code());

    // required string code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PlaceCodeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlaceCodeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaceCodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PlaceCodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PlaceCodeRequest)
    MergeFrom(*source);
  }
}

void PlaceCodeRequest::MergeFrom(const PlaceCodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PlaceCodeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_type_code()) {
      set_has_type_code();
      type_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_code_);
    }
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlaceCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PlaceCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceCodeRequest::CopyFrom(const PlaceCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PlaceCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceCodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlaceCodeRequest::Swap(PlaceCodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceCodeRequest::InternalSwap(PlaceCodeRequest* other) {
  std::swap(type_, other->type_);
  type_code_.Swap(&other->type_code_);
  code_.Swap(&other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaceCodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceCodeRequest_descriptor_;
  metadata.reflection = PlaceCodeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceCodeRequest

// required .pbnavitia.PlaceCodeRequest.Type type = 1;
bool PlaceCodeRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlaceCodeRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PlaceCodeRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlaceCodeRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::pbnavitia::PlaceCodeRequest_Type PlaceCodeRequest::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceCodeRequest.type)
  return static_cast< ::pbnavitia::PlaceCodeRequest_Type >(type_);
}
 void PlaceCodeRequest::set_type(::pbnavitia::PlaceCodeRequest_Type value) {
  assert(::pbnavitia::PlaceCodeRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceCodeRequest.type)
}

// required string type_code = 2;
bool PlaceCodeRequest::has_type_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlaceCodeRequest::set_has_type_code() {
  _has_bits_[0] |= 0x00000002u;
}
void PlaceCodeRequest::clear_has_type_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlaceCodeRequest::clear_type_code() {
  type_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_code();
}
 const ::std::string& PlaceCodeRequest::type_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceCodeRequest.type_code)
  return type_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceCodeRequest::set_type_code(const ::std::string& value) {
  set_has_type_code();
  type_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceCodeRequest.type_code)
}
 void PlaceCodeRequest::set_type_code(const char* value) {
  set_has_type_code();
  type_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlaceCodeRequest.type_code)
}
 void PlaceCodeRequest::set_type_code(const char* value, size_t size) {
  set_has_type_code();
  type_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlaceCodeRequest.type_code)
}
 ::std::string* PlaceCodeRequest::mutable_type_code() {
  set_has_type_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlaceCodeRequest.type_code)
  return type_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaceCodeRequest::release_type_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlaceCodeRequest.type_code)
  clear_has_type_code();
  return type_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceCodeRequest::set_allocated_type_code(::std::string* type_code) {
  if (type_code != NULL) {
    set_has_type_code();
  } else {
    clear_has_type_code();
  }
  type_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlaceCodeRequest.type_code)
}

// required string code = 3;
bool PlaceCodeRequest::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlaceCodeRequest::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
void PlaceCodeRequest::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlaceCodeRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
 const ::std::string& PlaceCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceCodeRequest.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceCodeRequest::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceCodeRequest.code)
}
 void PlaceCodeRequest::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlaceCodeRequest.code)
}
 void PlaceCodeRequest::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlaceCodeRequest.code)
}
 ::std::string* PlaceCodeRequest::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlaceCodeRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaceCodeRequest::release_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlaceCodeRequest.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceCodeRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlaceCodeRequest.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PTRefRequest::kRequestedTypeFieldNumber;
const int PTRefRequest::kFilterFieldNumber;
const int PTRefRequest::kDepthFieldNumber;
const int PTRefRequest::kStartPageFieldNumber;
const int PTRefRequest::kCountFieldNumber;
const int PTRefRequest::kShowCodesFieldNumber;
const int PTRefRequest::kOdtLevelFieldNumber;
const int PTRefRequest::kForbiddenUriFieldNumber;
const int PTRefRequest::kDatetimeFieldNumber;
const int PTRefRequest::kSinceDatetimeFieldNumber;
const int PTRefRequest::kUntilDatetimeFieldNumber;
const int PTRefRequest::kDisableGeojsonFieldNumber;
const int PTRefRequest::kRealtimeLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PTRefRequest::PTRefRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PTRefRequest)
}

void PTRefRequest::InitAsDefaultInstance() {
}

PTRefRequest::PTRefRequest(const PTRefRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PTRefRequest)
}

void PTRefRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requested_type_ = 1;
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depth_ = 0;
  start_page_ = 0;
  count_ = 0;
  show_codes_ = false;
  odt_level_ = 0;
  datetime_ = GOOGLE_ULONGLONG(0);
  since_datetime_ = GOOGLE_ULONGLONG(0);
  until_datetime_ = GOOGLE_ULONGLONG(0);
  disable_geojson_ = false;
  realtime_level_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PTRefRequest::~PTRefRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.PTRefRequest)
  SharedDtor();
}

void PTRefRequest::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PTRefRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PTRefRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PTRefRequest_descriptor_;
}

const PTRefRequest& PTRefRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

PTRefRequest* PTRefRequest::default_instance_ = NULL;

PTRefRequest* PTRefRequest::New(::google::protobuf::Arena* arena) const {
  PTRefRequest* n = new PTRefRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PTRefRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PTRefRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PTRefRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PTRefRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(depth_, count_);
    ZR_(odt_level_, show_codes_);
    requested_type_ = 1;
    if (has_filter()) {
      filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(disable_geojson_, until_datetime_);
    realtime_level_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  forbidden_uri_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PTRefRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PTRefRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.NavitiaType requested_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::NavitiaType_IsValid(value)) {
            set_requested_type(static_cast< ::pbnavitia::NavitiaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }

      // required string filter = 2;
      case 2: {
        if (tag == 18) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PTRefRequest.filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_depth;
        break;
      }

      // required int32 depth = 3;
      case 3: {
        if (tag == 24) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_page;
        break;
      }

      // required int32 start_page = 4;
      case 4: {
        if (tag == 32) {
         parse_start_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_page_)));
          set_has_start_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_forbidden_uri;
        break;
      }

      // repeated string forbidden_uri = 6;
      case 6: {
        if (tag == 50) {
         parse_forbidden_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forbidden_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forbidden_uri(this->forbidden_uri_size() - 1).data(),
            this->forbidden_uri(this->forbidden_uri_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PTRefRequest.forbidden_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_forbidden_uri;
        if (input->ExpectTag(56)) goto parse_show_codes;
        break;
      }

      // optional bool show_codes = 7;
      case 7: {
        if (tag == 56) {
         parse_show_codes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_codes_)));
          set_has_show_codes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_odt_level;
        break;
      }

      // optional .pbnavitia.OdtLevel odt_level = 8;
      case 8: {
        if (tag == 64) {
         parse_odt_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::OdtLevel_IsValid(value)) {
            set_odt_level(static_cast< ::pbnavitia::OdtLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_datetime;
        break;
      }

      // optional uint64 datetime = 9;
      case 9: {
        if (tag == 72) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_since_datetime;
        break;
      }

      // optional uint64 since_datetime = 10;
      case 10: {
        if (tag == 80) {
         parse_since_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &since_datetime_)));
          set_has_since_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_until_datetime;
        break;
      }

      // optional uint64 until_datetime = 11;
      case 11: {
        if (tag == 88) {
         parse_until_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &until_datetime_)));
          set_has_until_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_disable_geojson;
        break;
      }

      // optional bool disable_geojson = 12;
      case 12: {
        if (tag == 96) {
         parse_disable_geojson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_geojson_)));
          set_has_disable_geojson();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_realtime_level;
        break;
      }

      // optional .pbnavitia.RTLevel realtime_level = 13;
      case 13: {
        if (tag == 104) {
         parse_realtime_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::RTLevel_IsValid(value)) {
            set_realtime_level(static_cast< ::pbnavitia::RTLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PTRefRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PTRefRequest)
  return false;
#undef DO_
}

void PTRefRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PTRefRequest)
  // required .pbnavitia.NavitiaType requested_type = 1;
  if (has_requested_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requested_type(), output);
  }

  // required string filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PTRefRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // required int32 depth = 3;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depth(), output);
  }

  // required int32 start_page = 4;
  if (has_start_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_page(), output);
  }

  // required int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // repeated string forbidden_uri = 6;
  for (int i = 0; i < this->forbidden_uri_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uri(i).data(), this->forbidden_uri(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PTRefRequest.forbidden_uri");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->forbidden_uri(i), output);
  }

  // optional bool show_codes = 7;
  if (has_show_codes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->show_codes(), output);
  }

  // optional .pbnavitia.OdtLevel odt_level = 8;
  if (has_odt_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->odt_level(), output);
  }

  // optional uint64 datetime = 9;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->datetime(), output);
  }

  // optional uint64 since_datetime = 10;
  if (has_since_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->since_datetime(), output);
  }

  // optional uint64 until_datetime = 11;
  if (has_until_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->until_datetime(), output);
  }

  // optional bool disable_geojson = 12;
  if (has_disable_geojson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->disable_geojson(), output);
  }

  // optional .pbnavitia.RTLevel realtime_level = 13;
  if (has_realtime_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->realtime_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PTRefRequest)
}

::google::protobuf::uint8* PTRefRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PTRefRequest)
  // required .pbnavitia.NavitiaType requested_type = 1;
  if (has_requested_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requested_type(), target);
  }

  // required string filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PTRefRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // required int32 depth = 3;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depth(), target);
  }

  // required int32 start_page = 4;
  if (has_start_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_page(), target);
  }

  // required int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // repeated string forbidden_uri = 6;
  for (int i = 0; i < this->forbidden_uri_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uri(i).data(), this->forbidden_uri(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PTRefRequest.forbidden_uri");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->forbidden_uri(i), target);
  }

  // optional bool show_codes = 7;
  if (has_show_codes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->show_codes(), target);
  }

  // optional .pbnavitia.OdtLevel odt_level = 8;
  if (has_odt_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->odt_level(), target);
  }

  // optional uint64 datetime = 9;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->datetime(), target);
  }

  // optional uint64 since_datetime = 10;
  if (has_since_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->since_datetime(), target);
  }

  // optional uint64 until_datetime = 11;
  if (has_until_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->until_datetime(), target);
  }

  // optional bool disable_geojson = 12;
  if (has_disable_geojson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->disable_geojson(), target);
  }

  // optional .pbnavitia.RTLevel realtime_level = 13;
  if (has_realtime_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->realtime_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PTRefRequest)
  return target;
}

int PTRefRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.PTRefRequest)
  int total_size = 0;

  if (has_requested_type()) {
    // required .pbnavitia.NavitiaType requested_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->requested_type());
  }

  if (has_filter()) {
    // required string filter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  if (has_depth()) {
    // required int32 depth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  if (has_start_page()) {
    // required int32 start_page = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_page());
  }

  if (has_count()) {
    // required int32 count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
int PTRefRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PTRefRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .pbnavitia.NavitiaType requested_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->requested_type());

    // required string filter = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());

    // required int32 depth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());

    // required int32 start_page = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_page());

    // required int32 count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96u) {
    // optional bool show_codes = 7;
    if (has_show_codes()) {
      total_size += 1 + 1;
    }

    // optional .pbnavitia.OdtLevel odt_level = 8;
    if (has_odt_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->odt_level());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint64 datetime = 9;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datetime());
    }

    // optional uint64 since_datetime = 10;
    if (has_since_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->since_datetime());
    }

    // optional uint64 until_datetime = 11;
    if (has_until_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->until_datetime());
    }

    // optional bool disable_geojson = 12;
    if (has_disable_geojson()) {
      total_size += 1 + 1;
    }

    // optional .pbnavitia.RTLevel realtime_level = 13;
    if (has_realtime_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->realtime_level());
    }

  }
  // repeated string forbidden_uri = 6;
  total_size += 1 * this->forbidden_uri_size();
  for (int i = 0; i < this->forbidden_uri_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forbidden_uri(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PTRefRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PTRefRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PTRefRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PTRefRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PTRefRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PTRefRequest)
    MergeFrom(*source);
  }
}

void PTRefRequest::MergeFrom(const PTRefRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PTRefRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  forbidden_uri_.MergeFrom(from.forbidden_uri_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requested_type()) {
      set_requested_type(from.requested_type());
    }
    if (from.has_filter()) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_start_page()) {
      set_start_page(from.start_page());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_show_codes()) {
      set_show_codes(from.show_codes());
    }
    if (from.has_odt_level()) {
      set_odt_level(from.odt_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_since_datetime()) {
      set_since_datetime(from.since_datetime());
    }
    if (from.has_until_datetime()) {
      set_until_datetime(from.until_datetime());
    }
    if (from.has_disable_geojson()) {
      set_disable_geojson(from.disable_geojson());
    }
    if (from.has_realtime_level()) {
      set_realtime_level(from.realtime_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PTRefRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PTRefRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTRefRequest::CopyFrom(const PTRefRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PTRefRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTRefRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PTRefRequest::Swap(PTRefRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PTRefRequest::InternalSwap(PTRefRequest* other) {
  std::swap(requested_type_, other->requested_type_);
  filter_.Swap(&other->filter_);
  std::swap(depth_, other->depth_);
  std::swap(start_page_, other->start_page_);
  std::swap(count_, other->count_);
  std::swap(show_codes_, other->show_codes_);
  std::swap(odt_level_, other->odt_level_);
  forbidden_uri_.UnsafeArenaSwap(&other->forbidden_uri_);
  std::swap(datetime_, other->datetime_);
  std::swap(since_datetime_, other->since_datetime_);
  std::swap(until_datetime_, other->until_datetime_);
  std::swap(disable_geojson_, other->disable_geojson_);
  std::swap(realtime_level_, other->realtime_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PTRefRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PTRefRequest_descriptor_;
  metadata.reflection = PTRefRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PTRefRequest

// required .pbnavitia.NavitiaType requested_type = 1;
bool PTRefRequest::has_requested_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PTRefRequest::set_has_requested_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PTRefRequest::clear_has_requested_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PTRefRequest::clear_requested_type() {
  requested_type_ = 1;
  clear_has_requested_type();
}
 ::pbnavitia::NavitiaType PTRefRequest::requested_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.requested_type)
  return static_cast< ::pbnavitia::NavitiaType >(requested_type_);
}
 void PTRefRequest::set_requested_type(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  set_has_requested_type();
  requested_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.requested_type)
}

// required string filter = 2;
bool PTRefRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PTRefRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000002u;
}
void PTRefRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
void PTRefRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
 const ::std::string& PTRefRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTRefRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.filter)
}
 void PTRefRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PTRefRequest.filter)
}
 void PTRefRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PTRefRequest.filter)
}
 ::std::string* PTRefRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PTRefRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PTRefRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.PTRefRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PTRefRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PTRefRequest.filter)
}

// required int32 depth = 3;
bool PTRefRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PTRefRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
void PTRefRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
void PTRefRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 PTRefRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.depth)
  return depth_;
}
 void PTRefRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.depth)
}

// required int32 start_page = 4;
bool PTRefRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PTRefRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000008u;
}
void PTRefRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000008u;
}
void PTRefRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
 ::google::protobuf::int32 PTRefRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.start_page)
  return start_page_;
}
 void PTRefRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.start_page)
}

// required int32 count = 5;
bool PTRefRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PTRefRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
void PTRefRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void PTRefRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 PTRefRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.count)
  return count_;
}
 void PTRefRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.count)
}

// optional bool show_codes = 7;
bool PTRefRequest::has_show_codes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PTRefRequest::set_has_show_codes() {
  _has_bits_[0] |= 0x00000020u;
}
void PTRefRequest::clear_has_show_codes() {
  _has_bits_[0] &= ~0x00000020u;
}
void PTRefRequest::clear_show_codes() {
  show_codes_ = false;
  clear_has_show_codes();
}
 bool PTRefRequest::show_codes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.show_codes)
  return show_codes_;
}
 void PTRefRequest::set_show_codes(bool value) {
  set_has_show_codes();
  show_codes_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.show_codes)
}

// optional .pbnavitia.OdtLevel odt_level = 8;
bool PTRefRequest::has_odt_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PTRefRequest::set_has_odt_level() {
  _has_bits_[0] |= 0x00000040u;
}
void PTRefRequest::clear_has_odt_level() {
  _has_bits_[0] &= ~0x00000040u;
}
void PTRefRequest::clear_odt_level() {
  odt_level_ = 0;
  clear_has_odt_level();
}
 ::pbnavitia::OdtLevel PTRefRequest::odt_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.odt_level)
  return static_cast< ::pbnavitia::OdtLevel >(odt_level_);
}
 void PTRefRequest::set_odt_level(::pbnavitia::OdtLevel value) {
  assert(::pbnavitia::OdtLevel_IsValid(value));
  set_has_odt_level();
  odt_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.odt_level)
}

// repeated string forbidden_uri = 6;
int PTRefRequest::forbidden_uri_size() const {
  return forbidden_uri_.size();
}
void PTRefRequest::clear_forbidden_uri() {
  forbidden_uri_.Clear();
}
 const ::std::string& PTRefRequest::forbidden_uri(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.forbidden_uri)
  return forbidden_uri_.Get(index);
}
 ::std::string* PTRefRequest::mutable_forbidden_uri(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PTRefRequest.forbidden_uri)
  return forbidden_uri_.Mutable(index);
}
 void PTRefRequest::set_forbidden_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.forbidden_uri)
  forbidden_uri_.Mutable(index)->assign(value);
}
 void PTRefRequest::set_forbidden_uri(int index, const char* value) {
  forbidden_uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PTRefRequest.forbidden_uri)
}
 void PTRefRequest::set_forbidden_uri(int index, const char* value, size_t size) {
  forbidden_uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PTRefRequest.forbidden_uri)
}
 ::std::string* PTRefRequest::add_forbidden_uri() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PTRefRequest.forbidden_uri)
  return forbidden_uri_.Add();
}
 void PTRefRequest::add_forbidden_uri(const ::std::string& value) {
  forbidden_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PTRefRequest.forbidden_uri)
}
 void PTRefRequest::add_forbidden_uri(const char* value) {
  forbidden_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PTRefRequest.forbidden_uri)
}
 void PTRefRequest::add_forbidden_uri(const char* value, size_t size) {
  forbidden_uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PTRefRequest.forbidden_uri)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PTRefRequest::forbidden_uri() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PTRefRequest.forbidden_uri)
  return forbidden_uri_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PTRefRequest::mutable_forbidden_uri() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PTRefRequest.forbidden_uri)
  return &forbidden_uri_;
}

// optional uint64 datetime = 9;
bool PTRefRequest::has_datetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PTRefRequest::set_has_datetime() {
  _has_bits_[0] |= 0x00000100u;
}
void PTRefRequest::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000100u;
}
void PTRefRequest::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
}
 ::google::protobuf::uint64 PTRefRequest::datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.datetime)
  return datetime_;
}
 void PTRefRequest::set_datetime(::google::protobuf::uint64 value) {
  set_has_datetime();
  datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.datetime)
}

// optional uint64 since_datetime = 10;
bool PTRefRequest::has_since_datetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PTRefRequest::set_has_since_datetime() {
  _has_bits_[0] |= 0x00000200u;
}
void PTRefRequest::clear_has_since_datetime() {
  _has_bits_[0] &= ~0x00000200u;
}
void PTRefRequest::clear_since_datetime() {
  since_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_since_datetime();
}
 ::google::protobuf::uint64 PTRefRequest::since_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.since_datetime)
  return since_datetime_;
}
 void PTRefRequest::set_since_datetime(::google::protobuf::uint64 value) {
  set_has_since_datetime();
  since_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.since_datetime)
}

// optional uint64 until_datetime = 11;
bool PTRefRequest::has_until_datetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PTRefRequest::set_has_until_datetime() {
  _has_bits_[0] |= 0x00000400u;
}
void PTRefRequest::clear_has_until_datetime() {
  _has_bits_[0] &= ~0x00000400u;
}
void PTRefRequest::clear_until_datetime() {
  until_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_until_datetime();
}
 ::google::protobuf::uint64 PTRefRequest::until_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.until_datetime)
  return until_datetime_;
}
 void PTRefRequest::set_until_datetime(::google::protobuf::uint64 value) {
  set_has_until_datetime();
  until_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.until_datetime)
}

// optional bool disable_geojson = 12;
bool PTRefRequest::has_disable_geojson() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PTRefRequest::set_has_disable_geojson() {
  _has_bits_[0] |= 0x00000800u;
}
void PTRefRequest::clear_has_disable_geojson() {
  _has_bits_[0] &= ~0x00000800u;
}
void PTRefRequest::clear_disable_geojson() {
  disable_geojson_ = false;
  clear_has_disable_geojson();
}
 bool PTRefRequest::disable_geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.disable_geojson)
  return disable_geojson_;
}
 void PTRefRequest::set_disable_geojson(bool value) {
  set_has_disable_geojson();
  disable_geojson_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.disable_geojson)
}

// optional .pbnavitia.RTLevel realtime_level = 13;
bool PTRefRequest::has_realtime_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PTRefRequest::set_has_realtime_level() {
  _has_bits_[0] |= 0x00001000u;
}
void PTRefRequest::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00001000u;
}
void PTRefRequest::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
 ::pbnavitia::RTLevel PTRefRequest::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
 void PTRefRequest::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.realtime_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CarCO2EmissionRequest::kOriginFieldNumber;
const int CarCO2EmissionRequest::kDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CarCO2EmissionRequest::CarCO2EmissionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.CarCO2EmissionRequest)
}

void CarCO2EmissionRequest::InitAsDefaultInstance() {
  origin_ = const_cast< ::pbnavitia::LocationContext*>(&::pbnavitia::LocationContext::default_instance());
  destination_ = const_cast< ::pbnavitia::LocationContext*>(&::pbnavitia::LocationContext::default_instance());
}

CarCO2EmissionRequest::CarCO2EmissionRequest(const CarCO2EmissionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.CarCO2EmissionRequest)
}

void CarCO2EmissionRequest::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  destination_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarCO2EmissionRequest::~CarCO2EmissionRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.CarCO2EmissionRequest)
  SharedDtor();
}

void CarCO2EmissionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete destination_;
  }
}

void CarCO2EmissionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarCO2EmissionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarCO2EmissionRequest_descriptor_;
}

const CarCO2EmissionRequest& CarCO2EmissionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

CarCO2EmissionRequest* CarCO2EmissionRequest::default_instance_ = NULL;

CarCO2EmissionRequest* CarCO2EmissionRequest::New(::google::protobuf::Arena* arena) const {
  CarCO2EmissionRequest* n = new CarCO2EmissionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CarCO2EmissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.CarCO2EmissionRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pbnavitia::LocationContext::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::pbnavitia::LocationContext::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CarCO2EmissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.CarCO2EmissionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.LocationContext origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }

      // optional .pbnavitia.LocationContext destination = 2;
      case 2: {
        if (tag == 18) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.CarCO2EmissionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.CarCO2EmissionRequest)
  return false;
#undef DO_
}

void CarCO2EmissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.CarCO2EmissionRequest)
  // optional .pbnavitia.LocationContext origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .pbnavitia.LocationContext destination = 2;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.CarCO2EmissionRequest)
}

::google::protobuf::uint8* CarCO2EmissionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.CarCO2EmissionRequest)
  // optional .pbnavitia.LocationContext origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, false, target);
  }

  // optional .pbnavitia.LocationContext destination = 2;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->destination_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.CarCO2EmissionRequest)
  return target;
}

int CarCO2EmissionRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.CarCO2EmissionRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .pbnavitia.LocationContext origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .pbnavitia.LocationContext destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarCO2EmissionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.CarCO2EmissionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CarCO2EmissionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CarCO2EmissionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.CarCO2EmissionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.CarCO2EmissionRequest)
    MergeFrom(*source);
  }
}

void CarCO2EmissionRequest::MergeFrom(const CarCO2EmissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.CarCO2EmissionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::pbnavitia::LocationContext::MergeFrom(from.origin());
    }
    if (from.has_destination()) {
      mutable_destination()->::pbnavitia::LocationContext::MergeFrom(from.destination());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CarCO2EmissionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.CarCO2EmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarCO2EmissionRequest::CopyFrom(const CarCO2EmissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.CarCO2EmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarCO2EmissionRequest::IsInitialized() const {

  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  return true;
}

void CarCO2EmissionRequest::Swap(CarCO2EmissionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CarCO2EmissionRequest::InternalSwap(CarCO2EmissionRequest* other) {
  std::swap(origin_, other->origin_);
  std::swap(destination_, other->destination_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CarCO2EmissionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarCO2EmissionRequest_descriptor_;
  metadata.reflection = CarCO2EmissionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CarCO2EmissionRequest

// optional .pbnavitia.LocationContext origin = 1;
bool CarCO2EmissionRequest::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CarCO2EmissionRequest::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CarCO2EmissionRequest::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CarCO2EmissionRequest::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::LocationContext::Clear();
  clear_has_origin();
}
const ::pbnavitia::LocationContext& CarCO2EmissionRequest::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CarCO2EmissionRequest.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::pbnavitia::LocationContext* CarCO2EmissionRequest::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.CarCO2EmissionRequest.origin)
  return origin_;
}
::pbnavitia::LocationContext* CarCO2EmissionRequest::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.CarCO2EmissionRequest.origin)
  clear_has_origin();
  ::pbnavitia::LocationContext* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CarCO2EmissionRequest::set_allocated_origin(::pbnavitia::LocationContext* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CarCO2EmissionRequest.origin)
}

// optional .pbnavitia.LocationContext destination = 2;
bool CarCO2EmissionRequest::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CarCO2EmissionRequest::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
void CarCO2EmissionRequest::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
void CarCO2EmissionRequest::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::LocationContext::Clear();
  clear_has_destination();
}
const ::pbnavitia::LocationContext& CarCO2EmissionRequest::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CarCO2EmissionRequest.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::pbnavitia::LocationContext* CarCO2EmissionRequest::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.CarCO2EmissionRequest.destination)
  return destination_;
}
::pbnavitia::LocationContext* CarCO2EmissionRequest::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.CarCO2EmissionRequest.destination)
  clear_has_destination();
  ::pbnavitia::LocationContext* temp = destination_;
  destination_ = NULL;
  return temp;
}
void CarCO2EmissionRequest::set_allocated_destination(::pbnavitia::LocationContext* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CarCO2EmissionRequest.destination)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectPathRequest::kOriginFieldNumber;
const int DirectPathRequest::kDestinationFieldNumber;
const int DirectPathRequest::kDatetimeFieldNumber;
const int DirectPathRequest::kClockwiseFieldNumber;
const int DirectPathRequest::kStreetnetworkParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectPathRequest::DirectPathRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.DirectPathRequest)
}

void DirectPathRequest::InitAsDefaultInstance() {
  origin_ = const_cast< ::pbnavitia::LocationContext*>(&::pbnavitia::LocationContext::default_instance());
  destination_ = const_cast< ::pbnavitia::LocationContext*>(&::pbnavitia::LocationContext::default_instance());
  streetnetwork_params_ = const_cast< ::pbnavitia::StreetNetworkParams*>(&::pbnavitia::StreetNetworkParams::default_instance());
}

DirectPathRequest::DirectPathRequest(const DirectPathRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.DirectPathRequest)
}

void DirectPathRequest::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  destination_ = NULL;
  datetime_ = GOOGLE_ULONGLONG(0);
  clockwise_ = false;
  streetnetwork_params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectPathRequest::~DirectPathRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.DirectPathRequest)
  SharedDtor();
}

void DirectPathRequest::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete destination_;
    delete streetnetwork_params_;
  }
}

void DirectPathRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectPathRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectPathRequest_descriptor_;
}

const DirectPathRequest& DirectPathRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

DirectPathRequest* DirectPathRequest::default_instance_ = NULL;

DirectPathRequest* DirectPathRequest::New(::google::protobuf::Arena* arena) const {
  DirectPathRequest* n = new DirectPathRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.DirectPathRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pbnavitia::LocationContext::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::pbnavitia::LocationContext::Clear();
    }
    datetime_ = GOOGLE_ULONGLONG(0);
    clockwise_ = false;
    if (has_streetnetwork_params()) {
      if (streetnetwork_params_ != NULL) streetnetwork_params_->::pbnavitia::StreetNetworkParams::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DirectPathRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.DirectPathRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.LocationContext origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }

      // optional .pbnavitia.LocationContext destination = 2;
      case 2: {
        if (tag == 18) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_datetime;
        break;
      }

      // optional uint64 datetime = 3;
      case 3: {
        if (tag == 24) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_clockwise;
        break;
      }

      // required bool clockwise = 4;
      case 4: {
        if (tag == 32) {
         parse_clockwise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clockwise_)));
          set_has_clockwise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_streetnetwork_params;
        break;
      }

      // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 5;
      case 5: {
        if (tag == 42) {
         parse_streetnetwork_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streetnetwork_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.DirectPathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.DirectPathRequest)
  return false;
#undef DO_
}

void DirectPathRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.DirectPathRequest)
  // optional .pbnavitia.LocationContext origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .pbnavitia.LocationContext destination = 2;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_, output);
  }

  // optional uint64 datetime = 3;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->datetime(), output);
  }

  // required bool clockwise = 4;
  if (has_clockwise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->clockwise(), output);
  }

  // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 5;
  if (has_streetnetwork_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->streetnetwork_params_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.DirectPathRequest)
}

::google::protobuf::uint8* DirectPathRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.DirectPathRequest)
  // optional .pbnavitia.LocationContext origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, false, target);
  }

  // optional .pbnavitia.LocationContext destination = 2;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->destination_, false, target);
  }

  // optional uint64 datetime = 3;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->datetime(), target);
  }

  // required bool clockwise = 4;
  if (has_clockwise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->clockwise(), target);
  }

  // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 5;
  if (has_streetnetwork_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->streetnetwork_params_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.DirectPathRequest)
  return target;
}

int DirectPathRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.DirectPathRequest)
  int total_size = 0;

  // required bool clockwise = 4;
  if (has_clockwise()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[0 / 32] & 23u) {
    // optional .pbnavitia.LocationContext origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .pbnavitia.LocationContext destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

    // optional uint64 datetime = 3;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datetime());
    }

    // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 5;
    if (has_streetnetwork_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->streetnetwork_params_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectPathRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.DirectPathRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DirectPathRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectPathRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.DirectPathRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.DirectPathRequest)
    MergeFrom(*source);
  }
}

void DirectPathRequest::MergeFrom(const DirectPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.DirectPathRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::pbnavitia::LocationContext::MergeFrom(from.origin());
    }
    if (from.has_destination()) {
      mutable_destination()->::pbnavitia::LocationContext::MergeFrom(from.destination());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_clockwise()) {
      set_clockwise(from.clockwise());
    }
    if (from.has_streetnetwork_params()) {
      mutable_streetnetwork_params()->::pbnavitia::StreetNetworkParams::MergeFrom(from.streetnetwork_params());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DirectPathRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.DirectPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectPathRequest::CopyFrom(const DirectPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.DirectPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectPathRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  return true;
}

void DirectPathRequest::Swap(DirectPathRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectPathRequest::InternalSwap(DirectPathRequest* other) {
  std::swap(origin_, other->origin_);
  std::swap(destination_, other->destination_);
  std::swap(datetime_, other->datetime_);
  std::swap(clockwise_, other->clockwise_);
  std::swap(streetnetwork_params_, other->streetnetwork_params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectPathRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectPathRequest_descriptor_;
  metadata.reflection = DirectPathRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectPathRequest

// optional .pbnavitia.LocationContext origin = 1;
bool DirectPathRequest::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DirectPathRequest::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void DirectPathRequest::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void DirectPathRequest::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::LocationContext::Clear();
  clear_has_origin();
}
const ::pbnavitia::LocationContext& DirectPathRequest::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::pbnavitia::LocationContext* DirectPathRequest::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DirectPathRequest.origin)
  return origin_;
}
::pbnavitia::LocationContext* DirectPathRequest::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.DirectPathRequest.origin)
  clear_has_origin();
  ::pbnavitia::LocationContext* temp = origin_;
  origin_ = NULL;
  return temp;
}
void DirectPathRequest::set_allocated_origin(::pbnavitia::LocationContext* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DirectPathRequest.origin)
}

// optional .pbnavitia.LocationContext destination = 2;
bool DirectPathRequest::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DirectPathRequest::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
void DirectPathRequest::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
void DirectPathRequest::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::LocationContext::Clear();
  clear_has_destination();
}
const ::pbnavitia::LocationContext& DirectPathRequest::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::pbnavitia::LocationContext* DirectPathRequest::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DirectPathRequest.destination)
  return destination_;
}
::pbnavitia::LocationContext* DirectPathRequest::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.DirectPathRequest.destination)
  clear_has_destination();
  ::pbnavitia::LocationContext* temp = destination_;
  destination_ = NULL;
  return temp;
}
void DirectPathRequest::set_allocated_destination(::pbnavitia::LocationContext* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DirectPathRequest.destination)
}

// optional uint64 datetime = 3;
bool DirectPathRequest::has_datetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DirectPathRequest::set_has_datetime() {
  _has_bits_[0] |= 0x00000004u;
}
void DirectPathRequest::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000004u;
}
void DirectPathRequest::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
}
 ::google::protobuf::uint64 DirectPathRequest::datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.datetime)
  return datetime_;
}
 void DirectPathRequest::set_datetime(::google::protobuf::uint64 value) {
  set_has_datetime();
  datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.DirectPathRequest.datetime)
}

// required bool clockwise = 4;
bool DirectPathRequest::has_clockwise() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DirectPathRequest::set_has_clockwise() {
  _has_bits_[0] |= 0x00000008u;
}
void DirectPathRequest::clear_has_clockwise() {
  _has_bits_[0] &= ~0x00000008u;
}
void DirectPathRequest::clear_clockwise() {
  clockwise_ = false;
  clear_has_clockwise();
}
 bool DirectPathRequest::clockwise() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.clockwise)
  return clockwise_;
}
 void DirectPathRequest::set_clockwise(bool value) {
  set_has_clockwise();
  clockwise_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.DirectPathRequest.clockwise)
}

// optional .pbnavitia.StreetNetworkParams streetnetwork_params = 5;
bool DirectPathRequest::has_streetnetwork_params() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DirectPathRequest::set_has_streetnetwork_params() {
  _has_bits_[0] |= 0x00000010u;
}
void DirectPathRequest::clear_has_streetnetwork_params() {
  _has_bits_[0] &= ~0x00000010u;
}
void DirectPathRequest::clear_streetnetwork_params() {
  if (streetnetwork_params_ != NULL) streetnetwork_params_->::pbnavitia::StreetNetworkParams::Clear();
  clear_has_streetnetwork_params();
}
const ::pbnavitia::StreetNetworkParams& DirectPathRequest::streetnetwork_params() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.streetnetwork_params)
  return streetnetwork_params_ != NULL ? *streetnetwork_params_ : *default_instance_->streetnetwork_params_;
}
::pbnavitia::StreetNetworkParams* DirectPathRequest::mutable_streetnetwork_params() {
  set_has_streetnetwork_params();
  if (streetnetwork_params_ == NULL) {
    streetnetwork_params_ = new ::pbnavitia::StreetNetworkParams;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DirectPathRequest.streetnetwork_params)
  return streetnetwork_params_;
}
::pbnavitia::StreetNetworkParams* DirectPathRequest::release_streetnetwork_params() {
  // @@protoc_insertion_point(field_release:pbnavitia.DirectPathRequest.streetnetwork_params)
  clear_has_streetnetwork_params();
  ::pbnavitia::StreetNetworkParams* temp = streetnetwork_params_;
  streetnetwork_params_ = NULL;
  return temp;
}
void DirectPathRequest::set_allocated_streetnetwork_params(::pbnavitia::StreetNetworkParams* streetnetwork_params) {
  delete streetnetwork_params_;
  streetnetwork_params_ = streetnetwork_params;
  if (streetnetwork_params) {
    set_has_streetnetwork_params();
  } else {
    clear_has_streetnetwork_params();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DirectPathRequest.streetnetwork_params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetNetworkRoutingMatrixRequest::kOriginsFieldNumber;
const int StreetNetworkRoutingMatrixRequest::kDestinationsFieldNumber;
const int StreetNetworkRoutingMatrixRequest::kModeFieldNumber;
const int StreetNetworkRoutingMatrixRequest::kSpeedFieldNumber;
const int StreetNetworkRoutingMatrixRequest::kMaxDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetNetworkRoutingMatrixRequest::StreetNetworkRoutingMatrixRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StreetNetworkRoutingMatrixRequest)
}

void StreetNetworkRoutingMatrixRequest::InitAsDefaultInstance() {
}

StreetNetworkRoutingMatrixRequest::StreetNetworkRoutingMatrixRequest(const StreetNetworkRoutingMatrixRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StreetNetworkRoutingMatrixRequest)
}

void StreetNetworkRoutingMatrixRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_ = 0;
  max_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetNetworkRoutingMatrixRequest::~StreetNetworkRoutingMatrixRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.StreetNetworkRoutingMatrixRequest)
  SharedDtor();
}

void StreetNetworkRoutingMatrixRequest::SharedDtor() {
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StreetNetworkRoutingMatrixRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetNetworkRoutingMatrixRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetNetworkRoutingMatrixRequest_descriptor_;
}

const StreetNetworkRoutingMatrixRequest& StreetNetworkRoutingMatrixRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

StreetNetworkRoutingMatrixRequest* StreetNetworkRoutingMatrixRequest::default_instance_ = NULL;

StreetNetworkRoutingMatrixRequest* StreetNetworkRoutingMatrixRequest::New(::google::protobuf::Arena* arena) const {
  StreetNetworkRoutingMatrixRequest* n = new StreetNetworkRoutingMatrixRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreetNetworkRoutingMatrixRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreetNetworkRoutingMatrixRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreetNetworkRoutingMatrixRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 28u) {
    ZR_(speed_, max_duration_);
    if (has_mode()) {
      mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  origins_.Clear();
  destinations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreetNetworkRoutingMatrixRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.LocationContext origins = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_origins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_origins()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_origins;
        if (input->ExpectTag(18)) goto parse_loop_destinations;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.LocationContext destinations = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_destinations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_destinations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_destinations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_mode;
        break;
      }

      // optional string mode = 3;
      case 3: {
        if (tag == 26) {
         parse_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mode().data(), this->mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StreetNetworkRoutingMatrixRequest.mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_speed;
        break;
      }

      // optional float speed = 4;
      case 4: {
        if (tag == 37) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_duration;
        break;
      }

      // optional int32 max_duration = 5;
      case 5: {
        if (tag == 40) {
         parse_max_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_duration_)));
          set_has_max_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StreetNetworkRoutingMatrixRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StreetNetworkRoutingMatrixRequest)
  return false;
#undef DO_
}

void StreetNetworkRoutingMatrixRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
  // repeated .pbnavitia.LocationContext origins = 1;
  for (unsigned int i = 0, n = this->origins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origins(i), output);
  }

  // repeated .pbnavitia.LocationContext destinations = 2;
  for (unsigned int i = 0, n = this->destinations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->destinations(i), output);
  }

  // optional string mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkRoutingMatrixRequest.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mode(), output);
  }

  // optional float speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // optional int32 max_duration = 5;
  if (has_max_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StreetNetworkRoutingMatrixRequest)
}

::google::protobuf::uint8* StreetNetworkRoutingMatrixRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
  // repeated .pbnavitia.LocationContext origins = 1;
  for (unsigned int i = 0, n = this->origins_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->origins(i), false, target);
  }

  // repeated .pbnavitia.LocationContext destinations = 2;
  for (unsigned int i = 0, n = this->destinations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->destinations(i), false, target);
  }

  // optional string mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StreetNetworkRoutingMatrixRequest.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mode(), target);
  }

  // optional float speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // optional int32 max_duration = 5;
  if (has_max_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StreetNetworkRoutingMatrixRequest)
  return target;
}

int StreetNetworkRoutingMatrixRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 28u) {
    // optional string mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mode());
    }

    // optional float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int32 max_duration = 5;
    if (has_max_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_duration());
    }

  }
  // repeated .pbnavitia.LocationContext origins = 1;
  total_size += 1 * this->origins_size();
  for (int i = 0; i < this->origins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->origins(i));
  }

  // repeated .pbnavitia.LocationContext destinations = 2;
  total_size += 1 * this->destinations_size();
  for (int i = 0; i < this->destinations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destinations(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetNetworkRoutingMatrixRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreetNetworkRoutingMatrixRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreetNetworkRoutingMatrixRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StreetNetworkRoutingMatrixRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StreetNetworkRoutingMatrixRequest)
    MergeFrom(*source);
  }
}

void StreetNetworkRoutingMatrixRequest::MergeFrom(const StreetNetworkRoutingMatrixRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  origins_.MergeFrom(from.origins_);
  destinations_.MergeFrom(from.destinations_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_mode()) {
      set_has_mode();
      mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_max_duration()) {
      set_max_duration(from.max_duration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreetNetworkRoutingMatrixRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetNetworkRoutingMatrixRequest::CopyFrom(const StreetNetworkRoutingMatrixRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StreetNetworkRoutingMatrixRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetNetworkRoutingMatrixRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->origins())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->destinations())) return false;
  return true;
}

void StreetNetworkRoutingMatrixRequest::Swap(StreetNetworkRoutingMatrixRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetNetworkRoutingMatrixRequest::InternalSwap(StreetNetworkRoutingMatrixRequest* other) {
  origins_.UnsafeArenaSwap(&other->origins_);
  destinations_.UnsafeArenaSwap(&other->destinations_);
  mode_.Swap(&other->mode_);
  std::swap(speed_, other->speed_);
  std::swap(max_duration_, other->max_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreetNetworkRoutingMatrixRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreetNetworkRoutingMatrixRequest_descriptor_;
  metadata.reflection = StreetNetworkRoutingMatrixRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreetNetworkRoutingMatrixRequest

// repeated .pbnavitia.LocationContext origins = 1;
int StreetNetworkRoutingMatrixRequest::origins_size() const {
  return origins_.size();
}
void StreetNetworkRoutingMatrixRequest::clear_origins() {
  origins_.Clear();
}
const ::pbnavitia::LocationContext& StreetNetworkRoutingMatrixRequest::origins(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return origins_.Get(index);
}
::pbnavitia::LocationContext* StreetNetworkRoutingMatrixRequest::mutable_origins(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return origins_.Mutable(index);
}
::pbnavitia::LocationContext* StreetNetworkRoutingMatrixRequest::add_origins() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return origins_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
StreetNetworkRoutingMatrixRequest::mutable_origins() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return &origins_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
StreetNetworkRoutingMatrixRequest::origins() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return origins_;
}

// repeated .pbnavitia.LocationContext destinations = 2;
int StreetNetworkRoutingMatrixRequest::destinations_size() const {
  return destinations_.size();
}
void StreetNetworkRoutingMatrixRequest::clear_destinations() {
  destinations_.Clear();
}
const ::pbnavitia::LocationContext& StreetNetworkRoutingMatrixRequest::destinations(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return destinations_.Get(index);
}
::pbnavitia::LocationContext* StreetNetworkRoutingMatrixRequest::mutable_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return destinations_.Mutable(index);
}
::pbnavitia::LocationContext* StreetNetworkRoutingMatrixRequest::add_destinations() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return destinations_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
StreetNetworkRoutingMatrixRequest::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return &destinations_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
StreetNetworkRoutingMatrixRequest::destinations() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return destinations_;
}

// optional string mode = 3;
bool StreetNetworkRoutingMatrixRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreetNetworkRoutingMatrixRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void StreetNetworkRoutingMatrixRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreetNetworkRoutingMatrixRequest::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mode();
}
 const ::std::string& StreetNetworkRoutingMatrixRequest::mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
  return mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkRoutingMatrixRequest::set_mode(const ::std::string& value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
}
 void StreetNetworkRoutingMatrixRequest::set_mode(const char* value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
}
 void StreetNetworkRoutingMatrixRequest::set_mode(const char* value, size_t size) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
}
 ::std::string* StreetNetworkRoutingMatrixRequest::mutable_mode() {
  set_has_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreetNetworkRoutingMatrixRequest::release_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
  clear_has_mode();
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreetNetworkRoutingMatrixRequest::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    set_has_mode();
  } else {
    clear_has_mode();
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
}

// optional float speed = 4;
bool StreetNetworkRoutingMatrixRequest::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StreetNetworkRoutingMatrixRequest::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void StreetNetworkRoutingMatrixRequest::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void StreetNetworkRoutingMatrixRequest::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 float StreetNetworkRoutingMatrixRequest::speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.speed)
  return speed_;
}
 void StreetNetworkRoutingMatrixRequest::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkRoutingMatrixRequest.speed)
}

// optional int32 max_duration = 5;
bool StreetNetworkRoutingMatrixRequest::has_max_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StreetNetworkRoutingMatrixRequest::set_has_max_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void StreetNetworkRoutingMatrixRequest::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void StreetNetworkRoutingMatrixRequest::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
 ::google::protobuf::int32 StreetNetworkRoutingMatrixRequest::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.max_duration)
  return max_duration_;
}
 void StreetNetworkRoutingMatrixRequest::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkRoutingMatrixRequest.max_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchingRoute::kLineUriFieldNumber;
const int MatchingRoute::kStartStopPointUriFieldNumber;
const int MatchingRoute::kDestinationCodeKeyFieldNumber;
const int MatchingRoute::kDestinationCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchingRoute::MatchingRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.MatchingRoute)
}

void MatchingRoute::InitAsDefaultInstance() {
}

MatchingRoute::MatchingRoute(const MatchingRoute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.MatchingRoute)
}

void MatchingRoute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  line_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_stop_point_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_code_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchingRoute::~MatchingRoute() {
  // @@protoc_insertion_point(destructor:pbnavitia.MatchingRoute)
  SharedDtor();
}

void MatchingRoute::SharedDtor() {
  line_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_stop_point_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_code_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MatchingRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchingRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchingRoute_descriptor_;
}

const MatchingRoute& MatchingRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

MatchingRoute* MatchingRoute::default_instance_ = NULL;

MatchingRoute* MatchingRoute::New(::google::protobuf::Arena* arena) const {
  MatchingRoute* n = new MatchingRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchingRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.MatchingRoute)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_line_uri()) {
      line_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_start_stop_point_uri()) {
      start_stop_point_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_destination_code_key()) {
      destination_code_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_destination_code()) {
      destination_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MatchingRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.MatchingRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string line_uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->line_uri().data(), this->line_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.MatchingRoute.line_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_stop_point_uri;
        break;
      }

      // optional string start_stop_point_uri = 2;
      case 2: {
        if (tag == 18) {
         parse_start_stop_point_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_stop_point_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_stop_point_uri().data(), this->start_stop_point_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.MatchingRoute.start_stop_point_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_destination_code_key;
        break;
      }

      // optional string destination_code_key = 3;
      case 3: {
        if (tag == 26) {
         parse_destination_code_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_code_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination_code_key().data(), this->destination_code_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.MatchingRoute.destination_code_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_destination_code;
        break;
      }

      // optional string destination_code = 4;
      case 4: {
        if (tag == 34) {
         parse_destination_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination_code().data(), this->destination_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.MatchingRoute.destination_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.MatchingRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.MatchingRoute)
  return false;
#undef DO_
}

void MatchingRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.MatchingRoute)
  // optional string line_uri = 1;
  if (has_line_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->line_uri().data(), this->line_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MatchingRoute.line_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->line_uri(), output);
  }

  // optional string start_stop_point_uri = 2;
  if (has_start_stop_point_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_stop_point_uri().data(), this->start_stop_point_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MatchingRoute.start_stop_point_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start_stop_point_uri(), output);
  }

  // optional string destination_code_key = 3;
  if (has_destination_code_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_code_key().data(), this->destination_code_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MatchingRoute.destination_code_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->destination_code_key(), output);
  }

  // optional string destination_code = 4;
  if (has_destination_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_code().data(), this->destination_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MatchingRoute.destination_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->destination_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.MatchingRoute)
}

::google::protobuf::uint8* MatchingRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.MatchingRoute)
  // optional string line_uri = 1;
  if (has_line_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->line_uri().data(), this->line_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MatchingRoute.line_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->line_uri(), target);
  }

  // optional string start_stop_point_uri = 2;
  if (has_start_stop_point_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_stop_point_uri().data(), this->start_stop_point_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MatchingRoute.start_stop_point_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_stop_point_uri(), target);
  }

  // optional string destination_code_key = 3;
  if (has_destination_code_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_code_key().data(), this->destination_code_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MatchingRoute.destination_code_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->destination_code_key(), target);
  }

  // optional string destination_code = 4;
  if (has_destination_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_code().data(), this->destination_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MatchingRoute.destination_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->destination_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.MatchingRoute)
  return target;
}

int MatchingRoute::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.MatchingRoute)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string line_uri = 1;
    if (has_line_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line_uri());
    }

    // optional string start_stop_point_uri = 2;
    if (has_start_stop_point_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_stop_point_uri());
    }

    // optional string destination_code_key = 3;
    if (has_destination_code_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_code_key());
    }

    // optional string destination_code = 4;
    if (has_destination_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_code());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchingRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.MatchingRoute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MatchingRoute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchingRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.MatchingRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.MatchingRoute)
    MergeFrom(*source);
  }
}

void MatchingRoute::MergeFrom(const MatchingRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.MatchingRoute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line_uri()) {
      set_has_line_uri();
      line_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_uri_);
    }
    if (from.has_start_stop_point_uri()) {
      set_has_start_stop_point_uri();
      start_stop_point_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_stop_point_uri_);
    }
    if (from.has_destination_code_key()) {
      set_has_destination_code_key();
      destination_code_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_code_key_);
    }
    if (from.has_destination_code()) {
      set_has_destination_code();
      destination_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_code_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MatchingRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.MatchingRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchingRoute::CopyFrom(const MatchingRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.MatchingRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchingRoute::IsInitialized() const {

  return true;
}

void MatchingRoute::Swap(MatchingRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchingRoute::InternalSwap(MatchingRoute* other) {
  line_uri_.Swap(&other->line_uri_);
  start_stop_point_uri_.Swap(&other->start_stop_point_uri_);
  destination_code_key_.Swap(&other->destination_code_key_);
  destination_code_.Swap(&other->destination_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchingRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchingRoute_descriptor_;
  metadata.reflection = MatchingRoute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchingRoute

// optional string line_uri = 1;
bool MatchingRoute::has_line_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MatchingRoute::set_has_line_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void MatchingRoute::clear_has_line_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void MatchingRoute::clear_line_uri() {
  line_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_line_uri();
}
 const ::std::string& MatchingRoute::line_uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MatchingRoute.line_uri)
  return line_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchingRoute::set_line_uri(const ::std::string& value) {
  set_has_line_uri();
  line_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MatchingRoute.line_uri)
}
 void MatchingRoute::set_line_uri(const char* value) {
  set_has_line_uri();
  line_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MatchingRoute.line_uri)
}
 void MatchingRoute::set_line_uri(const char* value, size_t size) {
  set_has_line_uri();
  line_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MatchingRoute.line_uri)
}
 ::std::string* MatchingRoute::mutable_line_uri() {
  set_has_line_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MatchingRoute.line_uri)
  return line_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MatchingRoute::release_line_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.MatchingRoute.line_uri)
  clear_has_line_uri();
  return line_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchingRoute::set_allocated_line_uri(::std::string* line_uri) {
  if (line_uri != NULL) {
    set_has_line_uri();
  } else {
    clear_has_line_uri();
  }
  line_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MatchingRoute.line_uri)
}

// optional string start_stop_point_uri = 2;
bool MatchingRoute::has_start_stop_point_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MatchingRoute::set_has_start_stop_point_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void MatchingRoute::clear_has_start_stop_point_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void MatchingRoute::clear_start_stop_point_uri() {
  start_stop_point_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_stop_point_uri();
}
 const ::std::string& MatchingRoute::start_stop_point_uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MatchingRoute.start_stop_point_uri)
  return start_stop_point_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchingRoute::set_start_stop_point_uri(const ::std::string& value) {
  set_has_start_stop_point_uri();
  start_stop_point_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MatchingRoute.start_stop_point_uri)
}
 void MatchingRoute::set_start_stop_point_uri(const char* value) {
  set_has_start_stop_point_uri();
  start_stop_point_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MatchingRoute.start_stop_point_uri)
}
 void MatchingRoute::set_start_stop_point_uri(const char* value, size_t size) {
  set_has_start_stop_point_uri();
  start_stop_point_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MatchingRoute.start_stop_point_uri)
}
 ::std::string* MatchingRoute::mutable_start_stop_point_uri() {
  set_has_start_stop_point_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MatchingRoute.start_stop_point_uri)
  return start_stop_point_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MatchingRoute::release_start_stop_point_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.MatchingRoute.start_stop_point_uri)
  clear_has_start_stop_point_uri();
  return start_stop_point_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchingRoute::set_allocated_start_stop_point_uri(::std::string* start_stop_point_uri) {
  if (start_stop_point_uri != NULL) {
    set_has_start_stop_point_uri();
  } else {
    clear_has_start_stop_point_uri();
  }
  start_stop_point_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_stop_point_uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MatchingRoute.start_stop_point_uri)
}

// optional string destination_code_key = 3;
bool MatchingRoute::has_destination_code_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MatchingRoute::set_has_destination_code_key() {
  _has_bits_[0] |= 0x00000004u;
}
void MatchingRoute::clear_has_destination_code_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void MatchingRoute::clear_destination_code_key() {
  destination_code_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_code_key();
}
 const ::std::string& MatchingRoute::destination_code_key() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MatchingRoute.destination_code_key)
  return destination_code_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchingRoute::set_destination_code_key(const ::std::string& value) {
  set_has_destination_code_key();
  destination_code_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MatchingRoute.destination_code_key)
}
 void MatchingRoute::set_destination_code_key(const char* value) {
  set_has_destination_code_key();
  destination_code_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MatchingRoute.destination_code_key)
}
 void MatchingRoute::set_destination_code_key(const char* value, size_t size) {
  set_has_destination_code_key();
  destination_code_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MatchingRoute.destination_code_key)
}
 ::std::string* MatchingRoute::mutable_destination_code_key() {
  set_has_destination_code_key();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MatchingRoute.destination_code_key)
  return destination_code_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MatchingRoute::release_destination_code_key() {
  // @@protoc_insertion_point(field_release:pbnavitia.MatchingRoute.destination_code_key)
  clear_has_destination_code_key();
  return destination_code_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchingRoute::set_allocated_destination_code_key(::std::string* destination_code_key) {
  if (destination_code_key != NULL) {
    set_has_destination_code_key();
  } else {
    clear_has_destination_code_key();
  }
  destination_code_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_code_key);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MatchingRoute.destination_code_key)
}

// optional string destination_code = 4;
bool MatchingRoute::has_destination_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MatchingRoute::set_has_destination_code() {
  _has_bits_[0] |= 0x00000008u;
}
void MatchingRoute::clear_has_destination_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void MatchingRoute::clear_destination_code() {
  destination_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_code();
}
 const ::std::string& MatchingRoute::destination_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MatchingRoute.destination_code)
  return destination_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchingRoute::set_destination_code(const ::std::string& value) {
  set_has_destination_code();
  destination_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MatchingRoute.destination_code)
}
 void MatchingRoute::set_destination_code(const char* value) {
  set_has_destination_code();
  destination_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MatchingRoute.destination_code)
}
 void MatchingRoute::set_destination_code(const char* value, size_t size) {
  set_has_destination_code();
  destination_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MatchingRoute.destination_code)
}
 ::std::string* MatchingRoute::mutable_destination_code() {
  set_has_destination_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MatchingRoute.destination_code)
  return destination_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MatchingRoute::release_destination_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.MatchingRoute.destination_code)
  clear_has_destination_code();
  return destination_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchingRoute::set_allocated_destination_code(::std::string* destination_code) {
  if (destination_code != NULL) {
    set_has_destination_code();
  } else {
    clear_has_destination_code();
  }
  destination_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MatchingRoute.destination_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kRequestedApiFieldNumber;
const int Request::kPlacesFieldNumber;
const int Request::kNextStopTimesFieldNumber;
const int Request::kPlacesNearbyFieldNumber;
const int Request::kJourneysFieldNumber;
const int Request::kPtrefFieldNumber;
const int Request::kPlaceUriFieldNumber;
const int Request::kTrafficReportsFieldNumber;
const int Request::kCalendarsFieldNumber;
const int Request::kPtObjectsFieldNumber;
const int Request::kPlaceCodeFieldNumber;
const int Request::kNearestStopPointsFieldNumber;
const int Request::kCurrentDatetimeFieldNumber;
const int Request::kIsochroneFieldNumber;
const int Request::kCarCo2EmissionFieldNumber;
const int Request::kDirectPathFieldNumber;
const int Request::kHeatMapFieldNumber;
const int Request::kSnRoutingMatrixFieldNumber;
const int Request::kCoordFieldNumber;
const int Request::kMatchingRoutesFieldNumber;
const int Request::kLineReportsFieldNumber;
const int Request::kRequestIdFieldNumber;
const int Request::kDisableFeedpublisherFieldNumber;
const int Request::kDisableDisruptionFieldNumber;
const int Request::kDeadlineFieldNumber;
const int Request::kEquipmentReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Request)
}

void Request::InitAsDefaultInstance() {
  places_ = const_cast< ::pbnavitia::PlacesRequest*>(&::pbnavitia::PlacesRequest::default_instance());
  next_stop_times_ = const_cast< ::pbnavitia::NextStopTimeRequest*>(&::pbnavitia::NextStopTimeRequest::default_instance());
  places_nearby_ = const_cast< ::pbnavitia::PlacesNearbyRequest*>(&::pbnavitia::PlacesNearbyRequest::default_instance());
  journeys_ = const_cast< ::pbnavitia::JourneysRequest*>(&::pbnavitia::JourneysRequest::default_instance());
  ptref_ = const_cast< ::pbnavitia::PTRefRequest*>(&::pbnavitia::PTRefRequest::default_instance());
  place_uri_ = const_cast< ::pbnavitia::PlaceUriRequest*>(&::pbnavitia::PlaceUriRequest::default_instance());
  traffic_reports_ = const_cast< ::pbnavitia::TrafficReportsRequest*>(&::pbnavitia::TrafficReportsRequest::default_instance());
  calendars_ = const_cast< ::pbnavitia::CalendarsRequest*>(&::pbnavitia::CalendarsRequest::default_instance());
  pt_objects_ = const_cast< ::pbnavitia::PtobjectRequest*>(&::pbnavitia::PtobjectRequest::default_instance());
  place_code_ = const_cast< ::pbnavitia::PlaceCodeRequest*>(&::pbnavitia::PlaceCodeRequest::default_instance());
  nearest_stop_points_ = const_cast< ::pbnavitia::NearestStopPointsRequest*>(&::pbnavitia::NearestStopPointsRequest::default_instance());
  isochrone_ = const_cast< ::pbnavitia::GraphicalIsochroneRequest*>(&::pbnavitia::GraphicalIsochroneRequest::default_instance());
  car_co2_emission_ = const_cast< ::pbnavitia::CarCO2EmissionRequest*>(&::pbnavitia::CarCO2EmissionRequest::default_instance());
  direct_path_ = const_cast< ::pbnavitia::DirectPathRequest*>(&::pbnavitia::DirectPathRequest::default_instance());
  heat_map_ = const_cast< ::pbnavitia::HeatMapRequest*>(&::pbnavitia::HeatMapRequest::default_instance());
  sn_routing_matrix_ = const_cast< ::pbnavitia::StreetNetworkRoutingMatrixRequest*>(&::pbnavitia::StreetNetworkRoutingMatrixRequest::default_instance());
  coord_ = const_cast< ::pbnavitia::GeographicalCoord*>(&::pbnavitia::GeographicalCoord::default_instance());
  matching_routes_ = const_cast< ::pbnavitia::MatchingRoute*>(&::pbnavitia::MatchingRoute::default_instance());
  line_reports_ = const_cast< ::pbnavitia::LineReportsRequest*>(&::pbnavitia::LineReportsRequest::default_instance());
  equipment_reports_ = const_cast< ::pbnavitia::EquipmentReportsRequest*>(&::pbnavitia::EquipmentReportsRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requested_api_ = 1;
  places_ = NULL;
  next_stop_times_ = NULL;
  places_nearby_ = NULL;
  journeys_ = NULL;
  ptref_ = NULL;
  place_uri_ = NULL;
  traffic_reports_ = NULL;
  calendars_ = NULL;
  pt_objects_ = NULL;
  place_code_ = NULL;
  nearest_stop_points_ = NULL;
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  isochrone_ = NULL;
  car_co2_emission_ = NULL;
  direct_path_ = NULL;
  heat_map_ = NULL;
  sn_routing_matrix_ = NULL;
  coord_ = NULL;
  matching_routes_ = NULL;
  line_reports_ = NULL;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disable_feedpublisher_ = false;
  disable_disruption_ = false;
  deadline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  equipment_reports_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:pbnavitia.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deadline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete places_;
    delete next_stop_times_;
    delete places_nearby_;
    delete journeys_;
    delete ptref_;
    delete place_uri_;
    delete traffic_reports_;
    delete calendars_;
    delete pt_objects_;
    delete place_code_;
    delete nearest_stop_points_;
    delete isochrone_;
    delete car_co2_emission_;
    delete direct_path_;
    delete heat_map_;
    delete sn_routing_matrix_;
    delete coord_;
    delete matching_routes_;
    delete line_reports_;
    delete equipment_reports_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Request)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Request, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Request*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    requested_api_ = 1;
    if (has_places()) {
      if (places_ != NULL) places_->::pbnavitia::PlacesRequest::Clear();
    }
    if (has_next_stop_times()) {
      if (next_stop_times_ != NULL) next_stop_times_->::pbnavitia::NextStopTimeRequest::Clear();
    }
    if (has_places_nearby()) {
      if (places_nearby_ != NULL) places_nearby_->::pbnavitia::PlacesNearbyRequest::Clear();
    }
    if (has_journeys()) {
      if (journeys_ != NULL) journeys_->::pbnavitia::JourneysRequest::Clear();
    }
    if (has_ptref()) {
      if (ptref_ != NULL) ptref_->::pbnavitia::PTRefRequest::Clear();
    }
    if (has_place_uri()) {
      if (place_uri_ != NULL) place_uri_->::pbnavitia::PlaceUriRequest::Clear();
    }
    if (has_traffic_reports()) {
      if (traffic_reports_ != NULL) traffic_reports_->::pbnavitia::TrafficReportsRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_calendars()) {
      if (calendars_ != NULL) calendars_->::pbnavitia::CalendarsRequest::Clear();
    }
    if (has_pt_objects()) {
      if (pt_objects_ != NULL) pt_objects_->::pbnavitia::PtobjectRequest::Clear();
    }
    if (has_place_code()) {
      if (place_code_ != NULL) place_code_->::pbnavitia::PlaceCodeRequest::Clear();
    }
    if (has_nearest_stop_points()) {
      if (nearest_stop_points_ != NULL) nearest_stop_points_->::pbnavitia::NearestStopPointsRequest::Clear();
    }
    _current_datetime_ = GOOGLE_ULONGLONG(0);
    if (has_isochrone()) {
      if (isochrone_ != NULL) isochrone_->::pbnavitia::GraphicalIsochroneRequest::Clear();
    }
    if (has_car_co2_emission()) {
      if (car_co2_emission_ != NULL) car_co2_emission_->::pbnavitia::CarCO2EmissionRequest::Clear();
    }
    if (has_direct_path()) {
      if (direct_path_ != NULL) direct_path_->::pbnavitia::DirectPathRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(disable_feedpublisher_, disable_disruption_);
    if (has_heat_map()) {
      if (heat_map_ != NULL) heat_map_->::pbnavitia::HeatMapRequest::Clear();
    }
    if (has_sn_routing_matrix()) {
      if (sn_routing_matrix_ != NULL) sn_routing_matrix_->::pbnavitia::StreetNetworkRoutingMatrixRequest::Clear();
    }
    if (has_coord()) {
      if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
    }
    if (has_matching_routes()) {
      if (matching_routes_ != NULL) matching_routes_->::pbnavitia::MatchingRoute::Clear();
    }
    if (has_line_reports()) {
      if (line_reports_ != NULL) line_reports_->::pbnavitia::LineReportsRequest::Clear();
    }
    if (has_request_id()) {
      request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    if (has_deadline()) {
      deadline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_equipment_reports()) {
      if (equipment_reports_ != NULL) equipment_reports_->::pbnavitia::EquipmentReportsRequest::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.API requested_api = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::API_IsValid(value)) {
            set_requested_api(static_cast< ::pbnavitia::API >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_places;
        break;
      }

      // optional .pbnavitia.PlacesRequest places = 2;
      case 2: {
        if (tag == 18) {
         parse_places:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_places()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_next_stop_times;
        break;
      }

      // optional .pbnavitia.NextStopTimeRequest next_stop_times = 3;
      case 3: {
        if (tag == 26) {
         parse_next_stop_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_stop_times()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_places_nearby;
        break;
      }

      // optional .pbnavitia.PlacesNearbyRequest places_nearby = 4;
      case 4: {
        if (tag == 34) {
         parse_places_nearby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_places_nearby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_journeys;
        break;
      }

      // optional .pbnavitia.JourneysRequest journeys = 5;
      case 5: {
        if (tag == 42) {
         parse_journeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_journeys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ptref;
        break;
      }

      // optional .pbnavitia.PTRefRequest ptref = 6;
      case 6: {
        if (tag == 50) {
         parse_ptref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ptref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_place_uri;
        break;
      }

      // optional .pbnavitia.PlaceUriRequest place_uri = 7;
      case 7: {
        if (tag == 58) {
         parse_place_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_place_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_calendars;
        break;
      }

      // optional .pbnavitia.CalendarsRequest calendars = 9;
      case 9: {
        if (tag == 74) {
         parse_calendars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calendars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_pt_objects;
        break;
      }

      // optional .pbnavitia.PtobjectRequest pt_objects = 10;
      case 10: {
        if (tag == 82) {
         parse_pt_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_place_code;
        break;
      }

      // optional .pbnavitia.PlaceCodeRequest place_code = 11;
      case 11: {
        if (tag == 90) {
         parse_place_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_place_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_request_id;
        break;
      }

      // optional string request_id = 12;
      case 12: {
        if (tag == 98) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Request.request_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_traffic_reports;
        break;
      }

      // optional .pbnavitia.TrafficReportsRequest traffic_reports = 13;
      case 13: {
        if (tag == 106) {
         parse_traffic_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_nearest_stop_points;
        break;
      }

      // optional .pbnavitia.NearestStopPointsRequest nearest_stop_points = 14;
      case 14: {
        if (tag == 114) {
         parse_nearest_stop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nearest_stop_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse__current_datetime;
        break;
      }

      // optional uint64 _current_datetime = 15;
      case 15: {
        if (tag == 120) {
         parse__current_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &_current_datetime_)));
          set_has__current_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_isochrone;
        break;
      }

      // optional .pbnavitia.GraphicalIsochroneRequest isochrone = 16;
      case 16: {
        if (tag == 130) {
         parse_isochrone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_isochrone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_car_co2_emission;
        break;
      }

      // optional .pbnavitia.CarCO2EmissionRequest car_co2_emission = 17;
      case 17: {
        if (tag == 138) {
         parse_car_co2_emission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_car_co2_emission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_direct_path;
        break;
      }

      // optional .pbnavitia.DirectPathRequest direct_path = 18;
      case 18: {
        if (tag == 146) {
         parse_direct_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_heat_map;
        break;
      }

      // optional .pbnavitia.HeatMapRequest heat_map = 19;
      case 19: {
        if (tag == 154) {
         parse_heat_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heat_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_sn_routing_matrix;
        break;
      }

      // optional .pbnavitia.StreetNetworkRoutingMatrixRequest sn_routing_matrix = 20;
      case 20: {
        if (tag == 162) {
         parse_sn_routing_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sn_routing_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_coord;
        break;
      }

      // optional .pbnavitia.GeographicalCoord coord = 21;
      case 21: {
        if (tag == 170) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_disable_feedpublisher;
        break;
      }

      // optional bool disable_feedpublisher = 22;
      case 22: {
        if (tag == 176) {
         parse_disable_feedpublisher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_feedpublisher_)));
          set_has_disable_feedpublisher();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_matching_routes;
        break;
      }

      // optional .pbnavitia.MatchingRoute matching_routes = 23;
      case 23: {
        if (tag == 186) {
         parse_matching_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matching_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_line_reports;
        break;
      }

      // optional .pbnavitia.LineReportsRequest line_reports = 24;
      case 24: {
        if (tag == 194) {
         parse_line_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_disable_disruption;
        break;
      }

      // optional bool disable_disruption = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_disable_disruption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_disruption_)));
          set_has_disable_disruption();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_deadline;
        break;
      }

      // optional string deadline = 26;
      case 26: {
        if (tag == 210) {
         parse_deadline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deadline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deadline().data(), this->deadline().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Request.deadline");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_equipment_reports;
        break;
      }

      // optional .pbnavitia.EquipmentReportsRequest equipment_reports = 27;
      case 27: {
        if (tag == 218) {
         parse_equipment_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Request)
  // required .pbnavitia.API requested_api = 1;
  if (has_requested_api()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requested_api(), output);
  }

  // optional .pbnavitia.PlacesRequest places = 2;
  if (has_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->places_, output);
  }

  // optional .pbnavitia.NextStopTimeRequest next_stop_times = 3;
  if (has_next_stop_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->next_stop_times_, output);
  }

  // optional .pbnavitia.PlacesNearbyRequest places_nearby = 4;
  if (has_places_nearby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->places_nearby_, output);
  }

  // optional .pbnavitia.JourneysRequest journeys = 5;
  if (has_journeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->journeys_, output);
  }

  // optional .pbnavitia.PTRefRequest ptref = 6;
  if (has_ptref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ptref_, output);
  }

  // optional .pbnavitia.PlaceUriRequest place_uri = 7;
  if (has_place_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->place_uri_, output);
  }

  // optional .pbnavitia.CalendarsRequest calendars = 9;
  if (has_calendars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->calendars_, output);
  }

  // optional .pbnavitia.PtobjectRequest pt_objects = 10;
  if (has_pt_objects()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->pt_objects_, output);
  }

  // optional .pbnavitia.PlaceCodeRequest place_code = 11;
  if (has_place_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->place_code_, output);
  }

  // optional string request_id = 12;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Request.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->request_id(), output);
  }

  // optional .pbnavitia.TrafficReportsRequest traffic_reports = 13;
  if (has_traffic_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->traffic_reports_, output);
  }

  // optional .pbnavitia.NearestStopPointsRequest nearest_stop_points = 14;
  if (has_nearest_stop_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->nearest_stop_points_, output);
  }

  // optional uint64 _current_datetime = 15;
  if (has__current_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->_current_datetime(), output);
  }

  // optional .pbnavitia.GraphicalIsochroneRequest isochrone = 16;
  if (has_isochrone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->isochrone_, output);
  }

  // optional .pbnavitia.CarCO2EmissionRequest car_co2_emission = 17;
  if (has_car_co2_emission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->car_co2_emission_, output);
  }

  // optional .pbnavitia.DirectPathRequest direct_path = 18;
  if (has_direct_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->direct_path_, output);
  }

  // optional .pbnavitia.HeatMapRequest heat_map = 19;
  if (has_heat_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->heat_map_, output);
  }

  // optional .pbnavitia.StreetNetworkRoutingMatrixRequest sn_routing_matrix = 20;
  if (has_sn_routing_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->sn_routing_matrix_, output);
  }

  // optional .pbnavitia.GeographicalCoord coord = 21;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->coord_, output);
  }

  // optional bool disable_feedpublisher = 22;
  if (has_disable_feedpublisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->disable_feedpublisher(), output);
  }

  // optional .pbnavitia.MatchingRoute matching_routes = 23;
  if (has_matching_routes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->matching_routes_, output);
  }

  // optional .pbnavitia.LineReportsRequest line_reports = 24;
  if (has_line_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->line_reports_, output);
  }

  // optional bool disable_disruption = 25 [default = false];
  if (has_disable_disruption()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->disable_disruption(), output);
  }

  // optional string deadline = 26;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deadline().data(), this->deadline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Request.deadline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->deadline(), output);
  }

  // optional .pbnavitia.EquipmentReportsRequest equipment_reports = 27;
  if (has_equipment_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->equipment_reports_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Request)
  // required .pbnavitia.API requested_api = 1;
  if (has_requested_api()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requested_api(), target);
  }

  // optional .pbnavitia.PlacesRequest places = 2;
  if (has_places()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->places_, false, target);
  }

  // optional .pbnavitia.NextStopTimeRequest next_stop_times = 3;
  if (has_next_stop_times()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->next_stop_times_, false, target);
  }

  // optional .pbnavitia.PlacesNearbyRequest places_nearby = 4;
  if (has_places_nearby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->places_nearby_, false, target);
  }

  // optional .pbnavitia.JourneysRequest journeys = 5;
  if (has_journeys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->journeys_, false, target);
  }

  // optional .pbnavitia.PTRefRequest ptref = 6;
  if (has_ptref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ptref_, false, target);
  }

  // optional .pbnavitia.PlaceUriRequest place_uri = 7;
  if (has_place_uri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->place_uri_, false, target);
  }

  // optional .pbnavitia.CalendarsRequest calendars = 9;
  if (has_calendars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->calendars_, false, target);
  }

  // optional .pbnavitia.PtobjectRequest pt_objects = 10;
  if (has_pt_objects()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->pt_objects_, false, target);
  }

  // optional .pbnavitia.PlaceCodeRequest place_code = 11;
  if (has_place_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->place_code_, false, target);
  }

  // optional string request_id = 12;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Request.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->request_id(), target);
  }

  // optional .pbnavitia.TrafficReportsRequest traffic_reports = 13;
  if (has_traffic_reports()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->traffic_reports_, false, target);
  }

  // optional .pbnavitia.NearestStopPointsRequest nearest_stop_points = 14;
  if (has_nearest_stop_points()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->nearest_stop_points_, false, target);
  }

  // optional uint64 _current_datetime = 15;
  if (has__current_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->_current_datetime(), target);
  }

  // optional .pbnavitia.GraphicalIsochroneRequest isochrone = 16;
  if (has_isochrone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->isochrone_, false, target);
  }

  // optional .pbnavitia.CarCO2EmissionRequest car_co2_emission = 17;
  if (has_car_co2_emission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->car_co2_emission_, false, target);
  }

  // optional .pbnavitia.DirectPathRequest direct_path = 18;
  if (has_direct_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->direct_path_, false, target);
  }

  // optional .pbnavitia.HeatMapRequest heat_map = 19;
  if (has_heat_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->heat_map_, false, target);
  }

  // optional .pbnavitia.StreetNetworkRoutingMatrixRequest sn_routing_matrix = 20;
  if (has_sn_routing_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->sn_routing_matrix_, false, target);
  }

  // optional .pbnavitia.GeographicalCoord coord = 21;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->coord_, false, target);
  }

  // optional bool disable_feedpublisher = 22;
  if (has_disable_feedpublisher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->disable_feedpublisher(), target);
  }

  // optional .pbnavitia.MatchingRoute matching_routes = 23;
  if (has_matching_routes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->matching_routes_, false, target);
  }

  // optional .pbnavitia.LineReportsRequest line_reports = 24;
  if (has_line_reports()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->line_reports_, false, target);
  }

  // optional bool disable_disruption = 25 [default = false];
  if (has_disable_disruption()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->disable_disruption(), target);
  }

  // optional string deadline = 26;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deadline().data(), this->deadline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Request.deadline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->deadline(), target);
  }

  // optional .pbnavitia.EquipmentReportsRequest equipment_reports = 27;
  if (has_equipment_reports()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->equipment_reports_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Request)
  int total_size = 0;

  // required .pbnavitia.API requested_api = 1;
  if (has_requested_api()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->requested_api());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .pbnavitia.PlacesRequest places = 2;
    if (has_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->places_);
    }

    // optional .pbnavitia.NextStopTimeRequest next_stop_times = 3;
    if (has_next_stop_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->next_stop_times_);
    }

    // optional .pbnavitia.PlacesNearbyRequest places_nearby = 4;
    if (has_places_nearby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->places_nearby_);
    }

    // optional .pbnavitia.JourneysRequest journeys = 5;
    if (has_journeys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->journeys_);
    }

    // optional .pbnavitia.PTRefRequest ptref = 6;
    if (has_ptref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ptref_);
    }

    // optional .pbnavitia.PlaceUriRequest place_uri = 7;
    if (has_place_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->place_uri_);
    }

    // optional .pbnavitia.TrafficReportsRequest traffic_reports = 13;
    if (has_traffic_reports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->traffic_reports_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .pbnavitia.CalendarsRequest calendars = 9;
    if (has_calendars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->calendars_);
    }

    // optional .pbnavitia.PtobjectRequest pt_objects = 10;
    if (has_pt_objects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pt_objects_);
    }

    // optional .pbnavitia.PlaceCodeRequest place_code = 11;
    if (has_place_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->place_code_);
    }

    // optional .pbnavitia.NearestStopPointsRequest nearest_stop_points = 14;
    if (has_nearest_stop_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nearest_stop_points_);
    }

    // optional uint64 _current_datetime = 15;
    if (has__current_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->_current_datetime());
    }

    // optional .pbnavitia.GraphicalIsochroneRequest isochrone = 16;
    if (has_isochrone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->isochrone_);
    }

    // optional .pbnavitia.CarCO2EmissionRequest car_co2_emission = 17;
    if (has_car_co2_emission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->car_co2_emission_);
    }

    // optional .pbnavitia.DirectPathRequest direct_path = 18;
    if (has_direct_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direct_path_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .pbnavitia.HeatMapRequest heat_map = 19;
    if (has_heat_map()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->heat_map_);
    }

    // optional .pbnavitia.StreetNetworkRoutingMatrixRequest sn_routing_matrix = 20;
    if (has_sn_routing_matrix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sn_routing_matrix_);
    }

    // optional .pbnavitia.GeographicalCoord coord = 21;
    if (has_coord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->coord_);
    }

    // optional .pbnavitia.MatchingRoute matching_routes = 23;
    if (has_matching_routes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->matching_routes_);
    }

    // optional .pbnavitia.LineReportsRequest line_reports = 24;
    if (has_line_reports()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->line_reports_);
    }

    // optional string request_id = 12;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional bool disable_feedpublisher = 22;
    if (has_disable_feedpublisher()) {
      total_size += 2 + 1;
    }

    // optional bool disable_disruption = 25 [default = false];
    if (has_disable_disruption()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional string deadline = 26;
    if (has_deadline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deadline());
    }

    // optional .pbnavitia.EquipmentReportsRequest equipment_reports = 27;
    if (has_equipment_reports()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->equipment_reports_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requested_api()) {
      set_requested_api(from.requested_api());
    }
    if (from.has_places()) {
      mutable_places()->::pbnavitia::PlacesRequest::MergeFrom(from.places());
    }
    if (from.has_next_stop_times()) {
      mutable_next_stop_times()->::pbnavitia::NextStopTimeRequest::MergeFrom(from.next_stop_times());
    }
    if (from.has_places_nearby()) {
      mutable_places_nearby()->::pbnavitia::PlacesNearbyRequest::MergeFrom(from.places_nearby());
    }
    if (from.has_journeys()) {
      mutable_journeys()->::pbnavitia::JourneysRequest::MergeFrom(from.journeys());
    }
    if (from.has_ptref()) {
      mutable_ptref()->::pbnavitia::PTRefRequest::MergeFrom(from.ptref());
    }
    if (from.has_place_uri()) {
      mutable_place_uri()->::pbnavitia::PlaceUriRequest::MergeFrom(from.place_uri());
    }
    if (from.has_traffic_reports()) {
      mutable_traffic_reports()->::pbnavitia::TrafficReportsRequest::MergeFrom(from.traffic_reports());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_calendars()) {
      mutable_calendars()->::pbnavitia::CalendarsRequest::MergeFrom(from.calendars());
    }
    if (from.has_pt_objects()) {
      mutable_pt_objects()->::pbnavitia::PtobjectRequest::MergeFrom(from.pt_objects());
    }
    if (from.has_place_code()) {
      mutable_place_code()->::pbnavitia::PlaceCodeRequest::MergeFrom(from.place_code());
    }
    if (from.has_nearest_stop_points()) {
      mutable_nearest_stop_points()->::pbnavitia::NearestStopPointsRequest::MergeFrom(from.nearest_stop_points());
    }
    if (from.has__current_datetime()) {
      set__current_datetime(from._current_datetime());
    }
    if (from.has_isochrone()) {
      mutable_isochrone()->::pbnavitia::GraphicalIsochroneRequest::MergeFrom(from.isochrone());
    }
    if (from.has_car_co2_emission()) {
      mutable_car_co2_emission()->::pbnavitia::CarCO2EmissionRequest::MergeFrom(from.car_co2_emission());
    }
    if (from.has_direct_path()) {
      mutable_direct_path()->::pbnavitia::DirectPathRequest::MergeFrom(from.direct_path());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_heat_map()) {
      mutable_heat_map()->::pbnavitia::HeatMapRequest::MergeFrom(from.heat_map());
    }
    if (from.has_sn_routing_matrix()) {
      mutable_sn_routing_matrix()->::pbnavitia::StreetNetworkRoutingMatrixRequest::MergeFrom(from.sn_routing_matrix());
    }
    if (from.has_coord()) {
      mutable_coord()->::pbnavitia::GeographicalCoord::MergeFrom(from.coord());
    }
    if (from.has_matching_routes()) {
      mutable_matching_routes()->::pbnavitia::MatchingRoute::MergeFrom(from.matching_routes());
    }
    if (from.has_line_reports()) {
      mutable_line_reports()->::pbnavitia::LineReportsRequest::MergeFrom(from.line_reports());
    }
    if (from.has_request_id()) {
      set_has_request_id();
      request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (from.has_disable_feedpublisher()) {
      set_disable_feedpublisher(from.disable_feedpublisher());
    }
    if (from.has_disable_disruption()) {
      set_disable_disruption(from.disable_disruption());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_deadline()) {
      set_has_deadline();
      deadline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deadline_);
    }
    if (from.has_equipment_reports()) {
      mutable_equipment_reports()->::pbnavitia::EquipmentReportsRequest::MergeFrom(from.equipment_reports());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_places()) {
    if (!this->places_->IsInitialized()) return false;
  }
  if (has_next_stop_times()) {
    if (!this->next_stop_times_->IsInitialized()) return false;
  }
  if (has_places_nearby()) {
    if (!this->places_nearby_->IsInitialized()) return false;
  }
  if (has_journeys()) {
    if (!this->journeys_->IsInitialized()) return false;
  }
  if (has_ptref()) {
    if (!this->ptref_->IsInitialized()) return false;
  }
  if (has_place_uri()) {
    if (!this->place_uri_->IsInitialized()) return false;
  }
  if (has_pt_objects()) {
    if (!this->pt_objects_->IsInitialized()) return false;
  }
  if (has_place_code()) {
    if (!this->place_code_->IsInitialized()) return false;
  }
  if (has_isochrone()) {
    if (!this->isochrone_->IsInitialized()) return false;
  }
  if (has_car_co2_emission()) {
    if (!this->car_co2_emission_->IsInitialized()) return false;
  }
  if (has_direct_path()) {
    if (!this->direct_path_->IsInitialized()) return false;
  }
  if (has_heat_map()) {
    if (!this->heat_map_->IsInitialized()) return false;
  }
  if (has_sn_routing_matrix()) {
    if (!this->sn_routing_matrix_->IsInitialized()) return false;
  }
  if (has_coord()) {
    if (!this->coord_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(requested_api_, other->requested_api_);
  std::swap(places_, other->places_);
  std::swap(next_stop_times_, other->next_stop_times_);
  std::swap(places_nearby_, other->places_nearby_);
  std::swap(journeys_, other->journeys_);
  std::swap(ptref_, other->ptref_);
  std::swap(place_uri_, other->place_uri_);
  std::swap(traffic_reports_, other->traffic_reports_);
  std::swap(calendars_, other->calendars_);
  std::swap(pt_objects_, other->pt_objects_);
  std::swap(place_code_, other->place_code_);
  std::swap(nearest_stop_points_, other->nearest_stop_points_);
  std::swap(_current_datetime_, other->_current_datetime_);
  std::swap(isochrone_, other->isochrone_);
  std::swap(car_co2_emission_, other->car_co2_emission_);
  std::swap(direct_path_, other->direct_path_);
  std::swap(heat_map_, other->heat_map_);
  std::swap(sn_routing_matrix_, other->sn_routing_matrix_);
  std::swap(coord_, other->coord_);
  std::swap(matching_routes_, other->matching_routes_);
  std::swap(line_reports_, other->line_reports_);
  request_id_.Swap(&other->request_id_);
  std::swap(disable_feedpublisher_, other->disable_feedpublisher_);
  std::swap(disable_disruption_, other->disable_disruption_);
  deadline_.Swap(&other->deadline_);
  std::swap(equipment_reports_, other->equipment_reports_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// required .pbnavitia.API requested_api = 1;
bool Request::has_requested_api() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_requested_api() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_requested_api() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_requested_api() {
  requested_api_ = 1;
  clear_has_requested_api();
}
 ::pbnavitia::API Request::requested_api() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.requested_api)
  return static_cast< ::pbnavitia::API >(requested_api_);
}
 void Request::set_requested_api(::pbnavitia::API value) {
  assert(::pbnavitia::API_IsValid(value));
  set_has_requested_api();
  requested_api_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Request.requested_api)
}

// optional .pbnavitia.PlacesRequest places = 2;
bool Request::has_places() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_places() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_places() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_places() {
  if (places_ != NULL) places_->::pbnavitia::PlacesRequest::Clear();
  clear_has_places();
}
const ::pbnavitia::PlacesRequest& Request::places() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.places)
  return places_ != NULL ? *places_ : *default_instance_->places_;
}
::pbnavitia::PlacesRequest* Request::mutable_places() {
  set_has_places();
  if (places_ == NULL) {
    places_ = new ::pbnavitia::PlacesRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.places)
  return places_;
}
::pbnavitia::PlacesRequest* Request::release_places() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.places)
  clear_has_places();
  ::pbnavitia::PlacesRequest* temp = places_;
  places_ = NULL;
  return temp;
}
void Request::set_allocated_places(::pbnavitia::PlacesRequest* places) {
  delete places_;
  places_ = places;
  if (places) {
    set_has_places();
  } else {
    clear_has_places();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.places)
}

// optional .pbnavitia.NextStopTimeRequest next_stop_times = 3;
bool Request::has_next_stop_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_next_stop_times() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_next_stop_times() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_next_stop_times() {
  if (next_stop_times_ != NULL) next_stop_times_->::pbnavitia::NextStopTimeRequest::Clear();
  clear_has_next_stop_times();
}
const ::pbnavitia::NextStopTimeRequest& Request::next_stop_times() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.next_stop_times)
  return next_stop_times_ != NULL ? *next_stop_times_ : *default_instance_->next_stop_times_;
}
::pbnavitia::NextStopTimeRequest* Request::mutable_next_stop_times() {
  set_has_next_stop_times();
  if (next_stop_times_ == NULL) {
    next_stop_times_ = new ::pbnavitia::NextStopTimeRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.next_stop_times)
  return next_stop_times_;
}
::pbnavitia::NextStopTimeRequest* Request::release_next_stop_times() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.next_stop_times)
  clear_has_next_stop_times();
  ::pbnavitia::NextStopTimeRequest* temp = next_stop_times_;
  next_stop_times_ = NULL;
  return temp;
}
void Request::set_allocated_next_stop_times(::pbnavitia::NextStopTimeRequest* next_stop_times) {
  delete next_stop_times_;
  next_stop_times_ = next_stop_times;
  if (next_stop_times) {
    set_has_next_stop_times();
  } else {
    clear_has_next_stop_times();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.next_stop_times)
}

// optional .pbnavitia.PlacesNearbyRequest places_nearby = 4;
bool Request::has_places_nearby() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_places_nearby() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_places_nearby() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_places_nearby() {
  if (places_nearby_ != NULL) places_nearby_->::pbnavitia::PlacesNearbyRequest::Clear();
  clear_has_places_nearby();
}
const ::pbnavitia::PlacesNearbyRequest& Request::places_nearby() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.places_nearby)
  return places_nearby_ != NULL ? *places_nearby_ : *default_instance_->places_nearby_;
}
::pbnavitia::PlacesNearbyRequest* Request::mutable_places_nearby() {
  set_has_places_nearby();
  if (places_nearby_ == NULL) {
    places_nearby_ = new ::pbnavitia::PlacesNearbyRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.places_nearby)
  return places_nearby_;
}
::pbnavitia::PlacesNearbyRequest* Request::release_places_nearby() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.places_nearby)
  clear_has_places_nearby();
  ::pbnavitia::PlacesNearbyRequest* temp = places_nearby_;
  places_nearby_ = NULL;
  return temp;
}
void Request::set_allocated_places_nearby(::pbnavitia::PlacesNearbyRequest* places_nearby) {
  delete places_nearby_;
  places_nearby_ = places_nearby;
  if (places_nearby) {
    set_has_places_nearby();
  } else {
    clear_has_places_nearby();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.places_nearby)
}

// optional .pbnavitia.JourneysRequest journeys = 5;
bool Request::has_journeys() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_journeys() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_journeys() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_journeys() {
  if (journeys_ != NULL) journeys_->::pbnavitia::JourneysRequest::Clear();
  clear_has_journeys();
}
const ::pbnavitia::JourneysRequest& Request::journeys() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.journeys)
  return journeys_ != NULL ? *journeys_ : *default_instance_->journeys_;
}
::pbnavitia::JourneysRequest* Request::mutable_journeys() {
  set_has_journeys();
  if (journeys_ == NULL) {
    journeys_ = new ::pbnavitia::JourneysRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.journeys)
  return journeys_;
}
::pbnavitia::JourneysRequest* Request::release_journeys() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.journeys)
  clear_has_journeys();
  ::pbnavitia::JourneysRequest* temp = journeys_;
  journeys_ = NULL;
  return temp;
}
void Request::set_allocated_journeys(::pbnavitia::JourneysRequest* journeys) {
  delete journeys_;
  journeys_ = journeys;
  if (journeys) {
    set_has_journeys();
  } else {
    clear_has_journeys();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.journeys)
}

// optional .pbnavitia.PTRefRequest ptref = 6;
bool Request::has_ptref() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_ptref() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_ptref() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_ptref() {
  if (ptref_ != NULL) ptref_->::pbnavitia::PTRefRequest::Clear();
  clear_has_ptref();
}
const ::pbnavitia::PTRefRequest& Request::ptref() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.ptref)
  return ptref_ != NULL ? *ptref_ : *default_instance_->ptref_;
}
::pbnavitia::PTRefRequest* Request::mutable_ptref() {
  set_has_ptref();
  if (ptref_ == NULL) {
    ptref_ = new ::pbnavitia::PTRefRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.ptref)
  return ptref_;
}
::pbnavitia::PTRefRequest* Request::release_ptref() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.ptref)
  clear_has_ptref();
  ::pbnavitia::PTRefRequest* temp = ptref_;
  ptref_ = NULL;
  return temp;
}
void Request::set_allocated_ptref(::pbnavitia::PTRefRequest* ptref) {
  delete ptref_;
  ptref_ = ptref;
  if (ptref) {
    set_has_ptref();
  } else {
    clear_has_ptref();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.ptref)
}

// optional .pbnavitia.PlaceUriRequest place_uri = 7;
bool Request::has_place_uri() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_place_uri() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_place_uri() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_place_uri() {
  if (place_uri_ != NULL) place_uri_->::pbnavitia::PlaceUriRequest::Clear();
  clear_has_place_uri();
}
const ::pbnavitia::PlaceUriRequest& Request::place_uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.place_uri)
  return place_uri_ != NULL ? *place_uri_ : *default_instance_->place_uri_;
}
::pbnavitia::PlaceUriRequest* Request::mutable_place_uri() {
  set_has_place_uri();
  if (place_uri_ == NULL) {
    place_uri_ = new ::pbnavitia::PlaceUriRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.place_uri)
  return place_uri_;
}
::pbnavitia::PlaceUriRequest* Request::release_place_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.place_uri)
  clear_has_place_uri();
  ::pbnavitia::PlaceUriRequest* temp = place_uri_;
  place_uri_ = NULL;
  return temp;
}
void Request::set_allocated_place_uri(::pbnavitia::PlaceUriRequest* place_uri) {
  delete place_uri_;
  place_uri_ = place_uri;
  if (place_uri) {
    set_has_place_uri();
  } else {
    clear_has_place_uri();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.place_uri)
}

// optional .pbnavitia.TrafficReportsRequest traffic_reports = 13;
bool Request::has_traffic_reports() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request::set_has_traffic_reports() {
  _has_bits_[0] |= 0x00000080u;
}
void Request::clear_has_traffic_reports() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request::clear_traffic_reports() {
  if (traffic_reports_ != NULL) traffic_reports_->::pbnavitia::TrafficReportsRequest::Clear();
  clear_has_traffic_reports();
}
const ::pbnavitia::TrafficReportsRequest& Request::traffic_reports() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.traffic_reports)
  return traffic_reports_ != NULL ? *traffic_reports_ : *default_instance_->traffic_reports_;
}
::pbnavitia::TrafficReportsRequest* Request::mutable_traffic_reports() {
  set_has_traffic_reports();
  if (traffic_reports_ == NULL) {
    traffic_reports_ = new ::pbnavitia::TrafficReportsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.traffic_reports)
  return traffic_reports_;
}
::pbnavitia::TrafficReportsRequest* Request::release_traffic_reports() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.traffic_reports)
  clear_has_traffic_reports();
  ::pbnavitia::TrafficReportsRequest* temp = traffic_reports_;
  traffic_reports_ = NULL;
  return temp;
}
void Request::set_allocated_traffic_reports(::pbnavitia::TrafficReportsRequest* traffic_reports) {
  delete traffic_reports_;
  traffic_reports_ = traffic_reports;
  if (traffic_reports) {
    set_has_traffic_reports();
  } else {
    clear_has_traffic_reports();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.traffic_reports)
}

// optional .pbnavitia.CalendarsRequest calendars = 9;
bool Request::has_calendars() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Request::set_has_calendars() {
  _has_bits_[0] |= 0x00000100u;
}
void Request::clear_has_calendars() {
  _has_bits_[0] &= ~0x00000100u;
}
void Request::clear_calendars() {
  if (calendars_ != NULL) calendars_->::pbnavitia::CalendarsRequest::Clear();
  clear_has_calendars();
}
const ::pbnavitia::CalendarsRequest& Request::calendars() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.calendars)
  return calendars_ != NULL ? *calendars_ : *default_instance_->calendars_;
}
::pbnavitia::CalendarsRequest* Request::mutable_calendars() {
  set_has_calendars();
  if (calendars_ == NULL) {
    calendars_ = new ::pbnavitia::CalendarsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.calendars)
  return calendars_;
}
::pbnavitia::CalendarsRequest* Request::release_calendars() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.calendars)
  clear_has_calendars();
  ::pbnavitia::CalendarsRequest* temp = calendars_;
  calendars_ = NULL;
  return temp;
}
void Request::set_allocated_calendars(::pbnavitia::CalendarsRequest* calendars) {
  delete calendars_;
  calendars_ = calendars;
  if (calendars) {
    set_has_calendars();
  } else {
    clear_has_calendars();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.calendars)
}

// optional .pbnavitia.PtobjectRequest pt_objects = 10;
bool Request::has_pt_objects() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Request::set_has_pt_objects() {
  _has_bits_[0] |= 0x00000200u;
}
void Request::clear_has_pt_objects() {
  _has_bits_[0] &= ~0x00000200u;
}
void Request::clear_pt_objects() {
  if (pt_objects_ != NULL) pt_objects_->::pbnavitia::PtobjectRequest::Clear();
  clear_has_pt_objects();
}
const ::pbnavitia::PtobjectRequest& Request::pt_objects() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.pt_objects)
  return pt_objects_ != NULL ? *pt_objects_ : *default_instance_->pt_objects_;
}
::pbnavitia::PtobjectRequest* Request::mutable_pt_objects() {
  set_has_pt_objects();
  if (pt_objects_ == NULL) {
    pt_objects_ = new ::pbnavitia::PtobjectRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.pt_objects)
  return pt_objects_;
}
::pbnavitia::PtobjectRequest* Request::release_pt_objects() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.pt_objects)
  clear_has_pt_objects();
  ::pbnavitia::PtobjectRequest* temp = pt_objects_;
  pt_objects_ = NULL;
  return temp;
}
void Request::set_allocated_pt_objects(::pbnavitia::PtobjectRequest* pt_objects) {
  delete pt_objects_;
  pt_objects_ = pt_objects;
  if (pt_objects) {
    set_has_pt_objects();
  } else {
    clear_has_pt_objects();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.pt_objects)
}

// optional .pbnavitia.PlaceCodeRequest place_code = 11;
bool Request::has_place_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Request::set_has_place_code() {
  _has_bits_[0] |= 0x00000400u;
}
void Request::clear_has_place_code() {
  _has_bits_[0] &= ~0x00000400u;
}
void Request::clear_place_code() {
  if (place_code_ != NULL) place_code_->::pbnavitia::PlaceCodeRequest::Clear();
  clear_has_place_code();
}
const ::pbnavitia::PlaceCodeRequest& Request::place_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.place_code)
  return place_code_ != NULL ? *place_code_ : *default_instance_->place_code_;
}
::pbnavitia::PlaceCodeRequest* Request::mutable_place_code() {
  set_has_place_code();
  if (place_code_ == NULL) {
    place_code_ = new ::pbnavitia::PlaceCodeRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.place_code)
  return place_code_;
}
::pbnavitia::PlaceCodeRequest* Request::release_place_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.place_code)
  clear_has_place_code();
  ::pbnavitia::PlaceCodeRequest* temp = place_code_;
  place_code_ = NULL;
  return temp;
}
void Request::set_allocated_place_code(::pbnavitia::PlaceCodeRequest* place_code) {
  delete place_code_;
  place_code_ = place_code;
  if (place_code) {
    set_has_place_code();
  } else {
    clear_has_place_code();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.place_code)
}

// optional .pbnavitia.NearestStopPointsRequest nearest_stop_points = 14;
bool Request::has_nearest_stop_points() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Request::set_has_nearest_stop_points() {
  _has_bits_[0] |= 0x00000800u;
}
void Request::clear_has_nearest_stop_points() {
  _has_bits_[0] &= ~0x00000800u;
}
void Request::clear_nearest_stop_points() {
  if (nearest_stop_points_ != NULL) nearest_stop_points_->::pbnavitia::NearestStopPointsRequest::Clear();
  clear_has_nearest_stop_points();
}
const ::pbnavitia::NearestStopPointsRequest& Request::nearest_stop_points() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.nearest_stop_points)
  return nearest_stop_points_ != NULL ? *nearest_stop_points_ : *default_instance_->nearest_stop_points_;
}
::pbnavitia::NearestStopPointsRequest* Request::mutable_nearest_stop_points() {
  set_has_nearest_stop_points();
  if (nearest_stop_points_ == NULL) {
    nearest_stop_points_ = new ::pbnavitia::NearestStopPointsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.nearest_stop_points)
  return nearest_stop_points_;
}
::pbnavitia::NearestStopPointsRequest* Request::release_nearest_stop_points() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.nearest_stop_points)
  clear_has_nearest_stop_points();
  ::pbnavitia::NearestStopPointsRequest* temp = nearest_stop_points_;
  nearest_stop_points_ = NULL;
  return temp;
}
void Request::set_allocated_nearest_stop_points(::pbnavitia::NearestStopPointsRequest* nearest_stop_points) {
  delete nearest_stop_points_;
  nearest_stop_points_ = nearest_stop_points;
  if (nearest_stop_points) {
    set_has_nearest_stop_points();
  } else {
    clear_has_nearest_stop_points();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.nearest_stop_points)
}

// optional uint64 _current_datetime = 15;
bool Request::has__current_datetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Request::set_has__current_datetime() {
  _has_bits_[0] |= 0x00001000u;
}
void Request::clear_has__current_datetime() {
  _has_bits_[0] &= ~0x00001000u;
}
void Request::clear__current_datetime() {
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has__current_datetime();
}
 ::google::protobuf::uint64 Request::_current_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request._current_datetime)
  return _current_datetime_;
}
 void Request::set__current_datetime(::google::protobuf::uint64 value) {
  set_has__current_datetime();
  _current_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Request._current_datetime)
}

// optional .pbnavitia.GraphicalIsochroneRequest isochrone = 16;
bool Request::has_isochrone() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Request::set_has_isochrone() {
  _has_bits_[0] |= 0x00002000u;
}
void Request::clear_has_isochrone() {
  _has_bits_[0] &= ~0x00002000u;
}
void Request::clear_isochrone() {
  if (isochrone_ != NULL) isochrone_->::pbnavitia::GraphicalIsochroneRequest::Clear();
  clear_has_isochrone();
}
const ::pbnavitia::GraphicalIsochroneRequest& Request::isochrone() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.isochrone)
  return isochrone_ != NULL ? *isochrone_ : *default_instance_->isochrone_;
}
::pbnavitia::GraphicalIsochroneRequest* Request::mutable_isochrone() {
  set_has_isochrone();
  if (isochrone_ == NULL) {
    isochrone_ = new ::pbnavitia::GraphicalIsochroneRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.isochrone)
  return isochrone_;
}
::pbnavitia::GraphicalIsochroneRequest* Request::release_isochrone() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.isochrone)
  clear_has_isochrone();
  ::pbnavitia::GraphicalIsochroneRequest* temp = isochrone_;
  isochrone_ = NULL;
  return temp;
}
void Request::set_allocated_isochrone(::pbnavitia::GraphicalIsochroneRequest* isochrone) {
  delete isochrone_;
  isochrone_ = isochrone;
  if (isochrone) {
    set_has_isochrone();
  } else {
    clear_has_isochrone();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.isochrone)
}

// optional .pbnavitia.CarCO2EmissionRequest car_co2_emission = 17;
bool Request::has_car_co2_emission() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Request::set_has_car_co2_emission() {
  _has_bits_[0] |= 0x00004000u;
}
void Request::clear_has_car_co2_emission() {
  _has_bits_[0] &= ~0x00004000u;
}
void Request::clear_car_co2_emission() {
  if (car_co2_emission_ != NULL) car_co2_emission_->::pbnavitia::CarCO2EmissionRequest::Clear();
  clear_has_car_co2_emission();
}
const ::pbnavitia::CarCO2EmissionRequest& Request::car_co2_emission() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.car_co2_emission)
  return car_co2_emission_ != NULL ? *car_co2_emission_ : *default_instance_->car_co2_emission_;
}
::pbnavitia::CarCO2EmissionRequest* Request::mutable_car_co2_emission() {
  set_has_car_co2_emission();
  if (car_co2_emission_ == NULL) {
    car_co2_emission_ = new ::pbnavitia::CarCO2EmissionRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.car_co2_emission)
  return car_co2_emission_;
}
::pbnavitia::CarCO2EmissionRequest* Request::release_car_co2_emission() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.car_co2_emission)
  clear_has_car_co2_emission();
  ::pbnavitia::CarCO2EmissionRequest* temp = car_co2_emission_;
  car_co2_emission_ = NULL;
  return temp;
}
void Request::set_allocated_car_co2_emission(::pbnavitia::CarCO2EmissionRequest* car_co2_emission) {
  delete car_co2_emission_;
  car_co2_emission_ = car_co2_emission;
  if (car_co2_emission) {
    set_has_car_co2_emission();
  } else {
    clear_has_car_co2_emission();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.car_co2_emission)
}

// optional .pbnavitia.DirectPathRequest direct_path = 18;
bool Request::has_direct_path() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Request::set_has_direct_path() {
  _has_bits_[0] |= 0x00008000u;
}
void Request::clear_has_direct_path() {
  _has_bits_[0] &= ~0x00008000u;
}
void Request::clear_direct_path() {
  if (direct_path_ != NULL) direct_path_->::pbnavitia::DirectPathRequest::Clear();
  clear_has_direct_path();
}
const ::pbnavitia::DirectPathRequest& Request::direct_path() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.direct_path)
  return direct_path_ != NULL ? *direct_path_ : *default_instance_->direct_path_;
}
::pbnavitia::DirectPathRequest* Request::mutable_direct_path() {
  set_has_direct_path();
  if (direct_path_ == NULL) {
    direct_path_ = new ::pbnavitia::DirectPathRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.direct_path)
  return direct_path_;
}
::pbnavitia::DirectPathRequest* Request::release_direct_path() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.direct_path)
  clear_has_direct_path();
  ::pbnavitia::DirectPathRequest* temp = direct_path_;
  direct_path_ = NULL;
  return temp;
}
void Request::set_allocated_direct_path(::pbnavitia::DirectPathRequest* direct_path) {
  delete direct_path_;
  direct_path_ = direct_path;
  if (direct_path) {
    set_has_direct_path();
  } else {
    clear_has_direct_path();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.direct_path)
}

// optional .pbnavitia.HeatMapRequest heat_map = 19;
bool Request::has_heat_map() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Request::set_has_heat_map() {
  _has_bits_[0] |= 0x00010000u;
}
void Request::clear_has_heat_map() {
  _has_bits_[0] &= ~0x00010000u;
}
void Request::clear_heat_map() {
  if (heat_map_ != NULL) heat_map_->::pbnavitia::HeatMapRequest::Clear();
  clear_has_heat_map();
}
const ::pbnavitia::HeatMapRequest& Request::heat_map() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.heat_map)
  return heat_map_ != NULL ? *heat_map_ : *default_instance_->heat_map_;
}
::pbnavitia::HeatMapRequest* Request::mutable_heat_map() {
  set_has_heat_map();
  if (heat_map_ == NULL) {
    heat_map_ = new ::pbnavitia::HeatMapRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.heat_map)
  return heat_map_;
}
::pbnavitia::HeatMapRequest* Request::release_heat_map() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.heat_map)
  clear_has_heat_map();
  ::pbnavitia::HeatMapRequest* temp = heat_map_;
  heat_map_ = NULL;
  return temp;
}
void Request::set_allocated_heat_map(::pbnavitia::HeatMapRequest* heat_map) {
  delete heat_map_;
  heat_map_ = heat_map;
  if (heat_map) {
    set_has_heat_map();
  } else {
    clear_has_heat_map();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.heat_map)
}

// optional .pbnavitia.StreetNetworkRoutingMatrixRequest sn_routing_matrix = 20;
bool Request::has_sn_routing_matrix() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Request::set_has_sn_routing_matrix() {
  _has_bits_[0] |= 0x00020000u;
}
void Request::clear_has_sn_routing_matrix() {
  _has_bits_[0] &= ~0x00020000u;
}
void Request::clear_sn_routing_matrix() {
  if (sn_routing_matrix_ != NULL) sn_routing_matrix_->::pbnavitia::StreetNetworkRoutingMatrixRequest::Clear();
  clear_has_sn_routing_matrix();
}
const ::pbnavitia::StreetNetworkRoutingMatrixRequest& Request::sn_routing_matrix() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.sn_routing_matrix)
  return sn_routing_matrix_ != NULL ? *sn_routing_matrix_ : *default_instance_->sn_routing_matrix_;
}
::pbnavitia::StreetNetworkRoutingMatrixRequest* Request::mutable_sn_routing_matrix() {
  set_has_sn_routing_matrix();
  if (sn_routing_matrix_ == NULL) {
    sn_routing_matrix_ = new ::pbnavitia::StreetNetworkRoutingMatrixRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.sn_routing_matrix)
  return sn_routing_matrix_;
}
::pbnavitia::StreetNetworkRoutingMatrixRequest* Request::release_sn_routing_matrix() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.sn_routing_matrix)
  clear_has_sn_routing_matrix();
  ::pbnavitia::StreetNetworkRoutingMatrixRequest* temp = sn_routing_matrix_;
  sn_routing_matrix_ = NULL;
  return temp;
}
void Request::set_allocated_sn_routing_matrix(::pbnavitia::StreetNetworkRoutingMatrixRequest* sn_routing_matrix) {
  delete sn_routing_matrix_;
  sn_routing_matrix_ = sn_routing_matrix;
  if (sn_routing_matrix) {
    set_has_sn_routing_matrix();
  } else {
    clear_has_sn_routing_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.sn_routing_matrix)
}

// optional .pbnavitia.GeographicalCoord coord = 21;
bool Request::has_coord() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Request::set_has_coord() {
  _has_bits_[0] |= 0x00040000u;
}
void Request::clear_has_coord() {
  _has_bits_[0] &= ~0x00040000u;
}
void Request::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
const ::pbnavitia::GeographicalCoord& Request::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
::pbnavitia::GeographicalCoord* Request::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.coord)
  return coord_;
}
::pbnavitia::GeographicalCoord* Request::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
void Request::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.coord)
}

// optional .pbnavitia.MatchingRoute matching_routes = 23;
bool Request::has_matching_routes() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Request::set_has_matching_routes() {
  _has_bits_[0] |= 0x00080000u;
}
void Request::clear_has_matching_routes() {
  _has_bits_[0] &= ~0x00080000u;
}
void Request::clear_matching_routes() {
  if (matching_routes_ != NULL) matching_routes_->::pbnavitia::MatchingRoute::Clear();
  clear_has_matching_routes();
}
const ::pbnavitia::MatchingRoute& Request::matching_routes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.matching_routes)
  return matching_routes_ != NULL ? *matching_routes_ : *default_instance_->matching_routes_;
}
::pbnavitia::MatchingRoute* Request::mutable_matching_routes() {
  set_has_matching_routes();
  if (matching_routes_ == NULL) {
    matching_routes_ = new ::pbnavitia::MatchingRoute;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.matching_routes)
  return matching_routes_;
}
::pbnavitia::MatchingRoute* Request::release_matching_routes() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.matching_routes)
  clear_has_matching_routes();
  ::pbnavitia::MatchingRoute* temp = matching_routes_;
  matching_routes_ = NULL;
  return temp;
}
void Request::set_allocated_matching_routes(::pbnavitia::MatchingRoute* matching_routes) {
  delete matching_routes_;
  matching_routes_ = matching_routes;
  if (matching_routes) {
    set_has_matching_routes();
  } else {
    clear_has_matching_routes();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.matching_routes)
}

// optional .pbnavitia.LineReportsRequest line_reports = 24;
bool Request::has_line_reports() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Request::set_has_line_reports() {
  _has_bits_[0] |= 0x00100000u;
}
void Request::clear_has_line_reports() {
  _has_bits_[0] &= ~0x00100000u;
}
void Request::clear_line_reports() {
  if (line_reports_ != NULL) line_reports_->::pbnavitia::LineReportsRequest::Clear();
  clear_has_line_reports();
}
const ::pbnavitia::LineReportsRequest& Request::line_reports() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.line_reports)
  return line_reports_ != NULL ? *line_reports_ : *default_instance_->line_reports_;
}
::pbnavitia::LineReportsRequest* Request::mutable_line_reports() {
  set_has_line_reports();
  if (line_reports_ == NULL) {
    line_reports_ = new ::pbnavitia::LineReportsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.line_reports)
  return line_reports_;
}
::pbnavitia::LineReportsRequest* Request::release_line_reports() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.line_reports)
  clear_has_line_reports();
  ::pbnavitia::LineReportsRequest* temp = line_reports_;
  line_reports_ = NULL;
  return temp;
}
void Request::set_allocated_line_reports(::pbnavitia::LineReportsRequest* line_reports) {
  delete line_reports_;
  line_reports_ = line_reports;
  if (line_reports) {
    set_has_line_reports();
  } else {
    clear_has_line_reports();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.line_reports)
}

// optional string request_id = 12;
bool Request::has_request_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Request::set_has_request_id() {
  _has_bits_[0] |= 0x00200000u;
}
void Request::clear_has_request_id() {
  _has_bits_[0] &= ~0x00200000u;
}
void Request::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
 const ::std::string& Request::request_id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Request.request_id)
}
 void Request::set_request_id(const char* value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Request.request_id)
}
 void Request::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Request.request_id)
}
 ::std::string* Request::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_request_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.request_id)
  clear_has_request_id();
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.request_id)
}

// optional bool disable_feedpublisher = 22;
bool Request::has_disable_feedpublisher() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Request::set_has_disable_feedpublisher() {
  _has_bits_[0] |= 0x00400000u;
}
void Request::clear_has_disable_feedpublisher() {
  _has_bits_[0] &= ~0x00400000u;
}
void Request::clear_disable_feedpublisher() {
  disable_feedpublisher_ = false;
  clear_has_disable_feedpublisher();
}
 bool Request::disable_feedpublisher() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.disable_feedpublisher)
  return disable_feedpublisher_;
}
 void Request::set_disable_feedpublisher(bool value) {
  set_has_disable_feedpublisher();
  disable_feedpublisher_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Request.disable_feedpublisher)
}

// optional bool disable_disruption = 25 [default = false];
bool Request::has_disable_disruption() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Request::set_has_disable_disruption() {
  _has_bits_[0] |= 0x00800000u;
}
void Request::clear_has_disable_disruption() {
  _has_bits_[0] &= ~0x00800000u;
}
void Request::clear_disable_disruption() {
  disable_disruption_ = false;
  clear_has_disable_disruption();
}
 bool Request::disable_disruption() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.disable_disruption)
  return disable_disruption_;
}
 void Request::set_disable_disruption(bool value) {
  set_has_disable_disruption();
  disable_disruption_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Request.disable_disruption)
}

// optional string deadline = 26;
bool Request::has_deadline() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Request::set_has_deadline() {
  _has_bits_[0] |= 0x01000000u;
}
void Request::clear_has_deadline() {
  _has_bits_[0] &= ~0x01000000u;
}
void Request::clear_deadline() {
  deadline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deadline();
}
 const ::std::string& Request::deadline() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.deadline)
  return deadline_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_deadline(const ::std::string& value) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Request.deadline)
}
 void Request::set_deadline(const char* value) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Request.deadline)
}
 void Request::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Request.deadline)
}
 ::std::string* Request::mutable_deadline() {
  set_has_deadline();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.deadline)
  return deadline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_deadline() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.deadline)
  clear_has_deadline();
  return deadline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_deadline(::std::string* deadline) {
  if (deadline != NULL) {
    set_has_deadline();
  } else {
    clear_has_deadline();
  }
  deadline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deadline);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.deadline)
}

// optional .pbnavitia.EquipmentReportsRequest equipment_reports = 27;
bool Request::has_equipment_reports() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Request::set_has_equipment_reports() {
  _has_bits_[0] |= 0x02000000u;
}
void Request::clear_has_equipment_reports() {
  _has_bits_[0] &= ~0x02000000u;
}
void Request::clear_equipment_reports() {
  if (equipment_reports_ != NULL) equipment_reports_->::pbnavitia::EquipmentReportsRequest::Clear();
  clear_has_equipment_reports();
}
const ::pbnavitia::EquipmentReportsRequest& Request::equipment_reports() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.equipment_reports)
  return equipment_reports_ != NULL ? *equipment_reports_ : *default_instance_->equipment_reports_;
}
::pbnavitia::EquipmentReportsRequest* Request::mutable_equipment_reports() {
  set_has_equipment_reports();
  if (equipment_reports_ == NULL) {
    equipment_reports_ = new ::pbnavitia::EquipmentReportsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.equipment_reports)
  return equipment_reports_;
}
::pbnavitia::EquipmentReportsRequest* Request::release_equipment_reports() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.equipment_reports)
  clear_has_equipment_reports();
  ::pbnavitia::EquipmentReportsRequest* temp = equipment_reports_;
  equipment_reports_ = NULL;
  return temp;
}
void Request::set_allocated_equipment_reports(::pbnavitia::EquipmentReportsRequest* equipment_reports) {
  delete equipment_reports_;
  equipment_reports_ = equipment_reports;
  if (equipment_reports) {
    set_has_equipment_reports();
  } else {
    clear_has_equipment_reports();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.equipment_reports)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NearestStopPointsRequest::kPlaceFieldNumber;
const int NearestStopPointsRequest::kModeFieldNumber;
const int NearestStopPointsRequest::kWalkingSpeedFieldNumber;
const int NearestStopPointsRequest::kBikeSpeedFieldNumber;
const int NearestStopPointsRequest::kCarSpeedFieldNumber;
const int NearestStopPointsRequest::kBssSpeedFieldNumber;
const int NearestStopPointsRequest::kFilterFieldNumber;
const int NearestStopPointsRequest::kMaxDurationFieldNumber;
const int NearestStopPointsRequest::kReverseFieldNumber;
const int NearestStopPointsRequest::kCarNoParkSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NearestStopPointsRequest::NearestStopPointsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.NearestStopPointsRequest)
}

void NearestStopPointsRequest::InitAsDefaultInstance() {
}

NearestStopPointsRequest::NearestStopPointsRequest(const NearestStopPointsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.NearestStopPointsRequest)
}

void NearestStopPointsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  place_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  walking_speed_ = 0;
  bike_speed_ = 0;
  car_speed_ = 0;
  bss_speed_ = 0;
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_duration_ = 0;
  reverse_ = false;
  car_no_park_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NearestStopPointsRequest::~NearestStopPointsRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.NearestStopPointsRequest)
  SharedDtor();
}

void NearestStopPointsRequest::SharedDtor() {
  place_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NearestStopPointsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NearestStopPointsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NearestStopPointsRequest_descriptor_;
}

const NearestStopPointsRequest& NearestStopPointsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

NearestStopPointsRequest* NearestStopPointsRequest::default_instance_ = NULL;

NearestStopPointsRequest* NearestStopPointsRequest::New(::google::protobuf::Arena* arena) const {
  NearestStopPointsRequest* n = new NearestStopPointsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NearestStopPointsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.NearestStopPointsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NearestStopPointsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NearestStopPointsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(walking_speed_, bss_speed_);
    if (has_place()) {
      place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mode()) {
      mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_filter()) {
      filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    max_duration_ = 0;
  }
  ZR_(reverse_, car_no_park_speed_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NearestStopPointsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.NearestStopPointsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string place = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->place().data(), this->place().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.NearestStopPointsRequest.place");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mode;
        break;
      }

      // optional string mode = 2;
      case 2: {
        if (tag == 18) {
         parse_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mode().data(), this->mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.NearestStopPointsRequest.mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_walking_speed;
        break;
      }

      // optional double walking_speed = 3;
      case 3: {
        if (tag == 25) {
         parse_walking_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &walking_speed_)));
          set_has_walking_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bike_speed;
        break;
      }

      // optional double bike_speed = 4;
      case 4: {
        if (tag == 33) {
         parse_bike_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bike_speed_)));
          set_has_bike_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_car_speed;
        break;
      }

      // optional double car_speed = 5;
      case 5: {
        if (tag == 41) {
         parse_car_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &car_speed_)));
          set_has_car_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_bss_speed;
        break;
      }

      // optional double bss_speed = 6;
      case 6: {
        if (tag == 49) {
         parse_bss_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bss_speed_)));
          set_has_bss_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_filter;
        break;
      }

      // optional string filter = 7;
      case 7: {
        if (tag == 58) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.NearestStopPointsRequest.filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_duration;
        break;
      }

      // optional int32 max_duration = 8;
      case 8: {
        if (tag == 64) {
         parse_max_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_duration_)));
          set_has_max_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reverse;
        break;
      }

      // optional bool reverse = 9;
      case 9: {
        if (tag == 72) {
         parse_reverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
          set_has_reverse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_car_no_park_speed;
        break;
      }

      // optional double car_no_park_speed = 10;
      case 10: {
        if (tag == 81) {
         parse_car_no_park_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &car_no_park_speed_)));
          set_has_car_no_park_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.NearestStopPointsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.NearestStopPointsRequest)
  return false;
#undef DO_
}

void NearestStopPointsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.NearestStopPointsRequest)
  // optional string place = 1;
  if (has_place()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->place().data(), this->place().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NearestStopPointsRequest.place");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->place(), output);
  }

  // optional string mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NearestStopPointsRequest.mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mode(), output);
  }

  // optional double walking_speed = 3;
  if (has_walking_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->walking_speed(), output);
  }

  // optional double bike_speed = 4;
  if (has_bike_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bike_speed(), output);
  }

  // optional double car_speed = 5;
  if (has_car_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->car_speed(), output);
  }

  // optional double bss_speed = 6;
  if (has_bss_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->bss_speed(), output);
  }

  // optional string filter = 7;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NearestStopPointsRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filter(), output);
  }

  // optional int32 max_duration = 8;
  if (has_max_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_duration(), output);
  }

  // optional bool reverse = 9;
  if (has_reverse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->reverse(), output);
  }

  // optional double car_no_park_speed = 10;
  if (has_car_no_park_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->car_no_park_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.NearestStopPointsRequest)
}

::google::protobuf::uint8* NearestStopPointsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.NearestStopPointsRequest)
  // optional string place = 1;
  if (has_place()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->place().data(), this->place().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NearestStopPointsRequest.place");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->place(), target);
  }

  // optional string mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mode().data(), this->mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NearestStopPointsRequest.mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mode(), target);
  }

  // optional double walking_speed = 3;
  if (has_walking_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->walking_speed(), target);
  }

  // optional double bike_speed = 4;
  if (has_bike_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bike_speed(), target);
  }

  // optional double car_speed = 5;
  if (has_car_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->car_speed(), target);
  }

  // optional double bss_speed = 6;
  if (has_bss_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->bss_speed(), target);
  }

  // optional string filter = 7;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.NearestStopPointsRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filter(), target);
  }

  // optional int32 max_duration = 8;
  if (has_max_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_duration(), target);
  }

  // optional bool reverse = 9;
  if (has_reverse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->reverse(), target);
  }

  // optional double car_no_park_speed = 10;
  if (has_car_no_park_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->car_no_park_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.NearestStopPointsRequest)
  return target;
}

int NearestStopPointsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.NearestStopPointsRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string place = 1;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place());
    }

    // optional string mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mode());
    }

    // optional double walking_speed = 3;
    if (has_walking_speed()) {
      total_size += 1 + 8;
    }

    // optional double bike_speed = 4;
    if (has_bike_speed()) {
      total_size += 1 + 8;
    }

    // optional double car_speed = 5;
    if (has_car_speed()) {
      total_size += 1 + 8;
    }

    // optional double bss_speed = 6;
    if (has_bss_speed()) {
      total_size += 1 + 8;
    }

    // optional string filter = 7;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

    // optional int32 max_duration = 8;
    if (has_max_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_duration());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool reverse = 9;
    if (has_reverse()) {
      total_size += 1 + 1;
    }

    // optional double car_no_park_speed = 10;
    if (has_car_no_park_speed()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NearestStopPointsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.NearestStopPointsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NearestStopPointsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NearestStopPointsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.NearestStopPointsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.NearestStopPointsRequest)
    MergeFrom(*source);
  }
}

void NearestStopPointsRequest::MergeFrom(const NearestStopPointsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.NearestStopPointsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place()) {
      set_has_place();
      place_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_);
    }
    if (from.has_mode()) {
      set_has_mode();
      mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mode_);
    }
    if (from.has_walking_speed()) {
      set_walking_speed(from.walking_speed());
    }
    if (from.has_bike_speed()) {
      set_bike_speed(from.bike_speed());
    }
    if (from.has_car_speed()) {
      set_car_speed(from.car_speed());
    }
    if (from.has_bss_speed()) {
      set_bss_speed(from.bss_speed());
    }
    if (from.has_filter()) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
    if (from.has_max_duration()) {
      set_max_duration(from.max_duration());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reverse()) {
      set_reverse(from.reverse());
    }
    if (from.has_car_no_park_speed()) {
      set_car_no_park_speed(from.car_no_park_speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NearestStopPointsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.NearestStopPointsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestStopPointsRequest::CopyFrom(const NearestStopPointsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.NearestStopPointsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestStopPointsRequest::IsInitialized() const {

  return true;
}

void NearestStopPointsRequest::Swap(NearestStopPointsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NearestStopPointsRequest::InternalSwap(NearestStopPointsRequest* other) {
  place_.Swap(&other->place_);
  mode_.Swap(&other->mode_);
  std::swap(walking_speed_, other->walking_speed_);
  std::swap(bike_speed_, other->bike_speed_);
  std::swap(car_speed_, other->car_speed_);
  std::swap(bss_speed_, other->bss_speed_);
  filter_.Swap(&other->filter_);
  std::swap(max_duration_, other->max_duration_);
  std::swap(reverse_, other->reverse_);
  std::swap(car_no_park_speed_, other->car_no_park_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NearestStopPointsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NearestStopPointsRequest_descriptor_;
  metadata.reflection = NearestStopPointsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NearestStopPointsRequest

// optional string place = 1;
bool NearestStopPointsRequest::has_place() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NearestStopPointsRequest::set_has_place() {
  _has_bits_[0] |= 0x00000001u;
}
void NearestStopPointsRequest::clear_has_place() {
  _has_bits_[0] &= ~0x00000001u;
}
void NearestStopPointsRequest::clear_place() {
  place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_place();
}
 const ::std::string& NearestStopPointsRequest::place() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.place)
  return place_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NearestStopPointsRequest::set_place(const ::std::string& value) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.place)
}
 void NearestStopPointsRequest::set_place(const char* value) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NearestStopPointsRequest.place)
}
 void NearestStopPointsRequest::set_place(const char* value, size_t size) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NearestStopPointsRequest.place)
}
 ::std::string* NearestStopPointsRequest::mutable_place() {
  set_has_place();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NearestStopPointsRequest.place)
  return place_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NearestStopPointsRequest::release_place() {
  // @@protoc_insertion_point(field_release:pbnavitia.NearestStopPointsRequest.place)
  clear_has_place();
  return place_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NearestStopPointsRequest::set_allocated_place(::std::string* place) {
  if (place != NULL) {
    set_has_place();
  } else {
    clear_has_place();
  }
  place_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NearestStopPointsRequest.place)
}

// optional string mode = 2;
bool NearestStopPointsRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NearestStopPointsRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void NearestStopPointsRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void NearestStopPointsRequest::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mode();
}
 const ::std::string& NearestStopPointsRequest::mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.mode)
  return mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NearestStopPointsRequest::set_mode(const ::std::string& value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.mode)
}
 void NearestStopPointsRequest::set_mode(const char* value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NearestStopPointsRequest.mode)
}
 void NearestStopPointsRequest::set_mode(const char* value, size_t size) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NearestStopPointsRequest.mode)
}
 ::std::string* NearestStopPointsRequest::mutable_mode() {
  set_has_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NearestStopPointsRequest.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NearestStopPointsRequest::release_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.NearestStopPointsRequest.mode)
  clear_has_mode();
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NearestStopPointsRequest::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    set_has_mode();
  } else {
    clear_has_mode();
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NearestStopPointsRequest.mode)
}

// optional double walking_speed = 3;
bool NearestStopPointsRequest::has_walking_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NearestStopPointsRequest::set_has_walking_speed() {
  _has_bits_[0] |= 0x00000004u;
}
void NearestStopPointsRequest::clear_has_walking_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
void NearestStopPointsRequest::clear_walking_speed() {
  walking_speed_ = 0;
  clear_has_walking_speed();
}
 double NearestStopPointsRequest::walking_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.walking_speed)
  return walking_speed_;
}
 void NearestStopPointsRequest::set_walking_speed(double value) {
  set_has_walking_speed();
  walking_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.walking_speed)
}

// optional double bike_speed = 4;
bool NearestStopPointsRequest::has_bike_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NearestStopPointsRequest::set_has_bike_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void NearestStopPointsRequest::clear_has_bike_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void NearestStopPointsRequest::clear_bike_speed() {
  bike_speed_ = 0;
  clear_has_bike_speed();
}
 double NearestStopPointsRequest::bike_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.bike_speed)
  return bike_speed_;
}
 void NearestStopPointsRequest::set_bike_speed(double value) {
  set_has_bike_speed();
  bike_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.bike_speed)
}

// optional double car_speed = 5;
bool NearestStopPointsRequest::has_car_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NearestStopPointsRequest::set_has_car_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void NearestStopPointsRequest::clear_has_car_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void NearestStopPointsRequest::clear_car_speed() {
  car_speed_ = 0;
  clear_has_car_speed();
}
 double NearestStopPointsRequest::car_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.car_speed)
  return car_speed_;
}
 void NearestStopPointsRequest::set_car_speed(double value) {
  set_has_car_speed();
  car_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.car_speed)
}

// optional double bss_speed = 6;
bool NearestStopPointsRequest::has_bss_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NearestStopPointsRequest::set_has_bss_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void NearestStopPointsRequest::clear_has_bss_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void NearestStopPointsRequest::clear_bss_speed() {
  bss_speed_ = 0;
  clear_has_bss_speed();
}
 double NearestStopPointsRequest::bss_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.bss_speed)
  return bss_speed_;
}
 void NearestStopPointsRequest::set_bss_speed(double value) {
  set_has_bss_speed();
  bss_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.bss_speed)
}

// optional string filter = 7;
bool NearestStopPointsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NearestStopPointsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000040u;
}
void NearestStopPointsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000040u;
}
void NearestStopPointsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
 const ::std::string& NearestStopPointsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NearestStopPointsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.filter)
}
 void NearestStopPointsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NearestStopPointsRequest.filter)
}
 void NearestStopPointsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NearestStopPointsRequest.filter)
}
 ::std::string* NearestStopPointsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NearestStopPointsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NearestStopPointsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.NearestStopPointsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NearestStopPointsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NearestStopPointsRequest.filter)
}

// optional int32 max_duration = 8;
bool NearestStopPointsRequest::has_max_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NearestStopPointsRequest::set_has_max_duration() {
  _has_bits_[0] |= 0x00000080u;
}
void NearestStopPointsRequest::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
void NearestStopPointsRequest::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
 ::google::protobuf::int32 NearestStopPointsRequest::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.max_duration)
  return max_duration_;
}
 void NearestStopPointsRequest::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.max_duration)
}

// optional bool reverse = 9;
bool NearestStopPointsRequest::has_reverse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NearestStopPointsRequest::set_has_reverse() {
  _has_bits_[0] |= 0x00000100u;
}
void NearestStopPointsRequest::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000100u;
}
void NearestStopPointsRequest::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
 bool NearestStopPointsRequest::reverse() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.reverse)
  return reverse_;
}
 void NearestStopPointsRequest::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.reverse)
}

// optional double car_no_park_speed = 10;
bool NearestStopPointsRequest::has_car_no_park_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NearestStopPointsRequest::set_has_car_no_park_speed() {
  _has_bits_[0] |= 0x00000200u;
}
void NearestStopPointsRequest::clear_has_car_no_park_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
void NearestStopPointsRequest::clear_car_no_park_speed() {
  car_no_park_speed_ = 0;
  clear_has_car_no_park_speed();
}
 double NearestStopPointsRequest::car_no_park_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.car_no_park_speed)
  return car_no_park_speed_;
}
 void NearestStopPointsRequest::set_car_no_park_speed(double value) {
  set_has_car_no_park_speed();
  car_no_park_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.car_no_park_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphicalIsochroneRequest::kJourneysRequestFieldNumber;
const int GraphicalIsochroneRequest::kBoundaryDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphicalIsochroneRequest::GraphicalIsochroneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.GraphicalIsochroneRequest)
}

void GraphicalIsochroneRequest::InitAsDefaultInstance() {
  journeys_request_ = const_cast< ::pbnavitia::JourneysRequest*>(&::pbnavitia::JourneysRequest::default_instance());
}

GraphicalIsochroneRequest::GraphicalIsochroneRequest(const GraphicalIsochroneRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.GraphicalIsochroneRequest)
}

void GraphicalIsochroneRequest::SharedCtor() {
  _cached_size_ = 0;
  journeys_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GraphicalIsochroneRequest::~GraphicalIsochroneRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.GraphicalIsochroneRequest)
  SharedDtor();
}

void GraphicalIsochroneRequest::SharedDtor() {
  if (this != default_instance_) {
    delete journeys_request_;
  }
}

void GraphicalIsochroneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphicalIsochroneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphicalIsochroneRequest_descriptor_;
}

const GraphicalIsochroneRequest& GraphicalIsochroneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

GraphicalIsochroneRequest* GraphicalIsochroneRequest::default_instance_ = NULL;

GraphicalIsochroneRequest* GraphicalIsochroneRequest::New(::google::protobuf::Arena* arena) const {
  GraphicalIsochroneRequest* n = new GraphicalIsochroneRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GraphicalIsochroneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.GraphicalIsochroneRequest)
  if (has_journeys_request()) {
    if (journeys_request_ != NULL) journeys_request_->::pbnavitia::JourneysRequest::Clear();
  }
  boundary_duration_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GraphicalIsochroneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.GraphicalIsochroneRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.JourneysRequest journeys_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_journeys_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_boundary_duration;
        break;
      }

      // repeated int32 boundary_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_boundary_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_boundary_duration())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boundary_duration())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_boundary_duration;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.GraphicalIsochroneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.GraphicalIsochroneRequest)
  return false;
#undef DO_
}

void GraphicalIsochroneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.GraphicalIsochroneRequest)
  // optional .pbnavitia.JourneysRequest journeys_request = 1;
  if (has_journeys_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->journeys_request_, output);
  }

  // repeated int32 boundary_duration = 2;
  for (int i = 0; i < this->boundary_duration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->boundary_duration(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.GraphicalIsochroneRequest)
}

::google::protobuf::uint8* GraphicalIsochroneRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.GraphicalIsochroneRequest)
  // optional .pbnavitia.JourneysRequest journeys_request = 1;
  if (has_journeys_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->journeys_request_, false, target);
  }

  // repeated int32 boundary_duration = 2;
  for (int i = 0; i < this->boundary_duration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->boundary_duration(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.GraphicalIsochroneRequest)
  return target;
}

int GraphicalIsochroneRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.GraphicalIsochroneRequest)
  int total_size = 0;

  // optional .pbnavitia.JourneysRequest journeys_request = 1;
  if (has_journeys_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->journeys_request_);
  }

  // repeated int32 boundary_duration = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->boundary_duration_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boundary_duration(i));
    }
    total_size += 1 * this->boundary_duration_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphicalIsochroneRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.GraphicalIsochroneRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphicalIsochroneRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphicalIsochroneRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.GraphicalIsochroneRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.GraphicalIsochroneRequest)
    MergeFrom(*source);
  }
}

void GraphicalIsochroneRequest::MergeFrom(const GraphicalIsochroneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.GraphicalIsochroneRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  boundary_duration_.MergeFrom(from.boundary_duration_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_journeys_request()) {
      mutable_journeys_request()->::pbnavitia::JourneysRequest::MergeFrom(from.journeys_request());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GraphicalIsochroneRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.GraphicalIsochroneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphicalIsochroneRequest::CopyFrom(const GraphicalIsochroneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.GraphicalIsochroneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicalIsochroneRequest::IsInitialized() const {

  if (has_journeys_request()) {
    if (!this->journeys_request_->IsInitialized()) return false;
  }
  return true;
}

void GraphicalIsochroneRequest::Swap(GraphicalIsochroneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GraphicalIsochroneRequest::InternalSwap(GraphicalIsochroneRequest* other) {
  std::swap(journeys_request_, other->journeys_request_);
  boundary_duration_.UnsafeArenaSwap(&other->boundary_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphicalIsochroneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphicalIsochroneRequest_descriptor_;
  metadata.reflection = GraphicalIsochroneRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphicalIsochroneRequest

// optional .pbnavitia.JourneysRequest journeys_request = 1;
bool GraphicalIsochroneRequest::has_journeys_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GraphicalIsochroneRequest::set_has_journeys_request() {
  _has_bits_[0] |= 0x00000001u;
}
void GraphicalIsochroneRequest::clear_has_journeys_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void GraphicalIsochroneRequest::clear_journeys_request() {
  if (journeys_request_ != NULL) journeys_request_->::pbnavitia::JourneysRequest::Clear();
  clear_has_journeys_request();
}
const ::pbnavitia::JourneysRequest& GraphicalIsochroneRequest::journeys_request() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochroneRequest.journeys_request)
  return journeys_request_ != NULL ? *journeys_request_ : *default_instance_->journeys_request_;
}
::pbnavitia::JourneysRequest* GraphicalIsochroneRequest::mutable_journeys_request() {
  set_has_journeys_request();
  if (journeys_request_ == NULL) {
    journeys_request_ = new ::pbnavitia::JourneysRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.GraphicalIsochroneRequest.journeys_request)
  return journeys_request_;
}
::pbnavitia::JourneysRequest* GraphicalIsochroneRequest::release_journeys_request() {
  // @@protoc_insertion_point(field_release:pbnavitia.GraphicalIsochroneRequest.journeys_request)
  clear_has_journeys_request();
  ::pbnavitia::JourneysRequest* temp = journeys_request_;
  journeys_request_ = NULL;
  return temp;
}
void GraphicalIsochroneRequest::set_allocated_journeys_request(::pbnavitia::JourneysRequest* journeys_request) {
  delete journeys_request_;
  journeys_request_ = journeys_request;
  if (journeys_request) {
    set_has_journeys_request();
  } else {
    clear_has_journeys_request();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GraphicalIsochroneRequest.journeys_request)
}

// repeated int32 boundary_duration = 2;
int GraphicalIsochroneRequest::boundary_duration_size() const {
  return boundary_duration_.size();
}
void GraphicalIsochroneRequest::clear_boundary_duration() {
  boundary_duration_.Clear();
}
 ::google::protobuf::int32 GraphicalIsochroneRequest::boundary_duration(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
  return boundary_duration_.Get(index);
}
 void GraphicalIsochroneRequest::set_boundary_duration(int index, ::google::protobuf::int32 value) {
  boundary_duration_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
}
 void GraphicalIsochroneRequest::add_boundary_duration(::google::protobuf::int32 value) {
  boundary_duration_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GraphicalIsochroneRequest::boundary_duration() const {
  // @@protoc_insertion_point(field_list:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
  return boundary_duration_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GraphicalIsochroneRequest::mutable_boundary_duration() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
  return &boundary_duration_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeatMapRequest::kJourneysRequestFieldNumber;
const int HeatMapRequest::kResolutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeatMapRequest::HeatMapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.HeatMapRequest)
}

void HeatMapRequest::InitAsDefaultInstance() {
  journeys_request_ = const_cast< ::pbnavitia::JourneysRequest*>(&::pbnavitia::JourneysRequest::default_instance());
}

HeatMapRequest::HeatMapRequest(const HeatMapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.HeatMapRequest)
}

void HeatMapRequest::SharedCtor() {
  _cached_size_ = 0;
  journeys_request_ = NULL;
  resolution_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeatMapRequest::~HeatMapRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.HeatMapRequest)
  SharedDtor();
}

void HeatMapRequest::SharedDtor() {
  if (this != default_instance_) {
    delete journeys_request_;
  }
}

void HeatMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeatMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeatMapRequest_descriptor_;
}

const HeatMapRequest& HeatMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

HeatMapRequest* HeatMapRequest::default_instance_ = NULL;

HeatMapRequest* HeatMapRequest::New(::google::protobuf::Arena* arena) const {
  HeatMapRequest* n = new HeatMapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeatMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.HeatMapRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_journeys_request()) {
      if (journeys_request_ != NULL) journeys_request_->::pbnavitia::JourneysRequest::Clear();
    }
    resolution_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeatMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.HeatMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.JourneysRequest journeys_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_journeys_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resolution;
        break;
      }

      // optional int32 resolution = 2;
      case 2: {
        if (tag == 16) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.HeatMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.HeatMapRequest)
  return false;
#undef DO_
}

void HeatMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.HeatMapRequest)
  // optional .pbnavitia.JourneysRequest journeys_request = 1;
  if (has_journeys_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->journeys_request_, output);
  }

  // optional int32 resolution = 2;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resolution(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.HeatMapRequest)
}

::google::protobuf::uint8* HeatMapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.HeatMapRequest)
  // optional .pbnavitia.JourneysRequest journeys_request = 1;
  if (has_journeys_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->journeys_request_, false, target);
  }

  // optional int32 resolution = 2;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resolution(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.HeatMapRequest)
  return target;
}

int HeatMapRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.HeatMapRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .pbnavitia.JourneysRequest journeys_request = 1;
    if (has_journeys_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->journeys_request_);
    }

    // optional int32 resolution = 2;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolution());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeatMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.HeatMapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeatMapRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeatMapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.HeatMapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.HeatMapRequest)
    MergeFrom(*source);
  }
}

void HeatMapRequest::MergeFrom(const HeatMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.HeatMapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_journeys_request()) {
      mutable_journeys_request()->::pbnavitia::JourneysRequest::MergeFrom(from.journeys_request());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeatMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.HeatMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeatMapRequest::CopyFrom(const HeatMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.HeatMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeatMapRequest::IsInitialized() const {

  if (has_journeys_request()) {
    if (!this->journeys_request_->IsInitialized()) return false;
  }
  return true;
}

void HeatMapRequest::Swap(HeatMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeatMapRequest::InternalSwap(HeatMapRequest* other) {
  std::swap(journeys_request_, other->journeys_request_);
  std::swap(resolution_, other->resolution_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeatMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeatMapRequest_descriptor_;
  metadata.reflection = HeatMapRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeatMapRequest

// optional .pbnavitia.JourneysRequest journeys_request = 1;
bool HeatMapRequest::has_journeys_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeatMapRequest::set_has_journeys_request() {
  _has_bits_[0] |= 0x00000001u;
}
void HeatMapRequest::clear_has_journeys_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeatMapRequest::clear_journeys_request() {
  if (journeys_request_ != NULL) journeys_request_->::pbnavitia::JourneysRequest::Clear();
  clear_has_journeys_request();
}
const ::pbnavitia::JourneysRequest& HeatMapRequest::journeys_request() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMapRequest.journeys_request)
  return journeys_request_ != NULL ? *journeys_request_ : *default_instance_->journeys_request_;
}
::pbnavitia::JourneysRequest* HeatMapRequest::mutable_journeys_request() {
  set_has_journeys_request();
  if (journeys_request_ == NULL) {
    journeys_request_ = new ::pbnavitia::JourneysRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.HeatMapRequest.journeys_request)
  return journeys_request_;
}
::pbnavitia::JourneysRequest* HeatMapRequest::release_journeys_request() {
  // @@protoc_insertion_point(field_release:pbnavitia.HeatMapRequest.journeys_request)
  clear_has_journeys_request();
  ::pbnavitia::JourneysRequest* temp = journeys_request_;
  journeys_request_ = NULL;
  return temp;
}
void HeatMapRequest::set_allocated_journeys_request(::pbnavitia::JourneysRequest* journeys_request) {
  delete journeys_request_;
  journeys_request_ = journeys_request;
  if (journeys_request) {
    set_has_journeys_request();
  } else {
    clear_has_journeys_request();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.HeatMapRequest.journeys_request)
}

// optional int32 resolution = 2;
bool HeatMapRequest::has_resolution() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeatMapRequest::set_has_resolution() {
  _has_bits_[0] |= 0x00000002u;
}
void HeatMapRequest::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeatMapRequest::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
 ::google::protobuf::int32 HeatMapRequest::resolution() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMapRequest.resolution)
  return resolution_;
}
 void HeatMapRequest::set_resolution(::google::protobuf::int32 value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.HeatMapRequest.resolution)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PtobjectRequest::kQFieldNumber;
const int PtobjectRequest::kTypesFieldNumber;
const int PtobjectRequest::kDepthFieldNumber;
const int PtobjectRequest::kCountFieldNumber;
const int PtobjectRequest::kAdminUrisFieldNumber;
const int PtobjectRequest::kSearchTypeFieldNumber;
const int PtobjectRequest::kDisableGeojsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PtobjectRequest::PtobjectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PtobjectRequest)
}

void PtobjectRequest::InitAsDefaultInstance() {
}

PtobjectRequest::PtobjectRequest(const PtobjectRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PtobjectRequest)
}

void PtobjectRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  q_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depth_ = 0;
  count_ = 0;
  search_type_ = 0;
  disable_geojson_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PtobjectRequest::~PtobjectRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.PtobjectRequest)
  SharedDtor();
}

void PtobjectRequest::SharedDtor() {
  q_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PtobjectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PtobjectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PtobjectRequest_descriptor_;
}

const PtobjectRequest& PtobjectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

PtobjectRequest* PtobjectRequest::default_instance_ = NULL;

PtobjectRequest* PtobjectRequest::New(::google::protobuf::Arena* arena) const {
  PtobjectRequest* n = new PtobjectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PtobjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PtobjectRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PtobjectRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PtobjectRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 109u) {
    ZR_(depth_, count_);
    ZR_(search_type_, disable_geojson_);
    if (has_q()) {
      q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  types_.Clear();
  admin_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PtobjectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PtobjectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string q = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_q()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->q().data(), this->q().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtobjectRequest.q");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_types;
        break;
      }

      // repeated .pbnavitia.NavitiaType types = 2;
      case 2: {
        if (tag == 16) {
         parse_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::NavitiaType_IsValid(value)) {
            add_types(static_cast< ::pbnavitia::NavitiaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::pbnavitia::NavitiaType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_types;
        if (input->ExpectTag(24)) goto parse_depth;
        break;
      }

      // required int32 depth = 3;
      case 3: {
        if (tag == 24) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_admin_uris;
        break;
      }

      // repeated string admin_uris = 5;
      case 5: {
        if (tag == 42) {
         parse_admin_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_admin_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->admin_uris(this->admin_uris_size() - 1).data(),
            this->admin_uris(this->admin_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtobjectRequest.admin_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_admin_uris;
        if (input->ExpectTag(48)) goto parse_search_type;
        break;
      }

      // optional int32 search_type = 6;
      case 6: {
        if (tag == 48) {
         parse_search_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_type_)));
          set_has_search_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_disable_geojson;
        break;
      }

      // optional bool disable_geojson = 7;
      case 7: {
        if (tag == 56) {
         parse_disable_geojson:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_geojson_)));
          set_has_disable_geojson();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PtobjectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PtobjectRequest)
  return false;
#undef DO_
}

void PtobjectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PtobjectRequest)
  // required string q = 1;
  if (has_q()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->q().data(), this->q().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtobjectRequest.q");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->q(), output);
  }

  // repeated .pbnavitia.NavitiaType types = 2;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->types(i), output);
  }

  // required int32 depth = 3;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depth(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // repeated string admin_uris = 5;
  for (int i = 0; i < this->admin_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->admin_uris(i).data(), this->admin_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtobjectRequest.admin_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->admin_uris(i), output);
  }

  // optional int32 search_type = 6;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->search_type(), output);
  }

  // optional bool disable_geojson = 7;
  if (has_disable_geojson()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disable_geojson(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PtobjectRequest)
}

::google::protobuf::uint8* PtobjectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PtobjectRequest)
  // required string q = 1;
  if (has_q()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->q().data(), this->q().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtobjectRequest.q");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->q(), target);
  }

  // repeated .pbnavitia.NavitiaType types = 2;
  for (int i = 0; i < this->types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->types(i), target);
  }

  // required int32 depth = 3;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depth(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // repeated string admin_uris = 5;
  for (int i = 0; i < this->admin_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->admin_uris(i).data(), this->admin_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtobjectRequest.admin_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->admin_uris(i), target);
  }

  // optional int32 search_type = 6;
  if (has_search_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->search_type(), target);
  }

  // optional bool disable_geojson = 7;
  if (has_disable_geojson()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disable_geojson(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PtobjectRequest)
  return target;
}

int PtobjectRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.PtobjectRequest)
  int total_size = 0;

  if (has_q()) {
    // required string q = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->q());
  }

  if (has_depth()) {
    // required int32 depth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  if (has_count()) {
    // required int32 count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  return total_size;
}
int PtobjectRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PtobjectRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string q = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->q());

    // required int32 depth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());

    // required int32 count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96u) {
    // optional int32 search_type = 6;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_type());
    }

    // optional bool disable_geojson = 7;
    if (has_disable_geojson()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pbnavitia.NavitiaType types = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    total_size += 1 * this->types_size() + data_size;
  }

  // repeated string admin_uris = 5;
  total_size += 1 * this->admin_uris_size();
  for (int i = 0; i < this->admin_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->admin_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PtobjectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PtobjectRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PtobjectRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PtobjectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PtobjectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PtobjectRequest)
    MergeFrom(*source);
  }
}

void PtobjectRequest::MergeFrom(const PtobjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PtobjectRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  types_.MergeFrom(from.types_);
  admin_uris_.MergeFrom(from.admin_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_q()) {
      set_has_q();
      q_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.q_);
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
    if (from.has_disable_geojson()) {
      set_disable_geojson(from.disable_geojson());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PtobjectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PtobjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtobjectRequest::CopyFrom(const PtobjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PtobjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtobjectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void PtobjectRequest::Swap(PtobjectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PtobjectRequest::InternalSwap(PtobjectRequest* other) {
  q_.Swap(&other->q_);
  types_.UnsafeArenaSwap(&other->types_);
  std::swap(depth_, other->depth_);
  std::swap(count_, other->count_);
  admin_uris_.UnsafeArenaSwap(&other->admin_uris_);
  std::swap(search_type_, other->search_type_);
  std::swap(disable_geojson_, other->disable_geojson_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PtobjectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PtobjectRequest_descriptor_;
  metadata.reflection = PtobjectRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PtobjectRequest

// required string q = 1;
bool PtobjectRequest::has_q() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PtobjectRequest::set_has_q() {
  _has_bits_[0] |= 0x00000001u;
}
void PtobjectRequest::clear_has_q() {
  _has_bits_[0] &= ~0x00000001u;
}
void PtobjectRequest::clear_q() {
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_q();
}
 const ::std::string& PtobjectRequest::q() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.q)
  return q_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtobjectRequest::set_q(const ::std::string& value) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.q)
}
 void PtobjectRequest::set_q(const char* value) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtobjectRequest.q)
}
 void PtobjectRequest::set_q(const char* value, size_t size) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtobjectRequest.q)
}
 ::std::string* PtobjectRequest::mutable_q() {
  set_has_q();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtobjectRequest.q)
  return q_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtobjectRequest::release_q() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtobjectRequest.q)
  clear_has_q();
  return q_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtobjectRequest::set_allocated_q(::std::string* q) {
  if (q != NULL) {
    set_has_q();
  } else {
    clear_has_q();
  }
  q_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), q);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtobjectRequest.q)
}

// repeated .pbnavitia.NavitiaType types = 2;
int PtobjectRequest::types_size() const {
  return types_.size();
}
void PtobjectRequest::clear_types() {
  types_.Clear();
}
 ::pbnavitia::NavitiaType PtobjectRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.types)
  return static_cast< ::pbnavitia::NavitiaType >(types_.Get(index));
}
 void PtobjectRequest::set_types(int index, ::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.types)
}
 void PtobjectRequest::add_types(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtobjectRequest.types)
}
 const ::google::protobuf::RepeatedField<int>&
PtobjectRequest::types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtobjectRequest.types)
  return types_;
}
 ::google::protobuf::RepeatedField<int>*
PtobjectRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtobjectRequest.types)
  return &types_;
}

// required int32 depth = 3;
bool PtobjectRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PtobjectRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
void PtobjectRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
void PtobjectRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 PtobjectRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.depth)
  return depth_;
}
 void PtobjectRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.depth)
}

// required int32 count = 4;
bool PtobjectRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PtobjectRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void PtobjectRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void PtobjectRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 PtobjectRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.count)
  return count_;
}
 void PtobjectRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.count)
}

// repeated string admin_uris = 5;
int PtobjectRequest::admin_uris_size() const {
  return admin_uris_.size();
}
void PtobjectRequest::clear_admin_uris() {
  admin_uris_.Clear();
}
 const ::std::string& PtobjectRequest::admin_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.admin_uris)
  return admin_uris_.Get(index);
}
 ::std::string* PtobjectRequest::mutable_admin_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtobjectRequest.admin_uris)
  return admin_uris_.Mutable(index);
}
 void PtobjectRequest::set_admin_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.admin_uris)
  admin_uris_.Mutable(index)->assign(value);
}
 void PtobjectRequest::set_admin_uris(int index, const char* value) {
  admin_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtobjectRequest.admin_uris)
}
 void PtobjectRequest::set_admin_uris(int index, const char* value, size_t size) {
  admin_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtobjectRequest.admin_uris)
}
 ::std::string* PtobjectRequest::add_admin_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PtobjectRequest.admin_uris)
  return admin_uris_.Add();
}
 void PtobjectRequest::add_admin_uris(const ::std::string& value) {
  admin_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtobjectRequest.admin_uris)
}
 void PtobjectRequest::add_admin_uris(const char* value) {
  admin_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PtobjectRequest.admin_uris)
}
 void PtobjectRequest::add_admin_uris(const char* value, size_t size) {
  admin_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PtobjectRequest.admin_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PtobjectRequest::admin_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtobjectRequest.admin_uris)
  return admin_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PtobjectRequest::mutable_admin_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtobjectRequest.admin_uris)
  return &admin_uris_;
}

// optional int32 search_type = 6;
bool PtobjectRequest::has_search_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PtobjectRequest::set_has_search_type() {
  _has_bits_[0] |= 0x00000020u;
}
void PtobjectRequest::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void PtobjectRequest::clear_search_type() {
  search_type_ = 0;
  clear_has_search_type();
}
 ::google::protobuf::int32 PtobjectRequest::search_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.search_type)
  return search_type_;
}
 void PtobjectRequest::set_search_type(::google::protobuf::int32 value) {
  set_has_search_type();
  search_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.search_type)
}

// optional bool disable_geojson = 7;
bool PtobjectRequest::has_disable_geojson() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PtobjectRequest::set_has_disable_geojson() {
  _has_bits_[0] |= 0x00000040u;
}
void PtobjectRequest::clear_has_disable_geojson() {
  _has_bits_[0] &= ~0x00000040u;
}
void PtobjectRequest::clear_disable_geojson() {
  disable_geojson_ = false;
  clear_has_disable_geojson();
}
 bool PtobjectRequest::disable_geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.disable_geojson)
  return disable_geojson_;
}
 void PtobjectRequest::set_disable_geojson(bool value) {
  set_has_disable_geojson();
  disable_geojson_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.disable_geojson)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipmentReportsRequest::kDepthFieldNumber;
const int EquipmentReportsRequest::kStartPageFieldNumber;
const int EquipmentReportsRequest::kCountFieldNumber;
const int EquipmentReportsRequest::kFilterFieldNumber;
const int EquipmentReportsRequest::kForbiddenUrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipmentReportsRequest::EquipmentReportsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.EquipmentReportsRequest)
}

void EquipmentReportsRequest::InitAsDefaultInstance() {
}

EquipmentReportsRequest::EquipmentReportsRequest(const EquipmentReportsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.EquipmentReportsRequest)
}

void EquipmentReportsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  depth_ = 0;
  start_page_ = 0;
  count_ = 0;
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentReportsRequest::~EquipmentReportsRequest() {
  // @@protoc_insertion_point(destructor:pbnavitia.EquipmentReportsRequest)
  SharedDtor();
}

void EquipmentReportsRequest::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EquipmentReportsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentReportsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentReportsRequest_descriptor_;
}

const EquipmentReportsRequest& EquipmentReportsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

EquipmentReportsRequest* EquipmentReportsRequest::default_instance_ = NULL;

EquipmentReportsRequest* EquipmentReportsRequest::New(::google::protobuf::Arena* arena) const {
  EquipmentReportsRequest* n = new EquipmentReportsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipmentReportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.EquipmentReportsRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EquipmentReportsRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EquipmentReportsRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(depth_, start_page_);
    count_ = 0;
    if (has_filter()) {
      filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  forbidden_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EquipmentReportsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.EquipmentReportsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 depth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_page;
        break;
      }

      // optional int32 start_page = 2;
      case 2: {
        if (tag == 16) {
         parse_start_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_page_)));
          set_has_start_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_filter;
        break;
      }

      // optional string filter = 4;
      case 4: {
        if (tag == 34) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.EquipmentReportsRequest.filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_forbidden_uris;
        break;
      }

      // repeated string forbidden_uris = 5;
      case 5: {
        if (tag == 42) {
         parse_forbidden_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_forbidden_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->forbidden_uris(this->forbidden_uris_size() - 1).data(),
            this->forbidden_uris(this->forbidden_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.EquipmentReportsRequest.forbidden_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_forbidden_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.EquipmentReportsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.EquipmentReportsRequest)
  return false;
#undef DO_
}

void EquipmentReportsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.EquipmentReportsRequest)
  // optional int32 depth = 1;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->depth(), output);
  }

  // optional int32 start_page = 2;
  if (has_start_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_page(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional string filter = 4;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentReportsRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filter(), output);
  }

  // repeated string forbidden_uris = 5;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentReportsRequest.forbidden_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->forbidden_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.EquipmentReportsRequest)
}

::google::protobuf::uint8* EquipmentReportsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.EquipmentReportsRequest)
  // optional int32 depth = 1;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->depth(), target);
  }

  // optional int32 start_page = 2;
  if (has_start_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_page(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional string filter = 4;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentReportsRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter(), target);
  }

  // repeated string forbidden_uris = 5;
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->forbidden_uris(i).data(), this->forbidden_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentReportsRequest.forbidden_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->forbidden_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.EquipmentReportsRequest)
  return target;
}

int EquipmentReportsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.EquipmentReportsRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 depth = 1;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional int32 start_page = 2;
    if (has_start_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_page());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional string filter = 4;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

  }
  // repeated string forbidden_uris = 5;
  total_size += 1 * this->forbidden_uris_size();
  for (int i = 0; i < this->forbidden_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->forbidden_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentReportsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.EquipmentReportsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EquipmentReportsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipmentReportsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.EquipmentReportsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.EquipmentReportsRequest)
    MergeFrom(*source);
  }
}

void EquipmentReportsRequest::MergeFrom(const EquipmentReportsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.EquipmentReportsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  forbidden_uris_.MergeFrom(from.forbidden_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_start_page()) {
      set_start_page(from.start_page());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_filter()) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EquipmentReportsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.EquipmentReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentReportsRequest::CopyFrom(const EquipmentReportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.EquipmentReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentReportsRequest::IsInitialized() const {

  return true;
}

void EquipmentReportsRequest::Swap(EquipmentReportsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipmentReportsRequest::InternalSwap(EquipmentReportsRequest* other) {
  std::swap(depth_, other->depth_);
  std::swap(start_page_, other->start_page_);
  std::swap(count_, other->count_);
  filter_.Swap(&other->filter_);
  forbidden_uris_.UnsafeArenaSwap(&other->forbidden_uris_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipmentReportsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentReportsRequest_descriptor_;
  metadata.reflection = EquipmentReportsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipmentReportsRequest

// optional int32 depth = 1;
bool EquipmentReportsRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EquipmentReportsRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
void EquipmentReportsRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
void EquipmentReportsRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
 ::google::protobuf::int32 EquipmentReportsRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.depth)
  return depth_;
}
 void EquipmentReportsRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.depth)
}

// optional int32 start_page = 2;
bool EquipmentReportsRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EquipmentReportsRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000002u;
}
void EquipmentReportsRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000002u;
}
void EquipmentReportsRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
 ::google::protobuf::int32 EquipmentReportsRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.start_page)
  return start_page_;
}
 void EquipmentReportsRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.start_page)
}

// optional int32 count = 3;
bool EquipmentReportsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EquipmentReportsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void EquipmentReportsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void EquipmentReportsRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 EquipmentReportsRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.count)
  return count_;
}
 void EquipmentReportsRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.count)
}

// optional string filter = 4;
bool EquipmentReportsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EquipmentReportsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000008u;
}
void EquipmentReportsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
void EquipmentReportsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
 const ::std::string& EquipmentReportsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentReportsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.filter)
}
 void EquipmentReportsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentReportsRequest.filter)
}
 void EquipmentReportsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentReportsRequest.filter)
}
 ::std::string* EquipmentReportsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentReportsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EquipmentReportsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentReportsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentReportsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentReportsRequest.filter)
}

// repeated string forbidden_uris = 5;
int EquipmentReportsRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
void EquipmentReportsRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
 const ::std::string& EquipmentReportsRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
 ::std::string* EquipmentReportsRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
 void EquipmentReportsRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
 void EquipmentReportsRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
 void EquipmentReportsRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
 ::std::string* EquipmentReportsRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
 void EquipmentReportsRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
 void EquipmentReportsRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
 void EquipmentReportsRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
EquipmentReportsRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return forbidden_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
EquipmentReportsRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return &forbidden_uris_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnavitia

// @@protoc_insertion_point(global_scope)
