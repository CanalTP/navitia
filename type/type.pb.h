// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#ifndef PROTOBUF_type_2eproto__INCLUDED
#define PROTOBUF_type_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbnavitia {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_type_2eproto();
void protobuf_AssignDesc_type_2eproto();
void protobuf_ShutdownFile_type_2eproto();

class Address;
class AdministrativeRegion;
class Calendar;
class CalendarException;
class CalendarPeriod;
class Channel;
class Code;
class Comment;
class CommercialMode;
class Company;
class Connection;
class Contributor;
class CurrentAvailability;
class Dataset;
class Destination;
class DisruptionProperty;
class EquipmentCause;
class EquipmentDetails;
class EquipmentEffect;
class FareZone;
class GeographicalCoord;
class Impact;
class ImpactedObject;
class JourneyPattern;
class JourneyPatternPoint;
class Line;
class LineGroup;
class LineSectionImpact;
class LineString;
class LocationContext;
class Message;
class MessageContent;
class MultiLineString;
class Network;
class Note;
class Period;
class PhysicalMode;
class Poi;
class PoiType;
class Properties;
class Property;
class PtObject;
class Route;
class Severity;
class StopArea;
class StopAreaEquipment;
class StopDateTime;
class StopPoint;
class StopTime;
class StopTimeUpdate;
class Trip;
class ValidityPattern;
class VehicleJourney;
class WeekPattern;
class hasEquipments;

enum Channel_ChannelType {
  Channel_ChannelType_web = 1,
  Channel_ChannelType_sms = 2,
  Channel_ChannelType_email = 3,
  Channel_ChannelType_mobile = 4,
  Channel_ChannelType_notification = 5,
  Channel_ChannelType_twitter = 6,
  Channel_ChannelType_facebook = 7,
  Channel_ChannelType_unknown_type = 8,
  Channel_ChannelType_title = 9,
  Channel_ChannelType_beacon = 10
};
bool Channel_ChannelType_IsValid(int value);
const Channel_ChannelType Channel_ChannelType_ChannelType_MIN = Channel_ChannelType_web;
const Channel_ChannelType Channel_ChannelType_ChannelType_MAX = Channel_ChannelType_beacon;
const int Channel_ChannelType_ChannelType_ARRAYSIZE = Channel_ChannelType_ChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Channel_ChannelType_descriptor();
inline const ::std::string& Channel_ChannelType_Name(Channel_ChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Channel_ChannelType_descriptor(), value);
}
inline bool Channel_ChannelType_Parse(
    const ::std::string& name, Channel_ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Channel_ChannelType>(
    Channel_ChannelType_descriptor(), name, value);
}
enum Severity_Effect {
  Severity_Effect_NO_SERVICE = 1,
  Severity_Effect_REDUCED_SERVICE = 2,
  Severity_Effect_SIGNIFICANT_DELAYS = 3,
  Severity_Effect_DETOUR = 4,
  Severity_Effect_ADDITIONAL_SERVICE = 5,
  Severity_Effect_MODIFIED_SERVICE = 6,
  Severity_Effect_OTHER_EFFECT = 7,
  Severity_Effect_UNKNOWN_EFFECT = 8,
  Severity_Effect_STOP_MOVED = 9
};
bool Severity_Effect_IsValid(int value);
const Severity_Effect Severity_Effect_Effect_MIN = Severity_Effect_NO_SERVICE;
const Severity_Effect Severity_Effect_Effect_MAX = Severity_Effect_STOP_MOVED;
const int Severity_Effect_Effect_ARRAYSIZE = Severity_Effect_Effect_MAX + 1;

const ::google::protobuf::EnumDescriptor* Severity_Effect_descriptor();
inline const ::std::string& Severity_Effect_Name(Severity_Effect value) {
  return ::google::protobuf::internal::NameOfEnum(
    Severity_Effect_descriptor(), value);
}
inline bool Severity_Effect_Parse(
    const ::std::string& name, Severity_Effect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Severity_Effect>(
    Severity_Effect_descriptor(), name, value);
}
enum Properties_AdditionalInformation {
  Properties_AdditionalInformation_pick_up_only = 1,
  Properties_AdditionalInformation_drop_off_only = 2,
  Properties_AdditionalInformation_on_demand_transport = 3,
  Properties_AdditionalInformation_date_time_estimated = 4
};
bool Properties_AdditionalInformation_IsValid(int value);
const Properties_AdditionalInformation Properties_AdditionalInformation_AdditionalInformation_MIN = Properties_AdditionalInformation_pick_up_only;
const Properties_AdditionalInformation Properties_AdditionalInformation_AdditionalInformation_MAX = Properties_AdditionalInformation_date_time_estimated;
const int Properties_AdditionalInformation_AdditionalInformation_ARRAYSIZE = Properties_AdditionalInformation_AdditionalInformation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Properties_AdditionalInformation_descriptor();
inline const ::std::string& Properties_AdditionalInformation_Name(Properties_AdditionalInformation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Properties_AdditionalInformation_descriptor(), value);
}
inline bool Properties_AdditionalInformation_Parse(
    const ::std::string& name, Properties_AdditionalInformation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Properties_AdditionalInformation>(
    Properties_AdditionalInformation_descriptor(), name, value);
}
enum hasEquipments_Equipment {
  hasEquipments_Equipment_has_wheelchair_accessibility = 1,
  hasEquipments_Equipment_has_bike_accepted = 2,
  hasEquipments_Equipment_has_air_conditioned = 3,
  hasEquipments_Equipment_has_visual_announcement = 4,
  hasEquipments_Equipment_has_audible_announcement = 5,
  hasEquipments_Equipment_has_appropriate_escort = 6,
  hasEquipments_Equipment_has_appropriate_signage = 7,
  hasEquipments_Equipment_has_school_vehicle = 8,
  hasEquipments_Equipment_has_wheelchair_boarding = 9,
  hasEquipments_Equipment_has_sheltered = 10,
  hasEquipments_Equipment_has_elevator = 11,
  hasEquipments_Equipment_has_escalator = 12,
  hasEquipments_Equipment_has_bike_depot = 13
};
bool hasEquipments_Equipment_IsValid(int value);
const hasEquipments_Equipment hasEquipments_Equipment_Equipment_MIN = hasEquipments_Equipment_has_wheelchair_accessibility;
const hasEquipments_Equipment hasEquipments_Equipment_Equipment_MAX = hasEquipments_Equipment_has_bike_depot;
const int hasEquipments_Equipment_Equipment_ARRAYSIZE = hasEquipments_Equipment_Equipment_MAX + 1;

const ::google::protobuf::EnumDescriptor* hasEquipments_Equipment_descriptor();
inline const ::std::string& hasEquipments_Equipment_Name(hasEquipments_Equipment value) {
  return ::google::protobuf::internal::NameOfEnum(
    hasEquipments_Equipment_descriptor(), value);
}
inline bool hasEquipments_Equipment_Parse(
    const ::std::string& name, hasEquipments_Equipment* value) {
  return ::google::protobuf::internal::ParseNamedEnum<hasEquipments_Equipment>(
    hasEquipments_Equipment_descriptor(), name, value);
}
enum EquipmentDetails_EquipmentType {
  EquipmentDetails_EquipmentType_escalator = 1,
  EquipmentDetails_EquipmentType_elevator = 2
};
bool EquipmentDetails_EquipmentType_IsValid(int value);
const EquipmentDetails_EquipmentType EquipmentDetails_EquipmentType_EquipmentType_MIN = EquipmentDetails_EquipmentType_escalator;
const EquipmentDetails_EquipmentType EquipmentDetails_EquipmentType_EquipmentType_MAX = EquipmentDetails_EquipmentType_elevator;
const int EquipmentDetails_EquipmentType_EquipmentType_ARRAYSIZE = EquipmentDetails_EquipmentType_EquipmentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipmentDetails_EquipmentType_descriptor();
inline const ::std::string& EquipmentDetails_EquipmentType_Name(EquipmentDetails_EquipmentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipmentDetails_EquipmentType_descriptor(), value);
}
inline bool EquipmentDetails_EquipmentType_Parse(
    const ::std::string& name, EquipmentDetails_EquipmentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipmentDetails_EquipmentType>(
    EquipmentDetails_EquipmentType_descriptor(), name, value);
}
enum CurrentAvailability_EquipmentStatus {
  CurrentAvailability_EquipmentStatus_unknown = 0,
  CurrentAvailability_EquipmentStatus_available = 1,
  CurrentAvailability_EquipmentStatus_unavailable = 2
};
bool CurrentAvailability_EquipmentStatus_IsValid(int value);
const CurrentAvailability_EquipmentStatus CurrentAvailability_EquipmentStatus_EquipmentStatus_MIN = CurrentAvailability_EquipmentStatus_unknown;
const CurrentAvailability_EquipmentStatus CurrentAvailability_EquipmentStatus_EquipmentStatus_MAX = CurrentAvailability_EquipmentStatus_unavailable;
const int CurrentAvailability_EquipmentStatus_EquipmentStatus_ARRAYSIZE = CurrentAvailability_EquipmentStatus_EquipmentStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CurrentAvailability_EquipmentStatus_descriptor();
inline const ::std::string& CurrentAvailability_EquipmentStatus_Name(CurrentAvailability_EquipmentStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CurrentAvailability_EquipmentStatus_descriptor(), value);
}
inline bool CurrentAvailability_EquipmentStatus_Parse(
    const ::std::string& name, CurrentAvailability_EquipmentStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CurrentAvailability_EquipmentStatus>(
    CurrentAvailability_EquipmentStatus_descriptor(), name, value);
}
enum NavitiaType {
  LINE = 1,
  JOURNEY_PATTERN = 2,
  VEHICLE_JOURNEY = 3,
  STOP_POINT = 4,
  STOP_AREA = 5,
  NETWORK = 6,
  PHYSICAL_MODE = 7,
  COMMERCIAL_MODE = 8,
  CONNECTION = 9,
  JOURNEY_PATTERN_POINT = 10,
  COMPANY = 11,
  ROUTE = 12,
  POI = 13,
  CONTRIBUTOR = 16,
  ADDRESS = 18,
  POITYPE = 23,
  ADMINISTRATIVE_REGION = 22,
  CALENDAR = 25,
  LINE_GROUP = 26,
  IMPACT = 27,
  DATASET = 28,
  TRIP = 29
};
bool NavitiaType_IsValid(int value);
const NavitiaType NavitiaType_MIN = LINE;
const NavitiaType NavitiaType_MAX = TRIP;
const int NavitiaType_ARRAYSIZE = NavitiaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavitiaType_descriptor();
inline const ::std::string& NavitiaType_Name(NavitiaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavitiaType_descriptor(), value);
}
inline bool NavitiaType_Parse(
    const ::std::string& name, NavitiaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavitiaType>(
    NavitiaType_descriptor(), name, value);
}
enum API {
  places = 1,
  PTREFERENTIAL = 2,
  PLANNER = 4,
  places_nearby = 6,
  STATUS = 7,
  NEXT_DEPARTURES = 8,
  NEXT_ARRIVALS = 9,
  DEPARTURE_BOARDS = 10,
  ROUTE_SCHEDULES = 11,
  ISOCHRONE = 13,
  METADATAS = 14,
  place_uri = 15,
  UNKNOWN_API = 16,
  traffic_reports = 26,
  calendars = 18,
  NMPLANNER = 19,
  pt_objects = 20,
  place_code = 21,
  disruptions = 25,
  nearest_stop_points = 27,
  pt_planner = 28,
  graphical_isochrone = 29,
  geo_status = 30,
  car_co2_emission = 31,
  direct_path = 32,
  heat_map = 33,
  street_network_routing_matrix = 34,
  odt_stop_points = 35,
  matching_routes = 36,
  line_reports = 37,
  equipment_reports = 38,
  terminus_schedules = 39
};
bool API_IsValid(int value);
const API API_MIN = places;
const API API_MAX = terminus_schedules;
const int API_ARRAYSIZE = API_MAX + 1;

const ::google::protobuf::EnumDescriptor* API_descriptor();
inline const ::std::string& API_Name(API value) {
  return ::google::protobuf::internal::NameOfEnum(
    API_descriptor(), value);
}
inline bool API_Parse(
    const ::std::string& name, API* value) {
  return ::google::protobuf::internal::ParseNamedEnum<API>(
    API_descriptor(), name, value);
}
enum ResponseStatus {
  none = 0,
  no_departure_this_day = 1,
  no_active_mode_this_day = 2,
  no_active_circulation_this_day = 3,
  terminus = 6,
  date_out_of_bound = 7,
  partial_terminus = 8,
  ok = 9,
  active_disruption = 10
};
bool ResponseStatus_IsValid(int value);
const ResponseStatus ResponseStatus_MIN = none;
const ResponseStatus ResponseStatus_MAX = active_disruption;
const int ResponseStatus_ARRAYSIZE = ResponseStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseStatus_descriptor();
inline const ::std::string& ResponseStatus_Name(ResponseStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseStatus_descriptor(), value);
}
inline bool ResponseStatus_Parse(
    const ::std::string& name, ResponseStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseStatus>(
    ResponseStatus_descriptor(), name, value);
}
enum ActiveStatus {
  past = 0,
  active = 1,
  future = 2
};
bool ActiveStatus_IsValid(int value);
const ActiveStatus ActiveStatus_MIN = past;
const ActiveStatus ActiveStatus_MAX = future;
const int ActiveStatus_ARRAYSIZE = ActiveStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActiveStatus_descriptor();
inline const ::std::string& ActiveStatus_Name(ActiveStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActiveStatus_descriptor(), value);
}
inline bool ActiveStatus_Parse(
    const ::std::string& name, ActiveStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActiveStatus>(
    ActiveStatus_descriptor(), name, value);
}
enum MessageStatus {
  information = 0,
  warning = 1,
  disrupt = 2
};
bool MessageStatus_IsValid(int value);
const MessageStatus MessageStatus_MIN = information;
const MessageStatus MessageStatus_MAX = disrupt;
const int MessageStatus_ARRAYSIZE = MessageStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageStatus_descriptor();
inline const ::std::string& MessageStatus_Name(MessageStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageStatus_descriptor(), value);
}
inline bool MessageStatus_Parse(
    const ::std::string& name, MessageStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageStatus>(
    MessageStatus_descriptor(), name, value);
}
enum StopTimeUpdateStatus {
  DELAYED = 0,
  ADDED = 1,
  DELETED = 2,
  UNCHANGED = 3
};
bool StopTimeUpdateStatus_IsValid(int value);
const StopTimeUpdateStatus StopTimeUpdateStatus_MIN = DELAYED;
const StopTimeUpdateStatus StopTimeUpdateStatus_MAX = UNCHANGED;
const int StopTimeUpdateStatus_ARRAYSIZE = StopTimeUpdateStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* StopTimeUpdateStatus_descriptor();
inline const ::std::string& StopTimeUpdateStatus_Name(StopTimeUpdateStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    StopTimeUpdateStatus_descriptor(), value);
}
inline bool StopTimeUpdateStatus_Parse(
    const ::std::string& name, StopTimeUpdateStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopTimeUpdateStatus>(
    StopTimeUpdateStatus_descriptor(), name, value);
}
enum OdtLevel {
  scheduled = 0,
  with_stops = 1,
  zonal = 2,
  all = 3
};
bool OdtLevel_IsValid(int value);
const OdtLevel OdtLevel_MIN = scheduled;
const OdtLevel OdtLevel_MAX = all;
const int OdtLevel_ARRAYSIZE = OdtLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* OdtLevel_descriptor();
inline const ::std::string& OdtLevel_Name(OdtLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    OdtLevel_descriptor(), value);
}
inline bool OdtLevel_Parse(
    const ::std::string& name, OdtLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OdtLevel>(
    OdtLevel_descriptor(), name, value);
}
enum RTLevel {
  BASE_SCHEDULE = 1,
  ADAPTED_SCHEDULE = 2,
  REALTIME = 3
};
bool RTLevel_IsValid(int value);
const RTLevel RTLevel_MIN = BASE_SCHEDULE;
const RTLevel RTLevel_MAX = REALTIME;
const int RTLevel_ARRAYSIZE = RTLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* RTLevel_descriptor();
inline const ::std::string& RTLevel_Name(RTLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    RTLevel_descriptor(), value);
}
inline bool RTLevel_Parse(
    const ::std::string& name, RTLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RTLevel>(
    RTLevel_descriptor(), name, value);
}
enum ExceptionType {
  Add = 0,
  Remove = 1
};
bool ExceptionType_IsValid(int value);
const ExceptionType ExceptionType_MIN = Add;
const ExceptionType ExceptionType_MAX = Remove;
const int ExceptionType_ARRAYSIZE = ExceptionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExceptionType_descriptor();
inline const ::std::string& ExceptionType_Name(ExceptionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExceptionType_descriptor(), value);
}
inline bool ExceptionType_Parse(
    const ::std::string& name, ExceptionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExceptionType>(
    ExceptionType_descriptor(), name, value);
}
// ===================================================================

class Code : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Code) */ {
 public:
  Code();
  virtual ~Code();

  Code(const Code& from);

  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Code& default_instance();

  void Swap(Code* other);

  // implements Message ----------------------------------------------

  inline Code* New() const { return New(NULL); }

  Code* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Code& from);
  void MergeFrom(const Code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Code* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Code)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Code* default_instance_;
};
// -------------------------------------------------------------------

class Period : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Period) */ {
 public:
  Period();
  virtual ~Period();

  Period(const Period& from);

  inline Period& operator=(const Period& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Period& default_instance();

  void Swap(Period* other);

  // implements Message ----------------------------------------------

  inline Period* New() const { return New(NULL); }

  Period* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Period& from);
  void MergeFrom(const Period& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Period* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::uint64 begin() const;
  void set_begin(::google::protobuf::uint64 value);

  // optional uint64 end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::uint64 end() const;
  void set_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Period)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 begin_;
  ::google::protobuf::uint64 end_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Period* default_instance_;
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  void Swap(Property* other);

  // implements Message ----------------------------------------------

  inline Property* New() const { return New(NULL); }

  Property* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Property)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Property* default_instance_;
};
// -------------------------------------------------------------------

class Channel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Channel) */ {
 public:
  Channel();
  virtual ~Channel();

  Channel(const Channel& from);

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Channel& default_instance();

  void Swap(Channel* other);

  // implements Message ----------------------------------------------

  inline Channel* New() const { return New(NULL); }

  Channel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Channel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Channel_ChannelType ChannelType;
  static const ChannelType web =
    Channel_ChannelType_web;
  static const ChannelType sms =
    Channel_ChannelType_sms;
  static const ChannelType email =
    Channel_ChannelType_email;
  static const ChannelType mobile =
    Channel_ChannelType_mobile;
  static const ChannelType notification =
    Channel_ChannelType_notification;
  static const ChannelType twitter =
    Channel_ChannelType_twitter;
  static const ChannelType facebook =
    Channel_ChannelType_facebook;
  static const ChannelType unknown_type =
    Channel_ChannelType_unknown_type;
  static const ChannelType title =
    Channel_ChannelType_title;
  static const ChannelType beacon =
    Channel_ChannelType_beacon;
  static inline bool ChannelType_IsValid(int value) {
    return Channel_ChannelType_IsValid(value);
  }
  static const ChannelType ChannelType_MIN =
    Channel_ChannelType_ChannelType_MIN;
  static const ChannelType ChannelType_MAX =
    Channel_ChannelType_ChannelType_MAX;
  static const int ChannelType_ARRAYSIZE =
    Channel_ChannelType_ChannelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChannelType_descriptor() {
    return Channel_ChannelType_descriptor();
  }
  static inline const ::std::string& ChannelType_Name(ChannelType value) {
    return Channel_ChannelType_Name(value);
  }
  static inline bool ChannelType_Parse(const ::std::string& name,
      ChannelType* value) {
    return Channel_ChannelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string content_type = 3;
  bool has_content_type() const;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 3;
  const ::std::string& content_type() const;
  void set_content_type(const ::std::string& value);
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  ::std::string* mutable_content_type();
  ::std::string* release_content_type();
  void set_allocated_content_type(::std::string* content_type);

  // repeated .pbnavitia.Channel.ChannelType channel_types = 4;
  int channel_types_size() const;
  void clear_channel_types();
  static const int kChannelTypesFieldNumber = 4;
  ::pbnavitia::Channel_ChannelType channel_types(int index) const;
  void set_channel_types(int index, ::pbnavitia::Channel_ChannelType value);
  void add_channel_types(::pbnavitia::Channel_ChannelType value);
  const ::google::protobuf::RepeatedField<int>& channel_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_channel_types();

  // @@protoc_insertion_point(class_scope:pbnavitia.Channel)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_content_type();
  inline void clear_has_content_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_type_;
  ::google::protobuf::RepeatedField<int> channel_types_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Channel* default_instance_;
};
// -------------------------------------------------------------------

class MessageContent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.MessageContent) */ {
 public:
  MessageContent();
  virtual ~MessageContent();

  MessageContent(const MessageContent& from);

  inline MessageContent& operator=(const MessageContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageContent& default_instance();

  void Swap(MessageContent* other);

  // implements Message ----------------------------------------------

  inline MessageContent* New() const { return New(NULL); }

  MessageContent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageContent& from);
  void MergeFrom(const MessageContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional .pbnavitia.Channel channel = 4;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  const ::pbnavitia::Channel& channel() const;
  ::pbnavitia::Channel* mutable_channel();
  ::pbnavitia::Channel* release_channel();
  void set_allocated_channel(::pbnavitia::Channel* channel);

  // @@protoc_insertion_point(class_scope:pbnavitia.MessageContent)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::pbnavitia::Channel* channel_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static MessageContent* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional uint64 start_application_date = 4;
  bool has_start_application_date() const;
  void clear_start_application_date();
  static const int kStartApplicationDateFieldNumber = 4;
  ::google::protobuf::uint64 start_application_date() const;
  void set_start_application_date(::google::protobuf::uint64 value);

  // optional uint64 end_application_date = 5;
  bool has_end_application_date() const;
  void clear_end_application_date();
  static const int kEndApplicationDateFieldNumber = 5;
  ::google::protobuf::uint64 end_application_date() const;
  void set_end_application_date(::google::protobuf::uint64 value);

  // optional string start_application_daily_hour = 6;
  bool has_start_application_daily_hour() const;
  void clear_start_application_daily_hour();
  static const int kStartApplicationDailyHourFieldNumber = 6;
  const ::std::string& start_application_daily_hour() const;
  void set_start_application_daily_hour(const ::std::string& value);
  void set_start_application_daily_hour(const char* value);
  void set_start_application_daily_hour(const char* value, size_t size);
  ::std::string* mutable_start_application_daily_hour();
  ::std::string* release_start_application_daily_hour();
  void set_allocated_start_application_daily_hour(::std::string* start_application_daily_hour);

  // optional string end_application_daily_hour = 7;
  bool has_end_application_daily_hour() const;
  void clear_end_application_daily_hour();
  static const int kEndApplicationDailyHourFieldNumber = 7;
  const ::std::string& end_application_daily_hour() const;
  void set_end_application_daily_hour(const ::std::string& value);
  void set_end_application_daily_hour(const char* value);
  void set_end_application_daily_hour(const char* value, size_t size);
  ::std::string* mutable_end_application_daily_hour();
  ::std::string* release_end_application_daily_hour();
  void set_allocated_end_application_daily_hour(::std::string* end_application_daily_hour);

  // optional .pbnavitia.MessageStatus message_status = 8;
  bool has_message_status() const;
  void clear_message_status();
  static const int kMessageStatusFieldNumber = 8;
  ::pbnavitia::MessageStatus message_status() const;
  void set_message_status(::pbnavitia::MessageStatus value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Message)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_start_application_date();
  inline void clear_has_start_application_date();
  inline void set_has_end_application_date();
  inline void clear_has_end_application_date();
  inline void set_has_start_application_daily_hour();
  inline void clear_has_start_application_daily_hour();
  inline void set_has_end_application_daily_hour();
  inline void clear_has_end_application_daily_hour();
  inline void set_has_message_status();
  inline void clear_has_message_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::uint64 start_application_date_;
  ::google::protobuf::uint64 end_application_date_;
  ::google::protobuf::internal::ArenaStringPtr start_application_daily_hour_;
  ::google::protobuf::internal::ArenaStringPtr end_application_daily_hour_;
  int message_status_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class Severity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Severity) */ {
 public:
  Severity();
  virtual ~Severity();

  Severity(const Severity& from);

  inline Severity& operator=(const Severity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Severity& default_instance();

  void Swap(Severity* other);

  // implements Message ----------------------------------------------

  inline Severity* New() const { return New(NULL); }

  Severity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Severity& from);
  void MergeFrom(const Severity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Severity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Severity_Effect Effect;
  static const Effect NO_SERVICE =
    Severity_Effect_NO_SERVICE;
  static const Effect REDUCED_SERVICE =
    Severity_Effect_REDUCED_SERVICE;
  static const Effect SIGNIFICANT_DELAYS =
    Severity_Effect_SIGNIFICANT_DELAYS;
  static const Effect DETOUR =
    Severity_Effect_DETOUR;
  static const Effect ADDITIONAL_SERVICE =
    Severity_Effect_ADDITIONAL_SERVICE;
  static const Effect MODIFIED_SERVICE =
    Severity_Effect_MODIFIED_SERVICE;
  static const Effect OTHER_EFFECT =
    Severity_Effect_OTHER_EFFECT;
  static const Effect UNKNOWN_EFFECT =
    Severity_Effect_UNKNOWN_EFFECT;
  static const Effect STOP_MOVED =
    Severity_Effect_STOP_MOVED;
  static inline bool Effect_IsValid(int value) {
    return Severity_Effect_IsValid(value);
  }
  static const Effect Effect_MIN =
    Severity_Effect_Effect_MIN;
  static const Effect Effect_MAX =
    Severity_Effect_Effect_MAX;
  static const int Effect_ARRAYSIZE =
    Severity_Effect_Effect_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Effect_descriptor() {
    return Severity_Effect_descriptor();
  }
  static inline const ::std::string& Effect_Name(Effect value) {
    return Severity_Effect_Name(value);
  }
  static inline bool Effect_Parse(const ::std::string& name,
      Effect* value) {
    return Severity_Effect_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string color = 2;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 2;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional .pbnavitia.Severity.Effect effect = 3 [default = UNKNOWN_EFFECT];
  bool has_effect() const;
  void clear_effect();
  static const int kEffectFieldNumber = 3;
  ::pbnavitia::Severity_Effect effect() const;
  void set_effect(::pbnavitia::Severity_Effect value);

  // optional int32 priority = 4;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 4;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Severity)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  int effect_;
  ::google::protobuf::int32 priority_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Severity* default_instance_;
};
// -------------------------------------------------------------------

class StopTimeUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StopTimeUpdate) */ {
 public:
  StopTimeUpdate();
  virtual ~StopTimeUpdate();

  StopTimeUpdate(const StopTimeUpdate& from);

  inline StopTimeUpdate& operator=(const StopTimeUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopTimeUpdate& default_instance();

  void Swap(StopTimeUpdate* other);

  // implements Message ----------------------------------------------

  inline StopTimeUpdate* New() const { return New(NULL); }

  StopTimeUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopTimeUpdate& from);
  void MergeFrom(const StopTimeUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopTimeUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.StopTime amended_stop_time = 1;
  bool has_amended_stop_time() const;
  void clear_amended_stop_time();
  static const int kAmendedStopTimeFieldNumber = 1;
  const ::pbnavitia::StopTime& amended_stop_time() const;
  ::pbnavitia::StopTime* mutable_amended_stop_time();
  ::pbnavitia::StopTime* release_amended_stop_time();
  void set_allocated_amended_stop_time(::pbnavitia::StopTime* amended_stop_time);

  // optional .pbnavitia.StopTime base_stop_time = 2;
  bool has_base_stop_time() const;
  void clear_base_stop_time();
  static const int kBaseStopTimeFieldNumber = 2;
  const ::pbnavitia::StopTime& base_stop_time() const;
  ::pbnavitia::StopTime* mutable_base_stop_time();
  ::pbnavitia::StopTime* release_base_stop_time();
  void set_allocated_base_stop_time(::pbnavitia::StopTime* base_stop_time);

  // optional string cause = 3;
  bool has_cause() const;
  void clear_cause();
  static const int kCauseFieldNumber = 3;
  const ::std::string& cause() const;
  void set_cause(const ::std::string& value);
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  ::std::string* mutable_cause();
  ::std::string* release_cause();
  void set_allocated_cause(::std::string* cause);

  // optional .pbnavitia.StopTimeUpdateStatus effect = 4;
  bool has_effect() const;
  void clear_effect();
  static const int kEffectFieldNumber = 4;
  ::pbnavitia::StopTimeUpdateStatus effect() const;
  void set_effect(::pbnavitia::StopTimeUpdateStatus value);

  // optional .pbnavitia.StopPoint stop_point = 5;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 5;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // optional .pbnavitia.StopTimeUpdateStatus departure_status = 6;
  bool has_departure_status() const;
  void clear_departure_status();
  static const int kDepartureStatusFieldNumber = 6;
  ::pbnavitia::StopTimeUpdateStatus departure_status() const;
  void set_departure_status(::pbnavitia::StopTimeUpdateStatus value);

  // optional .pbnavitia.StopTimeUpdateStatus arrival_status = 7;
  bool has_arrival_status() const;
  void clear_arrival_status();
  static const int kArrivalStatusFieldNumber = 7;
  ::pbnavitia::StopTimeUpdateStatus arrival_status() const;
  void set_arrival_status(::pbnavitia::StopTimeUpdateStatus value);

  // optional bool is_detour = 8;
  bool has_is_detour() const;
  void clear_is_detour();
  static const int kIsDetourFieldNumber = 8;
  bool is_detour() const;
  void set_is_detour(bool value);

  // @@protoc_insertion_point(class_scope:pbnavitia.StopTimeUpdate)
 private:
  inline void set_has_amended_stop_time();
  inline void clear_has_amended_stop_time();
  inline void set_has_base_stop_time();
  inline void clear_has_base_stop_time();
  inline void set_has_cause();
  inline void clear_has_cause();
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_departure_status();
  inline void clear_has_departure_status();
  inline void set_has_arrival_status();
  inline void clear_has_arrival_status();
  inline void set_has_is_detour();
  inline void clear_has_is_detour();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::StopTime* amended_stop_time_;
  ::pbnavitia::StopTime* base_stop_time_;
  ::google::protobuf::internal::ArenaStringPtr cause_;
  ::pbnavitia::StopPoint* stop_point_;
  int effect_;
  int departure_status_;
  int arrival_status_;
  bool is_detour_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static StopTimeUpdate* default_instance_;
};
// -------------------------------------------------------------------

class LineSectionImpact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.LineSectionImpact) */ {
 public:
  LineSectionImpact();
  virtual ~LineSectionImpact();

  LineSectionImpact(const LineSectionImpact& from);

  inline LineSectionImpact& operator=(const LineSectionImpact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineSectionImpact& default_instance();

  void Swap(LineSectionImpact* other);

  // implements Message ----------------------------------------------

  inline LineSectionImpact* New() const { return New(NULL); }

  LineSectionImpact* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineSectionImpact& from);
  void MergeFrom(const LineSectionImpact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineSectionImpact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.PtObject from = 1;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::pbnavitia::PtObject& from() const;
  ::pbnavitia::PtObject* mutable_from();
  ::pbnavitia::PtObject* release_from();
  void set_allocated_from(::pbnavitia::PtObject* from);

  // optional .pbnavitia.PtObject to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::pbnavitia::PtObject& to() const;
  ::pbnavitia::PtObject* mutable_to();
  ::pbnavitia::PtObject* release_to();
  void set_allocated_to(::pbnavitia::PtObject* to);

  // repeated .pbnavitia.Route routes = 3;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 3;
  const ::pbnavitia::Route& routes(int index) const;
  ::pbnavitia::Route* mutable_routes(int index);
  ::pbnavitia::Route* add_routes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
      mutable_routes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
      routes() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.LineSectionImpact)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::PtObject* from_;
  ::pbnavitia::PtObject* to_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route > routes_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static LineSectionImpact* default_instance_;
};
// -------------------------------------------------------------------

class ImpactedObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.ImpactedObject) */ {
 public:
  ImpactedObject();
  virtual ~ImpactedObject();

  ImpactedObject(const ImpactedObject& from);

  inline ImpactedObject& operator=(const ImpactedObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImpactedObject& default_instance();

  void Swap(ImpactedObject* other);

  // implements Message ----------------------------------------------

  inline ImpactedObject* New() const { return New(NULL); }

  ImpactedObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImpactedObject& from);
  void MergeFrom(const ImpactedObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImpactedObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.PtObject pt_object = 1;
  bool has_pt_object() const;
  void clear_pt_object();
  static const int kPtObjectFieldNumber = 1;
  const ::pbnavitia::PtObject& pt_object() const;
  ::pbnavitia::PtObject* mutable_pt_object();
  ::pbnavitia::PtObject* release_pt_object();
  void set_allocated_pt_object(::pbnavitia::PtObject* pt_object);

  // repeated .pbnavitia.StopTimeUpdate impacted_stops = 2;
  int impacted_stops_size() const;
  void clear_impacted_stops();
  static const int kImpactedStopsFieldNumber = 2;
  const ::pbnavitia::StopTimeUpdate& impacted_stops(int index) const;
  ::pbnavitia::StopTimeUpdate* mutable_impacted_stops(int index);
  ::pbnavitia::StopTimeUpdate* add_impacted_stops();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTimeUpdate >*
      mutable_impacted_stops();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTimeUpdate >&
      impacted_stops() const;

  // optional .pbnavitia.LineSectionImpact impacted_section = 3;
  bool has_impacted_section() const;
  void clear_impacted_section();
  static const int kImpactedSectionFieldNumber = 3;
  const ::pbnavitia::LineSectionImpact& impacted_section() const;
  ::pbnavitia::LineSectionImpact* mutable_impacted_section();
  ::pbnavitia::LineSectionImpact* release_impacted_section();
  void set_allocated_impacted_section(::pbnavitia::LineSectionImpact* impacted_section);

  // @@protoc_insertion_point(class_scope:pbnavitia.ImpactedObject)
 private:
  inline void set_has_pt_object();
  inline void clear_has_pt_object();
  inline void set_has_impacted_section();
  inline void clear_has_impacted_section();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::PtObject* pt_object_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTimeUpdate > impacted_stops_;
  ::pbnavitia::LineSectionImpact* impacted_section_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static ImpactedObject* default_instance_;
};
// -------------------------------------------------------------------

class DisruptionProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.DisruptionProperty) */ {
 public:
  DisruptionProperty();
  virtual ~DisruptionProperty();

  DisruptionProperty(const DisruptionProperty& from);

  inline DisruptionProperty& operator=(const DisruptionProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisruptionProperty& default_instance();

  void Swap(DisruptionProperty* other);

  // implements Message ----------------------------------------------

  inline DisruptionProperty* New() const { return New(NULL); }

  DisruptionProperty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisruptionProperty& from);
  void MergeFrom(const DisruptionProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisruptionProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pbnavitia.DisruptionProperty)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static DisruptionProperty* default_instance_;
};
// -------------------------------------------------------------------

class Impact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Impact) */ {
 public:
  Impact();
  virtual ~Impact();

  Impact(const Impact& from);

  inline Impact& operator=(const Impact& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Impact& default_instance();

  void Swap(Impact* other);

  // implements Message ----------------------------------------------

  inline Impact* New() const { return New(NULL); }

  Impact* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Impact& from);
  void MergeFrom(const Impact& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Impact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string disruption_uri = 2;
  bool has_disruption_uri() const;
  void clear_disruption_uri();
  static const int kDisruptionUriFieldNumber = 2;
  const ::std::string& disruption_uri() const;
  void set_disruption_uri(const ::std::string& value);
  void set_disruption_uri(const char* value);
  void set_disruption_uri(const char* value, size_t size);
  ::std::string* mutable_disruption_uri();
  ::std::string* release_disruption_uri();
  void set_allocated_disruption_uri(::std::string* disruption_uri);

  // repeated .pbnavitia.Period application_periods = 10;
  int application_periods_size() const;
  void clear_application_periods();
  static const int kApplicationPeriodsFieldNumber = 10;
  const ::pbnavitia::Period& application_periods(int index) const;
  ::pbnavitia::Period* mutable_application_periods(int index);
  ::pbnavitia::Period* add_application_periods();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >*
      mutable_application_periods();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >&
      application_periods() const;

  // optional .pbnavitia.ActiveStatus status = 11;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 11;
  ::pbnavitia::ActiveStatus status() const;
  void set_status(::pbnavitia::ActiveStatus value);

  // optional uint64 updated_at = 12;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 12;
  ::google::protobuf::uint64 updated_at() const;
  void set_updated_at(::google::protobuf::uint64 value);

  // repeated string tags = 13;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 13;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional string cause = 14;
  bool has_cause() const;
  void clear_cause();
  static const int kCauseFieldNumber = 14;
  const ::std::string& cause() const;
  void set_cause(const ::std::string& value);
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  ::std::string* mutable_cause();
  ::std::string* release_cause();
  void set_allocated_cause(::std::string* cause);

  // repeated .pbnavitia.MessageContent messages = 15;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 15;
  const ::pbnavitia::MessageContent& messages(int index) const;
  ::pbnavitia::MessageContent* mutable_messages(int index);
  ::pbnavitia::MessageContent* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::MessageContent >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::MessageContent >&
      messages() const;

  // optional .pbnavitia.Severity severity = 16;
  bool has_severity() const;
  void clear_severity();
  static const int kSeverityFieldNumber = 16;
  const ::pbnavitia::Severity& severity() const;
  ::pbnavitia::Severity* mutable_severity();
  ::pbnavitia::Severity* release_severity();
  void set_allocated_severity(::pbnavitia::Severity* severity);

  // optional string contributor = 17;
  bool has_contributor() const;
  void clear_contributor();
  static const int kContributorFieldNumber = 17;
  const ::std::string& contributor() const;
  void set_contributor(const ::std::string& value);
  void set_contributor(const char* value);
  void set_contributor(const char* value, size_t size);
  ::std::string* mutable_contributor();
  ::std::string* release_contributor();
  void set_allocated_contributor(::std::string* contributor);

  // repeated .pbnavitia.ImpactedObject impacted_objects = 18;
  int impacted_objects_size() const;
  void clear_impacted_objects();
  static const int kImpactedObjectsFieldNumber = 18;
  const ::pbnavitia::ImpactedObject& impacted_objects(int index) const;
  ::pbnavitia::ImpactedObject* mutable_impacted_objects(int index);
  ::pbnavitia::ImpactedObject* add_impacted_objects();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ImpactedObject >*
      mutable_impacted_objects();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ImpactedObject >&
      impacted_objects() const;

  // optional string category = 19;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 19;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // repeated .pbnavitia.DisruptionProperty properties = 20;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 20;
  const ::pbnavitia::DisruptionProperty& properties(int index) const;
  ::pbnavitia::DisruptionProperty* mutable_properties(int index);
  ::pbnavitia::DisruptionProperty* add_properties();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::DisruptionProperty >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::DisruptionProperty >&
      properties() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.Impact)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_disruption_uri();
  inline void clear_has_disruption_uri();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_updated_at();
  inline void clear_has_updated_at();
  inline void set_has_cause();
  inline void clear_has_cause();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_contributor();
  inline void clear_has_contributor();
  inline void set_has_category();
  inline void clear_has_category();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr disruption_uri_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period > application_periods_;
  ::google::protobuf::uint64 updated_at_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr cause_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::MessageContent > messages_;
  ::pbnavitia::Severity* severity_;
  ::google::protobuf::internal::ArenaStringPtr contributor_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::ImpactedObject > impacted_objects_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::DisruptionProperty > properties_;
  int status_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Impact* default_instance_;
};
// -------------------------------------------------------------------

class GeographicalCoord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.GeographicalCoord) */ {
 public:
  GeographicalCoord();
  virtual ~GeographicalCoord();

  GeographicalCoord(const GeographicalCoord& from);

  inline GeographicalCoord& operator=(const GeographicalCoord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeographicalCoord& default_instance();

  void Swap(GeographicalCoord* other);

  // implements Message ----------------------------------------------

  inline GeographicalCoord* New() const { return New(NULL); }

  GeographicalCoord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeographicalCoord& from);
  void MergeFrom(const GeographicalCoord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeographicalCoord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double lon = 1;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 1;
  double lon() const;
  void set_lon(double value);

  // required double lat = 2;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  double lat() const;
  void set_lat(double value);

  // @@protoc_insertion_point(class_scope:pbnavitia.GeographicalCoord)
 private:
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_lat();
  inline void clear_has_lat();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lon_;
  double lat_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static GeographicalCoord* default_instance_;
};
// -------------------------------------------------------------------

class AdministrativeRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.AdministrativeRegion) */ {
 public:
  AdministrativeRegion();
  virtual ~AdministrativeRegion();

  AdministrativeRegion(const AdministrativeRegion& from);

  inline AdministrativeRegion& operator=(const AdministrativeRegion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdministrativeRegion& default_instance();

  void Swap(AdministrativeRegion* other);

  // implements Message ----------------------------------------------

  inline AdministrativeRegion* New() const { return New(NULL); }

  AdministrativeRegion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdministrativeRegion& from);
  void MergeFrom(const AdministrativeRegion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdministrativeRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 2;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string zip_code = 4;
  bool has_zip_code() const;
  void clear_zip_code();
  static const int kZipCodeFieldNumber = 4;
  const ::std::string& zip_code() const;
  void set_zip_code(const ::std::string& value);
  void set_zip_code(const char* value);
  void set_zip_code(const char* value, size_t size);
  ::std::string* mutable_zip_code();
  ::std::string* release_zip_code();
  void set_allocated_zip_code(::std::string* zip_code);

  // optional int32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional .pbnavitia.GeographicalCoord coord = 6;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 6;
  const ::pbnavitia::GeographicalCoord& coord() const;
  ::pbnavitia::GeographicalCoord* mutable_coord();
  ::pbnavitia::GeographicalCoord* release_coord();
  void set_allocated_coord(::pbnavitia::GeographicalCoord* coord);

  // optional string label = 7;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 7;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional string insee = 8;
  bool has_insee() const;
  void clear_insee();
  static const int kInseeFieldNumber = 8;
  const ::std::string& insee() const;
  void set_insee(const ::std::string& value);
  void set_insee(const char* value);
  void set_insee(const char* value, size_t size);
  ::std::string* mutable_insee();
  ::std::string* release_insee();
  void set_allocated_insee(::std::string* insee);

  // repeated .pbnavitia.StopArea main_stop_areas = 9;
  int main_stop_areas_size() const;
  void clear_main_stop_areas();
  static const int kMainStopAreasFieldNumber = 9;
  const ::pbnavitia::StopArea& main_stop_areas(int index) const;
  ::pbnavitia::StopArea* mutable_main_stop_areas(int index);
  ::pbnavitia::StopArea* add_main_stop_areas();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
      mutable_main_stop_areas();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
      main_stop_areas() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.AdministrativeRegion)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zip_code();
  inline void clear_has_zip_code();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_insee();
  inline void clear_has_insee();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr zip_code_;
  ::pbnavitia::GeographicalCoord* coord_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr insee_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea > main_stop_areas_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static AdministrativeRegion* default_instance_;
};
// -------------------------------------------------------------------

class Comment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Comment) */ {
 public:
  Comment();
  virtual ~Comment();

  Comment(const Comment& from);

  inline Comment& operator=(const Comment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Comment& default_instance();

  void Swap(Comment* other);

  // implements Message ----------------------------------------------

  inline Comment* New() const { return New(NULL); }

  Comment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Comment& from);
  void MergeFrom(const Comment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Comment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:pbnavitia.Comment)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Comment* default_instance_;
};
// -------------------------------------------------------------------

class StopArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StopArea) */ {
 public:
  StopArea();
  virtual ~StopArea();

  StopArea(const StopArea& from);

  inline StopArea& operator=(const StopArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopArea& default_instance();

  void Swap(StopArea* other);

  // implements Message ----------------------------------------------

  inline StopArea* New() const { return New(NULL); }

  StopArea* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopArea& from);
  void MergeFrom(const StopArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string uri = 4;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional .pbnavitia.GeographicalCoord coord = 5;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 5;
  const ::pbnavitia::GeographicalCoord& coord() const;
  ::pbnavitia::GeographicalCoord* mutable_coord();
  ::pbnavitia::GeographicalCoord* release_coord();
  void set_allocated_coord(::pbnavitia::GeographicalCoord* coord);

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  int administrative_regions_size() const;
  void clear_administrative_regions();
  static const int kAdministrativeRegionsFieldNumber = 10;
  const ::pbnavitia::AdministrativeRegion& administrative_regions(int index) const;
  ::pbnavitia::AdministrativeRegion* mutable_administrative_regions(int index);
  ::pbnavitia::AdministrativeRegion* add_administrative_regions();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
      mutable_administrative_regions();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
      administrative_regions() const;

  // repeated .pbnavitia.StopPoint stop_points = 8;
  int stop_points_size() const;
  void clear_stop_points();
  static const int kStopPointsFieldNumber = 8;
  const ::pbnavitia::StopPoint& stop_points(int index) const;
  ::pbnavitia::StopPoint* mutable_stop_points(int index);
  ::pbnavitia::StopPoint* add_stop_points();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
      mutable_stop_points();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
      stop_points() const;

  // repeated .pbnavitia.Message messages = 9;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 9;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 25;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 25;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // repeated .pbnavitia.Comment comments = 23;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 23;
  const ::pbnavitia::Comment& comments(int index) const;
  ::pbnavitia::Comment* mutable_comments(int index);
  ::pbnavitia::Comment* add_comments();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
      mutable_comments();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
      comments() const;

  // repeated .pbnavitia.Code codes = 12;
  int codes_size() const;
  void clear_codes();
  static const int kCodesFieldNumber = 12;
  const ::pbnavitia::Code& codes(int index) const;
  ::pbnavitia::Code* mutable_codes(int index);
  ::pbnavitia::Code* add_codes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
      mutable_codes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
      codes() const;

  // optional string timezone = 15;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 15;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // optional string label = 16;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 16;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // repeated .pbnavitia.CommercialMode commercial_modes = 21;
  int commercial_modes_size() const;
  void clear_commercial_modes();
  static const int kCommercialModesFieldNumber = 21;
  const ::pbnavitia::CommercialMode& commercial_modes(int index) const;
  ::pbnavitia::CommercialMode* mutable_commercial_modes(int index);
  ::pbnavitia::CommercialMode* add_commercial_modes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
      mutable_commercial_modes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
      commercial_modes() const;

  // repeated .pbnavitia.PhysicalMode physical_modes = 22;
  int physical_modes_size() const;
  void clear_physical_modes();
  static const int kPhysicalModesFieldNumber = 22;
  const ::pbnavitia::PhysicalMode& physical_modes(int index) const;
  ::pbnavitia::PhysicalMode* mutable_physical_modes(int index);
  ::pbnavitia::PhysicalMode* add_physical_modes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
      mutable_physical_modes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
      physical_modes() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.StopArea)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_timezone();
  inline void clear_has_timezone();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::pbnavitia::GeographicalCoord* coord_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion > administrative_regions_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint > stop_points_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment > comments_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code > codes_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode > commercial_modes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode > physical_modes_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static StopArea* default_instance_;
};
// -------------------------------------------------------------------

class StopPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StopPoint) */ {
 public:
  StopPoint();
  virtual ~StopPoint();

  StopPoint(const StopPoint& from);

  inline StopPoint& operator=(const StopPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopPoint& default_instance();

  void Swap(StopPoint* other);

  // implements Message ----------------------------------------------

  inline StopPoint* New() const { return New(NULL); }

  StopPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopPoint& from);
  void MergeFrom(const StopPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  int administrative_regions_size() const;
  void clear_administrative_regions();
  static const int kAdministrativeRegionsFieldNumber = 10;
  const ::pbnavitia::AdministrativeRegion& administrative_regions(int index) const;
  ::pbnavitia::AdministrativeRegion* mutable_administrative_regions(int index);
  ::pbnavitia::AdministrativeRegion* add_administrative_regions();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
      mutable_administrative_regions();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
      administrative_regions() const;

  // optional string uri = 5;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 5;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional .pbnavitia.GeographicalCoord coord = 6;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 6;
  const ::pbnavitia::GeographicalCoord& coord() const;
  ::pbnavitia::GeographicalCoord* mutable_coord();
  ::pbnavitia::GeographicalCoord* release_coord();
  void set_allocated_coord(::pbnavitia::GeographicalCoord* coord);

  // optional .pbnavitia.StopArea stop_area = 7;
  bool has_stop_area() const;
  void clear_stop_area();
  static const int kStopAreaFieldNumber = 7;
  const ::pbnavitia::StopArea& stop_area() const;
  ::pbnavitia::StopArea* mutable_stop_area();
  ::pbnavitia::StopArea* release_stop_area();
  void set_allocated_stop_area(::pbnavitia::StopArea* stop_area);

  // optional .pbnavitia.hasEquipments has_equipments = 8;
  bool has_has_equipments() const;
  void clear_has_equipments();
  static const int kHasEquipmentsFieldNumber = 8;
  const ::pbnavitia::hasEquipments& has_equipments() const;
  ::pbnavitia::hasEquipments* mutable_has_equipments();
  ::pbnavitia::hasEquipments* release_has_equipments();
  void set_allocated_has_equipments(::pbnavitia::hasEquipments* has_equipments);

  // repeated .pbnavitia.Message messages = 9;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 9;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 22;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 22;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // repeated .pbnavitia.Comment comments = 16;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 16;
  const ::pbnavitia::Comment& comments(int index) const;
  ::pbnavitia::Comment* mutable_comments(int index);
  ::pbnavitia::Comment* add_comments();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
      mutable_comments();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
      comments() const;

  // repeated .pbnavitia.Code codes = 12;
  int codes_size() const;
  void clear_codes();
  static const int kCodesFieldNumber = 12;
  const ::pbnavitia::Code& codes(int index) const;
  ::pbnavitia::Code* mutable_codes(int index);
  ::pbnavitia::Code* add_codes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
      mutable_codes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
      codes() const;

  // optional .pbnavitia.Address address = 13;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 13;
  const ::pbnavitia::Address& address() const;
  ::pbnavitia::Address* mutable_address();
  ::pbnavitia::Address* release_address();
  void set_allocated_address(::pbnavitia::Address* address);

  // optional string platform_code = 14;
  bool has_platform_code() const;
  void clear_platform_code();
  static const int kPlatformCodeFieldNumber = 14;
  const ::std::string& platform_code() const;
  void set_platform_code(const ::std::string& value);
  void set_platform_code(const char* value);
  void set_platform_code(const char* value, size_t size);
  ::std::string* mutable_platform_code();
  ::std::string* release_platform_code();
  void set_allocated_platform_code(::std::string* platform_code);

  // optional string label = 15;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 15;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // repeated .pbnavitia.CommercialMode commercial_modes = 17;
  int commercial_modes_size() const;
  void clear_commercial_modes();
  static const int kCommercialModesFieldNumber = 17;
  const ::pbnavitia::CommercialMode& commercial_modes(int index) const;
  ::pbnavitia::CommercialMode* mutable_commercial_modes(int index);
  ::pbnavitia::CommercialMode* add_commercial_modes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
      mutable_commercial_modes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
      commercial_modes() const;

  // repeated .pbnavitia.PhysicalMode physical_modes = 18;
  int physical_modes_size() const;
  void clear_physical_modes();
  static const int kPhysicalModesFieldNumber = 18;
  const ::pbnavitia::PhysicalMode& physical_modes(int index) const;
  ::pbnavitia::PhysicalMode* mutable_physical_modes(int index);
  ::pbnavitia::PhysicalMode* add_physical_modes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
      mutable_physical_modes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
      physical_modes() const;

  // optional .pbnavitia.FareZone fare_zone = 19;
  bool has_fare_zone() const;
  void clear_fare_zone();
  static const int kFareZoneFieldNumber = 19;
  const ::pbnavitia::FareZone& fare_zone() const;
  ::pbnavitia::FareZone* mutable_fare_zone();
  ::pbnavitia::FareZone* release_fare_zone();
  void set_allocated_fare_zone(::pbnavitia::FareZone* fare_zone);

  // repeated .pbnavitia.EquipmentDetails equipment_details = 20;
  int equipment_details_size() const;
  void clear_equipment_details();
  static const int kEquipmentDetailsFieldNumber = 20;
  const ::pbnavitia::EquipmentDetails& equipment_details(int index) const;
  ::pbnavitia::EquipmentDetails* mutable_equipment_details(int index);
  ::pbnavitia::EquipmentDetails* add_equipment_details();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >*
      mutable_equipment_details();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >&
      equipment_details() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.StopPoint)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_stop_area();
  inline void clear_has_stop_area();
  inline void set_has_has_equipments();
  inline void clear_has_has_equipments();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_platform_code();
  inline void clear_has_platform_code();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_fare_zone();
  inline void clear_has_fare_zone();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion > administrative_regions_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::pbnavitia::GeographicalCoord* coord_;
  ::pbnavitia::StopArea* stop_area_;
  ::pbnavitia::hasEquipments* has_equipments_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment > comments_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code > codes_;
  ::pbnavitia::Address* address_;
  ::google::protobuf::internal::ArenaStringPtr platform_code_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode > commercial_modes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode > physical_modes_;
  ::pbnavitia::FareZone* fare_zone_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails > equipment_details_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static StopPoint* default_instance_;
};
// -------------------------------------------------------------------

class LineString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.LineString) */ {
 public:
  LineString();
  virtual ~LineString();

  LineString(const LineString& from);

  inline LineString& operator=(const LineString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineString& default_instance();

  void Swap(LineString* other);

  // implements Message ----------------------------------------------

  inline LineString* New() const { return New(NULL); }

  LineString* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineString& from);
  void MergeFrom(const LineString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.GeographicalCoord coordinates = 1;
  int coordinates_size() const;
  void clear_coordinates();
  static const int kCoordinatesFieldNumber = 1;
  const ::pbnavitia::GeographicalCoord& coordinates(int index) const;
  ::pbnavitia::GeographicalCoord* mutable_coordinates(int index);
  ::pbnavitia::GeographicalCoord* add_coordinates();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
      mutable_coordinates();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
      coordinates() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.LineString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord > coordinates_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static LineString* default_instance_;
};
// -------------------------------------------------------------------

class MultiLineString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.MultiLineString) */ {
 public:
  MultiLineString();
  virtual ~MultiLineString();

  MultiLineString(const MultiLineString& from);

  inline MultiLineString& operator=(const MultiLineString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiLineString& default_instance();

  void Swap(MultiLineString* other);

  // implements Message ----------------------------------------------

  inline MultiLineString* New() const { return New(NULL); }

  MultiLineString* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiLineString& from);
  void MergeFrom(const MultiLineString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiLineString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.LineString lines = 1;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 1;
  const ::pbnavitia::LineString& lines(int index) const;
  ::pbnavitia::LineString* mutable_lines(int index);
  ::pbnavitia::LineString* add_lines();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineString >*
      mutable_lines();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineString >&
      lines() const;

  // optional double length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  double length() const;
  void set_length(double value);

  // @@protoc_insertion_point(class_scope:pbnavitia.MultiLineString)
 private:
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineString > lines_;
  double length_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static MultiLineString* default_instance_;
};
// -------------------------------------------------------------------

class Line : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Line) */ {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Line& default_instance();

  void Swap(Line* other);

  // implements Message ----------------------------------------------

  inline Line* New() const { return New(NULL); }

  Line* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string uri = 4;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional string color = 9;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 9;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // repeated .pbnavitia.Route routes = 10;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 10;
  const ::pbnavitia::Route& routes(int index) const;
  ::pbnavitia::Route* mutable_routes(int index);
  ::pbnavitia::Route* add_routes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
      mutable_routes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
      routes() const;

  // optional .pbnavitia.CommercialMode commercial_mode = 11;
  bool has_commercial_mode() const;
  void clear_commercial_mode();
  static const int kCommercialModeFieldNumber = 11;
  const ::pbnavitia::CommercialMode& commercial_mode() const;
  ::pbnavitia::CommercialMode* mutable_commercial_mode();
  ::pbnavitia::CommercialMode* release_commercial_mode();
  void set_allocated_commercial_mode(::pbnavitia::CommercialMode* commercial_mode);

  // repeated .pbnavitia.PhysicalMode physical_modes = 12;
  int physical_modes_size() const;
  void clear_physical_modes();
  static const int kPhysicalModesFieldNumber = 12;
  const ::pbnavitia::PhysicalMode& physical_modes(int index) const;
  ::pbnavitia::PhysicalMode* mutable_physical_modes(int index);
  ::pbnavitia::PhysicalMode* add_physical_modes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
      mutable_physical_modes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
      physical_modes() const;

  // optional .pbnavitia.Network network = 13;
  bool has_network() const;
  void clear_network();
  static const int kNetworkFieldNumber = 13;
  const ::pbnavitia::Network& network() const;
  ::pbnavitia::Network* mutable_network();
  ::pbnavitia::Network* release_network();
  void set_allocated_network(::pbnavitia::Network* network);

  // repeated .pbnavitia.Message messages = 14;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 14;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 26;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 26;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // repeated .pbnavitia.Comment comments = 22;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 22;
  const ::pbnavitia::Comment& comments(int index) const;
  ::pbnavitia::Comment* mutable_comments(int index);
  ::pbnavitia::Comment* add_comments();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
      mutable_comments();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
      comments() const;

  // repeated .pbnavitia.Code codes = 16;
  int codes_size() const;
  void clear_codes();
  static const int kCodesFieldNumber = 16;
  const ::pbnavitia::Code& codes(int index) const;
  ::pbnavitia::Code* mutable_codes(int index);
  ::pbnavitia::Code* add_codes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
      mutable_codes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
      codes() const;

  // optional .pbnavitia.MultiLineString geojson = 17;
  bool has_geojson() const;
  void clear_geojson();
  static const int kGeojsonFieldNumber = 17;
  const ::pbnavitia::MultiLineString& geojson() const;
  ::pbnavitia::MultiLineString* mutable_geojson();
  ::pbnavitia::MultiLineString* release_geojson();
  void set_allocated_geojson(::pbnavitia::MultiLineString* geojson);

  // optional uint32 opening_time = 18;
  bool has_opening_time() const;
  void clear_opening_time();
  static const int kOpeningTimeFieldNumber = 18;
  ::google::protobuf::uint32 opening_time() const;
  void set_opening_time(::google::protobuf::uint32 value);

  // optional uint32 closing_time = 19;
  bool has_closing_time() const;
  void clear_closing_time();
  static const int kClosingTimeFieldNumber = 19;
  ::google::protobuf::uint32 closing_time() const;
  void set_closing_time(::google::protobuf::uint32 value);

  // repeated .pbnavitia.Property properties = 21;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 21;
  const ::pbnavitia::Property& properties(int index) const;
  ::pbnavitia::Property* mutable_properties(int index);
  ::pbnavitia::Property* add_properties();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Property >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Property >&
      properties() const;

  // repeated .pbnavitia.LineGroup line_groups = 23;
  int line_groups_size() const;
  void clear_line_groups();
  static const int kLineGroupsFieldNumber = 23;
  const ::pbnavitia::LineGroup& line_groups(int index) const;
  ::pbnavitia::LineGroup* mutable_line_groups(int index);
  ::pbnavitia::LineGroup* add_line_groups();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >*
      mutable_line_groups();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >&
      line_groups() const;

  // optional string text_color = 24;
  bool has_text_color() const;
  void clear_text_color();
  static const int kTextColorFieldNumber = 24;
  const ::std::string& text_color() const;
  void set_text_color(const ::std::string& value);
  void set_text_color(const char* value);
  void set_text_color(const char* value, size_t size);
  ::std::string* mutable_text_color();
  ::std::string* release_text_color();
  void set_allocated_text_color(::std::string* text_color);

  // @@protoc_insertion_point(class_scope:pbnavitia.Line)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_commercial_mode();
  inline void clear_has_commercial_mode();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_geojson();
  inline void clear_has_geojson();
  inline void set_has_opening_time();
  inline void clear_has_opening_time();
  inline void set_has_closing_time();
  inline void clear_has_closing_time();
  inline void set_has_text_color();
  inline void clear_has_text_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route > routes_;
  ::pbnavitia::CommercialMode* commercial_mode_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode > physical_modes_;
  ::pbnavitia::Network* network_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment > comments_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code > codes_;
  ::pbnavitia::MultiLineString* geojson_;
  ::google::protobuf::uint32 opening_time_;
  ::google::protobuf::uint32 closing_time_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Property > properties_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup > line_groups_;
  ::google::protobuf::internal::ArenaStringPtr text_color_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Line* default_instance_;
};
// -------------------------------------------------------------------

class LineGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.LineGroup) */ {
 public:
  LineGroup();
  virtual ~LineGroup();

  LineGroup(const LineGroup& from);

  inline LineGroup& operator=(const LineGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineGroup& default_instance();

  void Swap(LineGroup* other);

  // implements Message ----------------------------------------------

  inline LineGroup* New() const { return New(NULL); }

  LineGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineGroup& from);
  void MergeFrom(const LineGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string uri = 2;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // repeated .pbnavitia.Comment comments = 3;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 3;
  const ::pbnavitia::Comment& comments(int index) const;
  ::pbnavitia::Comment* mutable_comments(int index);
  ::pbnavitia::Comment* add_comments();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
      mutable_comments();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
      comments() const;

  // repeated .pbnavitia.Line lines = 4;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 4;
  const ::pbnavitia::Line& lines(int index) const;
  ::pbnavitia::Line* mutable_lines(int index);
  ::pbnavitia::Line* add_lines();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
      mutable_lines();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
      lines() const;

  // optional .pbnavitia.Line main_line = 5;
  bool has_main_line() const;
  void clear_main_line();
  static const int kMainLineFieldNumber = 5;
  const ::pbnavitia::Line& main_line() const;
  ::pbnavitia::Line* mutable_main_line();
  ::pbnavitia::Line* release_main_line();
  void set_allocated_main_line(::pbnavitia::Line* main_line);

  // @@protoc_insertion_point(class_scope:pbnavitia.LineGroup)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_main_line();
  inline void clear_has_main_line();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment > comments_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line > lines_;
  ::pbnavitia::Line* main_line_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static LineGroup* default_instance_;
};
// -------------------------------------------------------------------

class Route : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Route) */ {
 public:
  Route();
  virtual ~Route();

  Route(const Route& from);

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Route& default_instance();

  void Swap(Route* other);

  // implements Message ----------------------------------------------

  inline Route* New() const { return New(NULL); }

  Route* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Route* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string uri = 4;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional bool is_frequence = 5;
  bool has_is_frequence() const;
  void clear_is_frequence();
  static const int kIsFrequenceFieldNumber = 5;
  bool is_frequence() const;
  void set_is_frequence(bool value);

  // optional .pbnavitia.Line line = 7;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 7;
  const ::pbnavitia::Line& line() const;
  ::pbnavitia::Line* mutable_line();
  ::pbnavitia::Line* release_line();
  void set_allocated_line(::pbnavitia::Line* line);

  // repeated .pbnavitia.JourneyPattern journey_patterns = 8;
  int journey_patterns_size() const;
  void clear_journey_patterns();
  static const int kJourneyPatternsFieldNumber = 8;
  const ::pbnavitia::JourneyPattern& journey_patterns(int index) const;
  ::pbnavitia::JourneyPattern* mutable_journey_patterns(int index);
  ::pbnavitia::JourneyPattern* add_journey_patterns();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >*
      mutable_journey_patterns();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >&
      journey_patterns() const;

  // repeated .pbnavitia.Message messages = 9;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 9;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 18;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 18;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // repeated .pbnavitia.Code codes = 10;
  int codes_size() const;
  void clear_codes();
  static const int kCodesFieldNumber = 10;
  const ::pbnavitia::Code& codes(int index) const;
  ::pbnavitia::Code* mutable_codes(int index);
  ::pbnavitia::Code* add_codes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
      mutable_codes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
      codes() const;

  // repeated .pbnavitia.StopPoint stop_points = 1;
  int stop_points_size() const;
  void clear_stop_points();
  static const int kStopPointsFieldNumber = 1;
  const ::pbnavitia::StopPoint& stop_points(int index) const;
  ::pbnavitia::StopPoint* mutable_stop_points(int index);
  ::pbnavitia::StopPoint* add_stop_points();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
      mutable_stop_points();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
      stop_points() const;

  // optional .pbnavitia.PtObject direction = 12;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 12;
  const ::pbnavitia::PtObject& direction() const;
  ::pbnavitia::PtObject* mutable_direction();
  ::pbnavitia::PtObject* release_direction();
  void set_allocated_direction(::pbnavitia::PtObject* direction);

  // optional .pbnavitia.MultiLineString geojson = 13;
  bool has_geojson() const;
  void clear_geojson();
  static const int kGeojsonFieldNumber = 13;
  const ::pbnavitia::MultiLineString& geojson() const;
  ::pbnavitia::MultiLineString* mutable_geojson();
  ::pbnavitia::MultiLineString* release_geojson();
  void set_allocated_geojson(::pbnavitia::MultiLineString* geojson);

  // repeated .pbnavitia.PhysicalMode physical_modes = 14;
  int physical_modes_size() const;
  void clear_physical_modes();
  static const int kPhysicalModesFieldNumber = 14;
  const ::pbnavitia::PhysicalMode& physical_modes(int index) const;
  ::pbnavitia::PhysicalMode* mutable_physical_modes(int index);
  ::pbnavitia::PhysicalMode* add_physical_modes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
      mutable_physical_modes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
      physical_modes() const;

  // repeated .pbnavitia.Comment comments = 15;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 15;
  const ::pbnavitia::Comment& comments(int index) const;
  ::pbnavitia::Comment* mutable_comments(int index);
  ::pbnavitia::Comment* add_comments();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
      mutable_comments();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
      comments() const;

  // optional string direction_type = 17;
  bool has_direction_type() const;
  void clear_direction_type();
  static const int kDirectionTypeFieldNumber = 17;
  const ::std::string& direction_type() const;
  void set_direction_type(const ::std::string& value);
  void set_direction_type(const char* value);
  void set_direction_type(const char* value, size_t size);
  ::std::string* mutable_direction_type();
  ::std::string* release_direction_type();
  void set_allocated_direction_type(::std::string* direction_type);

  // @@protoc_insertion_point(class_scope:pbnavitia.Route)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_is_frequence();
  inline void clear_has_is_frequence();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_geojson();
  inline void clear_has_geojson();
  inline void set_has_direction_type();
  inline void clear_has_direction_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::pbnavitia::Line* line_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern > journey_patterns_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code > codes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint > stop_points_;
  ::pbnavitia::PtObject* direction_;
  ::pbnavitia::MultiLineString* geojson_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode > physical_modes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment > comments_;
  ::google::protobuf::internal::ArenaStringPtr direction_type_;
  bool is_frequence_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Route* default_instance_;
};
// -------------------------------------------------------------------

class JourneyPattern : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.JourneyPattern) */ {
 public:
  JourneyPattern();
  virtual ~JourneyPattern();

  JourneyPattern(const JourneyPattern& from);

  inline JourneyPattern& operator=(const JourneyPattern& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JourneyPattern& default_instance();

  void Swap(JourneyPattern* other);

  // implements Message ----------------------------------------------

  inline JourneyPattern* New() const { return New(NULL); }

  JourneyPattern* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JourneyPattern& from);
  void MergeFrom(const JourneyPattern& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JourneyPattern* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string uri = 4;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional bool is_frequence = 5;
  bool has_is_frequence() const;
  void clear_is_frequence();
  static const int kIsFrequenceFieldNumber = 5;
  bool is_frequence() const;
  void set_is_frequence(bool value);

  // optional .pbnavitia.PhysicalMode physical_mode = 6;
  bool has_physical_mode() const;
  void clear_physical_mode();
  static const int kPhysicalModeFieldNumber = 6;
  const ::pbnavitia::PhysicalMode& physical_mode() const;
  ::pbnavitia::PhysicalMode* mutable_physical_mode();
  ::pbnavitia::PhysicalMode* release_physical_mode();
  void set_allocated_physical_mode(::pbnavitia::PhysicalMode* physical_mode);

  // optional .pbnavitia.Route route = 7;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 7;
  const ::pbnavitia::Route& route() const;
  ::pbnavitia::Route* mutable_route();
  ::pbnavitia::Route* release_route();
  void set_allocated_route(::pbnavitia::Route* route);

  // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 8;
  int journey_pattern_points_size() const;
  void clear_journey_pattern_points();
  static const int kJourneyPatternPointsFieldNumber = 8;
  const ::pbnavitia::JourneyPatternPoint& journey_pattern_points(int index) const;
  ::pbnavitia::JourneyPatternPoint* mutable_journey_pattern_points(int index);
  ::pbnavitia::JourneyPatternPoint* add_journey_pattern_points();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >*
      mutable_journey_pattern_points();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >&
      journey_pattern_points() const;

  // repeated .pbnavitia.Message messages = 9;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 9;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 22;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 22;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // @@protoc_insertion_point(class_scope:pbnavitia.JourneyPattern)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_is_frequence();
  inline void clear_has_is_frequence();
  inline void set_has_physical_mode();
  inline void clear_has_physical_mode();
  inline void set_has_route();
  inline void clear_has_route();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::pbnavitia::PhysicalMode* physical_mode_;
  ::pbnavitia::Route* route_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint > journey_pattern_points_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  bool is_frequence_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static JourneyPattern* default_instance_;
};
// -------------------------------------------------------------------

class Destination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Destination) */ {
 public:
  Destination();
  virtual ~Destination();

  Destination(const Destination& from);

  inline Destination& operator=(const Destination& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Destination& default_instance();

  void Swap(Destination* other);

  // implements Message ----------------------------------------------

  inline Destination* New() const { return New(NULL); }

  Destination* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Destination& from);
  void MergeFrom(const Destination& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Destination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::std::string& destination() const;
  void set_destination(const ::std::string& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  ::std::string* mutable_destination();
  ::std::string* release_destination();
  void set_allocated_destination(::std::string* destination);

  // @@protoc_insertion_point(class_scope:pbnavitia.Destination)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_destination();
  inline void clear_has_destination();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr destination_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Destination* default_instance_;
};
// -------------------------------------------------------------------

class Note : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Note) */ {
 public:
  Note();
  virtual ~Note();

  Note(const Note& from);

  inline Note& operator=(const Note& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Note& default_instance();

  void Swap(Note* other);

  // implements Message ----------------------------------------------

  inline Note* New() const { return New(NULL); }

  Note* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Note& from);
  void MergeFrom(const Note& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Note* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string note = 2;
  bool has_note() const;
  void clear_note();
  static const int kNoteFieldNumber = 2;
  const ::std::string& note() const;
  void set_note(const ::std::string& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  ::std::string* mutable_note();
  ::std::string* release_note();
  void set_allocated_note(::std::string* note);

  // optional string comment_type = 3;
  bool has_comment_type() const;
  void clear_comment_type();
  static const int kCommentTypeFieldNumber = 3;
  const ::std::string& comment_type() const;
  void set_comment_type(const ::std::string& value);
  void set_comment_type(const char* value);
  void set_comment_type(const char* value, size_t size);
  ::std::string* mutable_comment_type();
  ::std::string* release_comment_type();
  void set_allocated_comment_type(::std::string* comment_type);

  // @@protoc_insertion_point(class_scope:pbnavitia.Note)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_note();
  inline void clear_has_note();
  inline void set_has_comment_type();
  inline void clear_has_comment_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr note_;
  ::google::protobuf::internal::ArenaStringPtr comment_type_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Note* default_instance_;
};
// -------------------------------------------------------------------

class Properties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Properties) */ {
 public:
  Properties();
  virtual ~Properties();

  Properties(const Properties& from);

  inline Properties& operator=(const Properties& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Properties& default_instance();

  void Swap(Properties* other);

  // implements Message ----------------------------------------------

  inline Properties* New() const { return New(NULL); }

  Properties* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Properties& from);
  void MergeFrom(const Properties& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Properties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Properties_AdditionalInformation AdditionalInformation;
  static const AdditionalInformation pick_up_only =
    Properties_AdditionalInformation_pick_up_only;
  static const AdditionalInformation drop_off_only =
    Properties_AdditionalInformation_drop_off_only;
  static const AdditionalInformation on_demand_transport =
    Properties_AdditionalInformation_on_demand_transport;
  static const AdditionalInformation date_time_estimated =
    Properties_AdditionalInformation_date_time_estimated;
  static inline bool AdditionalInformation_IsValid(int value) {
    return Properties_AdditionalInformation_IsValid(value);
  }
  static const AdditionalInformation AdditionalInformation_MIN =
    Properties_AdditionalInformation_AdditionalInformation_MIN;
  static const AdditionalInformation AdditionalInformation_MAX =
    Properties_AdditionalInformation_AdditionalInformation_MAX;
  static const int AdditionalInformation_ARRAYSIZE =
    Properties_AdditionalInformation_AdditionalInformation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdditionalInformation_descriptor() {
    return Properties_AdditionalInformation_descriptor();
  }
  static inline const ::std::string& AdditionalInformation_Name(AdditionalInformation value) {
    return Properties_AdditionalInformation_Name(value);
  }
  static inline bool AdditionalInformation_Parse(const ::std::string& name,
      AdditionalInformation* value) {
    return Properties_AdditionalInformation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.Properties.AdditionalInformation additional_informations = 1;
  int additional_informations_size() const;
  void clear_additional_informations();
  static const int kAdditionalInformationsFieldNumber = 1;
  ::pbnavitia::Properties_AdditionalInformation additional_informations(int index) const;
  void set_additional_informations(int index, ::pbnavitia::Properties_AdditionalInformation value);
  void add_additional_informations(::pbnavitia::Properties_AdditionalInformation value);
  const ::google::protobuf::RepeatedField<int>& additional_informations() const;
  ::google::protobuf::RepeatedField<int>* mutable_additional_informations();

  // repeated .pbnavitia.Note notes = 5;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 5;
  const ::pbnavitia::Note& notes(int index) const;
  ::pbnavitia::Note* mutable_notes(int index);
  ::pbnavitia::Note* add_notes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >*
      mutable_notes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >&
      notes() const;

  // repeated .pbnavitia.CalendarException exceptions = 6;
  int exceptions_size() const;
  void clear_exceptions();
  static const int kExceptionsFieldNumber = 6;
  const ::pbnavitia::CalendarException& exceptions(int index) const;
  ::pbnavitia::CalendarException* mutable_exceptions(int index);
  ::pbnavitia::CalendarException* add_exceptions();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >*
      mutable_exceptions();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >&
      exceptions() const;

  // optional .pbnavitia.Destination destination = 7;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 7;
  const ::pbnavitia::Destination& destination() const;
  ::pbnavitia::Destination* mutable_destination();
  ::pbnavitia::Destination* release_destination();
  void set_allocated_destination(::pbnavitia::Destination* destination);

  // optional string vehicle_journey_id = 8;
  bool has_vehicle_journey_id() const;
  void clear_vehicle_journey_id();
  static const int kVehicleJourneyIdFieldNumber = 8;
  const ::std::string& vehicle_journey_id() const;
  void set_vehicle_journey_id(const ::std::string& value);
  void set_vehicle_journey_id(const char* value);
  void set_vehicle_journey_id(const char* value, size_t size);
  ::std::string* mutable_vehicle_journey_id();
  ::std::string* release_vehicle_journey_id();
  void set_allocated_vehicle_journey_id(::std::string* vehicle_journey_id);

  // @@protoc_insertion_point(class_scope:pbnavitia.Properties)
 private:
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_vehicle_journey_id();
  inline void clear_has_vehicle_journey_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> additional_informations_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note > notes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException > exceptions_;
  ::pbnavitia::Destination* destination_;
  ::google::protobuf::internal::ArenaStringPtr vehicle_journey_id_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Properties* default_instance_;
};
// -------------------------------------------------------------------

class hasEquipments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.hasEquipments) */ {
 public:
  hasEquipments();
  virtual ~hasEquipments();

  hasEquipments(const hasEquipments& from);

  inline hasEquipments& operator=(const hasEquipments& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hasEquipments& default_instance();

  void Swap(hasEquipments* other);

  // implements Message ----------------------------------------------

  inline hasEquipments* New() const { return New(NULL); }

  hasEquipments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hasEquipments& from);
  void MergeFrom(const hasEquipments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hasEquipments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef hasEquipments_Equipment Equipment;
  static const Equipment has_wheelchair_accessibility =
    hasEquipments_Equipment_has_wheelchair_accessibility;
  static const Equipment has_bike_accepted =
    hasEquipments_Equipment_has_bike_accepted;
  static const Equipment has_air_conditioned =
    hasEquipments_Equipment_has_air_conditioned;
  static const Equipment has_visual_announcement =
    hasEquipments_Equipment_has_visual_announcement;
  static const Equipment has_audible_announcement =
    hasEquipments_Equipment_has_audible_announcement;
  static const Equipment has_appropriate_escort =
    hasEquipments_Equipment_has_appropriate_escort;
  static const Equipment has_appropriate_signage =
    hasEquipments_Equipment_has_appropriate_signage;
  static const Equipment has_school_vehicle =
    hasEquipments_Equipment_has_school_vehicle;
  static const Equipment has_wheelchair_boarding =
    hasEquipments_Equipment_has_wheelchair_boarding;
  static const Equipment has_sheltered =
    hasEquipments_Equipment_has_sheltered;
  static const Equipment has_elevator =
    hasEquipments_Equipment_has_elevator;
  static const Equipment has_escalator =
    hasEquipments_Equipment_has_escalator;
  static const Equipment has_bike_depot =
    hasEquipments_Equipment_has_bike_depot;
  static inline bool Equipment_IsValid(int value) {
    return hasEquipments_Equipment_IsValid(value);
  }
  static const Equipment Equipment_MIN =
    hasEquipments_Equipment_Equipment_MIN;
  static const Equipment Equipment_MAX =
    hasEquipments_Equipment_Equipment_MAX;
  static const int Equipment_ARRAYSIZE =
    hasEquipments_Equipment_Equipment_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Equipment_descriptor() {
    return hasEquipments_Equipment_descriptor();
  }
  static inline const ::std::string& Equipment_Name(Equipment value) {
    return hasEquipments_Equipment_Name(value);
  }
  static inline bool Equipment_Parse(const ::std::string& name,
      Equipment* value) {
    return hasEquipments_Equipment_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.hasEquipments.Equipment has_equipments = 1;
  int has_equipments_size() const;
  void clear_has_equipments();
  static const int kHasEquipmentsFieldNumber = 1;
  ::pbnavitia::hasEquipments_Equipment has_equipments(int index) const;
  void set_has_equipments(int index, ::pbnavitia::hasEquipments_Equipment value);
  void add_has_equipments(::pbnavitia::hasEquipments_Equipment value);
  const ::google::protobuf::RepeatedField<int>& has_equipments() const;
  ::google::protobuf::RepeatedField<int>* mutable_has_equipments();

  // @@protoc_insertion_point(class_scope:pbnavitia.hasEquipments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> has_equipments_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static hasEquipments* default_instance_;
};
// -------------------------------------------------------------------

class StopDateTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StopDateTime) */ {
 public:
  StopDateTime();
  virtual ~StopDateTime();

  StopDateTime(const StopDateTime& from);

  inline StopDateTime& operator=(const StopDateTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopDateTime& default_instance();

  void Swap(StopDateTime* other);

  // implements Message ----------------------------------------------

  inline StopDateTime* New() const { return New(NULL); }

  StopDateTime* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopDateTime& from);
  void MergeFrom(const StopDateTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopDateTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 arrival_date_time = 1;
  bool has_arrival_date_time() const;
  void clear_arrival_date_time();
  static const int kArrivalDateTimeFieldNumber = 1;
  ::google::protobuf::uint64 arrival_date_time() const;
  void set_arrival_date_time(::google::protobuf::uint64 value);

  // optional uint64 departure_date_time = 2;
  bool has_departure_date_time() const;
  void clear_departure_date_time();
  static const int kDepartureDateTimeFieldNumber = 2;
  ::google::protobuf::uint64 departure_date_time() const;
  void set_departure_date_time(::google::protobuf::uint64 value);

  // optional uint64 base_arrival_date_time = 5;
  bool has_base_arrival_date_time() const;
  void clear_base_arrival_date_time();
  static const int kBaseArrivalDateTimeFieldNumber = 5;
  ::google::protobuf::uint64 base_arrival_date_time() const;
  void set_base_arrival_date_time(::google::protobuf::uint64 value);

  // optional uint64 base_departure_date_time = 6;
  bool has_base_departure_date_time() const;
  void clear_base_departure_date_time();
  static const int kBaseDepartureDateTimeFieldNumber = 6;
  ::google::protobuf::uint64 base_departure_date_time() const;
  void set_base_departure_date_time(::google::protobuf::uint64 value);

  // optional .pbnavitia.StopPoint stop_point = 3;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 3;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // optional .pbnavitia.Properties properties = 4;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::pbnavitia::Properties& properties() const;
  ::pbnavitia::Properties* mutable_properties();
  ::pbnavitia::Properties* release_properties();
  void set_allocated_properties(::pbnavitia::Properties* properties);

  // optional .pbnavitia.RTLevel data_freshness = 7;
  bool has_data_freshness() const;
  void clear_data_freshness();
  static const int kDataFreshnessFieldNumber = 7;
  ::pbnavitia::RTLevel data_freshness() const;
  void set_data_freshness(::pbnavitia::RTLevel value);

  // optional .pbnavitia.MessageStatus departure_status = 8;
  bool has_departure_status() const;
  void clear_departure_status();
  static const int kDepartureStatusFieldNumber = 8;
  ::pbnavitia::MessageStatus departure_status() const;
  void set_departure_status(::pbnavitia::MessageStatus value);

  // optional .pbnavitia.MessageStatus arrival_status = 9;
  bool has_arrival_status() const;
  void clear_arrival_status();
  static const int kArrivalStatusFieldNumber = 9;
  ::pbnavitia::MessageStatus arrival_status() const;
  void set_arrival_status(::pbnavitia::MessageStatus value);

  // @@protoc_insertion_point(class_scope:pbnavitia.StopDateTime)
 private:
  inline void set_has_arrival_date_time();
  inline void clear_has_arrival_date_time();
  inline void set_has_departure_date_time();
  inline void clear_has_departure_date_time();
  inline void set_has_base_arrival_date_time();
  inline void clear_has_base_arrival_date_time();
  inline void set_has_base_departure_date_time();
  inline void clear_has_base_departure_date_time();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_properties();
  inline void clear_has_properties();
  inline void set_has_data_freshness();
  inline void clear_has_data_freshness();
  inline void set_has_departure_status();
  inline void clear_has_departure_status();
  inline void set_has_arrival_status();
  inline void clear_has_arrival_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 arrival_date_time_;
  ::google::protobuf::uint64 departure_date_time_;
  ::google::protobuf::uint64 base_arrival_date_time_;
  ::google::protobuf::uint64 base_departure_date_time_;
  ::pbnavitia::StopPoint* stop_point_;
  ::pbnavitia::Properties* properties_;
  int data_freshness_;
  int departure_status_;
  int arrival_status_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static StopDateTime* default_instance_;
};
// -------------------------------------------------------------------

class StopTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StopTime) */ {
 public:
  StopTime();
  virtual ~StopTime();

  StopTime(const StopTime& from);

  inline StopTime& operator=(const StopTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopTime& default_instance();

  void Swap(StopTime* other);

  // implements Message ----------------------------------------------

  inline StopTime* New() const { return New(NULL); }

  StopTime* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopTime& from);
  void MergeFrom(const StopTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 arrival_time = 1;
  bool has_arrival_time() const;
  void clear_arrival_time();
  static const int kArrivalTimeFieldNumber = 1;
  ::google::protobuf::uint64 arrival_time() const;
  void set_arrival_time(::google::protobuf::uint64 value);

  // optional uint64 utc_arrival_time = 10;
  bool has_utc_arrival_time() const;
  void clear_utc_arrival_time();
  static const int kUtcArrivalTimeFieldNumber = 10;
  ::google::protobuf::uint64 utc_arrival_time() const;
  void set_utc_arrival_time(::google::protobuf::uint64 value);

  // optional uint64 departure_time = 3;
  bool has_departure_time() const;
  void clear_departure_time();
  static const int kDepartureTimeFieldNumber = 3;
  ::google::protobuf::uint64 departure_time() const;
  void set_departure_time(::google::protobuf::uint64 value);

  // optional uint64 utc_departure_time = 11;
  bool has_utc_departure_time() const;
  void clear_utc_departure_time();
  static const int kUtcDepartureTimeFieldNumber = 11;
  ::google::protobuf::uint64 utc_departure_time() const;
  void set_utc_departure_time(::google::protobuf::uint64 value);

  // optional .pbnavitia.VehicleJourney vehicle_journey = 4;
  bool has_vehicle_journey() const;
  void clear_vehicle_journey();
  static const int kVehicleJourneyFieldNumber = 4;
  const ::pbnavitia::VehicleJourney& vehicle_journey() const;
  ::pbnavitia::VehicleJourney* mutable_vehicle_journey();
  ::pbnavitia::VehicleJourney* release_vehicle_journey();
  void set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey);

  // optional .pbnavitia.JourneyPatternPoint journey_pattern_point = 5;
  bool has_journey_pattern_point() const;
  void clear_journey_pattern_point();
  static const int kJourneyPatternPointFieldNumber = 5;
  const ::pbnavitia::JourneyPatternPoint& journey_pattern_point() const;
  ::pbnavitia::JourneyPatternPoint* mutable_journey_pattern_point();
  ::pbnavitia::JourneyPatternPoint* release_journey_pattern_point();
  void set_allocated_journey_pattern_point(::pbnavitia::JourneyPatternPoint* journey_pattern_point);

  // optional bool pickup_allowed = 6;
  bool has_pickup_allowed() const;
  void clear_pickup_allowed();
  static const int kPickupAllowedFieldNumber = 6;
  bool pickup_allowed() const;
  void set_pickup_allowed(bool value);

  // optional bool drop_off_allowed = 7;
  bool has_drop_off_allowed() const;
  void clear_drop_off_allowed();
  static const int kDropOffAllowedFieldNumber = 7;
  bool drop_off_allowed() const;
  void set_drop_off_allowed(bool value);

  // optional string headsign = 8;
  bool has_headsign() const;
  void clear_headsign();
  static const int kHeadsignFieldNumber = 8;
  const ::std::string& headsign() const;
  void set_headsign(const ::std::string& value);
  void set_headsign(const char* value);
  void set_headsign(const char* value, size_t size);
  ::std::string* mutable_headsign();
  ::std::string* release_headsign();
  void set_allocated_headsign(::std::string* headsign);

  // optional .pbnavitia.StopPoint stop_point = 9;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 9;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // @@protoc_insertion_point(class_scope:pbnavitia.StopTime)
 private:
  inline void set_has_arrival_time();
  inline void clear_has_arrival_time();
  inline void set_has_utc_arrival_time();
  inline void clear_has_utc_arrival_time();
  inline void set_has_departure_time();
  inline void clear_has_departure_time();
  inline void set_has_utc_departure_time();
  inline void clear_has_utc_departure_time();
  inline void set_has_vehicle_journey();
  inline void clear_has_vehicle_journey();
  inline void set_has_journey_pattern_point();
  inline void clear_has_journey_pattern_point();
  inline void set_has_pickup_allowed();
  inline void clear_has_pickup_allowed();
  inline void set_has_drop_off_allowed();
  inline void clear_has_drop_off_allowed();
  inline void set_has_headsign();
  inline void clear_has_headsign();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 arrival_time_;
  ::google::protobuf::uint64 utc_arrival_time_;
  ::google::protobuf::uint64 departure_time_;
  ::google::protobuf::uint64 utc_departure_time_;
  ::pbnavitia::VehicleJourney* vehicle_journey_;
  ::pbnavitia::JourneyPatternPoint* journey_pattern_point_;
  ::google::protobuf::internal::ArenaStringPtr headsign_;
  ::pbnavitia::StopPoint* stop_point_;
  bool pickup_allowed_;
  bool drop_off_allowed_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static StopTime* default_instance_;
};
// -------------------------------------------------------------------

class VehicleJourney : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.VehicleJourney) */ {
 public:
  VehicleJourney();
  virtual ~VehicleJourney();

  VehicleJourney(const VehicleJourney& from);

  inline VehicleJourney& operator=(const VehicleJourney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleJourney& default_instance();

  void Swap(VehicleJourney* other);

  // implements Message ----------------------------------------------

  inline VehicleJourney* New() const { return New(NULL); }

  VehicleJourney* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VehicleJourney& from);
  void MergeFrom(const VehicleJourney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleJourney* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string uri = 4;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // repeated .pbnavitia.StopTime stop_times = 6;
  int stop_times_size() const;
  void clear_stop_times();
  static const int kStopTimesFieldNumber = 6;
  const ::pbnavitia::StopTime& stop_times(int index) const;
  ::pbnavitia::StopTime* mutable_stop_times(int index);
  ::pbnavitia::StopTime* add_stop_times();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTime >*
      mutable_stop_times();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTime >&
      stop_times() const;

  // optional .pbnavitia.Route route = 7;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 7;
  const ::pbnavitia::Route& route() const;
  ::pbnavitia::Route* mutable_route();
  ::pbnavitia::Route* release_route();
  void set_allocated_route(::pbnavitia::Route* route);

  // optional .pbnavitia.JourneyPattern journey_pattern = 8;
  bool has_journey_pattern() const;
  void clear_journey_pattern();
  static const int kJourneyPatternFieldNumber = 8;
  const ::pbnavitia::JourneyPattern& journey_pattern() const;
  ::pbnavitia::JourneyPattern* mutable_journey_pattern();
  ::pbnavitia::JourneyPattern* release_journey_pattern();
  void set_allocated_journey_pattern(::pbnavitia::JourneyPattern* journey_pattern);

  // optional .pbnavitia.Trip trip = 9;
  bool has_trip() const;
  void clear_trip();
  static const int kTripFieldNumber = 9;
  const ::pbnavitia::Trip& trip() const;
  ::pbnavitia::Trip* mutable_trip();
  ::pbnavitia::Trip* release_trip();
  void set_allocated_trip(::pbnavitia::Trip* trip);

  // repeated .pbnavitia.Message messages = 10;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 10;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 32;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 32;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // optional bool is_adapted = 11;
  bool has_is_adapted() const;
  void clear_is_adapted();
  static const int kIsAdaptedFieldNumber = 11;
  bool is_adapted() const;
  void set_is_adapted(bool value);

  // optional .pbnavitia.ValidityPattern validity_pattern = 12;
  bool has_validity_pattern() const;
  void clear_validity_pattern();
  static const int kValidityPatternFieldNumber = 12;
  const ::pbnavitia::ValidityPattern& validity_pattern() const;
  ::pbnavitia::ValidityPattern* mutable_validity_pattern();
  ::pbnavitia::ValidityPattern* release_validity_pattern();
  void set_allocated_validity_pattern(::pbnavitia::ValidityPattern* validity_pattern);

  // optional .pbnavitia.ValidityPattern adapted_validity_pattern = 13;
  bool has_adapted_validity_pattern() const;
  void clear_adapted_validity_pattern();
  static const int kAdaptedValidityPatternFieldNumber = 13;
  const ::pbnavitia::ValidityPattern& adapted_validity_pattern() const;
  ::pbnavitia::ValidityPattern* mutable_adapted_validity_pattern();
  ::pbnavitia::ValidityPattern* release_adapted_validity_pattern();
  void set_allocated_adapted_validity_pattern(::pbnavitia::ValidityPattern* adapted_validity_pattern);

  // optional string odt_message = 14;
  bool has_odt_message() const;
  void clear_odt_message();
  static const int kOdtMessageFieldNumber = 14;
  const ::std::string& odt_message() const;
  void set_odt_message(const ::std::string& value);
  void set_odt_message(const char* value);
  void set_odt_message(const char* value, size_t size);
  ::std::string* mutable_odt_message();
  ::std::string* release_odt_message();
  void set_allocated_odt_message(::std::string* odt_message);

  // optional bool wheelchair_accessible = 16;
  bool has_wheelchair_accessible() const;
  void clear_wheelchair_accessible();
  static const int kWheelchairAccessibleFieldNumber = 16;
  bool wheelchair_accessible() const;
  void set_wheelchair_accessible(bool value);

  // optional bool bike_accepted = 17;
  bool has_bike_accepted() const;
  void clear_bike_accepted();
  static const int kBikeAcceptedFieldNumber = 17;
  bool bike_accepted() const;
  void set_bike_accepted(bool value);

  // optional bool air_conditioned = 18;
  bool has_air_conditioned() const;
  void clear_air_conditioned();
  static const int kAirConditionedFieldNumber = 18;
  bool air_conditioned() const;
  void set_air_conditioned(bool value);

  // optional bool visual_announcement = 19;
  bool has_visual_announcement() const;
  void clear_visual_announcement();
  static const int kVisualAnnouncementFieldNumber = 19;
  bool visual_announcement() const;
  void set_visual_announcement(bool value);

  // optional bool audible_announcement = 20;
  bool has_audible_announcement() const;
  void clear_audible_announcement();
  static const int kAudibleAnnouncementFieldNumber = 20;
  bool audible_announcement() const;
  void set_audible_announcement(bool value);

  // optional bool appropriate_escort = 21;
  bool has_appropriate_escort() const;
  void clear_appropriate_escort();
  static const int kAppropriateEscortFieldNumber = 21;
  bool appropriate_escort() const;
  void set_appropriate_escort(bool value);

  // optional bool appropriate_signage = 22;
  bool has_appropriate_signage() const;
  void clear_appropriate_signage();
  static const int kAppropriateSignageFieldNumber = 22;
  bool appropriate_signage() const;
  void set_appropriate_signage(bool value);

  // optional bool school_vehicle = 23;
  bool has_school_vehicle() const;
  void clear_school_vehicle();
  static const int kSchoolVehicleFieldNumber = 23;
  bool school_vehicle() const;
  void set_school_vehicle(bool value);

  // repeated .pbnavitia.Comment comments = 27;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 27;
  const ::pbnavitia::Comment& comments(int index) const;
  ::pbnavitia::Comment* mutable_comments(int index);
  ::pbnavitia::Comment* add_comments();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
      mutable_comments();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
      comments() const;

  // repeated .pbnavitia.Code codes = 25;
  int codes_size() const;
  void clear_codes();
  static const int kCodesFieldNumber = 25;
  const ::pbnavitia::Code& codes(int index) const;
  ::pbnavitia::Code* mutable_codes(int index);
  ::pbnavitia::Code* add_codes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
      mutable_codes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
      codes() const;

  // repeated .pbnavitia.Calendar calendars = 26;
  int calendars_size() const;
  void clear_calendars();
  static const int kCalendarsFieldNumber = 26;
  const ::pbnavitia::Calendar& calendars(int index) const;
  ::pbnavitia::Calendar* mutable_calendars(int index);
  ::pbnavitia::Calendar* add_calendars();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
      mutable_calendars();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
      calendars() const;

  // optional uint64 start_time = 28;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 28;
  ::google::protobuf::uint64 start_time() const;
  void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 29;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 29;
  ::google::protobuf::uint64 end_time() const;
  void set_end_time(::google::protobuf::uint64 value);

  // optional uint64 headway_secs = 30;
  bool has_headway_secs() const;
  void clear_headway_secs();
  static const int kHeadwaySecsFieldNumber = 30;
  ::google::protobuf::uint64 headway_secs() const;
  void set_headway_secs(::google::protobuf::uint64 value);

  // optional string headsign = 33;
  bool has_headsign() const;
  void clear_headsign();
  static const int kHeadsignFieldNumber = 33;
  const ::std::string& headsign() const;
  void set_headsign(const ::std::string& value);
  void set_headsign(const char* value);
  void set_headsign(const char* value, size_t size);
  ::std::string* mutable_headsign();
  ::std::string* release_headsign();
  void set_allocated_headsign(::std::string* headsign);

  // @@protoc_insertion_point(class_scope:pbnavitia.VehicleJourney)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_route();
  inline void clear_has_route();
  inline void set_has_journey_pattern();
  inline void clear_has_journey_pattern();
  inline void set_has_trip();
  inline void clear_has_trip();
  inline void set_has_is_adapted();
  inline void clear_has_is_adapted();
  inline void set_has_validity_pattern();
  inline void clear_has_validity_pattern();
  inline void set_has_adapted_validity_pattern();
  inline void clear_has_adapted_validity_pattern();
  inline void set_has_odt_message();
  inline void clear_has_odt_message();
  inline void set_has_wheelchair_accessible();
  inline void clear_has_wheelchair_accessible();
  inline void set_has_bike_accepted();
  inline void clear_has_bike_accepted();
  inline void set_has_air_conditioned();
  inline void clear_has_air_conditioned();
  inline void set_has_visual_announcement();
  inline void clear_has_visual_announcement();
  inline void set_has_audible_announcement();
  inline void clear_has_audible_announcement();
  inline void set_has_appropriate_escort();
  inline void clear_has_appropriate_escort();
  inline void set_has_appropriate_signage();
  inline void clear_has_appropriate_signage();
  inline void set_has_school_vehicle();
  inline void clear_has_school_vehicle();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_headway_secs();
  inline void clear_has_headway_secs();
  inline void set_has_headsign();
  inline void clear_has_headsign();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTime > stop_times_;
  ::pbnavitia::Route* route_;
  ::pbnavitia::JourneyPattern* journey_pattern_;
  ::pbnavitia::Trip* trip_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  ::pbnavitia::ValidityPattern* validity_pattern_;
  ::pbnavitia::ValidityPattern* adapted_validity_pattern_;
  ::google::protobuf::internal::ArenaStringPtr odt_message_;
  bool is_adapted_;
  bool wheelchair_accessible_;
  bool bike_accepted_;
  bool air_conditioned_;
  bool visual_announcement_;
  bool audible_announcement_;
  bool appropriate_escort_;
  bool appropriate_signage_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment > comments_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code > codes_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar > calendars_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint64 headway_secs_;
  ::google::protobuf::internal::ArenaStringPtr headsign_;
  bool school_vehicle_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static VehicleJourney* default_instance_;
};
// -------------------------------------------------------------------

class Trip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Trip) */ {
 public:
  Trip();
  virtual ~Trip();

  Trip(const Trip& from);

  inline Trip& operator=(const Trip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trip& default_instance();

  void Swap(Trip* other);

  // implements Message ----------------------------------------------

  inline Trip* New() const { return New(NULL); }

  Trip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trip& from);
  void MergeFrom(const Trip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pbnavitia.Trip)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Trip* default_instance_;
};
// -------------------------------------------------------------------

class JourneyPatternPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.JourneyPatternPoint) */ {
 public:
  JourneyPatternPoint();
  virtual ~JourneyPatternPoint();

  JourneyPatternPoint(const JourneyPatternPoint& from);

  inline JourneyPatternPoint& operator=(const JourneyPatternPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JourneyPatternPoint& default_instance();

  void Swap(JourneyPatternPoint* other);

  // implements Message ----------------------------------------------

  inline JourneyPatternPoint* New() const { return New(NULL); }

  JourneyPatternPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JourneyPatternPoint& from);
  void MergeFrom(const JourneyPatternPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JourneyPatternPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional int32 order = 4;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 4;
  ::google::protobuf::int32 order() const;
  void set_order(::google::protobuf::int32 value);

  // optional .pbnavitia.StopPoint stop_point = 5;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 5;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // optional .pbnavitia.JourneyPattern journey_pattern = 6;
  bool has_journey_pattern() const;
  void clear_journey_pattern();
  static const int kJourneyPatternFieldNumber = 6;
  const ::pbnavitia::JourneyPattern& journey_pattern() const;
  ::pbnavitia::JourneyPattern* mutable_journey_pattern();
  ::pbnavitia::JourneyPattern* release_journey_pattern();
  void set_allocated_journey_pattern(::pbnavitia::JourneyPattern* journey_pattern);

  // repeated .pbnavitia.Message messages = 7;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 7;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 22;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 22;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // @@protoc_insertion_point(class_scope:pbnavitia.JourneyPatternPoint)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_journey_pattern();
  inline void clear_has_journey_pattern();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::pbnavitia::StopPoint* stop_point_;
  ::pbnavitia::JourneyPattern* journey_pattern_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  ::google::protobuf::int32 order_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static JourneyPatternPoint* default_instance_;
};
// -------------------------------------------------------------------

class Contributor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Contributor) */ {
 public:
  Contributor();
  virtual ~Contributor();

  Contributor(const Contributor& from);

  inline Contributor& operator=(const Contributor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Contributor& default_instance();

  void Swap(Contributor* other);

  // implements Message ----------------------------------------------

  inline Contributor* New() const { return New(NULL); }

  Contributor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Contributor& from);
  void MergeFrom(const Contributor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Contributor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string website = 3;
  bool has_website() const;
  void clear_website();
  static const int kWebsiteFieldNumber = 3;
  const ::std::string& website() const;
  void set_website(const ::std::string& value);
  void set_website(const char* value);
  void set_website(const char* value, size_t size);
  ::std::string* mutable_website();
  ::std::string* release_website();
  void set_allocated_website(::std::string* website);

  // optional string license = 4;
  bool has_license() const;
  void clear_license();
  static const int kLicenseFieldNumber = 4;
  const ::std::string& license() const;
  void set_license(const ::std::string& value);
  void set_license(const char* value);
  void set_license(const char* value, size_t size);
  ::std::string* mutable_license();
  ::std::string* release_license();
  void set_allocated_license(::std::string* license);

  // @@protoc_insertion_point(class_scope:pbnavitia.Contributor)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_website();
  inline void clear_has_website();
  inline void set_has_license();
  inline void clear_has_license();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr website_;
  ::google::protobuf::internal::ArenaStringPtr license_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Contributor* default_instance_;
};
// -------------------------------------------------------------------

class Dataset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Dataset) */ {
 public:
  Dataset();
  virtual ~Dataset();

  Dataset(const Dataset& from);

  inline Dataset& operator=(const Dataset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dataset& default_instance();

  void Swap(Dataset* other);

  // implements Message ----------------------------------------------

  inline Dataset* New() const { return New(NULL); }

  Dataset* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dataset& from);
  void MergeFrom(const Dataset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dataset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // required .pbnavitia.Contributor contributor = 2;
  bool has_contributor() const;
  void clear_contributor();
  static const int kContributorFieldNumber = 2;
  const ::pbnavitia::Contributor& contributor() const;
  ::pbnavitia::Contributor* mutable_contributor();
  ::pbnavitia::Contributor* release_contributor();
  void set_allocated_contributor(::pbnavitia::Contributor* contributor);

  // required uint64 start_validation_date = 3;
  bool has_start_validation_date() const;
  void clear_start_validation_date();
  static const int kStartValidationDateFieldNumber = 3;
  ::google::protobuf::uint64 start_validation_date() const;
  void set_start_validation_date(::google::protobuf::uint64 value);

  // required uint64 end_validation_date = 4;
  bool has_end_validation_date() const;
  void clear_end_validation_date();
  static const int kEndValidationDateFieldNumber = 4;
  ::google::protobuf::uint64 end_validation_date() const;
  void set_end_validation_date(::google::protobuf::uint64 value);

  // required .pbnavitia.RTLevel realtime_level = 5;
  bool has_realtime_level() const;
  void clear_realtime_level();
  static const int kRealtimeLevelFieldNumber = 5;
  ::pbnavitia::RTLevel realtime_level() const;
  void set_realtime_level(::pbnavitia::RTLevel value);

  // optional string desc = 6;
  bool has_desc() const;
  void clear_desc();
  static const int kDescFieldNumber = 6;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // optional string system = 7;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 7;
  const ::std::string& system() const;
  void set_system(const ::std::string& value);
  void set_system(const char* value);
  void set_system(const char* value, size_t size);
  ::std::string* mutable_system();
  ::std::string* release_system();
  void set_allocated_system(::std::string* system);

  // @@protoc_insertion_point(class_scope:pbnavitia.Dataset)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_contributor();
  inline void clear_has_contributor();
  inline void set_has_start_validation_date();
  inline void clear_has_start_validation_date();
  inline void set_has_end_validation_date();
  inline void clear_has_end_validation_date();
  inline void set_has_realtime_level();
  inline void clear_has_realtime_level();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_system();
  inline void clear_has_system();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::pbnavitia::Contributor* contributor_;
  ::google::protobuf::uint64 start_validation_date_;
  ::google::protobuf::uint64 end_validation_date_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr system_;
  int realtime_level_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Dataset* default_instance_;
};
// -------------------------------------------------------------------

class PoiType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PoiType) */ {
 public:
  PoiType();
  virtual ~PoiType();

  PoiType(const PoiType& from);

  inline PoiType& operator=(const PoiType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoiType& default_instance();

  void Swap(PoiType* other);

  // implements Message ----------------------------------------------

  inline PoiType* New() const { return New(NULL); }

  PoiType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoiType& from);
  void MergeFrom(const PoiType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoiType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pbnavitia.PoiType)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static PoiType* default_instance_;
};
// -------------------------------------------------------------------

class Poi : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Poi) */ {
 public:
  Poi();
  virtual ~Poi();

  Poi(const Poi& from);

  inline Poi& operator=(const Poi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Poi& default_instance();

  void Swap(Poi* other);

  // implements Message ----------------------------------------------

  inline Poi* New() const { return New(NULL); }

  Poi* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Poi& from);
  void MergeFrom(const Poi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Poi* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .pbnavitia.GeographicalCoord coord = 6;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 6;
  const ::pbnavitia::GeographicalCoord& coord() const;
  ::pbnavitia::GeographicalCoord* mutable_coord();
  ::pbnavitia::GeographicalCoord* release_coord();
  void set_allocated_coord(::pbnavitia::GeographicalCoord* coord);

  // optional .pbnavitia.PoiType poi_type = 7;
  bool has_poi_type() const;
  void clear_poi_type();
  static const int kPoiTypeFieldNumber = 7;
  const ::pbnavitia::PoiType& poi_type() const;
  ::pbnavitia::PoiType* mutable_poi_type();
  ::pbnavitia::PoiType* release_poi_type();
  void set_allocated_poi_type(::pbnavitia::PoiType* poi_type);

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  int administrative_regions_size() const;
  void clear_administrative_regions();
  static const int kAdministrativeRegionsFieldNumber = 10;
  const ::pbnavitia::AdministrativeRegion& administrative_regions(int index) const;
  ::pbnavitia::AdministrativeRegion* mutable_administrative_regions(int index);
  ::pbnavitia::AdministrativeRegion* add_administrative_regions();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
      mutable_administrative_regions();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
      administrative_regions() const;

  // optional .pbnavitia.Address address = 11;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 11;
  const ::pbnavitia::Address& address() const;
  ::pbnavitia::Address* mutable_address();
  ::pbnavitia::Address* release_address();
  void set_allocated_address(::pbnavitia::Address* address);

  // repeated .pbnavitia.Code properties = 12;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 12;
  const ::pbnavitia::Code& properties(int index) const;
  ::pbnavitia::Code* mutable_properties(int index);
  ::pbnavitia::Code* add_properties();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
      properties() const;

  // optional string label = 13;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 13;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:pbnavitia.Poi)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_poi_type();
  inline void clear_has_poi_type();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pbnavitia::GeographicalCoord* coord_;
  ::pbnavitia::PoiType* poi_type_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion > administrative_regions_;
  ::pbnavitia::Address* address_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code > properties_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Poi* default_instance_;
};
// -------------------------------------------------------------------

class Network : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Network) */ {
 public:
  Network();
  virtual ~Network();

  Network(const Network& from);

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Network& default_instance();

  void Swap(Network* other);

  // implements Message ----------------------------------------------

  inline Network* New() const { return New(NULL); }

  Network* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Network& from);
  void MergeFrom(const Network& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Network* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .pbnavitia.Message messages = 6;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 6;
  const ::pbnavitia::Message& messages(int index) const;
  ::pbnavitia::Message* mutable_messages(int index);
  ::pbnavitia::Message* add_messages();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
      messages() const;

  // repeated string impact_uris = 22;
  int impact_uris_size() const;
  void clear_impact_uris();
  static const int kImpactUrisFieldNumber = 22;
  const ::std::string& impact_uris(int index) const;
  ::std::string* mutable_impact_uris(int index);
  void set_impact_uris(int index, const ::std::string& value);
  void set_impact_uris(int index, const char* value);
  void set_impact_uris(int index, const char* value, size_t size);
  ::std::string* add_impact_uris();
  void add_impact_uris(const ::std::string& value);
  void add_impact_uris(const char* value);
  void add_impact_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& impact_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_impact_uris();

  // repeated .pbnavitia.Code codes = 7;
  int codes_size() const;
  void clear_codes();
  static const int kCodesFieldNumber = 7;
  const ::pbnavitia::Code& codes(int index) const;
  ::pbnavitia::Code* mutable_codes(int index);
  ::pbnavitia::Code* add_codes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
      mutable_codes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
      codes() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.Network)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message > messages_;
  ::google::protobuf::RepeatedPtrField< ::std::string> impact_uris_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code > codes_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Network* default_instance_;
};
// -------------------------------------------------------------------

class PhysicalMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PhysicalMode) */ {
 public:
  PhysicalMode();
  virtual ~PhysicalMode();

  PhysicalMode(const PhysicalMode& from);

  inline PhysicalMode& operator=(const PhysicalMode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PhysicalMode& default_instance();

  void Swap(PhysicalMode* other);

  // implements Message ----------------------------------------------

  inline PhysicalMode* New() const { return New(NULL); }

  PhysicalMode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhysicalMode& from);
  void MergeFrom(const PhysicalMode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhysicalMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pbnavitia.PhysicalMode)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static PhysicalMode* default_instance_;
};
// -------------------------------------------------------------------

class CommercialMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.CommercialMode) */ {
 public:
  CommercialMode();
  virtual ~CommercialMode();

  CommercialMode(const CommercialMode& from);

  inline CommercialMode& operator=(const CommercialMode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommercialMode& default_instance();

  void Swap(CommercialMode* other);

  // implements Message ----------------------------------------------

  inline CommercialMode* New() const { return New(NULL); }

  CommercialMode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommercialMode& from);
  void MergeFrom(const CommercialMode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommercialMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pbnavitia.CommercialMode)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static CommercialMode* default_instance_;
};
// -------------------------------------------------------------------

class Connection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Connection) */ {
 public:
  Connection();
  virtual ~Connection();

  Connection(const Connection& from);

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connection& default_instance();

  void Swap(Connection* other);

  // implements Message ----------------------------------------------

  inline Connection* New() const { return New(NULL); }

  Connection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Connection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.StopPoint origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::pbnavitia::StopPoint& origin() const;
  ::pbnavitia::StopPoint* mutable_origin();
  ::pbnavitia::StopPoint* release_origin();
  void set_allocated_origin(::pbnavitia::StopPoint* origin);

  // optional .pbnavitia.StopPoint destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::pbnavitia::StopPoint& destination() const;
  ::pbnavitia::StopPoint* mutable_destination();
  ::pbnavitia::StopPoint* release_destination();
  void set_allocated_destination(::pbnavitia::StopPoint* destination);

  // optional int32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 display_duration = 4;
  bool has_display_duration() const;
  void clear_display_duration();
  static const int kDisplayDurationFieldNumber = 4;
  ::google::protobuf::int32 display_duration() const;
  void set_display_duration(::google::protobuf::int32 value);

  // optional int32 max_duration = 5;
  bool has_max_duration() const;
  void clear_max_duration();
  static const int kMaxDurationFieldNumber = 5;
  ::google::protobuf::int32 max_duration() const;
  void set_max_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.Connection)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_display_duration();
  inline void clear_has_display_duration();
  inline void set_has_max_duration();
  inline void clear_has_max_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::StopPoint* origin_;
  ::pbnavitia::StopPoint* destination_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 display_duration_;
  ::google::protobuf::int32 max_duration_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Connection* default_instance_;
};
// -------------------------------------------------------------------

class Company : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Company) */ {
 public:
  Company();
  virtual ~Company();

  Company(const Company& from);

  inline Company& operator=(const Company& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Company& default_instance();

  void Swap(Company* other);

  // implements Message ----------------------------------------------

  inline Company* New() const { return New(NULL); }

  Company* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Company& from);
  void MergeFrom(const Company& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Company* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .pbnavitia.Code codes = 8;
  int codes_size() const;
  void clear_codes();
  static const int kCodesFieldNumber = 8;
  const ::pbnavitia::Code& codes(int index) const;
  ::pbnavitia::Code* mutable_codes(int index);
  ::pbnavitia::Code* add_codes();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
      mutable_codes();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
      codes() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.Company)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code > codes_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Company* default_instance_;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  void Swap(Address* other);

  // implements Message ----------------------------------------------

  inline Address* New() const { return New(NULL); }

  Address* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 3;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .pbnavitia.GeographicalCoord coord = 6;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 6;
  const ::pbnavitia::GeographicalCoord& coord() const;
  ::pbnavitia::GeographicalCoord* mutable_coord();
  ::pbnavitia::GeographicalCoord* release_coord();
  void set_allocated_coord(::pbnavitia::GeographicalCoord* coord);

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  int administrative_regions_size() const;
  void clear_administrative_regions();
  static const int kAdministrativeRegionsFieldNumber = 10;
  const ::pbnavitia::AdministrativeRegion& administrative_regions(int index) const;
  ::pbnavitia::AdministrativeRegion* mutable_administrative_regions(int index);
  ::pbnavitia::AdministrativeRegion* add_administrative_regions();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
      mutable_administrative_regions();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
      administrative_regions() const;

  // optional int32 house_number = 2;
  bool has_house_number() const;
  void clear_house_number();
  static const int kHouseNumberFieldNumber = 2;
  ::google::protobuf::int32 house_number() const;
  void set_house_number(::google::protobuf::int32 value);

  // optional string label = 16;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 16;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:pbnavitia.Address)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_house_number();
  inline void clear_has_house_number();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pbnavitia::GeographicalCoord* coord_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion > administrative_regions_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::int32 house_number_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Address* default_instance_;
};
// -------------------------------------------------------------------

class CalendarException : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.CalendarException) */ {
 public:
  CalendarException();
  virtual ~CalendarException();

  CalendarException(const CalendarException& from);

  inline CalendarException& operator=(const CalendarException& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalendarException& default_instance();

  void Swap(CalendarException* other);

  // implements Message ----------------------------------------------

  inline CalendarException* New() const { return New(NULL); }

  CalendarException* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalendarException& from);
  void MergeFrom(const CalendarException& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CalendarException* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string date = 2;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional .pbnavitia.ExceptionType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::pbnavitia::ExceptionType type() const;
  void set_type(::pbnavitia::ExceptionType value);

  // @@protoc_insertion_point(class_scope:pbnavitia.CalendarException)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  int type_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static CalendarException* default_instance_;
};
// -------------------------------------------------------------------

class CalendarPeriod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.CalendarPeriod) */ {
 public:
  CalendarPeriod();
  virtual ~CalendarPeriod();

  CalendarPeriod(const CalendarPeriod& from);

  inline CalendarPeriod& operator=(const CalendarPeriod& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalendarPeriod& default_instance();

  void Swap(CalendarPeriod* other);

  // implements Message ----------------------------------------------

  inline CalendarPeriod* New() const { return New(NULL); }

  CalendarPeriod* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalendarPeriod& from);
  void MergeFrom(const CalendarPeriod& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CalendarPeriod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  const ::std::string& begin() const;
  void set_begin(const ::std::string& value);
  void set_begin(const char* value);
  void set_begin(const char* value, size_t size);
  ::std::string* mutable_begin();
  ::std::string* release_begin();
  void set_allocated_begin(::std::string* begin);

  // optional string end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::std::string& end() const;
  void set_end(const ::std::string& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  ::std::string* mutable_end();
  ::std::string* release_end();
  void set_allocated_end(::std::string* end);

  // @@protoc_insertion_point(class_scope:pbnavitia.CalendarPeriod)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr begin_;
  ::google::protobuf::internal::ArenaStringPtr end_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static CalendarPeriod* default_instance_;
};
// -------------------------------------------------------------------

class WeekPattern : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.WeekPattern) */ {
 public:
  WeekPattern();
  virtual ~WeekPattern();

  WeekPattern(const WeekPattern& from);

  inline WeekPattern& operator=(const WeekPattern& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeekPattern& default_instance();

  void Swap(WeekPattern* other);

  // implements Message ----------------------------------------------

  inline WeekPattern* New() const { return New(NULL); }

  WeekPattern* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeekPattern& from);
  void MergeFrom(const WeekPattern& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WeekPattern* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool monday = 1;
  bool has_monday() const;
  void clear_monday();
  static const int kMondayFieldNumber = 1;
  bool monday() const;
  void set_monday(bool value);

  // optional bool tuesday = 2;
  bool has_tuesday() const;
  void clear_tuesday();
  static const int kTuesdayFieldNumber = 2;
  bool tuesday() const;
  void set_tuesday(bool value);

  // optional bool wednesday = 3;
  bool has_wednesday() const;
  void clear_wednesday();
  static const int kWednesdayFieldNumber = 3;
  bool wednesday() const;
  void set_wednesday(bool value);

  // optional bool thursday = 4;
  bool has_thursday() const;
  void clear_thursday();
  static const int kThursdayFieldNumber = 4;
  bool thursday() const;
  void set_thursday(bool value);

  // optional bool friday = 5;
  bool has_friday() const;
  void clear_friday();
  static const int kFridayFieldNumber = 5;
  bool friday() const;
  void set_friday(bool value);

  // optional bool saturday = 6;
  bool has_saturday() const;
  void clear_saturday();
  static const int kSaturdayFieldNumber = 6;
  bool saturday() const;
  void set_saturday(bool value);

  // optional bool sunday = 7;
  bool has_sunday() const;
  void clear_sunday();
  static const int kSundayFieldNumber = 7;
  bool sunday() const;
  void set_sunday(bool value);

  // @@protoc_insertion_point(class_scope:pbnavitia.WeekPattern)
 private:
  inline void set_has_monday();
  inline void clear_has_monday();
  inline void set_has_tuesday();
  inline void clear_has_tuesday();
  inline void set_has_wednesday();
  inline void clear_has_wednesday();
  inline void set_has_thursday();
  inline void clear_has_thursday();
  inline void set_has_friday();
  inline void clear_has_friday();
  inline void set_has_saturday();
  inline void clear_has_saturday();
  inline void set_has_sunday();
  inline void clear_has_sunday();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool monday_;
  bool tuesday_;
  bool wednesday_;
  bool thursday_;
  bool friday_;
  bool saturday_;
  bool sunday_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static WeekPattern* default_instance_;
};
// -------------------------------------------------------------------

class Calendar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Calendar) */ {
 public:
  Calendar();
  virtual ~Calendar();

  Calendar(const Calendar& from);

  inline Calendar& operator=(const Calendar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Calendar& default_instance();

  void Swap(Calendar* other);

  // implements Message ----------------------------------------------

  inline Calendar* New() const { return New(NULL); }

  Calendar* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Calendar& from);
  void MergeFrom(const Calendar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Calendar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .pbnavitia.WeekPattern week_pattern = 3;
  bool has_week_pattern() const;
  void clear_week_pattern();
  static const int kWeekPatternFieldNumber = 3;
  const ::pbnavitia::WeekPattern& week_pattern() const;
  ::pbnavitia::WeekPattern* mutable_week_pattern();
  ::pbnavitia::WeekPattern* release_week_pattern();
  void set_allocated_week_pattern(::pbnavitia::WeekPattern* week_pattern);

  // repeated .pbnavitia.CalendarPeriod active_periods = 4;
  int active_periods_size() const;
  void clear_active_periods();
  static const int kActivePeriodsFieldNumber = 4;
  const ::pbnavitia::CalendarPeriod& active_periods(int index) const;
  ::pbnavitia::CalendarPeriod* mutable_active_periods(int index);
  ::pbnavitia::CalendarPeriod* add_active_periods();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarPeriod >*
      mutable_active_periods();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarPeriod >&
      active_periods() const;

  // repeated .pbnavitia.CalendarException exceptions = 5;
  int exceptions_size() const;
  void clear_exceptions();
  static const int kExceptionsFieldNumber = 5;
  const ::pbnavitia::CalendarException& exceptions(int index) const;
  ::pbnavitia::CalendarException* mutable_exceptions(int index);
  ::pbnavitia::CalendarException* add_exceptions();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >*
      mutable_exceptions();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >&
      exceptions() const;

  // optional .pbnavitia.ValidityPattern validity_pattern = 6;
  bool has_validity_pattern() const;
  void clear_validity_pattern();
  static const int kValidityPatternFieldNumber = 6;
  const ::pbnavitia::ValidityPattern& validity_pattern() const;
  ::pbnavitia::ValidityPattern* mutable_validity_pattern();
  ::pbnavitia::ValidityPattern* release_validity_pattern();
  void set_allocated_validity_pattern(::pbnavitia::ValidityPattern* validity_pattern);

  // @@protoc_insertion_point(class_scope:pbnavitia.Calendar)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_week_pattern();
  inline void clear_has_week_pattern();
  inline void set_has_validity_pattern();
  inline void clear_has_validity_pattern();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pbnavitia::WeekPattern* week_pattern_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarPeriod > active_periods_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException > exceptions_;
  ::pbnavitia::ValidityPattern* validity_pattern_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static Calendar* default_instance_;
};
// -------------------------------------------------------------------

class ValidityPattern : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.ValidityPattern) */ {
 public:
  ValidityPattern();
  virtual ~ValidityPattern();

  ValidityPattern(const ValidityPattern& from);

  inline ValidityPattern& operator=(const ValidityPattern& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidityPattern& default_instance();

  void Swap(ValidityPattern* other);

  // implements Message ----------------------------------------------

  inline ValidityPattern* New() const { return New(NULL); }

  ValidityPattern* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ValidityPattern& from);
  void MergeFrom(const ValidityPattern& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValidityPattern* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string beginning_date = 1;
  bool has_beginning_date() const;
  void clear_beginning_date();
  static const int kBeginningDateFieldNumber = 1;
  const ::std::string& beginning_date() const;
  void set_beginning_date(const ::std::string& value);
  void set_beginning_date(const char* value);
  void set_beginning_date(const char* value, size_t size);
  ::std::string* mutable_beginning_date();
  ::std::string* release_beginning_date();
  void set_allocated_beginning_date(::std::string* beginning_date);

  // optional string days = 2;
  bool has_days() const;
  void clear_days();
  static const int kDaysFieldNumber = 2;
  const ::std::string& days() const;
  void set_days(const ::std::string& value);
  void set_days(const char* value);
  void set_days(const char* value, size_t size);
  ::std::string* mutable_days();
  ::std::string* release_days();
  void set_allocated_days(::std::string* days);

  // @@protoc_insertion_point(class_scope:pbnavitia.ValidityPattern)
 private:
  inline void set_has_beginning_date();
  inline void clear_has_beginning_date();
  inline void set_has_days();
  inline void clear_has_days();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr beginning_date_;
  ::google::protobuf::internal::ArenaStringPtr days_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static ValidityPattern* default_instance_;
};
// -------------------------------------------------------------------

class LocationContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.LocationContext) */ {
 public:
  LocationContext();
  virtual ~LocationContext();

  LocationContext(const LocationContext& from);

  inline LocationContext& operator=(const LocationContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationContext& default_instance();

  void Swap(LocationContext* other);

  // implements Message ----------------------------------------------

  inline LocationContext* New() const { return New(NULL); }

  LocationContext* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocationContext& from);
  void MergeFrom(const LocationContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocationContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string place = 1;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 1;
  const ::std::string& place() const;
  void set_place(const ::std::string& value);
  void set_place(const char* value);
  void set_place(const char* value, size_t size);
  ::std::string* mutable_place();
  ::std::string* release_place();
  void set_allocated_place(::std::string* place);

  // required int32 access_duration = 2;
  bool has_access_duration() const;
  void clear_access_duration();
  static const int kAccessDurationFieldNumber = 2;
  ::google::protobuf::int32 access_duration() const;
  void set_access_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.LocationContext)
 private:
  inline void set_has_place();
  inline void clear_has_place();
  inline void set_has_access_duration();
  inline void clear_has_access_duration();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr place_;
  ::google::protobuf::int32 access_duration_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static LocationContext* default_instance_;
};
// -------------------------------------------------------------------

class PtObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PtObject) */ {
 public:
  PtObject();
  virtual ~PtObject();

  PtObject(const PtObject& from);

  inline PtObject& operator=(const PtObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PtObject& default_instance();

  void Swap(PtObject* other);

  // implements Message ----------------------------------------------

  inline PtObject* New() const { return New(NULL); }

  PtObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PtObject& from);
  void MergeFrom(const PtObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PtObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string uri = 2;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional .pbnavitia.NavitiaType embedded_type = 3;
  bool has_embedded_type() const;
  void clear_embedded_type();
  static const int kEmbeddedTypeFieldNumber = 3;
  ::pbnavitia::NavitiaType embedded_type() const;
  void set_embedded_type(::pbnavitia::NavitiaType value);

  // optional .pbnavitia.StopArea stop_area = 4;
  bool has_stop_area() const;
  void clear_stop_area();
  static const int kStopAreaFieldNumber = 4;
  const ::pbnavitia::StopArea& stop_area() const;
  ::pbnavitia::StopArea* mutable_stop_area();
  ::pbnavitia::StopArea* release_stop_area();
  void set_allocated_stop_area(::pbnavitia::StopArea* stop_area);

  // optional .pbnavitia.Poi poi = 5;
  bool has_poi() const;
  void clear_poi();
  static const int kPoiFieldNumber = 5;
  const ::pbnavitia::Poi& poi() const;
  ::pbnavitia::Poi* mutable_poi();
  ::pbnavitia::Poi* release_poi();
  void set_allocated_poi(::pbnavitia::Poi* poi);

  // optional .pbnavitia.StopPoint stop_point = 6;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 6;
  const ::pbnavitia::StopPoint& stop_point() const;
  ::pbnavitia::StopPoint* mutable_stop_point();
  ::pbnavitia::StopPoint* release_stop_point();
  void set_allocated_stop_point(::pbnavitia::StopPoint* stop_point);

  // optional .pbnavitia.Address address = 7;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 7;
  const ::pbnavitia::Address& address() const;
  ::pbnavitia::Address* mutable_address();
  ::pbnavitia::Address* release_address();
  void set_allocated_address(::pbnavitia::Address* address);

  // optional .pbnavitia.Line line = 9;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 9;
  const ::pbnavitia::Line& line() const;
  ::pbnavitia::Line* mutable_line();
  ::pbnavitia::Line* release_line();
  void set_allocated_line(::pbnavitia::Line* line);

  // optional .pbnavitia.Network network = 10;
  bool has_network() const;
  void clear_network();
  static const int kNetworkFieldNumber = 10;
  const ::pbnavitia::Network& network() const;
  ::pbnavitia::Network* mutable_network();
  ::pbnavitia::Network* release_network();
  void set_allocated_network(::pbnavitia::Network* network);

  // optional .pbnavitia.CommercialMode commercial_mode = 11;
  bool has_commercial_mode() const;
  void clear_commercial_mode();
  static const int kCommercialModeFieldNumber = 11;
  const ::pbnavitia::CommercialMode& commercial_mode() const;
  ::pbnavitia::CommercialMode* mutable_commercial_mode();
  ::pbnavitia::CommercialMode* release_commercial_mode();
  void set_allocated_commercial_mode(::pbnavitia::CommercialMode* commercial_mode);

  // optional .pbnavitia.Route route = 12;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 12;
  const ::pbnavitia::Route& route() const;
  ::pbnavitia::Route* mutable_route();
  ::pbnavitia::Route* release_route();
  void set_allocated_route(::pbnavitia::Route* route);

  // optional .pbnavitia.AdministrativeRegion administrative_region = 13;
  bool has_administrative_region() const;
  void clear_administrative_region();
  static const int kAdministrativeRegionFieldNumber = 13;
  const ::pbnavitia::AdministrativeRegion& administrative_region() const;
  ::pbnavitia::AdministrativeRegion* mutable_administrative_region();
  ::pbnavitia::AdministrativeRegion* release_administrative_region();
  void set_allocated_administrative_region(::pbnavitia::AdministrativeRegion* administrative_region);

  // optional int32 distance = 14;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 14;
  ::google::protobuf::int32 distance() const;
  void set_distance(::google::protobuf::int32 value);

  // optional int32 quality = 15;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 15;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // optional .pbnavitia.Company company = 16;
  bool has_company() const;
  void clear_company();
  static const int kCompanyFieldNumber = 16;
  const ::pbnavitia::Company& company() const;
  ::pbnavitia::Company* mutable_company();
  ::pbnavitia::Company* release_company();
  void set_allocated_company(::pbnavitia::Company* company);

  // optional .pbnavitia.VehicleJourney vehicle_journey = 17;
  bool has_vehicle_journey() const;
  void clear_vehicle_journey();
  static const int kVehicleJourneyFieldNumber = 17;
  const ::pbnavitia::VehicleJourney& vehicle_journey() const;
  ::pbnavitia::VehicleJourney* mutable_vehicle_journey();
  ::pbnavitia::VehicleJourney* release_vehicle_journey();
  void set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey);

  // optional .pbnavitia.Calendar calendar = 18;
  bool has_calendar() const;
  void clear_calendar();
  static const int kCalendarFieldNumber = 18;
  const ::pbnavitia::Calendar& calendar() const;
  ::pbnavitia::Calendar* mutable_calendar();
  ::pbnavitia::Calendar* release_calendar();
  void set_allocated_calendar(::pbnavitia::Calendar* calendar);

  // optional int32 score = 19;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 19;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // optional .pbnavitia.Trip trip = 20;
  bool has_trip() const;
  void clear_trip();
  static const int kTripFieldNumber = 20;
  const ::pbnavitia::Trip& trip() const;
  ::pbnavitia::Trip* mutable_trip();
  ::pbnavitia::Trip* release_trip();
  void set_allocated_trip(::pbnavitia::Trip* trip);

  // repeated int32 scores = 21;
  int scores_size() const;
  void clear_scores();
  static const int kScoresFieldNumber = 21;
  ::google::protobuf::int32 scores(int index) const;
  void set_scores(int index, ::google::protobuf::int32 value);
  void add_scores(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      scores() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_scores();

  // repeated .pbnavitia.PtObject stop_points_nearby = 22;
  int stop_points_nearby_size() const;
  void clear_stop_points_nearby();
  static const int kStopPointsNearbyFieldNumber = 22;
  const ::pbnavitia::PtObject& stop_points_nearby(int index) const;
  ::pbnavitia::PtObject* mutable_stop_points_nearby(int index);
  ::pbnavitia::PtObject* add_stop_points_nearby();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
      mutable_stop_points_nearby();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
      stop_points_nearby() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.PtObject)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_embedded_type();
  inline void clear_has_embedded_type();
  inline void set_has_stop_area();
  inline void clear_has_stop_area();
  inline void set_has_poi();
  inline void clear_has_poi();
  inline void set_has_stop_point();
  inline void clear_has_stop_point();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_commercial_mode();
  inline void clear_has_commercial_mode();
  inline void set_has_route();
  inline void clear_has_route();
  inline void set_has_administrative_region();
  inline void clear_has_administrative_region();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_company();
  inline void clear_has_company();
  inline void set_has_vehicle_journey();
  inline void clear_has_vehicle_journey();
  inline void set_has_calendar();
  inline void clear_has_calendar();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_trip();
  inline void clear_has_trip();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::pbnavitia::StopArea* stop_area_;
  ::pbnavitia::Poi* poi_;
  ::pbnavitia::StopPoint* stop_point_;
  ::pbnavitia::Address* address_;
  ::pbnavitia::Line* line_;
  int embedded_type_;
  ::google::protobuf::int32 distance_;
  ::pbnavitia::Network* network_;
  ::pbnavitia::CommercialMode* commercial_mode_;
  ::pbnavitia::Route* route_;
  ::pbnavitia::AdministrativeRegion* administrative_region_;
  ::pbnavitia::Company* company_;
  ::pbnavitia::VehicleJourney* vehicle_journey_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 score_;
  ::pbnavitia::Calendar* calendar_;
  ::pbnavitia::Trip* trip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > scores_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject > stop_points_nearby_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static PtObject* default_instance_;
};
// -------------------------------------------------------------------

class FareZone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.FareZone) */ {
 public:
  FareZone();
  virtual ~FareZone();

  FareZone(const FareZone& from);

  inline FareZone& operator=(const FareZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FareZone& default_instance();

  void Swap(FareZone* other);

  // implements Message ----------------------------------------------

  inline FareZone* New() const { return New(NULL); }

  FareZone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FareZone& from);
  void MergeFrom(const FareZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FareZone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pbnavitia.FareZone)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static FareZone* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.EquipmentDetails) */ {
 public:
  EquipmentDetails();
  virtual ~EquipmentDetails();

  EquipmentDetails(const EquipmentDetails& from);

  inline EquipmentDetails& operator=(const EquipmentDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentDetails& default_instance();

  void Swap(EquipmentDetails* other);

  // implements Message ----------------------------------------------

  inline EquipmentDetails* New() const { return New(NULL); }

  EquipmentDetails* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentDetails& from);
  void MergeFrom(const EquipmentDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EquipmentDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EquipmentDetails_EquipmentType EquipmentType;
  static const EquipmentType escalator =
    EquipmentDetails_EquipmentType_escalator;
  static const EquipmentType elevator =
    EquipmentDetails_EquipmentType_elevator;
  static inline bool EquipmentType_IsValid(int value) {
    return EquipmentDetails_EquipmentType_IsValid(value);
  }
  static const EquipmentType EquipmentType_MIN =
    EquipmentDetails_EquipmentType_EquipmentType_MIN;
  static const EquipmentType EquipmentType_MAX =
    EquipmentDetails_EquipmentType_EquipmentType_MAX;
  static const int EquipmentType_ARRAYSIZE =
    EquipmentDetails_EquipmentType_EquipmentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EquipmentType_descriptor() {
    return EquipmentDetails_EquipmentType_descriptor();
  }
  static inline const ::std::string& EquipmentType_Name(EquipmentType value) {
    return EquipmentDetails_EquipmentType_Name(value);
  }
  static inline bool EquipmentType_Parse(const ::std::string& name,
      EquipmentType* value) {
    return EquipmentDetails_EquipmentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .pbnavitia.EquipmentDetails.EquipmentType embedded_type = 3;
  bool has_embedded_type() const;
  void clear_embedded_type();
  static const int kEmbeddedTypeFieldNumber = 3;
  ::pbnavitia::EquipmentDetails_EquipmentType embedded_type() const;
  void set_embedded_type(::pbnavitia::EquipmentDetails_EquipmentType value);

  // optional .pbnavitia.CurrentAvailability current_availability = 4;
  bool has_current_availability() const;
  void clear_current_availability();
  static const int kCurrentAvailabilityFieldNumber = 4;
  const ::pbnavitia::CurrentAvailability& current_availability() const;
  ::pbnavitia::CurrentAvailability* mutable_current_availability();
  ::pbnavitia::CurrentAvailability* release_current_availability();
  void set_allocated_current_availability(::pbnavitia::CurrentAvailability* current_availability);

  // @@protoc_insertion_point(class_scope:pbnavitia.EquipmentDetails)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_embedded_type();
  inline void clear_has_embedded_type();
  inline void set_has_current_availability();
  inline void clear_has_current_availability();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pbnavitia::CurrentAvailability* current_availability_;
  int embedded_type_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static EquipmentDetails* default_instance_;
};
// -------------------------------------------------------------------

class CurrentAvailability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.CurrentAvailability) */ {
 public:
  CurrentAvailability();
  virtual ~CurrentAvailability();

  CurrentAvailability(const CurrentAvailability& from);

  inline CurrentAvailability& operator=(const CurrentAvailability& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrentAvailability& default_instance();

  void Swap(CurrentAvailability* other);

  // implements Message ----------------------------------------------

  inline CurrentAvailability* New() const { return New(NULL); }

  CurrentAvailability* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrentAvailability& from);
  void MergeFrom(const CurrentAvailability& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CurrentAvailability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CurrentAvailability_EquipmentStatus EquipmentStatus;
  static const EquipmentStatus unknown =
    CurrentAvailability_EquipmentStatus_unknown;
  static const EquipmentStatus available =
    CurrentAvailability_EquipmentStatus_available;
  static const EquipmentStatus unavailable =
    CurrentAvailability_EquipmentStatus_unavailable;
  static inline bool EquipmentStatus_IsValid(int value) {
    return CurrentAvailability_EquipmentStatus_IsValid(value);
  }
  static const EquipmentStatus EquipmentStatus_MIN =
    CurrentAvailability_EquipmentStatus_EquipmentStatus_MIN;
  static const EquipmentStatus EquipmentStatus_MAX =
    CurrentAvailability_EquipmentStatus_EquipmentStatus_MAX;
  static const int EquipmentStatus_ARRAYSIZE =
    CurrentAvailability_EquipmentStatus_EquipmentStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EquipmentStatus_descriptor() {
    return CurrentAvailability_EquipmentStatus_descriptor();
  }
  static inline const ::std::string& EquipmentStatus_Name(EquipmentStatus value) {
    return CurrentAvailability_EquipmentStatus_Name(value);
  }
  static inline bool EquipmentStatus_Parse(const ::std::string& name,
      EquipmentStatus* value) {
    return CurrentAvailability_EquipmentStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .pbnavitia.CurrentAvailability.EquipmentStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::pbnavitia::CurrentAvailability_EquipmentStatus status() const;
  void set_status(::pbnavitia::CurrentAvailability_EquipmentStatus value);

  // repeated .pbnavitia.Period periods = 2;
  int periods_size() const;
  void clear_periods();
  static const int kPeriodsFieldNumber = 2;
  const ::pbnavitia::Period& periods(int index) const;
  ::pbnavitia::Period* mutable_periods(int index);
  ::pbnavitia::Period* add_periods();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >*
      mutable_periods();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >&
      periods() const;

  // optional string updated_at = 3;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 3;
  const ::std::string& updated_at() const;
  void set_updated_at(const ::std::string& value);
  void set_updated_at(const char* value);
  void set_updated_at(const char* value, size_t size);
  ::std::string* mutable_updated_at();
  ::std::string* release_updated_at();
  void set_allocated_updated_at(::std::string* updated_at);

  // optional .pbnavitia.EquipmentCause cause = 4;
  bool has_cause() const;
  void clear_cause();
  static const int kCauseFieldNumber = 4;
  const ::pbnavitia::EquipmentCause& cause() const;
  ::pbnavitia::EquipmentCause* mutable_cause();
  ::pbnavitia::EquipmentCause* release_cause();
  void set_allocated_cause(::pbnavitia::EquipmentCause* cause);

  // optional .pbnavitia.EquipmentEffect effect = 5;
  bool has_effect() const;
  void clear_effect();
  static const int kEffectFieldNumber = 5;
  const ::pbnavitia::EquipmentEffect& effect() const;
  ::pbnavitia::EquipmentEffect* mutable_effect();
  ::pbnavitia::EquipmentEffect* release_effect();
  void set_allocated_effect(::pbnavitia::EquipmentEffect* effect);

  // @@protoc_insertion_point(class_scope:pbnavitia.CurrentAvailability)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_updated_at();
  inline void clear_has_updated_at();
  inline void set_has_cause();
  inline void clear_has_cause();
  inline void set_has_effect();
  inline void clear_has_effect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period > periods_;
  ::google::protobuf::internal::ArenaStringPtr updated_at_;
  ::pbnavitia::EquipmentCause* cause_;
  ::pbnavitia::EquipmentEffect* effect_;
  int status_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static CurrentAvailability* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentCause : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.EquipmentCause) */ {
 public:
  EquipmentCause();
  virtual ~EquipmentCause();

  EquipmentCause(const EquipmentCause& from);

  inline EquipmentCause& operator=(const EquipmentCause& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentCause& default_instance();

  void Swap(EquipmentCause* other);

  // implements Message ----------------------------------------------

  inline EquipmentCause* New() const { return New(NULL); }

  EquipmentCause* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentCause& from);
  void MergeFrom(const EquipmentCause& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EquipmentCause* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:pbnavitia.EquipmentCause)
 private:
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static EquipmentCause* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentEffect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.EquipmentEffect) */ {
 public:
  EquipmentEffect();
  virtual ~EquipmentEffect();

  EquipmentEffect(const EquipmentEffect& from);

  inline EquipmentEffect& operator=(const EquipmentEffect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentEffect& default_instance();

  void Swap(EquipmentEffect* other);

  // implements Message ----------------------------------------------

  inline EquipmentEffect* New() const { return New(NULL); }

  EquipmentEffect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentEffect& from);
  void MergeFrom(const EquipmentEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EquipmentEffect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:pbnavitia.EquipmentEffect)
 private:
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static EquipmentEffect* default_instance_;
};
// -------------------------------------------------------------------

class StopAreaEquipment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StopAreaEquipment) */ {
 public:
  StopAreaEquipment();
  virtual ~StopAreaEquipment();

  StopAreaEquipment(const StopAreaEquipment& from);

  inline StopAreaEquipment& operator=(const StopAreaEquipment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopAreaEquipment& default_instance();

  void Swap(StopAreaEquipment* other);

  // implements Message ----------------------------------------------

  inline StopAreaEquipment* New() const { return New(NULL); }

  StopAreaEquipment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopAreaEquipment& from);
  void MergeFrom(const StopAreaEquipment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopAreaEquipment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.StopArea stop_area = 1;
  bool has_stop_area() const;
  void clear_stop_area();
  static const int kStopAreaFieldNumber = 1;
  const ::pbnavitia::StopArea& stop_area() const;
  ::pbnavitia::StopArea* mutable_stop_area();
  ::pbnavitia::StopArea* release_stop_area();
  void set_allocated_stop_area(::pbnavitia::StopArea* stop_area);

  // repeated .pbnavitia.EquipmentDetails equipment_details = 2;
  int equipment_details_size() const;
  void clear_equipment_details();
  static const int kEquipmentDetailsFieldNumber = 2;
  const ::pbnavitia::EquipmentDetails& equipment_details(int index) const;
  ::pbnavitia::EquipmentDetails* mutable_equipment_details(int index);
  ::pbnavitia::EquipmentDetails* add_equipment_details();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >*
      mutable_equipment_details();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >&
      equipment_details() const;

  // @@protoc_insertion_point(class_scope:pbnavitia.StopAreaEquipment)
 private:
  inline void set_has_stop_area();
  inline void clear_has_stop_area();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::StopArea* stop_area_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails > equipment_details_;
  friend void  protobuf_AddDesc_type_2eproto();
  friend void protobuf_AssignDesc_type_2eproto();
  friend void protobuf_ShutdownFile_type_2eproto();

  void InitAsDefaultInstance();
  static StopAreaEquipment* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Code

// required string type = 1;
inline bool Code::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Code::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Code::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Code::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Code::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Code.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Code::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Code.type)
}
inline void Code::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Code.type)
}
inline void Code::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Code.type)
}
inline ::std::string* Code::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Code.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Code::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Code.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Code::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Code.type)
}

// required string value = 2;
inline bool Code::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Code::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Code::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Code::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Code::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Code.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Code::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Code.value)
}
inline void Code::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Code.value)
}
inline void Code::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Code.value)
}
inline ::std::string* Code::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Code.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Code::release_value() {
  // @@protoc_insertion_point(field_release:pbnavitia.Code.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Code::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Code.value)
}

// -------------------------------------------------------------------

// Period

// optional uint64 begin = 1;
inline bool Period::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Period::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Period::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Period::clear_begin() {
  begin_ = GOOGLE_ULONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::uint64 Period::begin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Period.begin)
  return begin_;
}
inline void Period::set_begin(::google::protobuf::uint64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Period.begin)
}

// optional uint64 end = 2;
inline bool Period::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Period::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Period::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Period::clear_end() {
  end_ = GOOGLE_ULONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::uint64 Period::end() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Period.end)
  return end_;
}
inline void Period::set_end(::google::protobuf::uint64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Period.end)
}

// -------------------------------------------------------------------

// Property

// optional string name = 1;
inline bool Property::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Property::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Property::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Property.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Property.name)
}
inline void Property::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Property.name)
}
inline void Property::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Property.name)
}
inline ::std::string* Property::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Property.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Property.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Property.name)
}

// optional string value = 2;
inline bool Property::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Property::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Property::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Property.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Property.value)
}
inline void Property::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Property.value)
}
inline void Property::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Property.value)
}
inline ::std::string* Property::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Property.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:pbnavitia.Property.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Property.value)
}

// -------------------------------------------------------------------

// Channel

// optional string id = 1;
inline bool Channel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Channel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Channel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Channel::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Channel::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Channel.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Channel.id)
}
inline void Channel::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Channel.id)
}
inline void Channel::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Channel.id)
}
inline ::std::string* Channel::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Channel.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Channel::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Channel.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Channel.id)
}

// optional string name = 2;
inline bool Channel::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Channel::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Channel::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Channel.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Channel.name)
}
inline void Channel::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Channel.name)
}
inline void Channel::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Channel.name)
}
inline ::std::string* Channel::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Channel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Channel::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Channel.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Channel.name)
}

// optional string content_type = 3;
inline bool Channel::has_content_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Channel::set_has_content_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Channel::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Channel::clear_content_type() {
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content_type();
}
inline const ::std::string& Channel::content_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Channel.content_type)
  return content_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_content_type(const ::std::string& value) {
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Channel.content_type)
}
inline void Channel::set_content_type(const char* value) {
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Channel.content_type)
}
inline void Channel::set_content_type(const char* value, size_t size) {
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Channel.content_type)
}
inline ::std::string* Channel::mutable_content_type() {
  set_has_content_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Channel.content_type)
  return content_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Channel::release_content_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Channel.content_type)
  clear_has_content_type();
  return content_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_content_type(::std::string* content_type) {
  if (content_type != NULL) {
    set_has_content_type();
  } else {
    clear_has_content_type();
  }
  content_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Channel.content_type)
}

// repeated .pbnavitia.Channel.ChannelType channel_types = 4;
inline int Channel::channel_types_size() const {
  return channel_types_.size();
}
inline void Channel::clear_channel_types() {
  channel_types_.Clear();
}
inline ::pbnavitia::Channel_ChannelType Channel::channel_types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Channel.channel_types)
  return static_cast< ::pbnavitia::Channel_ChannelType >(channel_types_.Get(index));
}
inline void Channel::set_channel_types(int index, ::pbnavitia::Channel_ChannelType value) {
  assert(::pbnavitia::Channel_ChannelType_IsValid(value));
  channel_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.Channel.channel_types)
}
inline void Channel::add_channel_types(::pbnavitia::Channel_ChannelType value) {
  assert(::pbnavitia::Channel_ChannelType_IsValid(value));
  channel_types_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Channel.channel_types)
}
inline const ::google::protobuf::RepeatedField<int>&
Channel::channel_types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Channel.channel_types)
  return channel_types_;
}
inline ::google::protobuf::RepeatedField<int>*
Channel::mutable_channel_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Channel.channel_types)
  return &channel_types_;
}

// -------------------------------------------------------------------

// MessageContent

// optional string text = 1;
inline bool MessageContent::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageContent::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageContent::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageContent::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& MessageContent::text() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MessageContent.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContent::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MessageContent.text)
}
inline void MessageContent::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MessageContent.text)
}
inline void MessageContent::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MessageContent.text)
}
inline ::std::string* MessageContent::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MessageContent.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContent::release_text() {
  // @@protoc_insertion_point(field_release:pbnavitia.MessageContent.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContent::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MessageContent.text)
}

// optional .pbnavitia.Channel channel = 4;
inline bool MessageContent::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageContent::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageContent::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageContent::clear_channel() {
  if (channel_ != NULL) channel_->::pbnavitia::Channel::Clear();
  clear_has_channel();
}
inline const ::pbnavitia::Channel& MessageContent::channel() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MessageContent.channel)
  return channel_ != NULL ? *channel_ : *default_instance_->channel_;
}
inline ::pbnavitia::Channel* MessageContent::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) {
    channel_ = new ::pbnavitia::Channel;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.MessageContent.channel)
  return channel_;
}
inline ::pbnavitia::Channel* MessageContent::release_channel() {
  // @@protoc_insertion_point(field_release:pbnavitia.MessageContent.channel)
  clear_has_channel();
  ::pbnavitia::Channel* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline void MessageContent::set_allocated_channel(::pbnavitia::Channel* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MessageContent.channel)
}

// -------------------------------------------------------------------

// Message

// optional string uri = 1;
inline bool Message::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Message::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.uri)
}
inline void Message::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.uri)
}
inline void Message::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.uri)
}
inline ::std::string* Message::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.uri)
}

// optional string message = 2;
inline bool Message::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.message)
}
inline void Message::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.message)
}
inline void Message::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.message)
}
inline ::std::string* Message::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.message)
}

// optional string title = 3;
inline bool Message::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Message::title() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.title)
}
inline void Message::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.title)
}
inline void Message::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.title)
}
inline ::std::string* Message::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_title() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.title)
}

// optional uint64 start_application_date = 4;
inline bool Message::has_start_application_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_start_application_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_start_application_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_start_application_date() {
  start_application_date_ = GOOGLE_ULONGLONG(0);
  clear_has_start_application_date();
}
inline ::google::protobuf::uint64 Message::start_application_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.start_application_date)
  return start_application_date_;
}
inline void Message::set_start_application_date(::google::protobuf::uint64 value) {
  set_has_start_application_date();
  start_application_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Message.start_application_date)
}

// optional uint64 end_application_date = 5;
inline bool Message::has_end_application_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_end_application_date() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_end_application_date() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_end_application_date() {
  end_application_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_application_date();
}
inline ::google::protobuf::uint64 Message::end_application_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.end_application_date)
  return end_application_date_;
}
inline void Message::set_end_application_date(::google::protobuf::uint64 value) {
  set_has_end_application_date();
  end_application_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Message.end_application_date)
}

// optional string start_application_daily_hour = 6;
inline bool Message::has_start_application_daily_hour() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_start_application_daily_hour() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_start_application_daily_hour() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_start_application_daily_hour() {
  start_application_daily_hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_application_daily_hour();
}
inline const ::std::string& Message::start_application_daily_hour() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.start_application_daily_hour)
  return start_application_daily_hour_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_start_application_daily_hour(const ::std::string& value) {
  set_has_start_application_daily_hour();
  start_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.start_application_daily_hour)
}
inline void Message::set_start_application_daily_hour(const char* value) {
  set_has_start_application_daily_hour();
  start_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.start_application_daily_hour)
}
inline void Message::set_start_application_daily_hour(const char* value, size_t size) {
  set_has_start_application_daily_hour();
  start_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.start_application_daily_hour)
}
inline ::std::string* Message::mutable_start_application_daily_hour() {
  set_has_start_application_daily_hour();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.start_application_daily_hour)
  return start_application_daily_hour_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_start_application_daily_hour() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.start_application_daily_hour)
  clear_has_start_application_daily_hour();
  return start_application_daily_hour_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_start_application_daily_hour(::std::string* start_application_daily_hour) {
  if (start_application_daily_hour != NULL) {
    set_has_start_application_daily_hour();
  } else {
    clear_has_start_application_daily_hour();
  }
  start_application_daily_hour_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_application_daily_hour);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.start_application_daily_hour)
}

// optional string end_application_daily_hour = 7;
inline bool Message::has_end_application_daily_hour() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_end_application_daily_hour() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_end_application_daily_hour() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_end_application_daily_hour() {
  end_application_daily_hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_application_daily_hour();
}
inline const ::std::string& Message::end_application_daily_hour() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.end_application_daily_hour)
  return end_application_daily_hour_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_end_application_daily_hour(const ::std::string& value) {
  set_has_end_application_daily_hour();
  end_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.end_application_daily_hour)
}
inline void Message::set_end_application_daily_hour(const char* value) {
  set_has_end_application_daily_hour();
  end_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.end_application_daily_hour)
}
inline void Message::set_end_application_daily_hour(const char* value, size_t size) {
  set_has_end_application_daily_hour();
  end_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.end_application_daily_hour)
}
inline ::std::string* Message::mutable_end_application_daily_hour() {
  set_has_end_application_daily_hour();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.end_application_daily_hour)
  return end_application_daily_hour_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_end_application_daily_hour() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.end_application_daily_hour)
  clear_has_end_application_daily_hour();
  return end_application_daily_hour_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_end_application_daily_hour(::std::string* end_application_daily_hour) {
  if (end_application_daily_hour != NULL) {
    set_has_end_application_daily_hour();
  } else {
    clear_has_end_application_daily_hour();
  }
  end_application_daily_hour_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_application_daily_hour);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.end_application_daily_hour)
}

// optional .pbnavitia.MessageStatus message_status = 8;
inline bool Message::has_message_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_message_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_message_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_message_status() {
  message_status_ = 0;
  clear_has_message_status();
}
inline ::pbnavitia::MessageStatus Message::message_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.message_status)
  return static_cast< ::pbnavitia::MessageStatus >(message_status_);
}
inline void Message::set_message_status(::pbnavitia::MessageStatus value) {
  assert(::pbnavitia::MessageStatus_IsValid(value));
  set_has_message_status();
  message_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Message.message_status)
}

// -------------------------------------------------------------------

// Severity

// optional string name = 1;
inline bool Severity::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Severity::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Severity::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Severity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Severity::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Severity.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Severity::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Severity.name)
}
inline void Severity::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Severity.name)
}
inline void Severity::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Severity.name)
}
inline ::std::string* Severity::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Severity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Severity::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Severity.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Severity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Severity.name)
}

// optional string color = 2;
inline bool Severity::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Severity::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Severity::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Severity::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& Severity::color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Severity.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Severity::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Severity.color)
}
inline void Severity::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Severity.color)
}
inline void Severity::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Severity.color)
}
inline ::std::string* Severity::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Severity.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Severity::release_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.Severity.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Severity::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Severity.color)
}

// optional .pbnavitia.Severity.Effect effect = 3 [default = UNKNOWN_EFFECT];
inline bool Severity::has_effect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Severity::set_has_effect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Severity::clear_has_effect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Severity::clear_effect() {
  effect_ = 8;
  clear_has_effect();
}
inline ::pbnavitia::Severity_Effect Severity::effect() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Severity.effect)
  return static_cast< ::pbnavitia::Severity_Effect >(effect_);
}
inline void Severity::set_effect(::pbnavitia::Severity_Effect value) {
  assert(::pbnavitia::Severity_Effect_IsValid(value));
  set_has_effect();
  effect_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Severity.effect)
}

// optional int32 priority = 4;
inline bool Severity::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Severity::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Severity::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Severity::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 Severity::priority() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Severity.priority)
  return priority_;
}
inline void Severity::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Severity.priority)
}

// -------------------------------------------------------------------

// StopTimeUpdate

// optional .pbnavitia.StopTime amended_stop_time = 1;
inline bool StopTimeUpdate::has_amended_stop_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopTimeUpdate::set_has_amended_stop_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopTimeUpdate::clear_has_amended_stop_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopTimeUpdate::clear_amended_stop_time() {
  if (amended_stop_time_ != NULL) amended_stop_time_->::pbnavitia::StopTime::Clear();
  clear_has_amended_stop_time();
}
inline const ::pbnavitia::StopTime& StopTimeUpdate::amended_stop_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.amended_stop_time)
  return amended_stop_time_ != NULL ? *amended_stop_time_ : *default_instance_->amended_stop_time_;
}
inline ::pbnavitia::StopTime* StopTimeUpdate::mutable_amended_stop_time() {
  set_has_amended_stop_time();
  if (amended_stop_time_ == NULL) {
    amended_stop_time_ = new ::pbnavitia::StopTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTimeUpdate.amended_stop_time)
  return amended_stop_time_;
}
inline ::pbnavitia::StopTime* StopTimeUpdate::release_amended_stop_time() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTimeUpdate.amended_stop_time)
  clear_has_amended_stop_time();
  ::pbnavitia::StopTime* temp = amended_stop_time_;
  amended_stop_time_ = NULL;
  return temp;
}
inline void StopTimeUpdate::set_allocated_amended_stop_time(::pbnavitia::StopTime* amended_stop_time) {
  delete amended_stop_time_;
  amended_stop_time_ = amended_stop_time;
  if (amended_stop_time) {
    set_has_amended_stop_time();
  } else {
    clear_has_amended_stop_time();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTimeUpdate.amended_stop_time)
}

// optional .pbnavitia.StopTime base_stop_time = 2;
inline bool StopTimeUpdate::has_base_stop_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopTimeUpdate::set_has_base_stop_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopTimeUpdate::clear_has_base_stop_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopTimeUpdate::clear_base_stop_time() {
  if (base_stop_time_ != NULL) base_stop_time_->::pbnavitia::StopTime::Clear();
  clear_has_base_stop_time();
}
inline const ::pbnavitia::StopTime& StopTimeUpdate::base_stop_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.base_stop_time)
  return base_stop_time_ != NULL ? *base_stop_time_ : *default_instance_->base_stop_time_;
}
inline ::pbnavitia::StopTime* StopTimeUpdate::mutable_base_stop_time() {
  set_has_base_stop_time();
  if (base_stop_time_ == NULL) {
    base_stop_time_ = new ::pbnavitia::StopTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTimeUpdate.base_stop_time)
  return base_stop_time_;
}
inline ::pbnavitia::StopTime* StopTimeUpdate::release_base_stop_time() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTimeUpdate.base_stop_time)
  clear_has_base_stop_time();
  ::pbnavitia::StopTime* temp = base_stop_time_;
  base_stop_time_ = NULL;
  return temp;
}
inline void StopTimeUpdate::set_allocated_base_stop_time(::pbnavitia::StopTime* base_stop_time) {
  delete base_stop_time_;
  base_stop_time_ = base_stop_time;
  if (base_stop_time) {
    set_has_base_stop_time();
  } else {
    clear_has_base_stop_time();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTimeUpdate.base_stop_time)
}

// optional string cause = 3;
inline bool StopTimeUpdate::has_cause() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopTimeUpdate::set_has_cause() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopTimeUpdate::clear_has_cause() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopTimeUpdate::clear_cause() {
  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cause();
}
inline const ::std::string& StopTimeUpdate::cause() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.cause)
  return cause_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTimeUpdate::set_cause(const ::std::string& value) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.cause)
}
inline void StopTimeUpdate::set_cause(const char* value) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopTimeUpdate.cause)
}
inline void StopTimeUpdate::set_cause(const char* value, size_t size) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopTimeUpdate.cause)
}
inline ::std::string* StopTimeUpdate::mutable_cause() {
  set_has_cause();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTimeUpdate.cause)
  return cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopTimeUpdate::release_cause() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTimeUpdate.cause)
  clear_has_cause();
  return cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTimeUpdate::set_allocated_cause(::std::string* cause) {
  if (cause != NULL) {
    set_has_cause();
  } else {
    clear_has_cause();
  }
  cause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cause);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTimeUpdate.cause)
}

// optional .pbnavitia.StopTimeUpdateStatus effect = 4;
inline bool StopTimeUpdate::has_effect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopTimeUpdate::set_has_effect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopTimeUpdate::clear_has_effect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopTimeUpdate::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
inline ::pbnavitia::StopTimeUpdateStatus StopTimeUpdate::effect() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.effect)
  return static_cast< ::pbnavitia::StopTimeUpdateStatus >(effect_);
}
inline void StopTimeUpdate::set_effect(::pbnavitia::StopTimeUpdateStatus value) {
  assert(::pbnavitia::StopTimeUpdateStatus_IsValid(value));
  set_has_effect();
  effect_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.effect)
}

// optional .pbnavitia.StopPoint stop_point = 5;
inline bool StopTimeUpdate::has_stop_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StopTimeUpdate::set_has_stop_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StopTimeUpdate::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StopTimeUpdate::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& StopTimeUpdate::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* StopTimeUpdate::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTimeUpdate.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* StopTimeUpdate::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTimeUpdate.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void StopTimeUpdate::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTimeUpdate.stop_point)
}

// optional .pbnavitia.StopTimeUpdateStatus departure_status = 6;
inline bool StopTimeUpdate::has_departure_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StopTimeUpdate::set_has_departure_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StopTimeUpdate::clear_has_departure_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StopTimeUpdate::clear_departure_status() {
  departure_status_ = 0;
  clear_has_departure_status();
}
inline ::pbnavitia::StopTimeUpdateStatus StopTimeUpdate::departure_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.departure_status)
  return static_cast< ::pbnavitia::StopTimeUpdateStatus >(departure_status_);
}
inline void StopTimeUpdate::set_departure_status(::pbnavitia::StopTimeUpdateStatus value) {
  assert(::pbnavitia::StopTimeUpdateStatus_IsValid(value));
  set_has_departure_status();
  departure_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.departure_status)
}

// optional .pbnavitia.StopTimeUpdateStatus arrival_status = 7;
inline bool StopTimeUpdate::has_arrival_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StopTimeUpdate::set_has_arrival_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StopTimeUpdate::clear_has_arrival_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StopTimeUpdate::clear_arrival_status() {
  arrival_status_ = 0;
  clear_has_arrival_status();
}
inline ::pbnavitia::StopTimeUpdateStatus StopTimeUpdate::arrival_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.arrival_status)
  return static_cast< ::pbnavitia::StopTimeUpdateStatus >(arrival_status_);
}
inline void StopTimeUpdate::set_arrival_status(::pbnavitia::StopTimeUpdateStatus value) {
  assert(::pbnavitia::StopTimeUpdateStatus_IsValid(value));
  set_has_arrival_status();
  arrival_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.arrival_status)
}

// optional bool is_detour = 8;
inline bool StopTimeUpdate::has_is_detour() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StopTimeUpdate::set_has_is_detour() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StopTimeUpdate::clear_has_is_detour() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StopTimeUpdate::clear_is_detour() {
  is_detour_ = false;
  clear_has_is_detour();
}
inline bool StopTimeUpdate::is_detour() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.is_detour)
  return is_detour_;
}
inline void StopTimeUpdate::set_is_detour(bool value) {
  set_has_is_detour();
  is_detour_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.is_detour)
}

// -------------------------------------------------------------------

// LineSectionImpact

// optional .pbnavitia.PtObject from = 1;
inline bool LineSectionImpact::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineSectionImpact::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineSectionImpact::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineSectionImpact::clear_from() {
  if (from_ != NULL) from_->::pbnavitia::PtObject::Clear();
  clear_has_from();
}
inline const ::pbnavitia::PtObject& LineSectionImpact::from() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineSectionImpact.from)
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
inline ::pbnavitia::PtObject* LineSectionImpact::mutable_from() {
  set_has_from();
  if (from_ == NULL) {
    from_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineSectionImpact.from)
  return from_;
}
inline ::pbnavitia::PtObject* LineSectionImpact::release_from() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineSectionImpact.from)
  clear_has_from();
  ::pbnavitia::PtObject* temp = from_;
  from_ = NULL;
  return temp;
}
inline void LineSectionImpact::set_allocated_from(::pbnavitia::PtObject* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineSectionImpact.from)
}

// optional .pbnavitia.PtObject to = 2;
inline bool LineSectionImpact::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineSectionImpact::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineSectionImpact::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineSectionImpact::clear_to() {
  if (to_ != NULL) to_->::pbnavitia::PtObject::Clear();
  clear_has_to();
}
inline const ::pbnavitia::PtObject& LineSectionImpact::to() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineSectionImpact.to)
  return to_ != NULL ? *to_ : *default_instance_->to_;
}
inline ::pbnavitia::PtObject* LineSectionImpact::mutable_to() {
  set_has_to();
  if (to_ == NULL) {
    to_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineSectionImpact.to)
  return to_;
}
inline ::pbnavitia::PtObject* LineSectionImpact::release_to() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineSectionImpact.to)
  clear_has_to();
  ::pbnavitia::PtObject* temp = to_;
  to_ = NULL;
  return temp;
}
inline void LineSectionImpact::set_allocated_to(::pbnavitia::PtObject* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineSectionImpact.to)
}

// repeated .pbnavitia.Route routes = 3;
inline int LineSectionImpact::routes_size() const {
  return routes_.size();
}
inline void LineSectionImpact::clear_routes() {
  routes_.Clear();
}
inline const ::pbnavitia::Route& LineSectionImpact::routes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineSectionImpact.routes)
  return routes_.Get(index);
}
inline ::pbnavitia::Route* LineSectionImpact::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineSectionImpact.routes)
  return routes_.Mutable(index);
}
inline ::pbnavitia::Route* LineSectionImpact::add_routes() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineSectionImpact.routes)
  return routes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
LineSectionImpact::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineSectionImpact.routes)
  return &routes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
LineSectionImpact::routes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineSectionImpact.routes)
  return routes_;
}

// -------------------------------------------------------------------

// ImpactedObject

// optional .pbnavitia.PtObject pt_object = 1;
inline bool ImpactedObject::has_pt_object() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImpactedObject::set_has_pt_object() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImpactedObject::clear_has_pt_object() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImpactedObject::clear_pt_object() {
  if (pt_object_ != NULL) pt_object_->::pbnavitia::PtObject::Clear();
  clear_has_pt_object();
}
inline const ::pbnavitia::PtObject& ImpactedObject::pt_object() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ImpactedObject.pt_object)
  return pt_object_ != NULL ? *pt_object_ : *default_instance_->pt_object_;
}
inline ::pbnavitia::PtObject* ImpactedObject::mutable_pt_object() {
  set_has_pt_object();
  if (pt_object_ == NULL) {
    pt_object_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.ImpactedObject.pt_object)
  return pt_object_;
}
inline ::pbnavitia::PtObject* ImpactedObject::release_pt_object() {
  // @@protoc_insertion_point(field_release:pbnavitia.ImpactedObject.pt_object)
  clear_has_pt_object();
  ::pbnavitia::PtObject* temp = pt_object_;
  pt_object_ = NULL;
  return temp;
}
inline void ImpactedObject::set_allocated_pt_object(::pbnavitia::PtObject* pt_object) {
  delete pt_object_;
  pt_object_ = pt_object;
  if (pt_object) {
    set_has_pt_object();
  } else {
    clear_has_pt_object();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ImpactedObject.pt_object)
}

// repeated .pbnavitia.StopTimeUpdate impacted_stops = 2;
inline int ImpactedObject::impacted_stops_size() const {
  return impacted_stops_.size();
}
inline void ImpactedObject::clear_impacted_stops() {
  impacted_stops_.Clear();
}
inline const ::pbnavitia::StopTimeUpdate& ImpactedObject::impacted_stops(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.ImpactedObject.impacted_stops)
  return impacted_stops_.Get(index);
}
inline ::pbnavitia::StopTimeUpdate* ImpactedObject::mutable_impacted_stops(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.ImpactedObject.impacted_stops)
  return impacted_stops_.Mutable(index);
}
inline ::pbnavitia::StopTimeUpdate* ImpactedObject::add_impacted_stops() {
  // @@protoc_insertion_point(field_add:pbnavitia.ImpactedObject.impacted_stops)
  return impacted_stops_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTimeUpdate >*
ImpactedObject::mutable_impacted_stops() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.ImpactedObject.impacted_stops)
  return &impacted_stops_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTimeUpdate >&
ImpactedObject::impacted_stops() const {
  // @@protoc_insertion_point(field_list:pbnavitia.ImpactedObject.impacted_stops)
  return impacted_stops_;
}

// optional .pbnavitia.LineSectionImpact impacted_section = 3;
inline bool ImpactedObject::has_impacted_section() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImpactedObject::set_has_impacted_section() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImpactedObject::clear_has_impacted_section() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImpactedObject::clear_impacted_section() {
  if (impacted_section_ != NULL) impacted_section_->::pbnavitia::LineSectionImpact::Clear();
  clear_has_impacted_section();
}
inline const ::pbnavitia::LineSectionImpact& ImpactedObject::impacted_section() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ImpactedObject.impacted_section)
  return impacted_section_ != NULL ? *impacted_section_ : *default_instance_->impacted_section_;
}
inline ::pbnavitia::LineSectionImpact* ImpactedObject::mutable_impacted_section() {
  set_has_impacted_section();
  if (impacted_section_ == NULL) {
    impacted_section_ = new ::pbnavitia::LineSectionImpact;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.ImpactedObject.impacted_section)
  return impacted_section_;
}
inline ::pbnavitia::LineSectionImpact* ImpactedObject::release_impacted_section() {
  // @@protoc_insertion_point(field_release:pbnavitia.ImpactedObject.impacted_section)
  clear_has_impacted_section();
  ::pbnavitia::LineSectionImpact* temp = impacted_section_;
  impacted_section_ = NULL;
  return temp;
}
inline void ImpactedObject::set_allocated_impacted_section(::pbnavitia::LineSectionImpact* impacted_section) {
  delete impacted_section_;
  impacted_section_ = impacted_section;
  if (impacted_section) {
    set_has_impacted_section();
  } else {
    clear_has_impacted_section();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ImpactedObject.impacted_section)
}

// -------------------------------------------------------------------

// DisruptionProperty

// required string key = 1;
inline bool DisruptionProperty::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisruptionProperty::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisruptionProperty::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisruptionProperty::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& DisruptionProperty::key() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DisruptionProperty.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisruptionProperty::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.DisruptionProperty.key)
}
inline void DisruptionProperty::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.DisruptionProperty.key)
}
inline void DisruptionProperty::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.DisruptionProperty.key)
}
inline ::std::string* DisruptionProperty::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pbnavitia.DisruptionProperty.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisruptionProperty::release_key() {
  // @@protoc_insertion_point(field_release:pbnavitia.DisruptionProperty.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisruptionProperty::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DisruptionProperty.key)
}

// required string type = 2;
inline bool DisruptionProperty::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DisruptionProperty::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DisruptionProperty::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DisruptionProperty::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& DisruptionProperty::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DisruptionProperty.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisruptionProperty::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.DisruptionProperty.type)
}
inline void DisruptionProperty::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.DisruptionProperty.type)
}
inline void DisruptionProperty::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.DisruptionProperty.type)
}
inline ::std::string* DisruptionProperty::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.DisruptionProperty.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisruptionProperty::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.DisruptionProperty.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisruptionProperty::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DisruptionProperty.type)
}

// required string value = 3;
inline bool DisruptionProperty::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DisruptionProperty::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DisruptionProperty::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DisruptionProperty::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& DisruptionProperty::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DisruptionProperty.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisruptionProperty::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.DisruptionProperty.value)
}
inline void DisruptionProperty::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.DisruptionProperty.value)
}
inline void DisruptionProperty::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.DisruptionProperty.value)
}
inline ::std::string* DisruptionProperty::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pbnavitia.DisruptionProperty.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisruptionProperty::release_value() {
  // @@protoc_insertion_point(field_release:pbnavitia.DisruptionProperty.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisruptionProperty::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DisruptionProperty.value)
}

// -------------------------------------------------------------------

// Impact

// optional string uri = 1;
inline bool Impact::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Impact::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Impact::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Impact::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Impact::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.uri)
}
inline void Impact::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.uri)
}
inline void Impact::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.uri)
}
inline ::std::string* Impact::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Impact::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.uri)
}

// optional string disruption_uri = 2;
inline bool Impact::has_disruption_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Impact::set_has_disruption_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Impact::clear_has_disruption_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Impact::clear_disruption_uri() {
  disruption_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_disruption_uri();
}
inline const ::std::string& Impact::disruption_uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.disruption_uri)
  return disruption_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_disruption_uri(const ::std::string& value) {
  set_has_disruption_uri();
  disruption_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.disruption_uri)
}
inline void Impact::set_disruption_uri(const char* value) {
  set_has_disruption_uri();
  disruption_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.disruption_uri)
}
inline void Impact::set_disruption_uri(const char* value, size_t size) {
  set_has_disruption_uri();
  disruption_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.disruption_uri)
}
inline ::std::string* Impact::mutable_disruption_uri() {
  set_has_disruption_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.disruption_uri)
  return disruption_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Impact::release_disruption_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.disruption_uri)
  clear_has_disruption_uri();
  return disruption_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_allocated_disruption_uri(::std::string* disruption_uri) {
  if (disruption_uri != NULL) {
    set_has_disruption_uri();
  } else {
    clear_has_disruption_uri();
  }
  disruption_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disruption_uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.disruption_uri)
}

// repeated .pbnavitia.Period application_periods = 10;
inline int Impact::application_periods_size() const {
  return application_periods_.size();
}
inline void Impact::clear_application_periods() {
  application_periods_.Clear();
}
inline const ::pbnavitia::Period& Impact::application_periods(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.application_periods)
  return application_periods_.Get(index);
}
inline ::pbnavitia::Period* Impact::mutable_application_periods(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.application_periods)
  return application_periods_.Mutable(index);
}
inline ::pbnavitia::Period* Impact::add_application_periods() {
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.application_periods)
  return application_periods_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >*
Impact::mutable_application_periods() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.application_periods)
  return &application_periods_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >&
Impact::application_periods() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.application_periods)
  return application_periods_;
}

// optional .pbnavitia.ActiveStatus status = 11;
inline bool Impact::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Impact::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Impact::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Impact::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pbnavitia::ActiveStatus Impact::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.status)
  return static_cast< ::pbnavitia::ActiveStatus >(status_);
}
inline void Impact::set_status(::pbnavitia::ActiveStatus value) {
  assert(::pbnavitia::ActiveStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.status)
}

// optional uint64 updated_at = 12;
inline bool Impact::has_updated_at() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Impact::set_has_updated_at() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Impact::clear_has_updated_at() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Impact::clear_updated_at() {
  updated_at_ = GOOGLE_ULONGLONG(0);
  clear_has_updated_at();
}
inline ::google::protobuf::uint64 Impact::updated_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.updated_at)
  return updated_at_;
}
inline void Impact::set_updated_at(::google::protobuf::uint64 value) {
  set_has_updated_at();
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.updated_at)
}

// repeated string tags = 13;
inline int Impact::tags_size() const {
  return tags_.size();
}
inline void Impact::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Impact::tags(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.tags)
  return tags_.Get(index);
}
inline ::std::string* Impact::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.tags)
  return tags_.Mutable(index);
}
inline void Impact::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Impact::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.tags)
}
inline void Impact::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.tags)
}
inline ::std::string* Impact::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Impact.tags)
  return tags_.Add();
}
inline void Impact::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.tags)
}
inline void Impact::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Impact.tags)
}
inline void Impact::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Impact.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Impact::tags() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Impact::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.tags)
  return &tags_;
}

// optional string cause = 14;
inline bool Impact::has_cause() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Impact::set_has_cause() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Impact::clear_has_cause() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Impact::clear_cause() {
  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cause();
}
inline const ::std::string& Impact::cause() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.cause)
  return cause_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_cause(const ::std::string& value) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.cause)
}
inline void Impact::set_cause(const char* value) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.cause)
}
inline void Impact::set_cause(const char* value, size_t size) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.cause)
}
inline ::std::string* Impact::mutable_cause() {
  set_has_cause();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.cause)
  return cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Impact::release_cause() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.cause)
  clear_has_cause();
  return cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_allocated_cause(::std::string* cause) {
  if (cause != NULL) {
    set_has_cause();
  } else {
    clear_has_cause();
  }
  cause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cause);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.cause)
}

// repeated .pbnavitia.MessageContent messages = 15;
inline int Impact::messages_size() const {
  return messages_.size();
}
inline void Impact::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::MessageContent& Impact::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::MessageContent* Impact::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::MessageContent* Impact::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::MessageContent >*
Impact::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::MessageContent >&
Impact::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.messages)
  return messages_;
}

// optional .pbnavitia.Severity severity = 16;
inline bool Impact::has_severity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Impact::set_has_severity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Impact::clear_has_severity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Impact::clear_severity() {
  if (severity_ != NULL) severity_->::pbnavitia::Severity::Clear();
  clear_has_severity();
}
inline const ::pbnavitia::Severity& Impact::severity() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.severity)
  return severity_ != NULL ? *severity_ : *default_instance_->severity_;
}
inline ::pbnavitia::Severity* Impact::mutable_severity() {
  set_has_severity();
  if (severity_ == NULL) {
    severity_ = new ::pbnavitia::Severity;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.severity)
  return severity_;
}
inline ::pbnavitia::Severity* Impact::release_severity() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.severity)
  clear_has_severity();
  ::pbnavitia::Severity* temp = severity_;
  severity_ = NULL;
  return temp;
}
inline void Impact::set_allocated_severity(::pbnavitia::Severity* severity) {
  delete severity_;
  severity_ = severity;
  if (severity) {
    set_has_severity();
  } else {
    clear_has_severity();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.severity)
}

// optional string contributor = 17;
inline bool Impact::has_contributor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Impact::set_has_contributor() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Impact::clear_has_contributor() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Impact::clear_contributor() {
  contributor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contributor();
}
inline const ::std::string& Impact::contributor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.contributor)
  return contributor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_contributor(const ::std::string& value) {
  set_has_contributor();
  contributor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.contributor)
}
inline void Impact::set_contributor(const char* value) {
  set_has_contributor();
  contributor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.contributor)
}
inline void Impact::set_contributor(const char* value, size_t size) {
  set_has_contributor();
  contributor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.contributor)
}
inline ::std::string* Impact::mutable_contributor() {
  set_has_contributor();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.contributor)
  return contributor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Impact::release_contributor() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.contributor)
  clear_has_contributor();
  return contributor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_allocated_contributor(::std::string* contributor) {
  if (contributor != NULL) {
    set_has_contributor();
  } else {
    clear_has_contributor();
  }
  contributor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contributor);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.contributor)
}

// repeated .pbnavitia.ImpactedObject impacted_objects = 18;
inline int Impact::impacted_objects_size() const {
  return impacted_objects_.size();
}
inline void Impact::clear_impacted_objects() {
  impacted_objects_.Clear();
}
inline const ::pbnavitia::ImpactedObject& Impact::impacted_objects(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.impacted_objects)
  return impacted_objects_.Get(index);
}
inline ::pbnavitia::ImpactedObject* Impact::mutable_impacted_objects(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.impacted_objects)
  return impacted_objects_.Mutable(index);
}
inline ::pbnavitia::ImpactedObject* Impact::add_impacted_objects() {
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.impacted_objects)
  return impacted_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::ImpactedObject >*
Impact::mutable_impacted_objects() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.impacted_objects)
  return &impacted_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ImpactedObject >&
Impact::impacted_objects() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.impacted_objects)
  return impacted_objects_;
}

// optional string category = 19;
inline bool Impact::has_category() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Impact::set_has_category() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Impact::clear_has_category() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Impact::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& Impact::category() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.category)
  return category_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.category)
}
inline void Impact::set_category(const char* value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.category)
}
inline void Impact::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.category)
}
inline ::std::string* Impact::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Impact::release_category() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Impact::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.category)
}

// repeated .pbnavitia.DisruptionProperty properties = 20;
inline int Impact::properties_size() const {
  return properties_.size();
}
inline void Impact::clear_properties() {
  properties_.Clear();
}
inline const ::pbnavitia::DisruptionProperty& Impact::properties(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.properties)
  return properties_.Get(index);
}
inline ::pbnavitia::DisruptionProperty* Impact::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.properties)
  return properties_.Mutable(index);
}
inline ::pbnavitia::DisruptionProperty* Impact::add_properties() {
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::DisruptionProperty >*
Impact::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::DisruptionProperty >&
Impact::properties() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.properties)
  return properties_;
}

// -------------------------------------------------------------------

// GeographicalCoord

// required double lon = 1;
inline bool GeographicalCoord::has_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeographicalCoord::set_has_lon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeographicalCoord::clear_has_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeographicalCoord::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double GeographicalCoord::lon() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeographicalCoord.lon)
  return lon_;
}
inline void GeographicalCoord::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeographicalCoord.lon)
}

// required double lat = 2;
inline bool GeographicalCoord::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeographicalCoord::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeographicalCoord::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeographicalCoord::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double GeographicalCoord::lat() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeographicalCoord.lat)
  return lat_;
}
inline void GeographicalCoord::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeographicalCoord.lat)
}

// -------------------------------------------------------------------

// AdministrativeRegion

// optional string uri = 2;
inline bool AdministrativeRegion::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdministrativeRegion::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdministrativeRegion::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdministrativeRegion::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& AdministrativeRegion::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.uri)
}
inline void AdministrativeRegion::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.uri)
}
inline void AdministrativeRegion::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.uri)
}
inline ::std::string* AdministrativeRegion::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdministrativeRegion::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.uri)
}

// optional string name = 3;
inline bool AdministrativeRegion::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdministrativeRegion::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdministrativeRegion::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdministrativeRegion::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AdministrativeRegion::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.name)
}
inline void AdministrativeRegion::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.name)
}
inline void AdministrativeRegion::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.name)
}
inline ::std::string* AdministrativeRegion::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdministrativeRegion::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.name)
}

// optional string zip_code = 4;
inline bool AdministrativeRegion::has_zip_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdministrativeRegion::set_has_zip_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdministrativeRegion::clear_has_zip_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdministrativeRegion::clear_zip_code() {
  zip_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zip_code();
}
inline const ::std::string& AdministrativeRegion::zip_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.zip_code)
  return zip_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_zip_code(const ::std::string& value) {
  set_has_zip_code();
  zip_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.zip_code)
}
inline void AdministrativeRegion::set_zip_code(const char* value) {
  set_has_zip_code();
  zip_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.zip_code)
}
inline void AdministrativeRegion::set_zip_code(const char* value, size_t size) {
  set_has_zip_code();
  zip_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.zip_code)
}
inline ::std::string* AdministrativeRegion::mutable_zip_code() {
  set_has_zip_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.zip_code)
  return zip_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdministrativeRegion::release_zip_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.zip_code)
  clear_has_zip_code();
  return zip_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_allocated_zip_code(::std::string* zip_code) {
  if (zip_code != NULL) {
    set_has_zip_code();
  } else {
    clear_has_zip_code();
  }
  zip_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip_code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.zip_code)
}

// optional int32 level = 5;
inline bool AdministrativeRegion::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdministrativeRegion::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdministrativeRegion::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdministrativeRegion::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 AdministrativeRegion::level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.level)
  return level_;
}
inline void AdministrativeRegion::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.level)
}

// optional .pbnavitia.GeographicalCoord coord = 6;
inline bool AdministrativeRegion::has_coord() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdministrativeRegion::set_has_coord() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdministrativeRegion::clear_has_coord() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdministrativeRegion::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
inline const ::pbnavitia::GeographicalCoord& AdministrativeRegion::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::pbnavitia::GeographicalCoord* AdministrativeRegion::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.coord)
  return coord_;
}
inline ::pbnavitia::GeographicalCoord* AdministrativeRegion::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void AdministrativeRegion::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.coord)
}

// optional string label = 7;
inline bool AdministrativeRegion::has_label() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdministrativeRegion::set_has_label() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdministrativeRegion::clear_has_label() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdministrativeRegion::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& AdministrativeRegion::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.label)
}
inline void AdministrativeRegion::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.label)
}
inline void AdministrativeRegion::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.label)
}
inline ::std::string* AdministrativeRegion::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdministrativeRegion::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.label)
}

// optional string insee = 8;
inline bool AdministrativeRegion::has_insee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdministrativeRegion::set_has_insee() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdministrativeRegion::clear_has_insee() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdministrativeRegion::clear_insee() {
  insee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insee();
}
inline const ::std::string& AdministrativeRegion::insee() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.insee)
  return insee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_insee(const ::std::string& value) {
  set_has_insee();
  insee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.insee)
}
inline void AdministrativeRegion::set_insee(const char* value) {
  set_has_insee();
  insee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.insee)
}
inline void AdministrativeRegion::set_insee(const char* value, size_t size) {
  set_has_insee();
  insee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.insee)
}
inline ::std::string* AdministrativeRegion::mutable_insee() {
  set_has_insee();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.insee)
  return insee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdministrativeRegion::release_insee() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.insee)
  clear_has_insee();
  return insee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdministrativeRegion::set_allocated_insee(::std::string* insee) {
  if (insee != NULL) {
    set_has_insee();
  } else {
    clear_has_insee();
  }
  insee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insee);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.insee)
}

// repeated .pbnavitia.StopArea main_stop_areas = 9;
inline int AdministrativeRegion::main_stop_areas_size() const {
  return main_stop_areas_.size();
}
inline void AdministrativeRegion::clear_main_stop_areas() {
  main_stop_areas_.Clear();
}
inline const ::pbnavitia::StopArea& AdministrativeRegion::main_stop_areas(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.main_stop_areas)
  return main_stop_areas_.Get(index);
}
inline ::pbnavitia::StopArea* AdministrativeRegion::mutable_main_stop_areas(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.main_stop_areas)
  return main_stop_areas_.Mutable(index);
}
inline ::pbnavitia::StopArea* AdministrativeRegion::add_main_stop_areas() {
  // @@protoc_insertion_point(field_add:pbnavitia.AdministrativeRegion.main_stop_areas)
  return main_stop_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
AdministrativeRegion::mutable_main_stop_areas() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.AdministrativeRegion.main_stop_areas)
  return &main_stop_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
AdministrativeRegion::main_stop_areas() const {
  // @@protoc_insertion_point(field_list:pbnavitia.AdministrativeRegion.main_stop_areas)
  return main_stop_areas_;
}

// -------------------------------------------------------------------

// Comment

// optional string value = 1;
inline bool Comment::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Comment::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Comment::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Comment::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Comment::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Comment.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Comment::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Comment.value)
}
inline void Comment::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Comment.value)
}
inline void Comment::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Comment.value)
}
inline ::std::string* Comment::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Comment.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Comment::release_value() {
  // @@protoc_insertion_point(field_release:pbnavitia.Comment.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Comment::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Comment.value)
}

// optional string type = 2;
inline bool Comment::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Comment::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Comment::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Comment::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Comment::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Comment.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Comment::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Comment.type)
}
inline void Comment::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Comment.type)
}
inline void Comment::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Comment.type)
}
inline ::std::string* Comment::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Comment.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Comment::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Comment.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Comment::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Comment.type)
}

// -------------------------------------------------------------------

// StopArea

// optional string name = 3;
inline bool StopArea::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopArea::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopArea::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopArea::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StopArea::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopArea::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.name)
}
inline void StopArea::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.name)
}
inline void StopArea::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.name)
}
inline ::std::string* StopArea::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopArea::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopArea::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.name)
}

// optional string uri = 4;
inline bool StopArea::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopArea::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopArea::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopArea::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& StopArea::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopArea::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.uri)
}
inline void StopArea::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.uri)
}
inline void StopArea::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.uri)
}
inline ::std::string* StopArea::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopArea::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopArea::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.uri)
}

// optional .pbnavitia.GeographicalCoord coord = 5;
inline bool StopArea::has_coord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopArea::set_has_coord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopArea::clear_has_coord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopArea::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
inline const ::pbnavitia::GeographicalCoord& StopArea::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::pbnavitia::GeographicalCoord* StopArea::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.coord)
  return coord_;
}
inline ::pbnavitia::GeographicalCoord* StopArea::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void StopArea::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.coord)
}

// repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
inline int StopArea::administrative_regions_size() const {
  return administrative_regions_.size();
}
inline void StopArea::clear_administrative_regions() {
  administrative_regions_.Clear();
}
inline const ::pbnavitia::AdministrativeRegion& StopArea::administrative_regions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.administrative_regions)
  return administrative_regions_.Get(index);
}
inline ::pbnavitia::AdministrativeRegion* StopArea::mutable_administrative_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.administrative_regions)
  return administrative_regions_.Mutable(index);
}
inline ::pbnavitia::AdministrativeRegion* StopArea::add_administrative_regions() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.administrative_regions)
  return administrative_regions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
StopArea::mutable_administrative_regions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.administrative_regions)
  return &administrative_regions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
StopArea::administrative_regions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.administrative_regions)
  return administrative_regions_;
}

// repeated .pbnavitia.StopPoint stop_points = 8;
inline int StopArea::stop_points_size() const {
  return stop_points_.size();
}
inline void StopArea::clear_stop_points() {
  stop_points_.Clear();
}
inline const ::pbnavitia::StopPoint& StopArea::stop_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.stop_points)
  return stop_points_.Get(index);
}
inline ::pbnavitia::StopPoint* StopArea::mutable_stop_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.stop_points)
  return stop_points_.Mutable(index);
}
inline ::pbnavitia::StopPoint* StopArea::add_stop_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.stop_points)
  return stop_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
StopArea::mutable_stop_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.stop_points)
  return &stop_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
StopArea::stop_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.stop_points)
  return stop_points_;
}

// repeated .pbnavitia.Message messages = 9;
inline int StopArea::messages_size() const {
  return messages_.size();
}
inline void StopArea::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& StopArea::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* StopArea::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* StopArea::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
StopArea::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
StopArea::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.messages)
  return messages_;
}

// repeated string impact_uris = 25;
inline int StopArea::impact_uris_size() const {
  return impact_uris_.size();
}
inline void StopArea::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& StopArea::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* StopArea::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void StopArea::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void StopArea::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.impact_uris)
}
inline void StopArea::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.impact_uris)
}
inline ::std::string* StopArea::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.StopArea.impact_uris)
  return impact_uris_.Add();
}
inline void StopArea::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.impact_uris)
}
inline void StopArea::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.StopArea.impact_uris)
}
inline void StopArea::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.StopArea.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StopArea::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StopArea::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Comment comments = 23;
inline int StopArea::comments_size() const {
  return comments_.size();
}
inline void StopArea::clear_comments() {
  comments_.Clear();
}
inline const ::pbnavitia::Comment& StopArea::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.comments)
  return comments_.Get(index);
}
inline ::pbnavitia::Comment* StopArea::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.comments)
  return comments_.Mutable(index);
}
inline ::pbnavitia::Comment* StopArea::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.comments)
  return comments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
StopArea::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.comments)
  return &comments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
StopArea::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.comments)
  return comments_;
}

// repeated .pbnavitia.Code codes = 12;
inline int StopArea::codes_size() const {
  return codes_.size();
}
inline void StopArea::clear_codes() {
  codes_.Clear();
}
inline const ::pbnavitia::Code& StopArea::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.codes)
  return codes_.Get(index);
}
inline ::pbnavitia::Code* StopArea::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.codes)
  return codes_.Mutable(index);
}
inline ::pbnavitia::Code* StopArea::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.codes)
  return codes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
StopArea::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.codes)
  return &codes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
StopArea::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.codes)
  return codes_;
}

// optional string timezone = 15;
inline bool StopArea::has_timezone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StopArea::set_has_timezone() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StopArea::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StopArea::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
inline const ::std::string& StopArea::timezone() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopArea::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.timezone)
}
inline void StopArea::set_timezone(const char* value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.timezone)
}
inline void StopArea::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.timezone)
}
inline ::std::string* StopArea::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopArea::release_timezone() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.timezone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopArea::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.timezone)
}

// optional string label = 16;
inline bool StopArea::has_label() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StopArea::set_has_label() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StopArea::clear_has_label() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StopArea::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& StopArea::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopArea::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.label)
}
inline void StopArea::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.label)
}
inline void StopArea::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.label)
}
inline ::std::string* StopArea::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopArea::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopArea::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.label)
}

// repeated .pbnavitia.CommercialMode commercial_modes = 21;
inline int StopArea::commercial_modes_size() const {
  return commercial_modes_.size();
}
inline void StopArea::clear_commercial_modes() {
  commercial_modes_.Clear();
}
inline const ::pbnavitia::CommercialMode& StopArea::commercial_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.commercial_modes)
  return commercial_modes_.Get(index);
}
inline ::pbnavitia::CommercialMode* StopArea::mutable_commercial_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.commercial_modes)
  return commercial_modes_.Mutable(index);
}
inline ::pbnavitia::CommercialMode* StopArea::add_commercial_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.commercial_modes)
  return commercial_modes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
StopArea::mutable_commercial_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.commercial_modes)
  return &commercial_modes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
StopArea::commercial_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.commercial_modes)
  return commercial_modes_;
}

// repeated .pbnavitia.PhysicalMode physical_modes = 22;
inline int StopArea::physical_modes_size() const {
  return physical_modes_.size();
}
inline void StopArea::clear_physical_modes() {
  physical_modes_.Clear();
}
inline const ::pbnavitia::PhysicalMode& StopArea::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.physical_modes)
  return physical_modes_.Get(index);
}
inline ::pbnavitia::PhysicalMode* StopArea::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.physical_modes)
  return physical_modes_.Mutable(index);
}
inline ::pbnavitia::PhysicalMode* StopArea::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.physical_modes)
  return physical_modes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
StopArea::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.physical_modes)
  return &physical_modes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
StopArea::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.physical_modes)
  return physical_modes_;
}

// -------------------------------------------------------------------

// StopPoint

// optional string name = 3;
inline bool StopPoint::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopPoint::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopPoint::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopPoint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& StopPoint::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPoint::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.name)
}
inline void StopPoint::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.name)
}
inline void StopPoint::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.name)
}
inline ::std::string* StopPoint::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopPoint::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPoint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.name)
}

// repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
inline int StopPoint::administrative_regions_size() const {
  return administrative_regions_.size();
}
inline void StopPoint::clear_administrative_regions() {
  administrative_regions_.Clear();
}
inline const ::pbnavitia::AdministrativeRegion& StopPoint::administrative_regions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.administrative_regions)
  return administrative_regions_.Get(index);
}
inline ::pbnavitia::AdministrativeRegion* StopPoint::mutable_administrative_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.administrative_regions)
  return administrative_regions_.Mutable(index);
}
inline ::pbnavitia::AdministrativeRegion* StopPoint::add_administrative_regions() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.administrative_regions)
  return administrative_regions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
StopPoint::mutable_administrative_regions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.administrative_regions)
  return &administrative_regions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
StopPoint::administrative_regions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.administrative_regions)
  return administrative_regions_;
}

// optional string uri = 5;
inline bool StopPoint::has_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopPoint::set_has_uri() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopPoint::clear_has_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopPoint::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& StopPoint::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPoint::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.uri)
}
inline void StopPoint::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.uri)
}
inline void StopPoint::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.uri)
}
inline ::std::string* StopPoint::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopPoint::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPoint::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.uri)
}

// optional .pbnavitia.GeographicalCoord coord = 6;
inline bool StopPoint::has_coord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopPoint::set_has_coord() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopPoint::clear_has_coord() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopPoint::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
inline const ::pbnavitia::GeographicalCoord& StopPoint::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::pbnavitia::GeographicalCoord* StopPoint::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.coord)
  return coord_;
}
inline ::pbnavitia::GeographicalCoord* StopPoint::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void StopPoint::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.coord)
}

// optional .pbnavitia.StopArea stop_area = 7;
inline bool StopPoint::has_stop_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StopPoint::set_has_stop_area() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StopPoint::clear_has_stop_area() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StopPoint::clear_stop_area() {
  if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
  clear_has_stop_area();
}
inline const ::pbnavitia::StopArea& StopPoint::stop_area() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.stop_area)
  return stop_area_ != NULL ? *stop_area_ : *default_instance_->stop_area_;
}
inline ::pbnavitia::StopArea* StopPoint::mutable_stop_area() {
  set_has_stop_area();
  if (stop_area_ == NULL) {
    stop_area_ = new ::pbnavitia::StopArea;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.stop_area)
  return stop_area_;
}
inline ::pbnavitia::StopArea* StopPoint::release_stop_area() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.stop_area)
  clear_has_stop_area();
  ::pbnavitia::StopArea* temp = stop_area_;
  stop_area_ = NULL;
  return temp;
}
inline void StopPoint::set_allocated_stop_area(::pbnavitia::StopArea* stop_area) {
  delete stop_area_;
  stop_area_ = stop_area;
  if (stop_area) {
    set_has_stop_area();
  } else {
    clear_has_stop_area();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.stop_area)
}

// optional .pbnavitia.hasEquipments has_equipments = 8;
inline bool StopPoint::has_has_equipments() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StopPoint::set_has_has_equipments() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StopPoint::clear_has_has_equipments() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StopPoint::clear_has_equipments() {
  if (has_equipments_ != NULL) has_equipments_->::pbnavitia::hasEquipments::Clear();
  clear_has_has_equipments();
}
inline const ::pbnavitia::hasEquipments& StopPoint::has_equipments() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.has_equipments)
  return has_equipments_ != NULL ? *has_equipments_ : *default_instance_->has_equipments_;
}
inline ::pbnavitia::hasEquipments* StopPoint::mutable_has_equipments() {
  set_has_has_equipments();
  if (has_equipments_ == NULL) {
    has_equipments_ = new ::pbnavitia::hasEquipments;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.has_equipments)
  return has_equipments_;
}
inline ::pbnavitia::hasEquipments* StopPoint::release_has_equipments() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.has_equipments)
  clear_has_has_equipments();
  ::pbnavitia::hasEquipments* temp = has_equipments_;
  has_equipments_ = NULL;
  return temp;
}
inline void StopPoint::set_allocated_has_equipments(::pbnavitia::hasEquipments* has_equipments) {
  delete has_equipments_;
  has_equipments_ = has_equipments;
  if (has_equipments) {
    set_has_has_equipments();
  } else {
    clear_has_has_equipments();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.has_equipments)
}

// repeated .pbnavitia.Message messages = 9;
inline int StopPoint::messages_size() const {
  return messages_.size();
}
inline void StopPoint::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& StopPoint::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* StopPoint::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* StopPoint::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
StopPoint::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
StopPoint::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.messages)
  return messages_;
}

// repeated string impact_uris = 22;
inline int StopPoint::impact_uris_size() const {
  return impact_uris_.size();
}
inline void StopPoint::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& StopPoint::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* StopPoint::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void StopPoint::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void StopPoint::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.impact_uris)
}
inline void StopPoint::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.impact_uris)
}
inline ::std::string* StopPoint::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.StopPoint.impact_uris)
  return impact_uris_.Add();
}
inline void StopPoint::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.impact_uris)
}
inline void StopPoint::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.StopPoint.impact_uris)
}
inline void StopPoint::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.StopPoint.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StopPoint::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StopPoint::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Comment comments = 16;
inline int StopPoint::comments_size() const {
  return comments_.size();
}
inline void StopPoint::clear_comments() {
  comments_.Clear();
}
inline const ::pbnavitia::Comment& StopPoint::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.comments)
  return comments_.Get(index);
}
inline ::pbnavitia::Comment* StopPoint::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.comments)
  return comments_.Mutable(index);
}
inline ::pbnavitia::Comment* StopPoint::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.comments)
  return comments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
StopPoint::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.comments)
  return &comments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
StopPoint::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.comments)
  return comments_;
}

// repeated .pbnavitia.Code codes = 12;
inline int StopPoint::codes_size() const {
  return codes_.size();
}
inline void StopPoint::clear_codes() {
  codes_.Clear();
}
inline const ::pbnavitia::Code& StopPoint::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.codes)
  return codes_.Get(index);
}
inline ::pbnavitia::Code* StopPoint::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.codes)
  return codes_.Mutable(index);
}
inline ::pbnavitia::Code* StopPoint::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.codes)
  return codes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
StopPoint::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.codes)
  return &codes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
StopPoint::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.codes)
  return codes_;
}

// optional .pbnavitia.Address address = 13;
inline bool StopPoint::has_address() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StopPoint::set_has_address() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StopPoint::clear_has_address() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StopPoint::clear_address() {
  if (address_ != NULL) address_->::pbnavitia::Address::Clear();
  clear_has_address();
}
inline const ::pbnavitia::Address& StopPoint::address() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::pbnavitia::Address* StopPoint::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::pbnavitia::Address;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.address)
  return address_;
}
inline ::pbnavitia::Address* StopPoint::release_address() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.address)
  clear_has_address();
  ::pbnavitia::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void StopPoint::set_allocated_address(::pbnavitia::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.address)
}

// optional string platform_code = 14;
inline bool StopPoint::has_platform_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StopPoint::set_has_platform_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StopPoint::clear_has_platform_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StopPoint::clear_platform_code() {
  platform_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform_code();
}
inline const ::std::string& StopPoint::platform_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.platform_code)
  return platform_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPoint::set_platform_code(const ::std::string& value) {
  set_has_platform_code();
  platform_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.platform_code)
}
inline void StopPoint::set_platform_code(const char* value) {
  set_has_platform_code();
  platform_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.platform_code)
}
inline void StopPoint::set_platform_code(const char* value, size_t size) {
  set_has_platform_code();
  platform_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.platform_code)
}
inline ::std::string* StopPoint::mutable_platform_code() {
  set_has_platform_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.platform_code)
  return platform_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopPoint::release_platform_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.platform_code)
  clear_has_platform_code();
  return platform_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPoint::set_allocated_platform_code(::std::string* platform_code) {
  if (platform_code != NULL) {
    set_has_platform_code();
  } else {
    clear_has_platform_code();
  }
  platform_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform_code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.platform_code)
}

// optional string label = 15;
inline bool StopPoint::has_label() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StopPoint::set_has_label() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StopPoint::clear_has_label() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StopPoint::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& StopPoint::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPoint::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.label)
}
inline void StopPoint::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.label)
}
inline void StopPoint::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.label)
}
inline ::std::string* StopPoint::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopPoint::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPoint::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.label)
}

// repeated .pbnavitia.CommercialMode commercial_modes = 17;
inline int StopPoint::commercial_modes_size() const {
  return commercial_modes_.size();
}
inline void StopPoint::clear_commercial_modes() {
  commercial_modes_.Clear();
}
inline const ::pbnavitia::CommercialMode& StopPoint::commercial_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.commercial_modes)
  return commercial_modes_.Get(index);
}
inline ::pbnavitia::CommercialMode* StopPoint::mutable_commercial_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.commercial_modes)
  return commercial_modes_.Mutable(index);
}
inline ::pbnavitia::CommercialMode* StopPoint::add_commercial_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.commercial_modes)
  return commercial_modes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
StopPoint::mutable_commercial_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.commercial_modes)
  return &commercial_modes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
StopPoint::commercial_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.commercial_modes)
  return commercial_modes_;
}

// repeated .pbnavitia.PhysicalMode physical_modes = 18;
inline int StopPoint::physical_modes_size() const {
  return physical_modes_.size();
}
inline void StopPoint::clear_physical_modes() {
  physical_modes_.Clear();
}
inline const ::pbnavitia::PhysicalMode& StopPoint::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.physical_modes)
  return physical_modes_.Get(index);
}
inline ::pbnavitia::PhysicalMode* StopPoint::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.physical_modes)
  return physical_modes_.Mutable(index);
}
inline ::pbnavitia::PhysicalMode* StopPoint::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.physical_modes)
  return physical_modes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
StopPoint::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.physical_modes)
  return &physical_modes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
StopPoint::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.physical_modes)
  return physical_modes_;
}

// optional .pbnavitia.FareZone fare_zone = 19;
inline bool StopPoint::has_fare_zone() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StopPoint::set_has_fare_zone() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StopPoint::clear_has_fare_zone() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StopPoint::clear_fare_zone() {
  if (fare_zone_ != NULL) fare_zone_->::pbnavitia::FareZone::Clear();
  clear_has_fare_zone();
}
inline const ::pbnavitia::FareZone& StopPoint::fare_zone() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.fare_zone)
  return fare_zone_ != NULL ? *fare_zone_ : *default_instance_->fare_zone_;
}
inline ::pbnavitia::FareZone* StopPoint::mutable_fare_zone() {
  set_has_fare_zone();
  if (fare_zone_ == NULL) {
    fare_zone_ = new ::pbnavitia::FareZone;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.fare_zone)
  return fare_zone_;
}
inline ::pbnavitia::FareZone* StopPoint::release_fare_zone() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.fare_zone)
  clear_has_fare_zone();
  ::pbnavitia::FareZone* temp = fare_zone_;
  fare_zone_ = NULL;
  return temp;
}
inline void StopPoint::set_allocated_fare_zone(::pbnavitia::FareZone* fare_zone) {
  delete fare_zone_;
  fare_zone_ = fare_zone;
  if (fare_zone) {
    set_has_fare_zone();
  } else {
    clear_has_fare_zone();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.fare_zone)
}

// repeated .pbnavitia.EquipmentDetails equipment_details = 20;
inline int StopPoint::equipment_details_size() const {
  return equipment_details_.size();
}
inline void StopPoint::clear_equipment_details() {
  equipment_details_.Clear();
}
inline const ::pbnavitia::EquipmentDetails& StopPoint::equipment_details(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.equipment_details)
  return equipment_details_.Get(index);
}
inline ::pbnavitia::EquipmentDetails* StopPoint::mutable_equipment_details(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.equipment_details)
  return equipment_details_.Mutable(index);
}
inline ::pbnavitia::EquipmentDetails* StopPoint::add_equipment_details() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.equipment_details)
  return equipment_details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >*
StopPoint::mutable_equipment_details() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.equipment_details)
  return &equipment_details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >&
StopPoint::equipment_details() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.equipment_details)
  return equipment_details_;
}

// -------------------------------------------------------------------

// LineString

// repeated .pbnavitia.GeographicalCoord coordinates = 1;
inline int LineString::coordinates_size() const {
  return coordinates_.size();
}
inline void LineString::clear_coordinates() {
  coordinates_.Clear();
}
inline const ::pbnavitia::GeographicalCoord& LineString::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineString.coordinates)
  return coordinates_.Get(index);
}
inline ::pbnavitia::GeographicalCoord* LineString::mutable_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineString.coordinates)
  return coordinates_.Mutable(index);
}
inline ::pbnavitia::GeographicalCoord* LineString::add_coordinates() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineString.coordinates)
  return coordinates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
LineString::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineString.coordinates)
  return &coordinates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
LineString::coordinates() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineString.coordinates)
  return coordinates_;
}

// -------------------------------------------------------------------

// MultiLineString

// repeated .pbnavitia.LineString lines = 1;
inline int MultiLineString::lines_size() const {
  return lines_.size();
}
inline void MultiLineString::clear_lines() {
  lines_.Clear();
}
inline const ::pbnavitia::LineString& MultiLineString::lines(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.MultiLineString.lines)
  return lines_.Get(index);
}
inline ::pbnavitia::LineString* MultiLineString::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.MultiLineString.lines)
  return lines_.Mutable(index);
}
inline ::pbnavitia::LineString* MultiLineString::add_lines() {
  // @@protoc_insertion_point(field_add:pbnavitia.MultiLineString.lines)
  return lines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineString >*
MultiLineString::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.MultiLineString.lines)
  return &lines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineString >&
MultiLineString::lines() const {
  // @@protoc_insertion_point(field_list:pbnavitia.MultiLineString.lines)
  return lines_;
}

// optional double length = 2;
inline bool MultiLineString::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiLineString::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiLineString::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiLineString::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double MultiLineString::length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MultiLineString.length)
  return length_;
}
inline void MultiLineString::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.MultiLineString.length)
}

// -------------------------------------------------------------------

// Line

// optional string name = 3;
inline bool Line::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Line::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Line::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Line::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Line::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.name)
}
inline void Line::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.name)
}
inline void Line::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.name)
}
inline ::std::string* Line::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Line::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.name)
}

// optional string uri = 4;
inline bool Line::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Line::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Line::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Line::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Line::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.uri)
}
inline void Line::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.uri)
}
inline void Line::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.uri)
}
inline ::std::string* Line::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Line::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.uri)
}

// optional string code = 5;
inline bool Line::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Line::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Line::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Line::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Line::code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.code)
}
inline void Line::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.code)
}
inline void Line::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.code)
}
inline ::std::string* Line::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Line::release_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.code)
}

// optional string color = 9;
inline bool Line::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Line::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Line::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Line::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& Line::color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.color)
}
inline void Line::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.color)
}
inline void Line::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.color)
}
inline ::std::string* Line::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Line::release_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.color)
}

// repeated .pbnavitia.Route routes = 10;
inline int Line::routes_size() const {
  return routes_.size();
}
inline void Line::clear_routes() {
  routes_.Clear();
}
inline const ::pbnavitia::Route& Line::routes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.routes)
  return routes_.Get(index);
}
inline ::pbnavitia::Route* Line::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.routes)
  return routes_.Mutable(index);
}
inline ::pbnavitia::Route* Line::add_routes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.routes)
  return routes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
Line::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.routes)
  return &routes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
Line::routes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.routes)
  return routes_;
}

// optional .pbnavitia.CommercialMode commercial_mode = 11;
inline bool Line::has_commercial_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Line::set_has_commercial_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Line::clear_has_commercial_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Line::clear_commercial_mode() {
  if (commercial_mode_ != NULL) commercial_mode_->::pbnavitia::CommercialMode::Clear();
  clear_has_commercial_mode();
}
inline const ::pbnavitia::CommercialMode& Line::commercial_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.commercial_mode)
  return commercial_mode_ != NULL ? *commercial_mode_ : *default_instance_->commercial_mode_;
}
inline ::pbnavitia::CommercialMode* Line::mutable_commercial_mode() {
  set_has_commercial_mode();
  if (commercial_mode_ == NULL) {
    commercial_mode_ = new ::pbnavitia::CommercialMode;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.commercial_mode)
  return commercial_mode_;
}
inline ::pbnavitia::CommercialMode* Line::release_commercial_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.commercial_mode)
  clear_has_commercial_mode();
  ::pbnavitia::CommercialMode* temp = commercial_mode_;
  commercial_mode_ = NULL;
  return temp;
}
inline void Line::set_allocated_commercial_mode(::pbnavitia::CommercialMode* commercial_mode) {
  delete commercial_mode_;
  commercial_mode_ = commercial_mode;
  if (commercial_mode) {
    set_has_commercial_mode();
  } else {
    clear_has_commercial_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.commercial_mode)
}

// repeated .pbnavitia.PhysicalMode physical_modes = 12;
inline int Line::physical_modes_size() const {
  return physical_modes_.size();
}
inline void Line::clear_physical_modes() {
  physical_modes_.Clear();
}
inline const ::pbnavitia::PhysicalMode& Line::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.physical_modes)
  return physical_modes_.Get(index);
}
inline ::pbnavitia::PhysicalMode* Line::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.physical_modes)
  return physical_modes_.Mutable(index);
}
inline ::pbnavitia::PhysicalMode* Line::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.physical_modes)
  return physical_modes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
Line::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.physical_modes)
  return &physical_modes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
Line::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.physical_modes)
  return physical_modes_;
}

// optional .pbnavitia.Network network = 13;
inline bool Line::has_network() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Line::set_has_network() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Line::clear_has_network() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Line::clear_network() {
  if (network_ != NULL) network_->::pbnavitia::Network::Clear();
  clear_has_network();
}
inline const ::pbnavitia::Network& Line::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.network)
  return network_ != NULL ? *network_ : *default_instance_->network_;
}
inline ::pbnavitia::Network* Line::mutable_network() {
  set_has_network();
  if (network_ == NULL) {
    network_ = new ::pbnavitia::Network;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.network)
  return network_;
}
inline ::pbnavitia::Network* Line::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.network)
  clear_has_network();
  ::pbnavitia::Network* temp = network_;
  network_ = NULL;
  return temp;
}
inline void Line::set_allocated_network(::pbnavitia::Network* network) {
  delete network_;
  network_ = network;
  if (network) {
    set_has_network();
  } else {
    clear_has_network();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.network)
}

// repeated .pbnavitia.Message messages = 14;
inline int Line::messages_size() const {
  return messages_.size();
}
inline void Line::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& Line::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* Line::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* Line::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
Line::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
Line::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.messages)
  return messages_;
}

// repeated string impact_uris = 26;
inline int Line::impact_uris_size() const {
  return impact_uris_.size();
}
inline void Line::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& Line::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* Line::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void Line::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Line.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void Line::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.impact_uris)
}
inline void Line::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.impact_uris)
}
inline ::std::string* Line::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Line.impact_uris)
  return impact_uris_.Add();
}
inline void Line::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Line.impact_uris)
}
inline void Line::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Line.impact_uris)
}
inline void Line::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Line.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Line::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Line::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Comment comments = 22;
inline int Line::comments_size() const {
  return comments_.size();
}
inline void Line::clear_comments() {
  comments_.Clear();
}
inline const ::pbnavitia::Comment& Line::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.comments)
  return comments_.Get(index);
}
inline ::pbnavitia::Comment* Line::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.comments)
  return comments_.Mutable(index);
}
inline ::pbnavitia::Comment* Line::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.comments)
  return comments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
Line::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.comments)
  return &comments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
Line::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.comments)
  return comments_;
}

// repeated .pbnavitia.Code codes = 16;
inline int Line::codes_size() const {
  return codes_.size();
}
inline void Line::clear_codes() {
  codes_.Clear();
}
inline const ::pbnavitia::Code& Line::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.codes)
  return codes_.Get(index);
}
inline ::pbnavitia::Code* Line::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.codes)
  return codes_.Mutable(index);
}
inline ::pbnavitia::Code* Line::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.codes)
  return codes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Line::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.codes)
  return &codes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Line::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.codes)
  return codes_;
}

// optional .pbnavitia.MultiLineString geojson = 17;
inline bool Line::has_geojson() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Line::set_has_geojson() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Line::clear_has_geojson() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Line::clear_geojson() {
  if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
  clear_has_geojson();
}
inline const ::pbnavitia::MultiLineString& Line::geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.geojson)
  return geojson_ != NULL ? *geojson_ : *default_instance_->geojson_;
}
inline ::pbnavitia::MultiLineString* Line::mutable_geojson() {
  set_has_geojson();
  if (geojson_ == NULL) {
    geojson_ = new ::pbnavitia::MultiLineString;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.geojson)
  return geojson_;
}
inline ::pbnavitia::MultiLineString* Line::release_geojson() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.geojson)
  clear_has_geojson();
  ::pbnavitia::MultiLineString* temp = geojson_;
  geojson_ = NULL;
  return temp;
}
inline void Line::set_allocated_geojson(::pbnavitia::MultiLineString* geojson) {
  delete geojson_;
  geojson_ = geojson;
  if (geojson) {
    set_has_geojson();
  } else {
    clear_has_geojson();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.geojson)
}

// optional uint32 opening_time = 18;
inline bool Line::has_opening_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Line::set_has_opening_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Line::clear_has_opening_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Line::clear_opening_time() {
  opening_time_ = 0u;
  clear_has_opening_time();
}
inline ::google::protobuf::uint32 Line::opening_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.opening_time)
  return opening_time_;
}
inline void Line::set_opening_time(::google::protobuf::uint32 value) {
  set_has_opening_time();
  opening_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Line.opening_time)
}

// optional uint32 closing_time = 19;
inline bool Line::has_closing_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Line::set_has_closing_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Line::clear_has_closing_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Line::clear_closing_time() {
  closing_time_ = 0u;
  clear_has_closing_time();
}
inline ::google::protobuf::uint32 Line::closing_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.closing_time)
  return closing_time_;
}
inline void Line::set_closing_time(::google::protobuf::uint32 value) {
  set_has_closing_time();
  closing_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Line.closing_time)
}

// repeated .pbnavitia.Property properties = 21;
inline int Line::properties_size() const {
  return properties_.size();
}
inline void Line::clear_properties() {
  properties_.Clear();
}
inline const ::pbnavitia::Property& Line::properties(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.properties)
  return properties_.Get(index);
}
inline ::pbnavitia::Property* Line::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.properties)
  return properties_.Mutable(index);
}
inline ::pbnavitia::Property* Line::add_properties() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Property >*
Line::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Property >&
Line::properties() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.properties)
  return properties_;
}

// repeated .pbnavitia.LineGroup line_groups = 23;
inline int Line::line_groups_size() const {
  return line_groups_.size();
}
inline void Line::clear_line_groups() {
  line_groups_.Clear();
}
inline const ::pbnavitia::LineGroup& Line::line_groups(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.line_groups)
  return line_groups_.Get(index);
}
inline ::pbnavitia::LineGroup* Line::mutable_line_groups(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.line_groups)
  return line_groups_.Mutable(index);
}
inline ::pbnavitia::LineGroup* Line::add_line_groups() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.line_groups)
  return line_groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >*
Line::mutable_line_groups() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.line_groups)
  return &line_groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >&
Line::line_groups() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.line_groups)
  return line_groups_;
}

// optional string text_color = 24;
inline bool Line::has_text_color() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Line::set_has_text_color() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Line::clear_has_text_color() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Line::clear_text_color() {
  text_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_color();
}
inline const ::std::string& Line::text_color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.text_color)
  return text_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_text_color(const ::std::string& value) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.text_color)
}
inline void Line::set_text_color(const char* value) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.text_color)
}
inline void Line::set_text_color(const char* value, size_t size) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.text_color)
}
inline ::std::string* Line::mutable_text_color() {
  set_has_text_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.text_color)
  return text_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Line::release_text_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.text_color)
  clear_has_text_color();
  return text_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Line::set_allocated_text_color(::std::string* text_color) {
  if (text_color != NULL) {
    set_has_text_color();
  } else {
    clear_has_text_color();
  }
  text_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.text_color)
}

// -------------------------------------------------------------------

// LineGroup

// optional string name = 1;
inline bool LineGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LineGroup::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LineGroup.name)
}
inline void LineGroup::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LineGroup.name)
}
inline void LineGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LineGroup.name)
}
inline ::std::string* LineGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LineGroup::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineGroup.name)
}

// optional string uri = 2;
inline bool LineGroup::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineGroup::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineGroup::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineGroup::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& LineGroup::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineGroup::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LineGroup.uri)
}
inline void LineGroup::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LineGroup.uri)
}
inline void LineGroup::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LineGroup.uri)
}
inline ::std::string* LineGroup::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LineGroup::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineGroup.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineGroup::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineGroup.uri)
}

// repeated .pbnavitia.Comment comments = 3;
inline int LineGroup::comments_size() const {
  return comments_.size();
}
inline void LineGroup::clear_comments() {
  comments_.Clear();
}
inline const ::pbnavitia::Comment& LineGroup::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.comments)
  return comments_.Get(index);
}
inline ::pbnavitia::Comment* LineGroup::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.comments)
  return comments_.Mutable(index);
}
inline ::pbnavitia::Comment* LineGroup::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineGroup.comments)
  return comments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
LineGroup::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineGroup.comments)
  return &comments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
LineGroup::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineGroup.comments)
  return comments_;
}

// repeated .pbnavitia.Line lines = 4;
inline int LineGroup::lines_size() const {
  return lines_.size();
}
inline void LineGroup::clear_lines() {
  lines_.Clear();
}
inline const ::pbnavitia::Line& LineGroup::lines(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.lines)
  return lines_.Get(index);
}
inline ::pbnavitia::Line* LineGroup::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.lines)
  return lines_.Mutable(index);
}
inline ::pbnavitia::Line* LineGroup::add_lines() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineGroup.lines)
  return lines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
LineGroup::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineGroup.lines)
  return &lines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
LineGroup::lines() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineGroup.lines)
  return lines_;
}

// optional .pbnavitia.Line main_line = 5;
inline bool LineGroup::has_main_line() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineGroup::set_has_main_line() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineGroup::clear_has_main_line() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineGroup::clear_main_line() {
  if (main_line_ != NULL) main_line_->::pbnavitia::Line::Clear();
  clear_has_main_line();
}
inline const ::pbnavitia::Line& LineGroup::main_line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.main_line)
  return main_line_ != NULL ? *main_line_ : *default_instance_->main_line_;
}
inline ::pbnavitia::Line* LineGroup::mutable_main_line() {
  set_has_main_line();
  if (main_line_ == NULL) {
    main_line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.main_line)
  return main_line_;
}
inline ::pbnavitia::Line* LineGroup::release_main_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineGroup.main_line)
  clear_has_main_line();
  ::pbnavitia::Line* temp = main_line_;
  main_line_ = NULL;
  return temp;
}
inline void LineGroup::set_allocated_main_line(::pbnavitia::Line* main_line) {
  delete main_line_;
  main_line_ = main_line;
  if (main_line) {
    set_has_main_line();
  } else {
    clear_has_main_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineGroup.main_line)
}

// -------------------------------------------------------------------

// Route

// optional string name = 3;
inline bool Route::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Route::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Route::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Route::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Route::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Route::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Route.name)
}
inline void Route::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Route.name)
}
inline void Route::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Route.name)
}
inline ::std::string* Route::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Route::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Route::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.name)
}

// optional string uri = 4;
inline bool Route::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Route::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Route::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Route::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Route::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Route::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Route.uri)
}
inline void Route::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Route.uri)
}
inline void Route::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Route.uri)
}
inline ::std::string* Route::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Route::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Route::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.uri)
}

// optional bool is_frequence = 5;
inline bool Route::has_is_frequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Route::set_has_is_frequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Route::clear_has_is_frequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Route::clear_is_frequence() {
  is_frequence_ = false;
  clear_has_is_frequence();
}
inline bool Route::is_frequence() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.is_frequence)
  return is_frequence_;
}
inline void Route::set_is_frequence(bool value) {
  set_has_is_frequence();
  is_frequence_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Route.is_frequence)
}

// optional .pbnavitia.Line line = 7;
inline bool Route::has_line() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Route::set_has_line() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Route::clear_has_line() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Route::clear_line() {
  if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  clear_has_line();
}
inline const ::pbnavitia::Line& Route::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::pbnavitia::Line* Route::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.line)
  return line_;
}
inline ::pbnavitia::Line* Route::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.line)
  clear_has_line();
  ::pbnavitia::Line* temp = line_;
  line_ = NULL;
  return temp;
}
inline void Route::set_allocated_line(::pbnavitia::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.line)
}

// repeated .pbnavitia.JourneyPattern journey_patterns = 8;
inline int Route::journey_patterns_size() const {
  return journey_patterns_.size();
}
inline void Route::clear_journey_patterns() {
  journey_patterns_.Clear();
}
inline const ::pbnavitia::JourneyPattern& Route::journey_patterns(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.journey_patterns)
  return journey_patterns_.Get(index);
}
inline ::pbnavitia::JourneyPattern* Route::mutable_journey_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.journey_patterns)
  return journey_patterns_.Mutable(index);
}
inline ::pbnavitia::JourneyPattern* Route::add_journey_patterns() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.journey_patterns)
  return journey_patterns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >*
Route::mutable_journey_patterns() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.journey_patterns)
  return &journey_patterns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >&
Route::journey_patterns() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.journey_patterns)
  return journey_patterns_;
}

// repeated .pbnavitia.Message messages = 9;
inline int Route::messages_size() const {
  return messages_.size();
}
inline void Route::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& Route::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* Route::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* Route::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
Route::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
Route::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.messages)
  return messages_;
}

// repeated string impact_uris = 18;
inline int Route::impact_uris_size() const {
  return impact_uris_.size();
}
inline void Route::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& Route::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* Route::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void Route::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Route.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void Route::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Route.impact_uris)
}
inline void Route::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Route.impact_uris)
}
inline ::std::string* Route::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Route.impact_uris)
  return impact_uris_.Add();
}
inline void Route::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Route.impact_uris)
}
inline void Route::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Route.impact_uris)
}
inline void Route::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Route.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Route::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Route::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Code codes = 10;
inline int Route::codes_size() const {
  return codes_.size();
}
inline void Route::clear_codes() {
  codes_.Clear();
}
inline const ::pbnavitia::Code& Route::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.codes)
  return codes_.Get(index);
}
inline ::pbnavitia::Code* Route::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.codes)
  return codes_.Mutable(index);
}
inline ::pbnavitia::Code* Route::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.codes)
  return codes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Route::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.codes)
  return &codes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Route::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.codes)
  return codes_;
}

// repeated .pbnavitia.StopPoint stop_points = 1;
inline int Route::stop_points_size() const {
  return stop_points_.size();
}
inline void Route::clear_stop_points() {
  stop_points_.Clear();
}
inline const ::pbnavitia::StopPoint& Route::stop_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.stop_points)
  return stop_points_.Get(index);
}
inline ::pbnavitia::StopPoint* Route::mutable_stop_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.stop_points)
  return stop_points_.Mutable(index);
}
inline ::pbnavitia::StopPoint* Route::add_stop_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.stop_points)
  return stop_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
Route::mutable_stop_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.stop_points)
  return &stop_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
Route::stop_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.stop_points)
  return stop_points_;
}

// optional .pbnavitia.PtObject direction = 12;
inline bool Route::has_direction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Route::set_has_direction() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Route::clear_has_direction() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Route::clear_direction() {
  if (direction_ != NULL) direction_->::pbnavitia::PtObject::Clear();
  clear_has_direction();
}
inline const ::pbnavitia::PtObject& Route::direction() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::pbnavitia::PtObject* Route::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.direction)
  return direction_;
}
inline ::pbnavitia::PtObject* Route::release_direction() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.direction)
  clear_has_direction();
  ::pbnavitia::PtObject* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void Route::set_allocated_direction(::pbnavitia::PtObject* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.direction)
}

// optional .pbnavitia.MultiLineString geojson = 13;
inline bool Route::has_geojson() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Route::set_has_geojson() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Route::clear_has_geojson() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Route::clear_geojson() {
  if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
  clear_has_geojson();
}
inline const ::pbnavitia::MultiLineString& Route::geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.geojson)
  return geojson_ != NULL ? *geojson_ : *default_instance_->geojson_;
}
inline ::pbnavitia::MultiLineString* Route::mutable_geojson() {
  set_has_geojson();
  if (geojson_ == NULL) {
    geojson_ = new ::pbnavitia::MultiLineString;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.geojson)
  return geojson_;
}
inline ::pbnavitia::MultiLineString* Route::release_geojson() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.geojson)
  clear_has_geojson();
  ::pbnavitia::MultiLineString* temp = geojson_;
  geojson_ = NULL;
  return temp;
}
inline void Route::set_allocated_geojson(::pbnavitia::MultiLineString* geojson) {
  delete geojson_;
  geojson_ = geojson;
  if (geojson) {
    set_has_geojson();
  } else {
    clear_has_geojson();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.geojson)
}

// repeated .pbnavitia.PhysicalMode physical_modes = 14;
inline int Route::physical_modes_size() const {
  return physical_modes_.size();
}
inline void Route::clear_physical_modes() {
  physical_modes_.Clear();
}
inline const ::pbnavitia::PhysicalMode& Route::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.physical_modes)
  return physical_modes_.Get(index);
}
inline ::pbnavitia::PhysicalMode* Route::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.physical_modes)
  return physical_modes_.Mutable(index);
}
inline ::pbnavitia::PhysicalMode* Route::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.physical_modes)
  return physical_modes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
Route::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.physical_modes)
  return &physical_modes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
Route::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.physical_modes)
  return physical_modes_;
}

// repeated .pbnavitia.Comment comments = 15;
inline int Route::comments_size() const {
  return comments_.size();
}
inline void Route::clear_comments() {
  comments_.Clear();
}
inline const ::pbnavitia::Comment& Route::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.comments)
  return comments_.Get(index);
}
inline ::pbnavitia::Comment* Route::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.comments)
  return comments_.Mutable(index);
}
inline ::pbnavitia::Comment* Route::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.comments)
  return comments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
Route::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.comments)
  return &comments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
Route::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.comments)
  return comments_;
}

// optional string direction_type = 17;
inline bool Route::has_direction_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Route::set_has_direction_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Route::clear_has_direction_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Route::clear_direction_type() {
  direction_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_direction_type();
}
inline const ::std::string& Route::direction_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.direction_type)
  return direction_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Route::set_direction_type(const ::std::string& value) {
  set_has_direction_type();
  direction_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Route.direction_type)
}
inline void Route::set_direction_type(const char* value) {
  set_has_direction_type();
  direction_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Route.direction_type)
}
inline void Route::set_direction_type(const char* value, size_t size) {
  set_has_direction_type();
  direction_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Route.direction_type)
}
inline ::std::string* Route::mutable_direction_type() {
  set_has_direction_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.direction_type)
  return direction_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Route::release_direction_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.direction_type)
  clear_has_direction_type();
  return direction_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Route::set_allocated_direction_type(::std::string* direction_type) {
  if (direction_type != NULL) {
    set_has_direction_type();
  } else {
    clear_has_direction_type();
  }
  direction_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction_type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.direction_type)
}

// -------------------------------------------------------------------

// JourneyPattern

// optional string name = 3;
inline bool JourneyPattern::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JourneyPattern::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JourneyPattern::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JourneyPattern::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& JourneyPattern::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JourneyPattern::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPattern.name)
}
inline void JourneyPattern::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPattern.name)
}
inline void JourneyPattern::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPattern.name)
}
inline ::std::string* JourneyPattern::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JourneyPattern::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPattern.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JourneyPattern::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPattern.name)
}

// optional string uri = 4;
inline bool JourneyPattern::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JourneyPattern::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JourneyPattern::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JourneyPattern::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& JourneyPattern::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JourneyPattern::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPattern.uri)
}
inline void JourneyPattern::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPattern.uri)
}
inline void JourneyPattern::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPattern.uri)
}
inline ::std::string* JourneyPattern::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JourneyPattern::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPattern.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JourneyPattern::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPattern.uri)
}

// optional bool is_frequence = 5;
inline bool JourneyPattern::has_is_frequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JourneyPattern::set_has_is_frequence() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JourneyPattern::clear_has_is_frequence() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JourneyPattern::clear_is_frequence() {
  is_frequence_ = false;
  clear_has_is_frequence();
}
inline bool JourneyPattern::is_frequence() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.is_frequence)
  return is_frequence_;
}
inline void JourneyPattern::set_is_frequence(bool value) {
  set_has_is_frequence();
  is_frequence_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPattern.is_frequence)
}

// optional .pbnavitia.PhysicalMode physical_mode = 6;
inline bool JourneyPattern::has_physical_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JourneyPattern::set_has_physical_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JourneyPattern::clear_has_physical_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JourneyPattern::clear_physical_mode() {
  if (physical_mode_ != NULL) physical_mode_->::pbnavitia::PhysicalMode::Clear();
  clear_has_physical_mode();
}
inline const ::pbnavitia::PhysicalMode& JourneyPattern::physical_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.physical_mode)
  return physical_mode_ != NULL ? *physical_mode_ : *default_instance_->physical_mode_;
}
inline ::pbnavitia::PhysicalMode* JourneyPattern::mutable_physical_mode() {
  set_has_physical_mode();
  if (physical_mode_ == NULL) {
    physical_mode_ = new ::pbnavitia::PhysicalMode;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.physical_mode)
  return physical_mode_;
}
inline ::pbnavitia::PhysicalMode* JourneyPattern::release_physical_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPattern.physical_mode)
  clear_has_physical_mode();
  ::pbnavitia::PhysicalMode* temp = physical_mode_;
  physical_mode_ = NULL;
  return temp;
}
inline void JourneyPattern::set_allocated_physical_mode(::pbnavitia::PhysicalMode* physical_mode) {
  delete physical_mode_;
  physical_mode_ = physical_mode;
  if (physical_mode) {
    set_has_physical_mode();
  } else {
    clear_has_physical_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPattern.physical_mode)
}

// optional .pbnavitia.Route route = 7;
inline bool JourneyPattern::has_route() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JourneyPattern::set_has_route() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JourneyPattern::clear_has_route() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JourneyPattern::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
inline const ::pbnavitia::Route& JourneyPattern::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
inline ::pbnavitia::Route* JourneyPattern::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.route)
  return route_;
}
inline ::pbnavitia::Route* JourneyPattern::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPattern.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
inline void JourneyPattern::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPattern.route)
}

// repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 8;
inline int JourneyPattern::journey_pattern_points_size() const {
  return journey_pattern_points_.size();
}
inline void JourneyPattern::clear_journey_pattern_points() {
  journey_pattern_points_.Clear();
}
inline const ::pbnavitia::JourneyPatternPoint& JourneyPattern::journey_pattern_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.journey_pattern_points)
  return journey_pattern_points_.Get(index);
}
inline ::pbnavitia::JourneyPatternPoint* JourneyPattern::mutable_journey_pattern_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.journey_pattern_points)
  return journey_pattern_points_.Mutable(index);
}
inline ::pbnavitia::JourneyPatternPoint* JourneyPattern::add_journey_pattern_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPattern.journey_pattern_points)
  return journey_pattern_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >*
JourneyPattern::mutable_journey_pattern_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPattern.journey_pattern_points)
  return &journey_pattern_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >&
JourneyPattern::journey_pattern_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPattern.journey_pattern_points)
  return journey_pattern_points_;
}

// repeated .pbnavitia.Message messages = 9;
inline int JourneyPattern::messages_size() const {
  return messages_.size();
}
inline void JourneyPattern::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& JourneyPattern::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* JourneyPattern::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* JourneyPattern::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPattern.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
JourneyPattern::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPattern.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
JourneyPattern::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPattern.messages)
  return messages_;
}

// repeated string impact_uris = 22;
inline int JourneyPattern::impact_uris_size() const {
  return impact_uris_.size();
}
inline void JourneyPattern::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& JourneyPattern::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* JourneyPattern::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void JourneyPattern::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPattern.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void JourneyPattern::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPattern.impact_uris)
}
inline void JourneyPattern::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPattern.impact_uris)
}
inline ::std::string* JourneyPattern::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.JourneyPattern.impact_uris)
  return impact_uris_.Add();
}
inline void JourneyPattern::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPattern.impact_uris)
}
inline void JourneyPattern::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.JourneyPattern.impact_uris)
}
inline void JourneyPattern::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.JourneyPattern.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JourneyPattern::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPattern.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JourneyPattern::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPattern.impact_uris)
  return &impact_uris_;
}

// -------------------------------------------------------------------

// Destination

// required string uri = 1;
inline bool Destination::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Destination::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Destination::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Destination::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Destination::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Destination.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Destination.uri)
}
inline void Destination::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Destination.uri)
}
inline void Destination::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Destination.uri)
}
inline ::std::string* Destination::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Destination.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Destination::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Destination.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Destination.uri)
}

// optional string destination = 2;
inline bool Destination::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Destination::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Destination::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Destination::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination();
}
inline const ::std::string& Destination::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Destination.destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_destination(const ::std::string& value) {
  set_has_destination();
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Destination.destination)
}
inline void Destination::set_destination(const char* value) {
  set_has_destination();
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Destination.destination)
}
inline void Destination::set_destination(const char* value, size_t size) {
  set_has_destination();
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Destination.destination)
}
inline ::std::string* Destination::mutable_destination() {
  set_has_destination();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Destination.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Destination::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Destination.destination)
  clear_has_destination();
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Destination.destination)
}

// -------------------------------------------------------------------

// Note

// required string uri = 1;
inline bool Note::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Note::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Note::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Note::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Note::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Note.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Note.uri)
}
inline void Note::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Note.uri)
}
inline void Note::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Note.uri)
}
inline ::std::string* Note::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Note.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Note.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Note.uri)
}

// optional string note = 2;
inline bool Note::has_note() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Note::set_has_note() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Note::clear_has_note() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Note::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_note();
}
inline const ::std::string& Note::note() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Note.note)
  return note_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_note(const ::std::string& value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Note.note)
}
inline void Note::set_note(const char* value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Note.note)
}
inline void Note::set_note(const char* value, size_t size) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Note.note)
}
inline ::std::string* Note::mutable_note() {
  set_has_note();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Note.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_note() {
  // @@protoc_insertion_point(field_release:pbnavitia.Note.note)
  clear_has_note();
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    set_has_note();
  } else {
    clear_has_note();
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Note.note)
}

// optional string comment_type = 3;
inline bool Note::has_comment_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Note::set_has_comment_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Note::clear_has_comment_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Note::clear_comment_type() {
  comment_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment_type();
}
inline const ::std::string& Note::comment_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Note.comment_type)
  return comment_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_comment_type(const ::std::string& value) {
  set_has_comment_type();
  comment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Note.comment_type)
}
inline void Note::set_comment_type(const char* value) {
  set_has_comment_type();
  comment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Note.comment_type)
}
inline void Note::set_comment_type(const char* value, size_t size) {
  set_has_comment_type();
  comment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Note.comment_type)
}
inline ::std::string* Note::mutable_comment_type() {
  set_has_comment_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Note.comment_type)
  return comment_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Note::release_comment_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Note.comment_type)
  clear_has_comment_type();
  return comment_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Note::set_allocated_comment_type(::std::string* comment_type) {
  if (comment_type != NULL) {
    set_has_comment_type();
  } else {
    clear_has_comment_type();
  }
  comment_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment_type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Note.comment_type)
}

// -------------------------------------------------------------------

// Properties

// repeated .pbnavitia.Properties.AdditionalInformation additional_informations = 1;
inline int Properties::additional_informations_size() const {
  return additional_informations_.size();
}
inline void Properties::clear_additional_informations() {
  additional_informations_.Clear();
}
inline ::pbnavitia::Properties_AdditionalInformation Properties::additional_informations(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.additional_informations)
  return static_cast< ::pbnavitia::Properties_AdditionalInformation >(additional_informations_.Get(index));
}
inline void Properties::set_additional_informations(int index, ::pbnavitia::Properties_AdditionalInformation value) {
  assert(::pbnavitia::Properties_AdditionalInformation_IsValid(value));
  additional_informations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.Properties.additional_informations)
}
inline void Properties::add_additional_informations(::pbnavitia::Properties_AdditionalInformation value) {
  assert(::pbnavitia::Properties_AdditionalInformation_IsValid(value));
  additional_informations_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Properties.additional_informations)
}
inline const ::google::protobuf::RepeatedField<int>&
Properties::additional_informations() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Properties.additional_informations)
  return additional_informations_;
}
inline ::google::protobuf::RepeatedField<int>*
Properties::mutable_additional_informations() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Properties.additional_informations)
  return &additional_informations_;
}

// repeated .pbnavitia.Note notes = 5;
inline int Properties::notes_size() const {
  return notes_.size();
}
inline void Properties::clear_notes() {
  notes_.Clear();
}
inline const ::pbnavitia::Note& Properties::notes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.notes)
  return notes_.Get(index);
}
inline ::pbnavitia::Note* Properties::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Properties.notes)
  return notes_.Mutable(index);
}
inline ::pbnavitia::Note* Properties::add_notes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Properties.notes)
  return notes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >*
Properties::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Properties.notes)
  return &notes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >&
Properties::notes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Properties.notes)
  return notes_;
}

// repeated .pbnavitia.CalendarException exceptions = 6;
inline int Properties::exceptions_size() const {
  return exceptions_.size();
}
inline void Properties::clear_exceptions() {
  exceptions_.Clear();
}
inline const ::pbnavitia::CalendarException& Properties::exceptions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.exceptions)
  return exceptions_.Get(index);
}
inline ::pbnavitia::CalendarException* Properties::mutable_exceptions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Properties.exceptions)
  return exceptions_.Mutable(index);
}
inline ::pbnavitia::CalendarException* Properties::add_exceptions() {
  // @@protoc_insertion_point(field_add:pbnavitia.Properties.exceptions)
  return exceptions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >*
Properties::mutable_exceptions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Properties.exceptions)
  return &exceptions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >&
Properties::exceptions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Properties.exceptions)
  return exceptions_;
}

// optional .pbnavitia.Destination destination = 7;
inline bool Properties::has_destination() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Properties::set_has_destination() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Properties::clear_has_destination() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Properties::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::Destination::Clear();
  clear_has_destination();
}
inline const ::pbnavitia::Destination& Properties::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
inline ::pbnavitia::Destination* Properties::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::Destination;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Properties.destination)
  return destination_;
}
inline ::pbnavitia::Destination* Properties::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Properties.destination)
  clear_has_destination();
  ::pbnavitia::Destination* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline void Properties::set_allocated_destination(::pbnavitia::Destination* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Properties.destination)
}

// optional string vehicle_journey_id = 8;
inline bool Properties::has_vehicle_journey_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Properties::set_has_vehicle_journey_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Properties::clear_has_vehicle_journey_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Properties::clear_vehicle_journey_id() {
  vehicle_journey_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicle_journey_id();
}
inline const ::std::string& Properties::vehicle_journey_id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.vehicle_journey_id)
  return vehicle_journey_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_vehicle_journey_id(const ::std::string& value) {
  set_has_vehicle_journey_id();
  vehicle_journey_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Properties.vehicle_journey_id)
}
inline void Properties::set_vehicle_journey_id(const char* value) {
  set_has_vehicle_journey_id();
  vehicle_journey_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Properties.vehicle_journey_id)
}
inline void Properties::set_vehicle_journey_id(const char* value, size_t size) {
  set_has_vehicle_journey_id();
  vehicle_journey_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Properties.vehicle_journey_id)
}
inline ::std::string* Properties::mutable_vehicle_journey_id() {
  set_has_vehicle_journey_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Properties.vehicle_journey_id)
  return vehicle_journey_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Properties::release_vehicle_journey_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Properties.vehicle_journey_id)
  clear_has_vehicle_journey_id();
  return vehicle_journey_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Properties::set_allocated_vehicle_journey_id(::std::string* vehicle_journey_id) {
  if (vehicle_journey_id != NULL) {
    set_has_vehicle_journey_id();
  } else {
    clear_has_vehicle_journey_id();
  }
  vehicle_journey_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_journey_id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Properties.vehicle_journey_id)
}

// -------------------------------------------------------------------

// hasEquipments

// repeated .pbnavitia.hasEquipments.Equipment has_equipments = 1;
inline int hasEquipments::has_equipments_size() const {
  return has_equipments_.size();
}
inline void hasEquipments::clear_has_equipments() {
  has_equipments_.Clear();
}
inline ::pbnavitia::hasEquipments_Equipment hasEquipments::has_equipments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.hasEquipments.has_equipments)
  return static_cast< ::pbnavitia::hasEquipments_Equipment >(has_equipments_.Get(index));
}
inline void hasEquipments::set_has_equipments(int index, ::pbnavitia::hasEquipments_Equipment value) {
  assert(::pbnavitia::hasEquipments_Equipment_IsValid(value));
  has_equipments_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.hasEquipments.has_equipments)
}
inline void hasEquipments::add_has_equipments(::pbnavitia::hasEquipments_Equipment value) {
  assert(::pbnavitia::hasEquipments_Equipment_IsValid(value));
  has_equipments_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.hasEquipments.has_equipments)
}
inline const ::google::protobuf::RepeatedField<int>&
hasEquipments::has_equipments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.hasEquipments.has_equipments)
  return has_equipments_;
}
inline ::google::protobuf::RepeatedField<int>*
hasEquipments::mutable_has_equipments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.hasEquipments.has_equipments)
  return &has_equipments_;
}

// -------------------------------------------------------------------

// StopDateTime

// optional uint64 arrival_date_time = 1;
inline bool StopDateTime::has_arrival_date_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopDateTime::set_has_arrival_date_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopDateTime::clear_has_arrival_date_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopDateTime::clear_arrival_date_time() {
  arrival_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_arrival_date_time();
}
inline ::google::protobuf::uint64 StopDateTime::arrival_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.arrival_date_time)
  return arrival_date_time_;
}
inline void StopDateTime::set_arrival_date_time(::google::protobuf::uint64 value) {
  set_has_arrival_date_time();
  arrival_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.arrival_date_time)
}

// optional uint64 departure_date_time = 2;
inline bool StopDateTime::has_departure_date_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopDateTime::set_has_departure_date_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopDateTime::clear_has_departure_date_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopDateTime::clear_departure_date_time() {
  departure_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_departure_date_time();
}
inline ::google::protobuf::uint64 StopDateTime::departure_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.departure_date_time)
  return departure_date_time_;
}
inline void StopDateTime::set_departure_date_time(::google::protobuf::uint64 value) {
  set_has_departure_date_time();
  departure_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.departure_date_time)
}

// optional uint64 base_arrival_date_time = 5;
inline bool StopDateTime::has_base_arrival_date_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopDateTime::set_has_base_arrival_date_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopDateTime::clear_has_base_arrival_date_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopDateTime::clear_base_arrival_date_time() {
  base_arrival_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_arrival_date_time();
}
inline ::google::protobuf::uint64 StopDateTime::base_arrival_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.base_arrival_date_time)
  return base_arrival_date_time_;
}
inline void StopDateTime::set_base_arrival_date_time(::google::protobuf::uint64 value) {
  set_has_base_arrival_date_time();
  base_arrival_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.base_arrival_date_time)
}

// optional uint64 base_departure_date_time = 6;
inline bool StopDateTime::has_base_departure_date_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopDateTime::set_has_base_departure_date_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopDateTime::clear_has_base_departure_date_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopDateTime::clear_base_departure_date_time() {
  base_departure_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_departure_date_time();
}
inline ::google::protobuf::uint64 StopDateTime::base_departure_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.base_departure_date_time)
  return base_departure_date_time_;
}
inline void StopDateTime::set_base_departure_date_time(::google::protobuf::uint64 value) {
  set_has_base_departure_date_time();
  base_departure_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.base_departure_date_time)
}

// optional .pbnavitia.StopPoint stop_point = 3;
inline bool StopDateTime::has_stop_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StopDateTime::set_has_stop_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StopDateTime::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StopDateTime::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& StopDateTime::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* StopDateTime::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopDateTime.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* StopDateTime::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopDateTime.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void StopDateTime::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopDateTime.stop_point)
}

// optional .pbnavitia.Properties properties = 4;
inline bool StopDateTime::has_properties() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StopDateTime::set_has_properties() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StopDateTime::clear_has_properties() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StopDateTime::clear_properties() {
  if (properties_ != NULL) properties_->::pbnavitia::Properties::Clear();
  clear_has_properties();
}
inline const ::pbnavitia::Properties& StopDateTime::properties() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.properties)
  return properties_ != NULL ? *properties_ : *default_instance_->properties_;
}
inline ::pbnavitia::Properties* StopDateTime::mutable_properties() {
  set_has_properties();
  if (properties_ == NULL) {
    properties_ = new ::pbnavitia::Properties;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopDateTime.properties)
  return properties_;
}
inline ::pbnavitia::Properties* StopDateTime::release_properties() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopDateTime.properties)
  clear_has_properties();
  ::pbnavitia::Properties* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline void StopDateTime::set_allocated_properties(::pbnavitia::Properties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    set_has_properties();
  } else {
    clear_has_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopDateTime.properties)
}

// optional .pbnavitia.RTLevel data_freshness = 7;
inline bool StopDateTime::has_data_freshness() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StopDateTime::set_has_data_freshness() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StopDateTime::clear_has_data_freshness() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StopDateTime::clear_data_freshness() {
  data_freshness_ = 1;
  clear_has_data_freshness();
}
inline ::pbnavitia::RTLevel StopDateTime::data_freshness() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.data_freshness)
  return static_cast< ::pbnavitia::RTLevel >(data_freshness_);
}
inline void StopDateTime::set_data_freshness(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_data_freshness();
  data_freshness_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.data_freshness)
}

// optional .pbnavitia.MessageStatus departure_status = 8;
inline bool StopDateTime::has_departure_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StopDateTime::set_has_departure_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StopDateTime::clear_has_departure_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StopDateTime::clear_departure_status() {
  departure_status_ = 0;
  clear_has_departure_status();
}
inline ::pbnavitia::MessageStatus StopDateTime::departure_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.departure_status)
  return static_cast< ::pbnavitia::MessageStatus >(departure_status_);
}
inline void StopDateTime::set_departure_status(::pbnavitia::MessageStatus value) {
  assert(::pbnavitia::MessageStatus_IsValid(value));
  set_has_departure_status();
  departure_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.departure_status)
}

// optional .pbnavitia.MessageStatus arrival_status = 9;
inline bool StopDateTime::has_arrival_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StopDateTime::set_has_arrival_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StopDateTime::clear_has_arrival_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StopDateTime::clear_arrival_status() {
  arrival_status_ = 0;
  clear_has_arrival_status();
}
inline ::pbnavitia::MessageStatus StopDateTime::arrival_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.arrival_status)
  return static_cast< ::pbnavitia::MessageStatus >(arrival_status_);
}
inline void StopDateTime::set_arrival_status(::pbnavitia::MessageStatus value) {
  assert(::pbnavitia::MessageStatus_IsValid(value));
  set_has_arrival_status();
  arrival_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.arrival_status)
}

// -------------------------------------------------------------------

// StopTime

// optional uint64 arrival_time = 1;
inline bool StopTime::has_arrival_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopTime::set_has_arrival_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopTime::clear_has_arrival_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopTime::clear_arrival_time() {
  arrival_time_ = GOOGLE_ULONGLONG(0);
  clear_has_arrival_time();
}
inline ::google::protobuf::uint64 StopTime::arrival_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.arrival_time)
  return arrival_time_;
}
inline void StopTime::set_arrival_time(::google::protobuf::uint64 value) {
  set_has_arrival_time();
  arrival_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.arrival_time)
}

// optional uint64 utc_arrival_time = 10;
inline bool StopTime::has_utc_arrival_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopTime::set_has_utc_arrival_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopTime::clear_has_utc_arrival_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopTime::clear_utc_arrival_time() {
  utc_arrival_time_ = GOOGLE_ULONGLONG(0);
  clear_has_utc_arrival_time();
}
inline ::google::protobuf::uint64 StopTime::utc_arrival_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.utc_arrival_time)
  return utc_arrival_time_;
}
inline void StopTime::set_utc_arrival_time(::google::protobuf::uint64 value) {
  set_has_utc_arrival_time();
  utc_arrival_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.utc_arrival_time)
}

// optional uint64 departure_time = 3;
inline bool StopTime::has_departure_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopTime::set_has_departure_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopTime::clear_has_departure_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopTime::clear_departure_time() {
  departure_time_ = GOOGLE_ULONGLONG(0);
  clear_has_departure_time();
}
inline ::google::protobuf::uint64 StopTime::departure_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.departure_time)
  return departure_time_;
}
inline void StopTime::set_departure_time(::google::protobuf::uint64 value) {
  set_has_departure_time();
  departure_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.departure_time)
}

// optional uint64 utc_departure_time = 11;
inline bool StopTime::has_utc_departure_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopTime::set_has_utc_departure_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopTime::clear_has_utc_departure_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopTime::clear_utc_departure_time() {
  utc_departure_time_ = GOOGLE_ULONGLONG(0);
  clear_has_utc_departure_time();
}
inline ::google::protobuf::uint64 StopTime::utc_departure_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.utc_departure_time)
  return utc_departure_time_;
}
inline void StopTime::set_utc_departure_time(::google::protobuf::uint64 value) {
  set_has_utc_departure_time();
  utc_departure_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.utc_departure_time)
}

// optional .pbnavitia.VehicleJourney vehicle_journey = 4;
inline bool StopTime::has_vehicle_journey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StopTime::set_has_vehicle_journey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StopTime::clear_has_vehicle_journey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StopTime::clear_vehicle_journey() {
  if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
  clear_has_vehicle_journey();
}
inline const ::pbnavitia::VehicleJourney& StopTime::vehicle_journey() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.vehicle_journey)
  return vehicle_journey_ != NULL ? *vehicle_journey_ : *default_instance_->vehicle_journey_;
}
inline ::pbnavitia::VehicleJourney* StopTime::mutable_vehicle_journey() {
  set_has_vehicle_journey();
  if (vehicle_journey_ == NULL) {
    vehicle_journey_ = new ::pbnavitia::VehicleJourney;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTime.vehicle_journey)
  return vehicle_journey_;
}
inline ::pbnavitia::VehicleJourney* StopTime::release_vehicle_journey() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTime.vehicle_journey)
  clear_has_vehicle_journey();
  ::pbnavitia::VehicleJourney* temp = vehicle_journey_;
  vehicle_journey_ = NULL;
  return temp;
}
inline void StopTime::set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey) {
  delete vehicle_journey_;
  vehicle_journey_ = vehicle_journey;
  if (vehicle_journey) {
    set_has_vehicle_journey();
  } else {
    clear_has_vehicle_journey();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTime.vehicle_journey)
}

// optional .pbnavitia.JourneyPatternPoint journey_pattern_point = 5;
inline bool StopTime::has_journey_pattern_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StopTime::set_has_journey_pattern_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StopTime::clear_has_journey_pattern_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StopTime::clear_journey_pattern_point() {
  if (journey_pattern_point_ != NULL) journey_pattern_point_->::pbnavitia::JourneyPatternPoint::Clear();
  clear_has_journey_pattern_point();
}
inline const ::pbnavitia::JourneyPatternPoint& StopTime::journey_pattern_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.journey_pattern_point)
  return journey_pattern_point_ != NULL ? *journey_pattern_point_ : *default_instance_->journey_pattern_point_;
}
inline ::pbnavitia::JourneyPatternPoint* StopTime::mutable_journey_pattern_point() {
  set_has_journey_pattern_point();
  if (journey_pattern_point_ == NULL) {
    journey_pattern_point_ = new ::pbnavitia::JourneyPatternPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTime.journey_pattern_point)
  return journey_pattern_point_;
}
inline ::pbnavitia::JourneyPatternPoint* StopTime::release_journey_pattern_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTime.journey_pattern_point)
  clear_has_journey_pattern_point();
  ::pbnavitia::JourneyPatternPoint* temp = journey_pattern_point_;
  journey_pattern_point_ = NULL;
  return temp;
}
inline void StopTime::set_allocated_journey_pattern_point(::pbnavitia::JourneyPatternPoint* journey_pattern_point) {
  delete journey_pattern_point_;
  journey_pattern_point_ = journey_pattern_point;
  if (journey_pattern_point) {
    set_has_journey_pattern_point();
  } else {
    clear_has_journey_pattern_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTime.journey_pattern_point)
}

// optional bool pickup_allowed = 6;
inline bool StopTime::has_pickup_allowed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StopTime::set_has_pickup_allowed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StopTime::clear_has_pickup_allowed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StopTime::clear_pickup_allowed() {
  pickup_allowed_ = false;
  clear_has_pickup_allowed();
}
inline bool StopTime::pickup_allowed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.pickup_allowed)
  return pickup_allowed_;
}
inline void StopTime::set_pickup_allowed(bool value) {
  set_has_pickup_allowed();
  pickup_allowed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.pickup_allowed)
}

// optional bool drop_off_allowed = 7;
inline bool StopTime::has_drop_off_allowed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StopTime::set_has_drop_off_allowed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StopTime::clear_has_drop_off_allowed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StopTime::clear_drop_off_allowed() {
  drop_off_allowed_ = false;
  clear_has_drop_off_allowed();
}
inline bool StopTime::drop_off_allowed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.drop_off_allowed)
  return drop_off_allowed_;
}
inline void StopTime::set_drop_off_allowed(bool value) {
  set_has_drop_off_allowed();
  drop_off_allowed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.drop_off_allowed)
}

// optional string headsign = 8;
inline bool StopTime::has_headsign() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StopTime::set_has_headsign() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StopTime::clear_has_headsign() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StopTime::clear_headsign() {
  headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headsign();
}
inline const ::std::string& StopTime::headsign() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.headsign)
  return headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_headsign(const ::std::string& value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.headsign)
}
inline void StopTime::set_headsign(const char* value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopTime.headsign)
}
inline void StopTime::set_headsign(const char* value, size_t size) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopTime.headsign)
}
inline ::std::string* StopTime::mutable_headsign() {
  set_has_headsign();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTime.headsign)
  return headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopTime::release_headsign() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTime.headsign)
  clear_has_headsign();
  return headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopTime::set_allocated_headsign(::std::string* headsign) {
  if (headsign != NULL) {
    set_has_headsign();
  } else {
    clear_has_headsign();
  }
  headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headsign);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTime.headsign)
}

// optional .pbnavitia.StopPoint stop_point = 9;
inline bool StopTime::has_stop_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StopTime::set_has_stop_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StopTime::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StopTime::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& StopTime::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* StopTime::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTime.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* StopTime::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTime.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void StopTime::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTime.stop_point)
}

// -------------------------------------------------------------------

// VehicleJourney

// optional string name = 3;
inline bool VehicleJourney::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleJourney::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleJourney::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleJourney::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& VehicleJourney::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleJourney::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.name)
}
inline void VehicleJourney::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.name)
}
inline void VehicleJourney::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.name)
}
inline ::std::string* VehicleJourney::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleJourney::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleJourney::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.name)
}

// optional string uri = 4;
inline bool VehicleJourney::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleJourney::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleJourney::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleJourney::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& VehicleJourney::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleJourney::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.uri)
}
inline void VehicleJourney::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.uri)
}
inline void VehicleJourney::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.uri)
}
inline ::std::string* VehicleJourney::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleJourney::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleJourney::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.uri)
}

// repeated .pbnavitia.StopTime stop_times = 6;
inline int VehicleJourney::stop_times_size() const {
  return stop_times_.size();
}
inline void VehicleJourney::clear_stop_times() {
  stop_times_.Clear();
}
inline const ::pbnavitia::StopTime& VehicleJourney::stop_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.stop_times)
  return stop_times_.Get(index);
}
inline ::pbnavitia::StopTime* VehicleJourney::mutable_stop_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.stop_times)
  return stop_times_.Mutable(index);
}
inline ::pbnavitia::StopTime* VehicleJourney::add_stop_times() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.stop_times)
  return stop_times_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTime >*
VehicleJourney::mutable_stop_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.stop_times)
  return &stop_times_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTime >&
VehicleJourney::stop_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.stop_times)
  return stop_times_;
}

// optional .pbnavitia.Route route = 7;
inline bool VehicleJourney::has_route() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleJourney::set_has_route() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleJourney::clear_has_route() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleJourney::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
inline const ::pbnavitia::Route& VehicleJourney::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
inline ::pbnavitia::Route* VehicleJourney::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.route)
  return route_;
}
inline ::pbnavitia::Route* VehicleJourney::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
inline void VehicleJourney::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.route)
}

// optional .pbnavitia.JourneyPattern journey_pattern = 8;
inline bool VehicleJourney::has_journey_pattern() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleJourney::set_has_journey_pattern() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleJourney::clear_has_journey_pattern() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleJourney::clear_journey_pattern() {
  if (journey_pattern_ != NULL) journey_pattern_->::pbnavitia::JourneyPattern::Clear();
  clear_has_journey_pattern();
}
inline const ::pbnavitia::JourneyPattern& VehicleJourney::journey_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.journey_pattern)
  return journey_pattern_ != NULL ? *journey_pattern_ : *default_instance_->journey_pattern_;
}
inline ::pbnavitia::JourneyPattern* VehicleJourney::mutable_journey_pattern() {
  set_has_journey_pattern();
  if (journey_pattern_ == NULL) {
    journey_pattern_ = new ::pbnavitia::JourneyPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.journey_pattern)
  return journey_pattern_;
}
inline ::pbnavitia::JourneyPattern* VehicleJourney::release_journey_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.journey_pattern)
  clear_has_journey_pattern();
  ::pbnavitia::JourneyPattern* temp = journey_pattern_;
  journey_pattern_ = NULL;
  return temp;
}
inline void VehicleJourney::set_allocated_journey_pattern(::pbnavitia::JourneyPattern* journey_pattern) {
  delete journey_pattern_;
  journey_pattern_ = journey_pattern;
  if (journey_pattern) {
    set_has_journey_pattern();
  } else {
    clear_has_journey_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.journey_pattern)
}

// optional .pbnavitia.Trip trip = 9;
inline bool VehicleJourney::has_trip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleJourney::set_has_trip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleJourney::clear_has_trip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleJourney::clear_trip() {
  if (trip_ != NULL) trip_->::pbnavitia::Trip::Clear();
  clear_has_trip();
}
inline const ::pbnavitia::Trip& VehicleJourney::trip() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.trip)
  return trip_ != NULL ? *trip_ : *default_instance_->trip_;
}
inline ::pbnavitia::Trip* VehicleJourney::mutable_trip() {
  set_has_trip();
  if (trip_ == NULL) {
    trip_ = new ::pbnavitia::Trip;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.trip)
  return trip_;
}
inline ::pbnavitia::Trip* VehicleJourney::release_trip() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.trip)
  clear_has_trip();
  ::pbnavitia::Trip* temp = trip_;
  trip_ = NULL;
  return temp;
}
inline void VehicleJourney::set_allocated_trip(::pbnavitia::Trip* trip) {
  delete trip_;
  trip_ = trip;
  if (trip) {
    set_has_trip();
  } else {
    clear_has_trip();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.trip)
}

// repeated .pbnavitia.Message messages = 10;
inline int VehicleJourney::messages_size() const {
  return messages_.size();
}
inline void VehicleJourney::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& VehicleJourney::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* VehicleJourney::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* VehicleJourney::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
VehicleJourney::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
VehicleJourney::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.messages)
  return messages_;
}

// repeated string impact_uris = 32;
inline int VehicleJourney::impact_uris_size() const {
  return impact_uris_.size();
}
inline void VehicleJourney::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& VehicleJourney::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* VehicleJourney::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void VehicleJourney::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void VehicleJourney::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.impact_uris)
}
inline void VehicleJourney::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.impact_uris)
}
inline ::std::string* VehicleJourney::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.VehicleJourney.impact_uris)
  return impact_uris_.Add();
}
inline void VehicleJourney::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.impact_uris)
}
inline void VehicleJourney::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.VehicleJourney.impact_uris)
}
inline void VehicleJourney::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.VehicleJourney.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VehicleJourney::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VehicleJourney::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.impact_uris)
  return &impact_uris_;
}

// optional bool is_adapted = 11;
inline bool VehicleJourney::has_is_adapted() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleJourney::set_has_is_adapted() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VehicleJourney::clear_has_is_adapted() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VehicleJourney::clear_is_adapted() {
  is_adapted_ = false;
  clear_has_is_adapted();
}
inline bool VehicleJourney::is_adapted() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.is_adapted)
  return is_adapted_;
}
inline void VehicleJourney::set_is_adapted(bool value) {
  set_has_is_adapted();
  is_adapted_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.is_adapted)
}

// optional .pbnavitia.ValidityPattern validity_pattern = 12;
inline bool VehicleJourney::has_validity_pattern() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleJourney::set_has_validity_pattern() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VehicleJourney::clear_has_validity_pattern() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VehicleJourney::clear_validity_pattern() {
  if (validity_pattern_ != NULL) validity_pattern_->::pbnavitia::ValidityPattern::Clear();
  clear_has_validity_pattern();
}
inline const ::pbnavitia::ValidityPattern& VehicleJourney::validity_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.validity_pattern)
  return validity_pattern_ != NULL ? *validity_pattern_ : *default_instance_->validity_pattern_;
}
inline ::pbnavitia::ValidityPattern* VehicleJourney::mutable_validity_pattern() {
  set_has_validity_pattern();
  if (validity_pattern_ == NULL) {
    validity_pattern_ = new ::pbnavitia::ValidityPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.validity_pattern)
  return validity_pattern_;
}
inline ::pbnavitia::ValidityPattern* VehicleJourney::release_validity_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.validity_pattern)
  clear_has_validity_pattern();
  ::pbnavitia::ValidityPattern* temp = validity_pattern_;
  validity_pattern_ = NULL;
  return temp;
}
inline void VehicleJourney::set_allocated_validity_pattern(::pbnavitia::ValidityPattern* validity_pattern) {
  delete validity_pattern_;
  validity_pattern_ = validity_pattern;
  if (validity_pattern) {
    set_has_validity_pattern();
  } else {
    clear_has_validity_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.validity_pattern)
}

// optional .pbnavitia.ValidityPattern adapted_validity_pattern = 13;
inline bool VehicleJourney::has_adapted_validity_pattern() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VehicleJourney::set_has_adapted_validity_pattern() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VehicleJourney::clear_has_adapted_validity_pattern() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VehicleJourney::clear_adapted_validity_pattern() {
  if (adapted_validity_pattern_ != NULL) adapted_validity_pattern_->::pbnavitia::ValidityPattern::Clear();
  clear_has_adapted_validity_pattern();
}
inline const ::pbnavitia::ValidityPattern& VehicleJourney::adapted_validity_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.adapted_validity_pattern)
  return adapted_validity_pattern_ != NULL ? *adapted_validity_pattern_ : *default_instance_->adapted_validity_pattern_;
}
inline ::pbnavitia::ValidityPattern* VehicleJourney::mutable_adapted_validity_pattern() {
  set_has_adapted_validity_pattern();
  if (adapted_validity_pattern_ == NULL) {
    adapted_validity_pattern_ = new ::pbnavitia::ValidityPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.adapted_validity_pattern)
  return adapted_validity_pattern_;
}
inline ::pbnavitia::ValidityPattern* VehicleJourney::release_adapted_validity_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.adapted_validity_pattern)
  clear_has_adapted_validity_pattern();
  ::pbnavitia::ValidityPattern* temp = adapted_validity_pattern_;
  adapted_validity_pattern_ = NULL;
  return temp;
}
inline void VehicleJourney::set_allocated_adapted_validity_pattern(::pbnavitia::ValidityPattern* adapted_validity_pattern) {
  delete adapted_validity_pattern_;
  adapted_validity_pattern_ = adapted_validity_pattern;
  if (adapted_validity_pattern) {
    set_has_adapted_validity_pattern();
  } else {
    clear_has_adapted_validity_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.adapted_validity_pattern)
}

// optional string odt_message = 14;
inline bool VehicleJourney::has_odt_message() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VehicleJourney::set_has_odt_message() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VehicleJourney::clear_has_odt_message() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VehicleJourney::clear_odt_message() {
  odt_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_odt_message();
}
inline const ::std::string& VehicleJourney::odt_message() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.odt_message)
  return odt_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleJourney::set_odt_message(const ::std::string& value) {
  set_has_odt_message();
  odt_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.odt_message)
}
inline void VehicleJourney::set_odt_message(const char* value) {
  set_has_odt_message();
  odt_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.odt_message)
}
inline void VehicleJourney::set_odt_message(const char* value, size_t size) {
  set_has_odt_message();
  odt_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.odt_message)
}
inline ::std::string* VehicleJourney::mutable_odt_message() {
  set_has_odt_message();
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.odt_message)
  return odt_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleJourney::release_odt_message() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.odt_message)
  clear_has_odt_message();
  return odt_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleJourney::set_allocated_odt_message(::std::string* odt_message) {
  if (odt_message != NULL) {
    set_has_odt_message();
  } else {
    clear_has_odt_message();
  }
  odt_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), odt_message);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.odt_message)
}

// optional bool wheelchair_accessible = 16;
inline bool VehicleJourney::has_wheelchair_accessible() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VehicleJourney::set_has_wheelchair_accessible() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VehicleJourney::clear_has_wheelchair_accessible() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VehicleJourney::clear_wheelchair_accessible() {
  wheelchair_accessible_ = false;
  clear_has_wheelchair_accessible();
}
inline bool VehicleJourney::wheelchair_accessible() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.wheelchair_accessible)
  return wheelchair_accessible_;
}
inline void VehicleJourney::set_wheelchair_accessible(bool value) {
  set_has_wheelchair_accessible();
  wheelchair_accessible_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.wheelchair_accessible)
}

// optional bool bike_accepted = 17;
inline bool VehicleJourney::has_bike_accepted() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VehicleJourney::set_has_bike_accepted() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VehicleJourney::clear_has_bike_accepted() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VehicleJourney::clear_bike_accepted() {
  bike_accepted_ = false;
  clear_has_bike_accepted();
}
inline bool VehicleJourney::bike_accepted() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.bike_accepted)
  return bike_accepted_;
}
inline void VehicleJourney::set_bike_accepted(bool value) {
  set_has_bike_accepted();
  bike_accepted_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.bike_accepted)
}

// optional bool air_conditioned = 18;
inline bool VehicleJourney::has_air_conditioned() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VehicleJourney::set_has_air_conditioned() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VehicleJourney::clear_has_air_conditioned() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VehicleJourney::clear_air_conditioned() {
  air_conditioned_ = false;
  clear_has_air_conditioned();
}
inline bool VehicleJourney::air_conditioned() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.air_conditioned)
  return air_conditioned_;
}
inline void VehicleJourney::set_air_conditioned(bool value) {
  set_has_air_conditioned();
  air_conditioned_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.air_conditioned)
}

// optional bool visual_announcement = 19;
inline bool VehicleJourney::has_visual_announcement() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VehicleJourney::set_has_visual_announcement() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VehicleJourney::clear_has_visual_announcement() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VehicleJourney::clear_visual_announcement() {
  visual_announcement_ = false;
  clear_has_visual_announcement();
}
inline bool VehicleJourney::visual_announcement() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.visual_announcement)
  return visual_announcement_;
}
inline void VehicleJourney::set_visual_announcement(bool value) {
  set_has_visual_announcement();
  visual_announcement_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.visual_announcement)
}

// optional bool audible_announcement = 20;
inline bool VehicleJourney::has_audible_announcement() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VehicleJourney::set_has_audible_announcement() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VehicleJourney::clear_has_audible_announcement() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VehicleJourney::clear_audible_announcement() {
  audible_announcement_ = false;
  clear_has_audible_announcement();
}
inline bool VehicleJourney::audible_announcement() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.audible_announcement)
  return audible_announcement_;
}
inline void VehicleJourney::set_audible_announcement(bool value) {
  set_has_audible_announcement();
  audible_announcement_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.audible_announcement)
}

// optional bool appropriate_escort = 21;
inline bool VehicleJourney::has_appropriate_escort() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VehicleJourney::set_has_appropriate_escort() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VehicleJourney::clear_has_appropriate_escort() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VehicleJourney::clear_appropriate_escort() {
  appropriate_escort_ = false;
  clear_has_appropriate_escort();
}
inline bool VehicleJourney::appropriate_escort() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.appropriate_escort)
  return appropriate_escort_;
}
inline void VehicleJourney::set_appropriate_escort(bool value) {
  set_has_appropriate_escort();
  appropriate_escort_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.appropriate_escort)
}

// optional bool appropriate_signage = 22;
inline bool VehicleJourney::has_appropriate_signage() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VehicleJourney::set_has_appropriate_signage() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VehicleJourney::clear_has_appropriate_signage() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VehicleJourney::clear_appropriate_signage() {
  appropriate_signage_ = false;
  clear_has_appropriate_signage();
}
inline bool VehicleJourney::appropriate_signage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.appropriate_signage)
  return appropriate_signage_;
}
inline void VehicleJourney::set_appropriate_signage(bool value) {
  set_has_appropriate_signage();
  appropriate_signage_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.appropriate_signage)
}

// optional bool school_vehicle = 23;
inline bool VehicleJourney::has_school_vehicle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void VehicleJourney::set_has_school_vehicle() {
  _has_bits_[0] |= 0x00080000u;
}
inline void VehicleJourney::clear_has_school_vehicle() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void VehicleJourney::clear_school_vehicle() {
  school_vehicle_ = false;
  clear_has_school_vehicle();
}
inline bool VehicleJourney::school_vehicle() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.school_vehicle)
  return school_vehicle_;
}
inline void VehicleJourney::set_school_vehicle(bool value) {
  set_has_school_vehicle();
  school_vehicle_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.school_vehicle)
}

// repeated .pbnavitia.Comment comments = 27;
inline int VehicleJourney::comments_size() const {
  return comments_.size();
}
inline void VehicleJourney::clear_comments() {
  comments_.Clear();
}
inline const ::pbnavitia::Comment& VehicleJourney::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.comments)
  return comments_.Get(index);
}
inline ::pbnavitia::Comment* VehicleJourney::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.comments)
  return comments_.Mutable(index);
}
inline ::pbnavitia::Comment* VehicleJourney::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.comments)
  return comments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
VehicleJourney::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.comments)
  return &comments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
VehicleJourney::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.comments)
  return comments_;
}

// repeated .pbnavitia.Code codes = 25;
inline int VehicleJourney::codes_size() const {
  return codes_.size();
}
inline void VehicleJourney::clear_codes() {
  codes_.Clear();
}
inline const ::pbnavitia::Code& VehicleJourney::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.codes)
  return codes_.Get(index);
}
inline ::pbnavitia::Code* VehicleJourney::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.codes)
  return codes_.Mutable(index);
}
inline ::pbnavitia::Code* VehicleJourney::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.codes)
  return codes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
VehicleJourney::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.codes)
  return &codes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
VehicleJourney::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.codes)
  return codes_;
}

// repeated .pbnavitia.Calendar calendars = 26;
inline int VehicleJourney::calendars_size() const {
  return calendars_.size();
}
inline void VehicleJourney::clear_calendars() {
  calendars_.Clear();
}
inline const ::pbnavitia::Calendar& VehicleJourney::calendars(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.calendars)
  return calendars_.Get(index);
}
inline ::pbnavitia::Calendar* VehicleJourney::mutable_calendars(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.calendars)
  return calendars_.Mutable(index);
}
inline ::pbnavitia::Calendar* VehicleJourney::add_calendars() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.calendars)
  return calendars_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
VehicleJourney::mutable_calendars() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.calendars)
  return &calendars_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
VehicleJourney::calendars() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.calendars)
  return calendars_;
}

// optional uint64 start_time = 28;
inline bool VehicleJourney::has_start_time() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void VehicleJourney::set_has_start_time() {
  _has_bits_[0] |= 0x00800000u;
}
inline void VehicleJourney::clear_has_start_time() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void VehicleJourney::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 VehicleJourney::start_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.start_time)
  return start_time_;
}
inline void VehicleJourney::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.start_time)
}

// optional uint64 end_time = 29;
inline bool VehicleJourney::has_end_time() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void VehicleJourney::set_has_end_time() {
  _has_bits_[0] |= 0x01000000u;
}
inline void VehicleJourney::clear_has_end_time() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void VehicleJourney::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 VehicleJourney::end_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.end_time)
  return end_time_;
}
inline void VehicleJourney::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.end_time)
}

// optional uint64 headway_secs = 30;
inline bool VehicleJourney::has_headway_secs() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void VehicleJourney::set_has_headway_secs() {
  _has_bits_[0] |= 0x02000000u;
}
inline void VehicleJourney::clear_has_headway_secs() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void VehicleJourney::clear_headway_secs() {
  headway_secs_ = GOOGLE_ULONGLONG(0);
  clear_has_headway_secs();
}
inline ::google::protobuf::uint64 VehicleJourney::headway_secs() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.headway_secs)
  return headway_secs_;
}
inline void VehicleJourney::set_headway_secs(::google::protobuf::uint64 value) {
  set_has_headway_secs();
  headway_secs_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.headway_secs)
}

// optional string headsign = 33;
inline bool VehicleJourney::has_headsign() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void VehicleJourney::set_has_headsign() {
  _has_bits_[0] |= 0x04000000u;
}
inline void VehicleJourney::clear_has_headsign() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void VehicleJourney::clear_headsign() {
  headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headsign();
}
inline const ::std::string& VehicleJourney::headsign() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.headsign)
  return headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleJourney::set_headsign(const ::std::string& value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.headsign)
}
inline void VehicleJourney::set_headsign(const char* value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.headsign)
}
inline void VehicleJourney::set_headsign(const char* value, size_t size) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.headsign)
}
inline ::std::string* VehicleJourney::mutable_headsign() {
  set_has_headsign();
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.headsign)
  return headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleJourney::release_headsign() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.headsign)
  clear_has_headsign();
  return headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleJourney::set_allocated_headsign(::std::string* headsign) {
  if (headsign != NULL) {
    set_has_headsign();
  } else {
    clear_has_headsign();
  }
  headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headsign);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.headsign)
}

// -------------------------------------------------------------------

// Trip

// optional string uri = 1;
inline bool Trip::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trip::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trip::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trip::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Trip::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Trip.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trip::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Trip.uri)
}
inline void Trip::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Trip.uri)
}
inline void Trip::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Trip.uri)
}
inline ::std::string* Trip::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Trip.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trip::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Trip.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trip::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Trip.uri)
}

// optional string name = 2;
inline bool Trip::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Trip::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Trip::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Trip::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Trip::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Trip.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trip::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Trip.name)
}
inline void Trip::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Trip.name)
}
inline void Trip::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Trip.name)
}
inline ::std::string* Trip::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Trip.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trip::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Trip.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trip::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Trip.name)
}

// -------------------------------------------------------------------

// JourneyPatternPoint

// optional string uri = 3;
inline bool JourneyPatternPoint::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JourneyPatternPoint::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JourneyPatternPoint::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JourneyPatternPoint::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& JourneyPatternPoint::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JourneyPatternPoint::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPatternPoint.uri)
}
inline void JourneyPatternPoint::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPatternPoint.uri)
}
inline void JourneyPatternPoint::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPatternPoint.uri)
}
inline ::std::string* JourneyPatternPoint::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JourneyPatternPoint::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPatternPoint.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JourneyPatternPoint::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPatternPoint.uri)
}

// optional int32 order = 4;
inline bool JourneyPatternPoint::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JourneyPatternPoint::set_has_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JourneyPatternPoint::clear_has_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JourneyPatternPoint::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 JourneyPatternPoint::order() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.order)
  return order_;
}
inline void JourneyPatternPoint::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPatternPoint.order)
}

// optional .pbnavitia.StopPoint stop_point = 5;
inline bool JourneyPatternPoint::has_stop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JourneyPatternPoint::set_has_stop_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JourneyPatternPoint::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JourneyPatternPoint::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& JourneyPatternPoint::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* JourneyPatternPoint::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* JourneyPatternPoint::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPatternPoint.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void JourneyPatternPoint::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPatternPoint.stop_point)
}

// optional .pbnavitia.JourneyPattern journey_pattern = 6;
inline bool JourneyPatternPoint::has_journey_pattern() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JourneyPatternPoint::set_has_journey_pattern() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JourneyPatternPoint::clear_has_journey_pattern() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JourneyPatternPoint::clear_journey_pattern() {
  if (journey_pattern_ != NULL) journey_pattern_->::pbnavitia::JourneyPattern::Clear();
  clear_has_journey_pattern();
}
inline const ::pbnavitia::JourneyPattern& JourneyPatternPoint::journey_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.journey_pattern)
  return journey_pattern_ != NULL ? *journey_pattern_ : *default_instance_->journey_pattern_;
}
inline ::pbnavitia::JourneyPattern* JourneyPatternPoint::mutable_journey_pattern() {
  set_has_journey_pattern();
  if (journey_pattern_ == NULL) {
    journey_pattern_ = new ::pbnavitia::JourneyPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.journey_pattern)
  return journey_pattern_;
}
inline ::pbnavitia::JourneyPattern* JourneyPatternPoint::release_journey_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPatternPoint.journey_pattern)
  clear_has_journey_pattern();
  ::pbnavitia::JourneyPattern* temp = journey_pattern_;
  journey_pattern_ = NULL;
  return temp;
}
inline void JourneyPatternPoint::set_allocated_journey_pattern(::pbnavitia::JourneyPattern* journey_pattern) {
  delete journey_pattern_;
  journey_pattern_ = journey_pattern;
  if (journey_pattern) {
    set_has_journey_pattern();
  } else {
    clear_has_journey_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPatternPoint.journey_pattern)
}

// repeated .pbnavitia.Message messages = 7;
inline int JourneyPatternPoint::messages_size() const {
  return messages_.size();
}
inline void JourneyPatternPoint::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& JourneyPatternPoint::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* JourneyPatternPoint::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* JourneyPatternPoint::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPatternPoint.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
JourneyPatternPoint::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPatternPoint.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
JourneyPatternPoint::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPatternPoint.messages)
  return messages_;
}

// repeated string impact_uris = 22;
inline int JourneyPatternPoint::impact_uris_size() const {
  return impact_uris_.size();
}
inline void JourneyPatternPoint::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& JourneyPatternPoint::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* JourneyPatternPoint::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void JourneyPatternPoint::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPatternPoint.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void JourneyPatternPoint::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPatternPoint.impact_uris)
}
inline void JourneyPatternPoint::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPatternPoint.impact_uris)
}
inline ::std::string* JourneyPatternPoint::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.JourneyPatternPoint.impact_uris)
  return impact_uris_.Add();
}
inline void JourneyPatternPoint::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPatternPoint.impact_uris)
}
inline void JourneyPatternPoint::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.JourneyPatternPoint.impact_uris)
}
inline void JourneyPatternPoint::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.JourneyPatternPoint.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JourneyPatternPoint::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPatternPoint.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JourneyPatternPoint::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPatternPoint.impact_uris)
  return &impact_uris_;
}

// -------------------------------------------------------------------

// Contributor

// optional string uri = 1;
inline bool Contributor::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Contributor::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Contributor::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Contributor::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Contributor::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Contributor.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contributor::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Contributor.uri)
}
inline void Contributor::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Contributor.uri)
}
inline void Contributor::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Contributor.uri)
}
inline ::std::string* Contributor::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Contributor.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contributor::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Contributor.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contributor::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Contributor.uri)
}

// optional string name = 2;
inline bool Contributor::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Contributor::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Contributor::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Contributor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Contributor::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Contributor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contributor::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Contributor.name)
}
inline void Contributor::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Contributor.name)
}
inline void Contributor::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Contributor.name)
}
inline ::std::string* Contributor::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Contributor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contributor::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Contributor.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contributor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Contributor.name)
}

// optional string website = 3;
inline bool Contributor::has_website() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Contributor::set_has_website() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Contributor::clear_has_website() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Contributor::clear_website() {
  website_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_website();
}
inline const ::std::string& Contributor::website() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Contributor.website)
  return website_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contributor::set_website(const ::std::string& value) {
  set_has_website();
  website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Contributor.website)
}
inline void Contributor::set_website(const char* value) {
  set_has_website();
  website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Contributor.website)
}
inline void Contributor::set_website(const char* value, size_t size) {
  set_has_website();
  website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Contributor.website)
}
inline ::std::string* Contributor::mutable_website() {
  set_has_website();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Contributor.website)
  return website_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contributor::release_website() {
  // @@protoc_insertion_point(field_release:pbnavitia.Contributor.website)
  clear_has_website();
  return website_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contributor::set_allocated_website(::std::string* website) {
  if (website != NULL) {
    set_has_website();
  } else {
    clear_has_website();
  }
  website_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), website);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Contributor.website)
}

// optional string license = 4;
inline bool Contributor::has_license() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Contributor::set_has_license() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Contributor::clear_has_license() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Contributor::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_license();
}
inline const ::std::string& Contributor::license() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Contributor.license)
  return license_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contributor::set_license(const ::std::string& value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Contributor.license)
}
inline void Contributor::set_license(const char* value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Contributor.license)
}
inline void Contributor::set_license(const char* value, size_t size) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Contributor.license)
}
inline ::std::string* Contributor::mutable_license() {
  set_has_license();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Contributor.license)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contributor::release_license() {
  // @@protoc_insertion_point(field_release:pbnavitia.Contributor.license)
  clear_has_license();
  return license_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Contributor::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    set_has_license();
  } else {
    clear_has_license();
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Contributor.license)
}

// -------------------------------------------------------------------

// Dataset

// required string uri = 1;
inline bool Dataset::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dataset::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dataset::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dataset::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Dataset::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.uri)
}
inline void Dataset::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Dataset.uri)
}
inline void Dataset::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Dataset.uri)
}
inline ::std::string* Dataset::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Dataset.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Dataset::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Dataset.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Dataset.uri)
}

// required .pbnavitia.Contributor contributor = 2;
inline bool Dataset::has_contributor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dataset::set_has_contributor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dataset::clear_has_contributor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dataset::clear_contributor() {
  if (contributor_ != NULL) contributor_->::pbnavitia::Contributor::Clear();
  clear_has_contributor();
}
inline const ::pbnavitia::Contributor& Dataset::contributor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.contributor)
  return contributor_ != NULL ? *contributor_ : *default_instance_->contributor_;
}
inline ::pbnavitia::Contributor* Dataset::mutable_contributor() {
  set_has_contributor();
  if (contributor_ == NULL) {
    contributor_ = new ::pbnavitia::Contributor;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Dataset.contributor)
  return contributor_;
}
inline ::pbnavitia::Contributor* Dataset::release_contributor() {
  // @@protoc_insertion_point(field_release:pbnavitia.Dataset.contributor)
  clear_has_contributor();
  ::pbnavitia::Contributor* temp = contributor_;
  contributor_ = NULL;
  return temp;
}
inline void Dataset::set_allocated_contributor(::pbnavitia::Contributor* contributor) {
  delete contributor_;
  contributor_ = contributor;
  if (contributor) {
    set_has_contributor();
  } else {
    clear_has_contributor();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Dataset.contributor)
}

// required uint64 start_validation_date = 3;
inline bool Dataset::has_start_validation_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dataset::set_has_start_validation_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dataset::clear_has_start_validation_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dataset::clear_start_validation_date() {
  start_validation_date_ = GOOGLE_ULONGLONG(0);
  clear_has_start_validation_date();
}
inline ::google::protobuf::uint64 Dataset::start_validation_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.start_validation_date)
  return start_validation_date_;
}
inline void Dataset::set_start_validation_date(::google::protobuf::uint64 value) {
  set_has_start_validation_date();
  start_validation_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.start_validation_date)
}

// required uint64 end_validation_date = 4;
inline bool Dataset::has_end_validation_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dataset::set_has_end_validation_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dataset::clear_has_end_validation_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dataset::clear_end_validation_date() {
  end_validation_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_validation_date();
}
inline ::google::protobuf::uint64 Dataset::end_validation_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.end_validation_date)
  return end_validation_date_;
}
inline void Dataset::set_end_validation_date(::google::protobuf::uint64 value) {
  set_has_end_validation_date();
  end_validation_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.end_validation_date)
}

// required .pbnavitia.RTLevel realtime_level = 5;
inline bool Dataset::has_realtime_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dataset::set_has_realtime_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dataset::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dataset::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
inline ::pbnavitia::RTLevel Dataset::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
inline void Dataset::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.realtime_level)
}

// optional string desc = 6;
inline bool Dataset::has_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dataset::set_has_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dataset::clear_has_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dataset::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
inline const ::std::string& Dataset::desc() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.desc)
}
inline void Dataset::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Dataset.desc)
}
inline void Dataset::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Dataset.desc)
}
inline ::std::string* Dataset::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Dataset.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Dataset::release_desc() {
  // @@protoc_insertion_point(field_release:pbnavitia.Dataset.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Dataset.desc)
}

// optional string system = 7;
inline bool Dataset::has_system() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dataset::set_has_system() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dataset::clear_has_system() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dataset::clear_system() {
  system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system();
}
inline const ::std::string& Dataset::system() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.system)
  return system_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_system(const ::std::string& value) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.system)
}
inline void Dataset::set_system(const char* value) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Dataset.system)
}
inline void Dataset::set_system(const char* value, size_t size) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Dataset.system)
}
inline ::std::string* Dataset::mutable_system() {
  set_has_system();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Dataset.system)
  return system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Dataset::release_system() {
  // @@protoc_insertion_point(field_release:pbnavitia.Dataset.system)
  clear_has_system();
  return system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dataset::set_allocated_system(::std::string* system) {
  if (system != NULL) {
    set_has_system();
  } else {
    clear_has_system();
  }
  system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Dataset.system)
}

// -------------------------------------------------------------------

// PoiType

// optional string uri = 1;
inline bool PoiType::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoiType::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoiType::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoiType::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& PoiType::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PoiType.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoiType::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PoiType.uri)
}
inline void PoiType::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PoiType.uri)
}
inline void PoiType::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PoiType.uri)
}
inline ::std::string* PoiType::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PoiType.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoiType::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PoiType.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoiType::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PoiType.uri)
}

// optional string name = 2;
inline bool PoiType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoiType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoiType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoiType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PoiType::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PoiType.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoiType::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PoiType.name)
}
inline void PoiType::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PoiType.name)
}
inline void PoiType::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PoiType.name)
}
inline ::std::string* PoiType::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PoiType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoiType::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PoiType.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoiType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PoiType.name)
}

// -------------------------------------------------------------------

// Poi

// optional string uri = 3;
inline bool Poi::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Poi::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Poi::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Poi::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Poi::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poi::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Poi.uri)
}
inline void Poi::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Poi.uri)
}
inline void Poi::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Poi.uri)
}
inline ::std::string* Poi::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Poi::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poi::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.uri)
}

// optional string name = 4;
inline bool Poi::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Poi::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Poi::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Poi::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Poi::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poi::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Poi.name)
}
inline void Poi::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Poi.name)
}
inline void Poi::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Poi.name)
}
inline ::std::string* Poi::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Poi::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poi::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.name)
}

// optional .pbnavitia.GeographicalCoord coord = 6;
inline bool Poi::has_coord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Poi::set_has_coord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Poi::clear_has_coord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Poi::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
inline const ::pbnavitia::GeographicalCoord& Poi::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::pbnavitia::GeographicalCoord* Poi::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.coord)
  return coord_;
}
inline ::pbnavitia::GeographicalCoord* Poi::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void Poi::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.coord)
}

// optional .pbnavitia.PoiType poi_type = 7;
inline bool Poi::has_poi_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Poi::set_has_poi_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Poi::clear_has_poi_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Poi::clear_poi_type() {
  if (poi_type_ != NULL) poi_type_->::pbnavitia::PoiType::Clear();
  clear_has_poi_type();
}
inline const ::pbnavitia::PoiType& Poi::poi_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.poi_type)
  return poi_type_ != NULL ? *poi_type_ : *default_instance_->poi_type_;
}
inline ::pbnavitia::PoiType* Poi::mutable_poi_type() {
  set_has_poi_type();
  if (poi_type_ == NULL) {
    poi_type_ = new ::pbnavitia::PoiType;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.poi_type)
  return poi_type_;
}
inline ::pbnavitia::PoiType* Poi::release_poi_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.poi_type)
  clear_has_poi_type();
  ::pbnavitia::PoiType* temp = poi_type_;
  poi_type_ = NULL;
  return temp;
}
inline void Poi::set_allocated_poi_type(::pbnavitia::PoiType* poi_type) {
  delete poi_type_;
  poi_type_ = poi_type;
  if (poi_type) {
    set_has_poi_type();
  } else {
    clear_has_poi_type();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.poi_type)
}

// repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
inline int Poi::administrative_regions_size() const {
  return administrative_regions_.size();
}
inline void Poi::clear_administrative_regions() {
  administrative_regions_.Clear();
}
inline const ::pbnavitia::AdministrativeRegion& Poi::administrative_regions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.administrative_regions)
  return administrative_regions_.Get(index);
}
inline ::pbnavitia::AdministrativeRegion* Poi::mutable_administrative_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.administrative_regions)
  return administrative_regions_.Mutable(index);
}
inline ::pbnavitia::AdministrativeRegion* Poi::add_administrative_regions() {
  // @@protoc_insertion_point(field_add:pbnavitia.Poi.administrative_regions)
  return administrative_regions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
Poi::mutable_administrative_regions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Poi.administrative_regions)
  return &administrative_regions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
Poi::administrative_regions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Poi.administrative_regions)
  return administrative_regions_;
}

// optional .pbnavitia.Address address = 11;
inline bool Poi::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Poi::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Poi::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Poi::clear_address() {
  if (address_ != NULL) address_->::pbnavitia::Address::Clear();
  clear_has_address();
}
inline const ::pbnavitia::Address& Poi::address() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::pbnavitia::Address* Poi::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::pbnavitia::Address;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.address)
  return address_;
}
inline ::pbnavitia::Address* Poi::release_address() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.address)
  clear_has_address();
  ::pbnavitia::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void Poi::set_allocated_address(::pbnavitia::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.address)
}

// repeated .pbnavitia.Code properties = 12;
inline int Poi::properties_size() const {
  return properties_.size();
}
inline void Poi::clear_properties() {
  properties_.Clear();
}
inline const ::pbnavitia::Code& Poi::properties(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.properties)
  return properties_.Get(index);
}
inline ::pbnavitia::Code* Poi::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.properties)
  return properties_.Mutable(index);
}
inline ::pbnavitia::Code* Poi::add_properties() {
  // @@protoc_insertion_point(field_add:pbnavitia.Poi.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Poi::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Poi.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Poi::properties() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Poi.properties)
  return properties_;
}

// optional string label = 13;
inline bool Poi::has_label() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Poi::set_has_label() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Poi::clear_has_label() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Poi::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Poi::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poi::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Poi.label)
}
inline void Poi::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Poi.label)
}
inline void Poi::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Poi.label)
}
inline ::std::string* Poi::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Poi::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poi::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.label)
}

// -------------------------------------------------------------------

// Network

// optional string uri = 3;
inline bool Network::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Network::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Network::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Network::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Network::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Network.uri)
}
inline void Network::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Network.uri)
}
inline void Network::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Network.uri)
}
inline ::std::string* Network::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Network.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Network.uri)
}

// optional string name = 4;
inline bool Network::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Network::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Network::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Network::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Network::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Network.name)
}
inline void Network::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Network.name)
}
inline void Network::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Network.name)
}
inline ::std::string* Network::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Network.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Network.name)
}

// repeated .pbnavitia.Message messages = 6;
inline int Network::messages_size() const {
  return messages_.size();
}
inline void Network::clear_messages() {
  messages_.Clear();
}
inline const ::pbnavitia::Message& Network::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.messages)
  return messages_.Get(index);
}
inline ::pbnavitia::Message* Network::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.messages)
  return messages_.Mutable(index);
}
inline ::pbnavitia::Message* Network::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.Network.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
Network::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Network.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
Network::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Network.messages)
  return messages_;
}

// repeated string impact_uris = 22;
inline int Network::impact_uris_size() const {
  return impact_uris_.size();
}
inline void Network::clear_impact_uris() {
  impact_uris_.Clear();
}
inline const ::std::string& Network::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.impact_uris)
  return impact_uris_.Get(index);
}
inline ::std::string* Network::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.impact_uris)
  return impact_uris_.Mutable(index);
}
inline void Network::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Network.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
inline void Network::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Network.impact_uris)
}
inline void Network::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Network.impact_uris)
}
inline ::std::string* Network::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Network.impact_uris)
  return impact_uris_.Add();
}
inline void Network::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Network.impact_uris)
}
inline void Network::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Network.impact_uris)
}
inline void Network::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Network.impact_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Network::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Network.impact_uris)
  return impact_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Network::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Network.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Code codes = 7;
inline int Network::codes_size() const {
  return codes_.size();
}
inline void Network::clear_codes() {
  codes_.Clear();
}
inline const ::pbnavitia::Code& Network::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.codes)
  return codes_.Get(index);
}
inline ::pbnavitia::Code* Network::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.codes)
  return codes_.Mutable(index);
}
inline ::pbnavitia::Code* Network::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Network.codes)
  return codes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Network::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Network.codes)
  return &codes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Network::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Network.codes)
  return codes_;
}

// -------------------------------------------------------------------

// PhysicalMode

// optional string uri = 3;
inline bool PhysicalMode::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PhysicalMode::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PhysicalMode::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PhysicalMode::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& PhysicalMode::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PhysicalMode.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhysicalMode::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PhysicalMode.uri)
}
inline void PhysicalMode::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PhysicalMode.uri)
}
inline void PhysicalMode::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PhysicalMode.uri)
}
inline ::std::string* PhysicalMode::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PhysicalMode.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhysicalMode::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PhysicalMode.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhysicalMode::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PhysicalMode.uri)
}

// optional string name = 4;
inline bool PhysicalMode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PhysicalMode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PhysicalMode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PhysicalMode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PhysicalMode::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PhysicalMode.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhysicalMode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PhysicalMode.name)
}
inline void PhysicalMode::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PhysicalMode.name)
}
inline void PhysicalMode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PhysicalMode.name)
}
inline ::std::string* PhysicalMode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PhysicalMode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhysicalMode::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PhysicalMode.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhysicalMode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PhysicalMode.name)
}

// -------------------------------------------------------------------

// CommercialMode

// optional string uri = 3;
inline bool CommercialMode::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommercialMode::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommercialMode::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommercialMode::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& CommercialMode::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CommercialMode.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommercialMode::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CommercialMode.uri)
}
inline void CommercialMode::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CommercialMode.uri)
}
inline void CommercialMode::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CommercialMode.uri)
}
inline ::std::string* CommercialMode::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CommercialMode.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommercialMode::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.CommercialMode.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommercialMode::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CommercialMode.uri)
}

// optional string name = 4;
inline bool CommercialMode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommercialMode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommercialMode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommercialMode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CommercialMode::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CommercialMode.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommercialMode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CommercialMode.name)
}
inline void CommercialMode::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CommercialMode.name)
}
inline void CommercialMode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CommercialMode.name)
}
inline ::std::string* CommercialMode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CommercialMode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommercialMode::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.CommercialMode.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommercialMode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CommercialMode.name)
}

// -------------------------------------------------------------------

// Connection

// optional .pbnavitia.StopPoint origin = 1;
inline bool Connection::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connection::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connection::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connection::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::StopPoint::Clear();
  clear_has_origin();
}
inline const ::pbnavitia::StopPoint& Connection::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pbnavitia::StopPoint* Connection::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Connection.origin)
  return origin_;
}
inline ::pbnavitia::StopPoint* Connection::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.Connection.origin)
  clear_has_origin();
  ::pbnavitia::StopPoint* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void Connection::set_allocated_origin(::pbnavitia::StopPoint* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Connection.origin)
}

// optional .pbnavitia.StopPoint destination = 2;
inline bool Connection::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Connection::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Connection::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Connection::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::StopPoint::Clear();
  clear_has_destination();
}
inline const ::pbnavitia::StopPoint& Connection::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
inline ::pbnavitia::StopPoint* Connection::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Connection.destination)
  return destination_;
}
inline ::pbnavitia::StopPoint* Connection::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Connection.destination)
  clear_has_destination();
  ::pbnavitia::StopPoint* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline void Connection::set_allocated_destination(::pbnavitia::StopPoint* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Connection.destination)
}

// optional int32 duration = 3;
inline bool Connection::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Connection::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Connection::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Connection::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 Connection::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.duration)
  return duration_;
}
inline void Connection::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Connection.duration)
}

// optional int32 display_duration = 4;
inline bool Connection::has_display_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Connection::set_has_display_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Connection::clear_has_display_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Connection::clear_display_duration() {
  display_duration_ = 0;
  clear_has_display_duration();
}
inline ::google::protobuf::int32 Connection::display_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.display_duration)
  return display_duration_;
}
inline void Connection::set_display_duration(::google::protobuf::int32 value) {
  set_has_display_duration();
  display_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Connection.display_duration)
}

// optional int32 max_duration = 5;
inline bool Connection::has_max_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Connection::set_has_max_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Connection::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Connection::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
inline ::google::protobuf::int32 Connection::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.max_duration)
  return max_duration_;
}
inline void Connection::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Connection.max_duration)
}

// -------------------------------------------------------------------

// Company

// optional string uri = 3;
inline bool Company::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Company::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Company::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Company::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Company::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Company.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Company.uri)
}
inline void Company::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Company.uri)
}
inline void Company::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Company.uri)
}
inline ::std::string* Company::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Company.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Company.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Company.uri)
}

// optional string name = 4;
inline bool Company::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Company::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Company::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Company::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Company::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Company.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Company.name)
}
inline void Company::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Company.name)
}
inline void Company::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Company.name)
}
inline ::std::string* Company::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Company.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Company.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Company.name)
}

// repeated .pbnavitia.Code codes = 8;
inline int Company::codes_size() const {
  return codes_.size();
}
inline void Company::clear_codes() {
  codes_.Clear();
}
inline const ::pbnavitia::Code& Company::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Company.codes)
  return codes_.Get(index);
}
inline ::pbnavitia::Code* Company::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Company.codes)
  return codes_.Mutable(index);
}
inline ::pbnavitia::Code* Company::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Company.codes)
  return codes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Company::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Company.codes)
  return &codes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Company::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Company.codes)
  return codes_;
}

// -------------------------------------------------------------------

// Address

// optional string uri = 3;
inline bool Address::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Address::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Address.uri)
}
inline void Address::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Address.uri)
}
inline void Address::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Address.uri)
}
inline ::std::string* Address::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Address.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Address.uri)
}

// optional string name = 4;
inline bool Address::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Address::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Address.name)
}
inline void Address::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Address.name)
}
inline void Address::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Address.name)
}
inline ::std::string* Address::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Address.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Address.name)
}

// optional .pbnavitia.GeographicalCoord coord = 6;
inline bool Address::has_coord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Address::set_has_coord() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Address::clear_has_coord() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Address::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
inline const ::pbnavitia::GeographicalCoord& Address::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::pbnavitia::GeographicalCoord* Address::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.coord)
  return coord_;
}
inline ::pbnavitia::GeographicalCoord* Address::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.Address.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void Address::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Address.coord)
}

// repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
inline int Address::administrative_regions_size() const {
  return administrative_regions_.size();
}
inline void Address::clear_administrative_regions() {
  administrative_regions_.Clear();
}
inline const ::pbnavitia::AdministrativeRegion& Address::administrative_regions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.administrative_regions)
  return administrative_regions_.Get(index);
}
inline ::pbnavitia::AdministrativeRegion* Address::mutable_administrative_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.administrative_regions)
  return administrative_regions_.Mutable(index);
}
inline ::pbnavitia::AdministrativeRegion* Address::add_administrative_regions() {
  // @@protoc_insertion_point(field_add:pbnavitia.Address.administrative_regions)
  return administrative_regions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
Address::mutable_administrative_regions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Address.administrative_regions)
  return &administrative_regions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
Address::administrative_regions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Address.administrative_regions)
  return administrative_regions_;
}

// optional int32 house_number = 2;
inline bool Address::has_house_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Address::set_has_house_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Address::clear_has_house_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Address::clear_house_number() {
  house_number_ = 0;
  clear_has_house_number();
}
inline ::google::protobuf::int32 Address::house_number() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.house_number)
  return house_number_;
}
inline void Address::set_house_number(::google::protobuf::int32 value) {
  set_has_house_number();
  house_number_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Address.house_number)
}

// optional string label = 16;
inline bool Address::has_label() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Address::set_has_label() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Address::clear_has_label() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Address::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Address::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Address.label)
}
inline void Address::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Address.label)
}
inline void Address::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Address.label)
}
inline ::std::string* Address::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.Address.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Address.label)
}

// -------------------------------------------------------------------

// CalendarException

// optional string uri = 1;
inline bool CalendarException::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalendarException::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalendarException::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalendarException::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& CalendarException::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarException.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarException::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarException.uri)
}
inline void CalendarException::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarException.uri)
}
inline void CalendarException::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarException.uri)
}
inline ::std::string* CalendarException::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarException.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarException::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarException.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarException::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarException.uri)
}

// optional string date = 2;
inline bool CalendarException::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalendarException::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalendarException::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalendarException::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& CalendarException::date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarException.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarException::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarException.date)
}
inline void CalendarException::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarException.date)
}
inline void CalendarException::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarException.date)
}
inline ::std::string* CalendarException::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarException.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarException::release_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarException.date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarException::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarException.date)
}

// optional .pbnavitia.ExceptionType type = 3;
inline bool CalendarException::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CalendarException::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CalendarException::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CalendarException::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pbnavitia::ExceptionType CalendarException::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarException.type)
  return static_cast< ::pbnavitia::ExceptionType >(type_);
}
inline void CalendarException::set_type(::pbnavitia::ExceptionType value) {
  assert(::pbnavitia::ExceptionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarException.type)
}

// -------------------------------------------------------------------

// CalendarPeriod

// optional string begin = 1;
inline bool CalendarPeriod::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalendarPeriod::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalendarPeriod::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalendarPeriod::clear_begin() {
  begin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begin();
}
inline const ::std::string& CalendarPeriod::begin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarPeriod.begin)
  return begin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarPeriod::set_begin(const ::std::string& value) {
  set_has_begin();
  begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarPeriod.begin)
}
inline void CalendarPeriod::set_begin(const char* value) {
  set_has_begin();
  begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarPeriod.begin)
}
inline void CalendarPeriod::set_begin(const char* value, size_t size) {
  set_has_begin();
  begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarPeriod.begin)
}
inline ::std::string* CalendarPeriod::mutable_begin() {
  set_has_begin();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarPeriod.begin)
  return begin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarPeriod::release_begin() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarPeriod.begin)
  clear_has_begin();
  return begin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarPeriod::set_allocated_begin(::std::string* begin) {
  if (begin != NULL) {
    set_has_begin();
  } else {
    clear_has_begin();
  }
  begin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begin);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarPeriod.begin)
}

// optional string end = 2;
inline bool CalendarPeriod::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalendarPeriod::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalendarPeriod::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalendarPeriod::clear_end() {
  end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end();
}
inline const ::std::string& CalendarPeriod::end() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarPeriod.end)
  return end_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarPeriod::set_end(const ::std::string& value) {
  set_has_end();
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarPeriod.end)
}
inline void CalendarPeriod::set_end(const char* value) {
  set_has_end();
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarPeriod.end)
}
inline void CalendarPeriod::set_end(const char* value, size_t size) {
  set_has_end();
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarPeriod.end)
}
inline ::std::string* CalendarPeriod::mutable_end() {
  set_has_end();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarPeriod.end)
  return end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarPeriod::release_end() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarPeriod.end)
  clear_has_end();
  return end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarPeriod::set_allocated_end(::std::string* end) {
  if (end != NULL) {
    set_has_end();
  } else {
    clear_has_end();
  }
  end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarPeriod.end)
}

// -------------------------------------------------------------------

// WeekPattern

// optional bool monday = 1;
inline bool WeekPattern::has_monday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeekPattern::set_has_monday() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeekPattern::clear_has_monday() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeekPattern::clear_monday() {
  monday_ = false;
  clear_has_monday();
}
inline bool WeekPattern::monday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.monday)
  return monday_;
}
inline void WeekPattern::set_monday(bool value) {
  set_has_monday();
  monday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.monday)
}

// optional bool tuesday = 2;
inline bool WeekPattern::has_tuesday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeekPattern::set_has_tuesday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeekPattern::clear_has_tuesday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeekPattern::clear_tuesday() {
  tuesday_ = false;
  clear_has_tuesday();
}
inline bool WeekPattern::tuesday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.tuesday)
  return tuesday_;
}
inline void WeekPattern::set_tuesday(bool value) {
  set_has_tuesday();
  tuesday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.tuesday)
}

// optional bool wednesday = 3;
inline bool WeekPattern::has_wednesday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeekPattern::set_has_wednesday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeekPattern::clear_has_wednesday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeekPattern::clear_wednesday() {
  wednesday_ = false;
  clear_has_wednesday();
}
inline bool WeekPattern::wednesday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.wednesday)
  return wednesday_;
}
inline void WeekPattern::set_wednesday(bool value) {
  set_has_wednesday();
  wednesday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.wednesday)
}

// optional bool thursday = 4;
inline bool WeekPattern::has_thursday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeekPattern::set_has_thursday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeekPattern::clear_has_thursday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeekPattern::clear_thursday() {
  thursday_ = false;
  clear_has_thursday();
}
inline bool WeekPattern::thursday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.thursday)
  return thursday_;
}
inline void WeekPattern::set_thursday(bool value) {
  set_has_thursday();
  thursday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.thursday)
}

// optional bool friday = 5;
inline bool WeekPattern::has_friday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeekPattern::set_has_friday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeekPattern::clear_has_friday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeekPattern::clear_friday() {
  friday_ = false;
  clear_has_friday();
}
inline bool WeekPattern::friday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.friday)
  return friday_;
}
inline void WeekPattern::set_friday(bool value) {
  set_has_friday();
  friday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.friday)
}

// optional bool saturday = 6;
inline bool WeekPattern::has_saturday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeekPattern::set_has_saturday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeekPattern::clear_has_saturday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeekPattern::clear_saturday() {
  saturday_ = false;
  clear_has_saturday();
}
inline bool WeekPattern::saturday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.saturday)
  return saturday_;
}
inline void WeekPattern::set_saturday(bool value) {
  set_has_saturday();
  saturday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.saturday)
}

// optional bool sunday = 7;
inline bool WeekPattern::has_sunday() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeekPattern::set_has_sunday() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeekPattern::clear_has_sunday() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeekPattern::clear_sunday() {
  sunday_ = false;
  clear_has_sunday();
}
inline bool WeekPattern::sunday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.sunday)
  return sunday_;
}
inline void WeekPattern::set_sunday(bool value) {
  set_has_sunday();
  sunday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.sunday)
}

// -------------------------------------------------------------------

// Calendar

// optional string uri = 1;
inline bool Calendar::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Calendar::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Calendar::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Calendar::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Calendar::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Calendar.uri)
}
inline void Calendar::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Calendar.uri)
}
inline void Calendar::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Calendar.uri)
}
inline ::std::string* Calendar::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Calendar.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Calendar.uri)
}

// optional string name = 2;
inline bool Calendar::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Calendar::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Calendar::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Calendar::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Calendar::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Calendar.name)
}
inline void Calendar::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Calendar.name)
}
inline void Calendar::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Calendar.name)
}
inline ::std::string* Calendar::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calendar::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Calendar.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calendar::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Calendar.name)
}

// optional .pbnavitia.WeekPattern week_pattern = 3;
inline bool Calendar::has_week_pattern() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Calendar::set_has_week_pattern() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Calendar::clear_has_week_pattern() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Calendar::clear_week_pattern() {
  if (week_pattern_ != NULL) week_pattern_->::pbnavitia::WeekPattern::Clear();
  clear_has_week_pattern();
}
inline const ::pbnavitia::WeekPattern& Calendar::week_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.week_pattern)
  return week_pattern_ != NULL ? *week_pattern_ : *default_instance_->week_pattern_;
}
inline ::pbnavitia::WeekPattern* Calendar::mutable_week_pattern() {
  set_has_week_pattern();
  if (week_pattern_ == NULL) {
    week_pattern_ = new ::pbnavitia::WeekPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.week_pattern)
  return week_pattern_;
}
inline ::pbnavitia::WeekPattern* Calendar::release_week_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.Calendar.week_pattern)
  clear_has_week_pattern();
  ::pbnavitia::WeekPattern* temp = week_pattern_;
  week_pattern_ = NULL;
  return temp;
}
inline void Calendar::set_allocated_week_pattern(::pbnavitia::WeekPattern* week_pattern) {
  delete week_pattern_;
  week_pattern_ = week_pattern;
  if (week_pattern) {
    set_has_week_pattern();
  } else {
    clear_has_week_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Calendar.week_pattern)
}

// repeated .pbnavitia.CalendarPeriod active_periods = 4;
inline int Calendar::active_periods_size() const {
  return active_periods_.size();
}
inline void Calendar::clear_active_periods() {
  active_periods_.Clear();
}
inline const ::pbnavitia::CalendarPeriod& Calendar::active_periods(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.active_periods)
  return active_periods_.Get(index);
}
inline ::pbnavitia::CalendarPeriod* Calendar::mutable_active_periods(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.active_periods)
  return active_periods_.Mutable(index);
}
inline ::pbnavitia::CalendarPeriod* Calendar::add_active_periods() {
  // @@protoc_insertion_point(field_add:pbnavitia.Calendar.active_periods)
  return active_periods_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarPeriod >*
Calendar::mutable_active_periods() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Calendar.active_periods)
  return &active_periods_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarPeriod >&
Calendar::active_periods() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Calendar.active_periods)
  return active_periods_;
}

// repeated .pbnavitia.CalendarException exceptions = 5;
inline int Calendar::exceptions_size() const {
  return exceptions_.size();
}
inline void Calendar::clear_exceptions() {
  exceptions_.Clear();
}
inline const ::pbnavitia::CalendarException& Calendar::exceptions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.exceptions)
  return exceptions_.Get(index);
}
inline ::pbnavitia::CalendarException* Calendar::mutable_exceptions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.exceptions)
  return exceptions_.Mutable(index);
}
inline ::pbnavitia::CalendarException* Calendar::add_exceptions() {
  // @@protoc_insertion_point(field_add:pbnavitia.Calendar.exceptions)
  return exceptions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >*
Calendar::mutable_exceptions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Calendar.exceptions)
  return &exceptions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >&
Calendar::exceptions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Calendar.exceptions)
  return exceptions_;
}

// optional .pbnavitia.ValidityPattern validity_pattern = 6;
inline bool Calendar::has_validity_pattern() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Calendar::set_has_validity_pattern() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Calendar::clear_has_validity_pattern() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Calendar::clear_validity_pattern() {
  if (validity_pattern_ != NULL) validity_pattern_->::pbnavitia::ValidityPattern::Clear();
  clear_has_validity_pattern();
}
inline const ::pbnavitia::ValidityPattern& Calendar::validity_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.validity_pattern)
  return validity_pattern_ != NULL ? *validity_pattern_ : *default_instance_->validity_pattern_;
}
inline ::pbnavitia::ValidityPattern* Calendar::mutable_validity_pattern() {
  set_has_validity_pattern();
  if (validity_pattern_ == NULL) {
    validity_pattern_ = new ::pbnavitia::ValidityPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.validity_pattern)
  return validity_pattern_;
}
inline ::pbnavitia::ValidityPattern* Calendar::release_validity_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.Calendar.validity_pattern)
  clear_has_validity_pattern();
  ::pbnavitia::ValidityPattern* temp = validity_pattern_;
  validity_pattern_ = NULL;
  return temp;
}
inline void Calendar::set_allocated_validity_pattern(::pbnavitia::ValidityPattern* validity_pattern) {
  delete validity_pattern_;
  validity_pattern_ = validity_pattern;
  if (validity_pattern) {
    set_has_validity_pattern();
  } else {
    clear_has_validity_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Calendar.validity_pattern)
}

// -------------------------------------------------------------------

// ValidityPattern

// optional string beginning_date = 1;
inline bool ValidityPattern::has_beginning_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValidityPattern::set_has_beginning_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ValidityPattern::clear_has_beginning_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ValidityPattern::clear_beginning_date() {
  beginning_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beginning_date();
}
inline const ::std::string& ValidityPattern::beginning_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ValidityPattern.beginning_date)
  return beginning_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidityPattern::set_beginning_date(const ::std::string& value) {
  set_has_beginning_date();
  beginning_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.ValidityPattern.beginning_date)
}
inline void ValidityPattern::set_beginning_date(const char* value) {
  set_has_beginning_date();
  beginning_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.ValidityPattern.beginning_date)
}
inline void ValidityPattern::set_beginning_date(const char* value, size_t size) {
  set_has_beginning_date();
  beginning_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ValidityPattern.beginning_date)
}
inline ::std::string* ValidityPattern::mutable_beginning_date() {
  set_has_beginning_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.ValidityPattern.beginning_date)
  return beginning_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidityPattern::release_beginning_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.ValidityPattern.beginning_date)
  clear_has_beginning_date();
  return beginning_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidityPattern::set_allocated_beginning_date(::std::string* beginning_date) {
  if (beginning_date != NULL) {
    set_has_beginning_date();
  } else {
    clear_has_beginning_date();
  }
  beginning_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beginning_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ValidityPattern.beginning_date)
}

// optional string days = 2;
inline bool ValidityPattern::has_days() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValidityPattern::set_has_days() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ValidityPattern::clear_has_days() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ValidityPattern::clear_days() {
  days_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_days();
}
inline const ::std::string& ValidityPattern::days() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ValidityPattern.days)
  return days_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidityPattern::set_days(const ::std::string& value) {
  set_has_days();
  days_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.ValidityPattern.days)
}
inline void ValidityPattern::set_days(const char* value) {
  set_has_days();
  days_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.ValidityPattern.days)
}
inline void ValidityPattern::set_days(const char* value, size_t size) {
  set_has_days();
  days_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ValidityPattern.days)
}
inline ::std::string* ValidityPattern::mutable_days() {
  set_has_days();
  // @@protoc_insertion_point(field_mutable:pbnavitia.ValidityPattern.days)
  return days_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidityPattern::release_days() {
  // @@protoc_insertion_point(field_release:pbnavitia.ValidityPattern.days)
  clear_has_days();
  return days_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidityPattern::set_allocated_days(::std::string* days) {
  if (days != NULL) {
    set_has_days();
  } else {
    clear_has_days();
  }
  days_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), days);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ValidityPattern.days)
}

// -------------------------------------------------------------------

// LocationContext

// required string place = 1;
inline bool LocationContext::has_place() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocationContext::set_has_place() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocationContext::clear_has_place() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocationContext::clear_place() {
  place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_place();
}
inline const ::std::string& LocationContext::place() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LocationContext.place)
  return place_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationContext::set_place(const ::std::string& value) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LocationContext.place)
}
inline void LocationContext::set_place(const char* value) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LocationContext.place)
}
inline void LocationContext::set_place(const char* value, size_t size) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LocationContext.place)
}
inline ::std::string* LocationContext::mutable_place() {
  set_has_place();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LocationContext.place)
  return place_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationContext::release_place() {
  // @@protoc_insertion_point(field_release:pbnavitia.LocationContext.place)
  clear_has_place();
  return place_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationContext::set_allocated_place(::std::string* place) {
  if (place != NULL) {
    set_has_place();
  } else {
    clear_has_place();
  }
  place_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LocationContext.place)
}

// required int32 access_duration = 2;
inline bool LocationContext::has_access_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocationContext::set_has_access_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocationContext::clear_has_access_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocationContext::clear_access_duration() {
  access_duration_ = 0;
  clear_has_access_duration();
}
inline ::google::protobuf::int32 LocationContext::access_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LocationContext.access_duration)
  return access_duration_;
}
inline void LocationContext::set_access_duration(::google::protobuf::int32 value) {
  set_has_access_duration();
  access_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LocationContext.access_duration)
}

// -------------------------------------------------------------------

// PtObject

// required string name = 1;
inline bool PtObject::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PtObject::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PtObject::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PtObject::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PtObject::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtObject::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.name)
}
inline void PtObject::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtObject.name)
}
inline void PtObject::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtObject.name)
}
inline ::std::string* PtObject::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtObject::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtObject::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.name)
}

// required string uri = 2;
inline bool PtObject::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PtObject::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PtObject::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PtObject::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& PtObject::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtObject::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.uri)
}
inline void PtObject::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtObject.uri)
}
inline void PtObject::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtObject.uri)
}
inline ::std::string* PtObject::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtObject::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtObject::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.uri)
}

// optional .pbnavitia.NavitiaType embedded_type = 3;
inline bool PtObject::has_embedded_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PtObject::set_has_embedded_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PtObject::clear_has_embedded_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PtObject::clear_embedded_type() {
  embedded_type_ = 1;
  clear_has_embedded_type();
}
inline ::pbnavitia::NavitiaType PtObject::embedded_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.embedded_type)
  return static_cast< ::pbnavitia::NavitiaType >(embedded_type_);
}
inline void PtObject::set_embedded_type(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  set_has_embedded_type();
  embedded_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.embedded_type)
}

// optional .pbnavitia.StopArea stop_area = 4;
inline bool PtObject::has_stop_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PtObject::set_has_stop_area() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PtObject::clear_has_stop_area() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PtObject::clear_stop_area() {
  if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
  clear_has_stop_area();
}
inline const ::pbnavitia::StopArea& PtObject::stop_area() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.stop_area)
  return stop_area_ != NULL ? *stop_area_ : *default_instance_->stop_area_;
}
inline ::pbnavitia::StopArea* PtObject::mutable_stop_area() {
  set_has_stop_area();
  if (stop_area_ == NULL) {
    stop_area_ = new ::pbnavitia::StopArea;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.stop_area)
  return stop_area_;
}
inline ::pbnavitia::StopArea* PtObject::release_stop_area() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.stop_area)
  clear_has_stop_area();
  ::pbnavitia::StopArea* temp = stop_area_;
  stop_area_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_stop_area(::pbnavitia::StopArea* stop_area) {
  delete stop_area_;
  stop_area_ = stop_area;
  if (stop_area) {
    set_has_stop_area();
  } else {
    clear_has_stop_area();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.stop_area)
}

// optional .pbnavitia.Poi poi = 5;
inline bool PtObject::has_poi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PtObject::set_has_poi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PtObject::clear_has_poi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PtObject::clear_poi() {
  if (poi_ != NULL) poi_->::pbnavitia::Poi::Clear();
  clear_has_poi();
}
inline const ::pbnavitia::Poi& PtObject::poi() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.poi)
  return poi_ != NULL ? *poi_ : *default_instance_->poi_;
}
inline ::pbnavitia::Poi* PtObject::mutable_poi() {
  set_has_poi();
  if (poi_ == NULL) {
    poi_ = new ::pbnavitia::Poi;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.poi)
  return poi_;
}
inline ::pbnavitia::Poi* PtObject::release_poi() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.poi)
  clear_has_poi();
  ::pbnavitia::Poi* temp = poi_;
  poi_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_poi(::pbnavitia::Poi* poi) {
  delete poi_;
  poi_ = poi;
  if (poi) {
    set_has_poi();
  } else {
    clear_has_poi();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.poi)
}

// optional .pbnavitia.StopPoint stop_point = 6;
inline bool PtObject::has_stop_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PtObject::set_has_stop_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PtObject::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PtObject::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
inline const ::pbnavitia::StopPoint& PtObject::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
inline ::pbnavitia::StopPoint* PtObject::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.stop_point)
  return stop_point_;
}
inline ::pbnavitia::StopPoint* PtObject::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.stop_point)
}

// optional .pbnavitia.Address address = 7;
inline bool PtObject::has_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PtObject::set_has_address() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PtObject::clear_has_address() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PtObject::clear_address() {
  if (address_ != NULL) address_->::pbnavitia::Address::Clear();
  clear_has_address();
}
inline const ::pbnavitia::Address& PtObject::address() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::pbnavitia::Address* PtObject::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::pbnavitia::Address;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.address)
  return address_;
}
inline ::pbnavitia::Address* PtObject::release_address() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.address)
  clear_has_address();
  ::pbnavitia::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_address(::pbnavitia::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.address)
}

// optional .pbnavitia.Line line = 9;
inline bool PtObject::has_line() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PtObject::set_has_line() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PtObject::clear_has_line() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PtObject::clear_line() {
  if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  clear_has_line();
}
inline const ::pbnavitia::Line& PtObject::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::pbnavitia::Line* PtObject::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.line)
  return line_;
}
inline ::pbnavitia::Line* PtObject::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.line)
  clear_has_line();
  ::pbnavitia::Line* temp = line_;
  line_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_line(::pbnavitia::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.line)
}

// optional .pbnavitia.Network network = 10;
inline bool PtObject::has_network() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PtObject::set_has_network() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PtObject::clear_has_network() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PtObject::clear_network() {
  if (network_ != NULL) network_->::pbnavitia::Network::Clear();
  clear_has_network();
}
inline const ::pbnavitia::Network& PtObject::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.network)
  return network_ != NULL ? *network_ : *default_instance_->network_;
}
inline ::pbnavitia::Network* PtObject::mutable_network() {
  set_has_network();
  if (network_ == NULL) {
    network_ = new ::pbnavitia::Network;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.network)
  return network_;
}
inline ::pbnavitia::Network* PtObject::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.network)
  clear_has_network();
  ::pbnavitia::Network* temp = network_;
  network_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_network(::pbnavitia::Network* network) {
  delete network_;
  network_ = network;
  if (network) {
    set_has_network();
  } else {
    clear_has_network();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.network)
}

// optional .pbnavitia.CommercialMode commercial_mode = 11;
inline bool PtObject::has_commercial_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PtObject::set_has_commercial_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PtObject::clear_has_commercial_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PtObject::clear_commercial_mode() {
  if (commercial_mode_ != NULL) commercial_mode_->::pbnavitia::CommercialMode::Clear();
  clear_has_commercial_mode();
}
inline const ::pbnavitia::CommercialMode& PtObject::commercial_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.commercial_mode)
  return commercial_mode_ != NULL ? *commercial_mode_ : *default_instance_->commercial_mode_;
}
inline ::pbnavitia::CommercialMode* PtObject::mutable_commercial_mode() {
  set_has_commercial_mode();
  if (commercial_mode_ == NULL) {
    commercial_mode_ = new ::pbnavitia::CommercialMode;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.commercial_mode)
  return commercial_mode_;
}
inline ::pbnavitia::CommercialMode* PtObject::release_commercial_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.commercial_mode)
  clear_has_commercial_mode();
  ::pbnavitia::CommercialMode* temp = commercial_mode_;
  commercial_mode_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_commercial_mode(::pbnavitia::CommercialMode* commercial_mode) {
  delete commercial_mode_;
  commercial_mode_ = commercial_mode;
  if (commercial_mode) {
    set_has_commercial_mode();
  } else {
    clear_has_commercial_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.commercial_mode)
}

// optional .pbnavitia.Route route = 12;
inline bool PtObject::has_route() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PtObject::set_has_route() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PtObject::clear_has_route() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PtObject::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
inline const ::pbnavitia::Route& PtObject::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
inline ::pbnavitia::Route* PtObject::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.route)
  return route_;
}
inline ::pbnavitia::Route* PtObject::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.route)
}

// optional .pbnavitia.AdministrativeRegion administrative_region = 13;
inline bool PtObject::has_administrative_region() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PtObject::set_has_administrative_region() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PtObject::clear_has_administrative_region() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PtObject::clear_administrative_region() {
  if (administrative_region_ != NULL) administrative_region_->::pbnavitia::AdministrativeRegion::Clear();
  clear_has_administrative_region();
}
inline const ::pbnavitia::AdministrativeRegion& PtObject::administrative_region() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.administrative_region)
  return administrative_region_ != NULL ? *administrative_region_ : *default_instance_->administrative_region_;
}
inline ::pbnavitia::AdministrativeRegion* PtObject::mutable_administrative_region() {
  set_has_administrative_region();
  if (administrative_region_ == NULL) {
    administrative_region_ = new ::pbnavitia::AdministrativeRegion;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.administrative_region)
  return administrative_region_;
}
inline ::pbnavitia::AdministrativeRegion* PtObject::release_administrative_region() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.administrative_region)
  clear_has_administrative_region();
  ::pbnavitia::AdministrativeRegion* temp = administrative_region_;
  administrative_region_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_administrative_region(::pbnavitia::AdministrativeRegion* administrative_region) {
  delete administrative_region_;
  administrative_region_ = administrative_region;
  if (administrative_region) {
    set_has_administrative_region();
  } else {
    clear_has_administrative_region();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.administrative_region)
}

// optional int32 distance = 14;
inline bool PtObject::has_distance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PtObject::set_has_distance() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PtObject::clear_has_distance() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PtObject::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 PtObject::distance() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.distance)
  return distance_;
}
inline void PtObject::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.distance)
}

// optional int32 quality = 15;
inline bool PtObject::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PtObject::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PtObject::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PtObject::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 PtObject::quality() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.quality)
  return quality_;
}
inline void PtObject::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.quality)
}

// optional .pbnavitia.Company company = 16;
inline bool PtObject::has_company() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PtObject::set_has_company() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PtObject::clear_has_company() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PtObject::clear_company() {
  if (company_ != NULL) company_->::pbnavitia::Company::Clear();
  clear_has_company();
}
inline const ::pbnavitia::Company& PtObject::company() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.company)
  return company_ != NULL ? *company_ : *default_instance_->company_;
}
inline ::pbnavitia::Company* PtObject::mutable_company() {
  set_has_company();
  if (company_ == NULL) {
    company_ = new ::pbnavitia::Company;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.company)
  return company_;
}
inline ::pbnavitia::Company* PtObject::release_company() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.company)
  clear_has_company();
  ::pbnavitia::Company* temp = company_;
  company_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_company(::pbnavitia::Company* company) {
  delete company_;
  company_ = company;
  if (company) {
    set_has_company();
  } else {
    clear_has_company();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.company)
}

// optional .pbnavitia.VehicleJourney vehicle_journey = 17;
inline bool PtObject::has_vehicle_journey() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PtObject::set_has_vehicle_journey() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PtObject::clear_has_vehicle_journey() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PtObject::clear_vehicle_journey() {
  if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
  clear_has_vehicle_journey();
}
inline const ::pbnavitia::VehicleJourney& PtObject::vehicle_journey() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.vehicle_journey)
  return vehicle_journey_ != NULL ? *vehicle_journey_ : *default_instance_->vehicle_journey_;
}
inline ::pbnavitia::VehicleJourney* PtObject::mutable_vehicle_journey() {
  set_has_vehicle_journey();
  if (vehicle_journey_ == NULL) {
    vehicle_journey_ = new ::pbnavitia::VehicleJourney;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.vehicle_journey)
  return vehicle_journey_;
}
inline ::pbnavitia::VehicleJourney* PtObject::release_vehicle_journey() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.vehicle_journey)
  clear_has_vehicle_journey();
  ::pbnavitia::VehicleJourney* temp = vehicle_journey_;
  vehicle_journey_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey) {
  delete vehicle_journey_;
  vehicle_journey_ = vehicle_journey;
  if (vehicle_journey) {
    set_has_vehicle_journey();
  } else {
    clear_has_vehicle_journey();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.vehicle_journey)
}

// optional .pbnavitia.Calendar calendar = 18;
inline bool PtObject::has_calendar() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PtObject::set_has_calendar() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PtObject::clear_has_calendar() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PtObject::clear_calendar() {
  if (calendar_ != NULL) calendar_->::pbnavitia::Calendar::Clear();
  clear_has_calendar();
}
inline const ::pbnavitia::Calendar& PtObject::calendar() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.calendar)
  return calendar_ != NULL ? *calendar_ : *default_instance_->calendar_;
}
inline ::pbnavitia::Calendar* PtObject::mutable_calendar() {
  set_has_calendar();
  if (calendar_ == NULL) {
    calendar_ = new ::pbnavitia::Calendar;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.calendar)
  return calendar_;
}
inline ::pbnavitia::Calendar* PtObject::release_calendar() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.calendar)
  clear_has_calendar();
  ::pbnavitia::Calendar* temp = calendar_;
  calendar_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_calendar(::pbnavitia::Calendar* calendar) {
  delete calendar_;
  calendar_ = calendar;
  if (calendar) {
    set_has_calendar();
  } else {
    clear_has_calendar();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.calendar)
}

// optional int32 score = 19;
inline bool PtObject::has_score() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PtObject::set_has_score() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PtObject::clear_has_score() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PtObject::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 PtObject::score() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.score)
  return score_;
}
inline void PtObject::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.score)
}

// optional .pbnavitia.Trip trip = 20;
inline bool PtObject::has_trip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PtObject::set_has_trip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PtObject::clear_has_trip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PtObject::clear_trip() {
  if (trip_ != NULL) trip_->::pbnavitia::Trip::Clear();
  clear_has_trip();
}
inline const ::pbnavitia::Trip& PtObject::trip() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.trip)
  return trip_ != NULL ? *trip_ : *default_instance_->trip_;
}
inline ::pbnavitia::Trip* PtObject::mutable_trip() {
  set_has_trip();
  if (trip_ == NULL) {
    trip_ = new ::pbnavitia::Trip;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.trip)
  return trip_;
}
inline ::pbnavitia::Trip* PtObject::release_trip() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.trip)
  clear_has_trip();
  ::pbnavitia::Trip* temp = trip_;
  trip_ = NULL;
  return temp;
}
inline void PtObject::set_allocated_trip(::pbnavitia::Trip* trip) {
  delete trip_;
  trip_ = trip;
  if (trip) {
    set_has_trip();
  } else {
    clear_has_trip();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.trip)
}

// repeated int32 scores = 21;
inline int PtObject::scores_size() const {
  return scores_.size();
}
inline void PtObject::clear_scores() {
  scores_.Clear();
}
inline ::google::protobuf::int32 PtObject::scores(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.scores)
  return scores_.Get(index);
}
inline void PtObject::set_scores(int index, ::google::protobuf::int32 value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.scores)
}
inline void PtObject::add_scores(::google::protobuf::int32 value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtObject.scores)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PtObject::scores() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtObject.scores)
  return scores_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PtObject::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtObject.scores)
  return &scores_;
}

// repeated .pbnavitia.PtObject stop_points_nearby = 22;
inline int PtObject::stop_points_nearby_size() const {
  return stop_points_nearby_.size();
}
inline void PtObject::clear_stop_points_nearby() {
  stop_points_nearby_.Clear();
}
inline const ::pbnavitia::PtObject& PtObject::stop_points_nearby(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.stop_points_nearby)
  return stop_points_nearby_.Get(index);
}
inline ::pbnavitia::PtObject* PtObject::mutable_stop_points_nearby(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.stop_points_nearby)
  return stop_points_nearby_.Mutable(index);
}
inline ::pbnavitia::PtObject* PtObject::add_stop_points_nearby() {
  // @@protoc_insertion_point(field_add:pbnavitia.PtObject.stop_points_nearby)
  return stop_points_nearby_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
PtObject::mutable_stop_points_nearby() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtObject.stop_points_nearby)
  return &stop_points_nearby_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
PtObject::stop_points_nearby() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtObject.stop_points_nearby)
  return stop_points_nearby_;
}

// -------------------------------------------------------------------

// FareZone

// optional string name = 1;
inline bool FareZone::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FareZone::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FareZone::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FareZone::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FareZone::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FareZone.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FareZone::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FareZone.name)
}
inline void FareZone::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FareZone.name)
}
inline void FareZone::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FareZone.name)
}
inline ::std::string* FareZone::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FareZone.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FareZone::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.FareZone.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FareZone::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FareZone.name)
}

// -------------------------------------------------------------------

// EquipmentDetails

// optional string id = 1;
inline bool EquipmentDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentDetails::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& EquipmentDetails::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentDetails.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentDetails::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentDetails.id)
}
inline void EquipmentDetails::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentDetails.id)
}
inline void EquipmentDetails::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentDetails.id)
}
inline ::std::string* EquipmentDetails::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentDetails.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EquipmentDetails::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentDetails.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentDetails::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentDetails.id)
}

// optional string name = 2;
inline bool EquipmentDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& EquipmentDetails::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentDetails.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentDetails.name)
}
inline void EquipmentDetails::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentDetails.name)
}
inline void EquipmentDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentDetails.name)
}
inline ::std::string* EquipmentDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EquipmentDetails::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentDetails.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentDetails.name)
}

// optional .pbnavitia.EquipmentDetails.EquipmentType embedded_type = 3;
inline bool EquipmentDetails::has_embedded_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentDetails::set_has_embedded_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentDetails::clear_has_embedded_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentDetails::clear_embedded_type() {
  embedded_type_ = 1;
  clear_has_embedded_type();
}
inline ::pbnavitia::EquipmentDetails_EquipmentType EquipmentDetails::embedded_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentDetails.embedded_type)
  return static_cast< ::pbnavitia::EquipmentDetails_EquipmentType >(embedded_type_);
}
inline void EquipmentDetails::set_embedded_type(::pbnavitia::EquipmentDetails_EquipmentType value) {
  assert(::pbnavitia::EquipmentDetails_EquipmentType_IsValid(value));
  set_has_embedded_type();
  embedded_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentDetails.embedded_type)
}

// optional .pbnavitia.CurrentAvailability current_availability = 4;
inline bool EquipmentDetails::has_current_availability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentDetails::set_has_current_availability() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentDetails::clear_has_current_availability() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentDetails::clear_current_availability() {
  if (current_availability_ != NULL) current_availability_->::pbnavitia::CurrentAvailability::Clear();
  clear_has_current_availability();
}
inline const ::pbnavitia::CurrentAvailability& EquipmentDetails::current_availability() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentDetails.current_availability)
  return current_availability_ != NULL ? *current_availability_ : *default_instance_->current_availability_;
}
inline ::pbnavitia::CurrentAvailability* EquipmentDetails::mutable_current_availability() {
  set_has_current_availability();
  if (current_availability_ == NULL) {
    current_availability_ = new ::pbnavitia::CurrentAvailability;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentDetails.current_availability)
  return current_availability_;
}
inline ::pbnavitia::CurrentAvailability* EquipmentDetails::release_current_availability() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentDetails.current_availability)
  clear_has_current_availability();
  ::pbnavitia::CurrentAvailability* temp = current_availability_;
  current_availability_ = NULL;
  return temp;
}
inline void EquipmentDetails::set_allocated_current_availability(::pbnavitia::CurrentAvailability* current_availability) {
  delete current_availability_;
  current_availability_ = current_availability;
  if (current_availability) {
    set_has_current_availability();
  } else {
    clear_has_current_availability();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentDetails.current_availability)
}

// -------------------------------------------------------------------

// CurrentAvailability

// optional .pbnavitia.CurrentAvailability.EquipmentStatus status = 1;
inline bool CurrentAvailability::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrentAvailability::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurrentAvailability::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurrentAvailability::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pbnavitia::CurrentAvailability_EquipmentStatus CurrentAvailability::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.status)
  return static_cast< ::pbnavitia::CurrentAvailability_EquipmentStatus >(status_);
}
inline void CurrentAvailability::set_status(::pbnavitia::CurrentAvailability_EquipmentStatus value) {
  assert(::pbnavitia::CurrentAvailability_EquipmentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CurrentAvailability.status)
}

// repeated .pbnavitia.Period periods = 2;
inline int CurrentAvailability::periods_size() const {
  return periods_.size();
}
inline void CurrentAvailability::clear_periods() {
  periods_.Clear();
}
inline const ::pbnavitia::Period& CurrentAvailability::periods(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.periods)
  return periods_.Get(index);
}
inline ::pbnavitia::Period* CurrentAvailability::mutable_periods(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.CurrentAvailability.periods)
  return periods_.Mutable(index);
}
inline ::pbnavitia::Period* CurrentAvailability::add_periods() {
  // @@protoc_insertion_point(field_add:pbnavitia.CurrentAvailability.periods)
  return periods_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >*
CurrentAvailability::mutable_periods() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.CurrentAvailability.periods)
  return &periods_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >&
CurrentAvailability::periods() const {
  // @@protoc_insertion_point(field_list:pbnavitia.CurrentAvailability.periods)
  return periods_;
}

// optional string updated_at = 3;
inline bool CurrentAvailability::has_updated_at() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurrentAvailability::set_has_updated_at() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurrentAvailability::clear_has_updated_at() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurrentAvailability::clear_updated_at() {
  updated_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updated_at();
}
inline const ::std::string& CurrentAvailability::updated_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.updated_at)
  return updated_at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CurrentAvailability::set_updated_at(const ::std::string& value) {
  set_has_updated_at();
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CurrentAvailability.updated_at)
}
inline void CurrentAvailability::set_updated_at(const char* value) {
  set_has_updated_at();
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CurrentAvailability.updated_at)
}
inline void CurrentAvailability::set_updated_at(const char* value, size_t size) {
  set_has_updated_at();
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CurrentAvailability.updated_at)
}
inline ::std::string* CurrentAvailability::mutable_updated_at() {
  set_has_updated_at();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CurrentAvailability.updated_at)
  return updated_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CurrentAvailability::release_updated_at() {
  // @@protoc_insertion_point(field_release:pbnavitia.CurrentAvailability.updated_at)
  clear_has_updated_at();
  return updated_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CurrentAvailability::set_allocated_updated_at(::std::string* updated_at) {
  if (updated_at != NULL) {
    set_has_updated_at();
  } else {
    clear_has_updated_at();
  }
  updated_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updated_at);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CurrentAvailability.updated_at)
}

// optional .pbnavitia.EquipmentCause cause = 4;
inline bool CurrentAvailability::has_cause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CurrentAvailability::set_has_cause() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CurrentAvailability::clear_has_cause() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CurrentAvailability::clear_cause() {
  if (cause_ != NULL) cause_->::pbnavitia::EquipmentCause::Clear();
  clear_has_cause();
}
inline const ::pbnavitia::EquipmentCause& CurrentAvailability::cause() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.cause)
  return cause_ != NULL ? *cause_ : *default_instance_->cause_;
}
inline ::pbnavitia::EquipmentCause* CurrentAvailability::mutable_cause() {
  set_has_cause();
  if (cause_ == NULL) {
    cause_ = new ::pbnavitia::EquipmentCause;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.CurrentAvailability.cause)
  return cause_;
}
inline ::pbnavitia::EquipmentCause* CurrentAvailability::release_cause() {
  // @@protoc_insertion_point(field_release:pbnavitia.CurrentAvailability.cause)
  clear_has_cause();
  ::pbnavitia::EquipmentCause* temp = cause_;
  cause_ = NULL;
  return temp;
}
inline void CurrentAvailability::set_allocated_cause(::pbnavitia::EquipmentCause* cause) {
  delete cause_;
  cause_ = cause;
  if (cause) {
    set_has_cause();
  } else {
    clear_has_cause();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CurrentAvailability.cause)
}

// optional .pbnavitia.EquipmentEffect effect = 5;
inline bool CurrentAvailability::has_effect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CurrentAvailability::set_has_effect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CurrentAvailability::clear_has_effect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CurrentAvailability::clear_effect() {
  if (effect_ != NULL) effect_->::pbnavitia::EquipmentEffect::Clear();
  clear_has_effect();
}
inline const ::pbnavitia::EquipmentEffect& CurrentAvailability::effect() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.effect)
  return effect_ != NULL ? *effect_ : *default_instance_->effect_;
}
inline ::pbnavitia::EquipmentEffect* CurrentAvailability::mutable_effect() {
  set_has_effect();
  if (effect_ == NULL) {
    effect_ = new ::pbnavitia::EquipmentEffect;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.CurrentAvailability.effect)
  return effect_;
}
inline ::pbnavitia::EquipmentEffect* CurrentAvailability::release_effect() {
  // @@protoc_insertion_point(field_release:pbnavitia.CurrentAvailability.effect)
  clear_has_effect();
  ::pbnavitia::EquipmentEffect* temp = effect_;
  effect_ = NULL;
  return temp;
}
inline void CurrentAvailability::set_allocated_effect(::pbnavitia::EquipmentEffect* effect) {
  delete effect_;
  effect_ = effect;
  if (effect) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CurrentAvailability.effect)
}

// -------------------------------------------------------------------

// EquipmentCause

// optional string label = 1;
inline bool EquipmentCause::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentCause::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentCause::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentCause::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& EquipmentCause::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentCause.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentCause::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentCause.label)
}
inline void EquipmentCause::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentCause.label)
}
inline void EquipmentCause::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentCause.label)
}
inline ::std::string* EquipmentCause::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentCause.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EquipmentCause::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentCause.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentCause::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentCause.label)
}

// -------------------------------------------------------------------

// EquipmentEffect

// optional string label = 1;
inline bool EquipmentEffect::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentEffect::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentEffect::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentEffect::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& EquipmentEffect::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentEffect.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentEffect::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentEffect.label)
}
inline void EquipmentEffect::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentEffect.label)
}
inline void EquipmentEffect::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentEffect.label)
}
inline ::std::string* EquipmentEffect::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentEffect.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EquipmentEffect::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentEffect.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentEffect::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentEffect.label)
}

// -------------------------------------------------------------------

// StopAreaEquipment

// optional .pbnavitia.StopArea stop_area = 1;
inline bool StopAreaEquipment::has_stop_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopAreaEquipment::set_has_stop_area() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopAreaEquipment::clear_has_stop_area() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopAreaEquipment::clear_stop_area() {
  if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
  clear_has_stop_area();
}
inline const ::pbnavitia::StopArea& StopAreaEquipment::stop_area() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopAreaEquipment.stop_area)
  return stop_area_ != NULL ? *stop_area_ : *default_instance_->stop_area_;
}
inline ::pbnavitia::StopArea* StopAreaEquipment::mutable_stop_area() {
  set_has_stop_area();
  if (stop_area_ == NULL) {
    stop_area_ = new ::pbnavitia::StopArea;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopAreaEquipment.stop_area)
  return stop_area_;
}
inline ::pbnavitia::StopArea* StopAreaEquipment::release_stop_area() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopAreaEquipment.stop_area)
  clear_has_stop_area();
  ::pbnavitia::StopArea* temp = stop_area_;
  stop_area_ = NULL;
  return temp;
}
inline void StopAreaEquipment::set_allocated_stop_area(::pbnavitia::StopArea* stop_area) {
  delete stop_area_;
  stop_area_ = stop_area;
  if (stop_area) {
    set_has_stop_area();
  } else {
    clear_has_stop_area();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopAreaEquipment.stop_area)
}

// repeated .pbnavitia.EquipmentDetails equipment_details = 2;
inline int StopAreaEquipment::equipment_details_size() const {
  return equipment_details_.size();
}
inline void StopAreaEquipment::clear_equipment_details() {
  equipment_details_.Clear();
}
inline const ::pbnavitia::EquipmentDetails& StopAreaEquipment::equipment_details(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopAreaEquipment.equipment_details)
  return equipment_details_.Get(index);
}
inline ::pbnavitia::EquipmentDetails* StopAreaEquipment::mutable_equipment_details(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopAreaEquipment.equipment_details)
  return equipment_details_.Mutable(index);
}
inline ::pbnavitia::EquipmentDetails* StopAreaEquipment::add_equipment_details() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopAreaEquipment.equipment_details)
  return equipment_details_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >*
StopAreaEquipment::mutable_equipment_details() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopAreaEquipment.equipment_details)
  return &equipment_details_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >&
StopAreaEquipment::equipment_details() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopAreaEquipment.equipment_details)
  return equipment_details_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnavitia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pbnavitia::Channel_ChannelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::Channel_ChannelType>() {
  return ::pbnavitia::Channel_ChannelType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::Severity_Effect> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::Severity_Effect>() {
  return ::pbnavitia::Severity_Effect_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::Properties_AdditionalInformation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::Properties_AdditionalInformation>() {
  return ::pbnavitia::Properties_AdditionalInformation_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::hasEquipments_Equipment> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::hasEquipments_Equipment>() {
  return ::pbnavitia::hasEquipments_Equipment_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::EquipmentDetails_EquipmentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::EquipmentDetails_EquipmentType>() {
  return ::pbnavitia::EquipmentDetails_EquipmentType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::CurrentAvailability_EquipmentStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::CurrentAvailability_EquipmentStatus>() {
  return ::pbnavitia::CurrentAvailability_EquipmentStatus_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::NavitiaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::NavitiaType>() {
  return ::pbnavitia::NavitiaType_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::API> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::API>() {
  return ::pbnavitia::API_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::ResponseStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::ResponseStatus>() {
  return ::pbnavitia::ResponseStatus_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::ActiveStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::ActiveStatus>() {
  return ::pbnavitia::ActiveStatus_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::MessageStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::MessageStatus>() {
  return ::pbnavitia::MessageStatus_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::StopTimeUpdateStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::StopTimeUpdateStatus>() {
  return ::pbnavitia::StopTimeUpdateStatus_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::OdtLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::OdtLevel>() {
  return ::pbnavitia::OdtLevel_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::RTLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::RTLevel>() {
  return ::pbnavitia::RTLevel_descriptor();
}
template <> struct is_proto_enum< ::pbnavitia::ExceptionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::ExceptionType>() {
  return ::pbnavitia::ExceptionType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_type_2eproto__INCLUDED
