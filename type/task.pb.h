// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef PROTOBUF_task_2eproto__INCLUDED
#define PROTOBUF_task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbnavitia {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_task_2eproto();
void protobuf_AssignDesc_task_2eproto();
void protobuf_ShutdownFile_task_2eproto();

class LoadRealtime;
class Task;

enum Action {
  RELOAD = 0,
  HEARTBEAT = 3,
  LOAD_REALTIME = 4
};
bool Action_IsValid(int value);
const Action Action_MIN = RELOAD;
const Action Action_MAX = LOAD_REALTIME;
const int Action_ARRAYSIZE = Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_descriptor();
inline const ::std::string& Action_Name(Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_descriptor(), value);
}
inline bool Action_Parse(
    const ::std::string& name, Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  inline Task* New() const { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.Action action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::pbnavitia::Action action() const;
  void set_action(::pbnavitia::Action value);

  // optional .pbnavitia.LoadRealtime load_realtime = 2;
  bool has_load_realtime() const;
  void clear_load_realtime();
  static const int kLoadRealtimeFieldNumber = 2;
  const ::pbnavitia::LoadRealtime& load_realtime() const;
  ::pbnavitia::LoadRealtime* mutable_load_realtime();
  ::pbnavitia::LoadRealtime* release_load_realtime();
  void set_allocated_load_realtime(::pbnavitia::LoadRealtime* load_realtime);

  // @@protoc_insertion_point(class_scope:pbnavitia.Task)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_load_realtime();
  inline void clear_has_load_realtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::LoadRealtime* load_realtime_;
  int action_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class LoadRealtime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.LoadRealtime) */ {
 public:
  LoadRealtime();
  virtual ~LoadRealtime();

  LoadRealtime(const LoadRealtime& from);

  inline LoadRealtime& operator=(const LoadRealtime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadRealtime& default_instance();

  void Swap(LoadRealtime* other);

  // implements Message ----------------------------------------------

  inline LoadRealtime* New() const { return New(NULL); }

  LoadRealtime* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadRealtime& from);
  void MergeFrom(const LoadRealtime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoadRealtime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string queue_name = 1;
  bool has_queue_name() const;
  void clear_queue_name();
  static const int kQueueNameFieldNumber = 1;
  const ::std::string& queue_name() const;
  void set_queue_name(const ::std::string& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  ::std::string* mutable_queue_name();
  ::std::string* release_queue_name();
  void set_allocated_queue_name(::std::string* queue_name);

  // repeated string contributors = 2;
  int contributors_size() const;
  void clear_contributors();
  static const int kContributorsFieldNumber = 2;
  const ::std::string& contributors(int index) const;
  ::std::string* mutable_contributors(int index);
  void set_contributors(int index, const ::std::string& value);
  void set_contributors(int index, const char* value);
  void set_contributors(int index, const char* value, size_t size);
  ::std::string* add_contributors();
  void add_contributors(const ::std::string& value);
  void add_contributors(const char* value);
  void add_contributors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& contributors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_contributors();

  // optional string begin_date = 3;
  bool has_begin_date() const;
  void clear_begin_date();
  static const int kBeginDateFieldNumber = 3;
  const ::std::string& begin_date() const;
  void set_begin_date(const ::std::string& value);
  void set_begin_date(const char* value);
  void set_begin_date(const char* value, size_t size);
  ::std::string* mutable_begin_date();
  ::std::string* release_begin_date();
  void set_allocated_begin_date(::std::string* begin_date);

  // optional string end_date = 4;
  bool has_end_date() const;
  void clear_end_date();
  static const int kEndDateFieldNumber = 4;
  const ::std::string& end_date() const;
  void set_end_date(const ::std::string& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  ::std::string* mutable_end_date();
  ::std::string* release_end_date();
  void set_allocated_end_date(::std::string* end_date);

  // @@protoc_insertion_point(class_scope:pbnavitia.LoadRealtime)
 private:
  inline void set_has_queue_name();
  inline void clear_has_queue_name();
  inline void set_has_begin_date();
  inline void clear_has_begin_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr queue_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> contributors_;
  ::google::protobuf::internal::ArenaStringPtr begin_date_;
  ::google::protobuf::internal::ArenaStringPtr end_date_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static LoadRealtime* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Task

// required .pbnavitia.Action action = 1;
inline bool Task::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::pbnavitia::Action Task::action() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Task.action)
  return static_cast< ::pbnavitia::Action >(action_);
}
inline void Task::set_action(::pbnavitia::Action value) {
  assert(::pbnavitia::Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Task.action)
}

// optional .pbnavitia.LoadRealtime load_realtime = 2;
inline bool Task::has_load_realtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_load_realtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_load_realtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_load_realtime() {
  if (load_realtime_ != NULL) load_realtime_->::pbnavitia::LoadRealtime::Clear();
  clear_has_load_realtime();
}
inline const ::pbnavitia::LoadRealtime& Task::load_realtime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Task.load_realtime)
  return load_realtime_ != NULL ? *load_realtime_ : *default_instance_->load_realtime_;
}
inline ::pbnavitia::LoadRealtime* Task::mutable_load_realtime() {
  set_has_load_realtime();
  if (load_realtime_ == NULL) {
    load_realtime_ = new ::pbnavitia::LoadRealtime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Task.load_realtime)
  return load_realtime_;
}
inline ::pbnavitia::LoadRealtime* Task::release_load_realtime() {
  // @@protoc_insertion_point(field_release:pbnavitia.Task.load_realtime)
  clear_has_load_realtime();
  ::pbnavitia::LoadRealtime* temp = load_realtime_;
  load_realtime_ = NULL;
  return temp;
}
inline void Task::set_allocated_load_realtime(::pbnavitia::LoadRealtime* load_realtime) {
  delete load_realtime_;
  load_realtime_ = load_realtime;
  if (load_realtime) {
    set_has_load_realtime();
  } else {
    clear_has_load_realtime();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Task.load_realtime)
}

// -------------------------------------------------------------------

// LoadRealtime

// required string queue_name = 1;
inline bool LoadRealtime::has_queue_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadRealtime::set_has_queue_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadRealtime::clear_has_queue_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadRealtime::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queue_name();
}
inline const ::std::string& LoadRealtime::queue_name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LoadRealtime.queue_name)
  return queue_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadRealtime::set_queue_name(const ::std::string& value) {
  set_has_queue_name();
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LoadRealtime.queue_name)
}
inline void LoadRealtime::set_queue_name(const char* value) {
  set_has_queue_name();
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LoadRealtime.queue_name)
}
inline void LoadRealtime::set_queue_name(const char* value, size_t size) {
  set_has_queue_name();
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LoadRealtime.queue_name)
}
inline ::std::string* LoadRealtime::mutable_queue_name() {
  set_has_queue_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LoadRealtime.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadRealtime::release_queue_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.LoadRealtime.queue_name)
  clear_has_queue_name();
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadRealtime::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    set_has_queue_name();
  } else {
    clear_has_queue_name();
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LoadRealtime.queue_name)
}

// repeated string contributors = 2;
inline int LoadRealtime::contributors_size() const {
  return contributors_.size();
}
inline void LoadRealtime::clear_contributors() {
  contributors_.Clear();
}
inline const ::std::string& LoadRealtime::contributors(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LoadRealtime.contributors)
  return contributors_.Get(index);
}
inline ::std::string* LoadRealtime::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LoadRealtime.contributors)
  return contributors_.Mutable(index);
}
inline void LoadRealtime::set_contributors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.LoadRealtime.contributors)
  contributors_.Mutable(index)->assign(value);
}
inline void LoadRealtime::set_contributors(int index, const char* value) {
  contributors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.LoadRealtime.contributors)
}
inline void LoadRealtime::set_contributors(int index, const char* value, size_t size) {
  contributors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LoadRealtime.contributors)
}
inline ::std::string* LoadRealtime::add_contributors() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.LoadRealtime.contributors)
  return contributors_.Add();
}
inline void LoadRealtime::add_contributors(const ::std::string& value) {
  contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.LoadRealtime.contributors)
}
inline void LoadRealtime::add_contributors(const char* value) {
  contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.LoadRealtime.contributors)
}
inline void LoadRealtime::add_contributors(const char* value, size_t size) {
  contributors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.LoadRealtime.contributors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoadRealtime::contributors() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LoadRealtime.contributors)
  return contributors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LoadRealtime::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LoadRealtime.contributors)
  return &contributors_;
}

// optional string begin_date = 3;
inline bool LoadRealtime::has_begin_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoadRealtime::set_has_begin_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoadRealtime::clear_has_begin_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoadRealtime::clear_begin_date() {
  begin_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begin_date();
}
inline const ::std::string& LoadRealtime::begin_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LoadRealtime.begin_date)
  return begin_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadRealtime::set_begin_date(const ::std::string& value) {
  set_has_begin_date();
  begin_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LoadRealtime.begin_date)
}
inline void LoadRealtime::set_begin_date(const char* value) {
  set_has_begin_date();
  begin_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LoadRealtime.begin_date)
}
inline void LoadRealtime::set_begin_date(const char* value, size_t size) {
  set_has_begin_date();
  begin_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LoadRealtime.begin_date)
}
inline ::std::string* LoadRealtime::mutable_begin_date() {
  set_has_begin_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LoadRealtime.begin_date)
  return begin_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadRealtime::release_begin_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.LoadRealtime.begin_date)
  clear_has_begin_date();
  return begin_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadRealtime::set_allocated_begin_date(::std::string* begin_date) {
  if (begin_date != NULL) {
    set_has_begin_date();
  } else {
    clear_has_begin_date();
  }
  begin_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begin_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LoadRealtime.begin_date)
}

// optional string end_date = 4;
inline bool LoadRealtime::has_end_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoadRealtime::set_has_end_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoadRealtime::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoadRealtime::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_date();
}
inline const ::std::string& LoadRealtime::end_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LoadRealtime.end_date)
  return end_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadRealtime::set_end_date(const ::std::string& value) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LoadRealtime.end_date)
}
inline void LoadRealtime::set_end_date(const char* value) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LoadRealtime.end_date)
}
inline void LoadRealtime::set_end_date(const char* value, size_t size) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LoadRealtime.end_date)
}
inline ::std::string* LoadRealtime::mutable_end_date() {
  set_has_end_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LoadRealtime.end_date)
  return end_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadRealtime::release_end_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.LoadRealtime.end_date)
  clear_has_end_date();
  return end_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadRealtime::set_allocated_end_date(::std::string* end_date) {
  if (end_date != NULL) {
    set_has_end_date();
  } else {
    clear_has_end_date();
  }
  end_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LoadRealtime.end_date)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnavitia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pbnavitia::Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::Action>() {
  return ::pbnavitia::Action_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_task_2eproto__INCLUDED
