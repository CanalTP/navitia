// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbnavitia {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadRealtime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadRealtime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, load_realtime_),
  };
  Task_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      -1,
      -1,
      sizeof(Task),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _internal_metadata_),
      -1);
  LoadRealtime_descriptor_ = file->message_type(1);
  static const int LoadRealtime_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRealtime, queue_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRealtime, contributors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRealtime, begin_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRealtime, end_date_),
  };
  LoadRealtime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoadRealtime_descriptor_,
      LoadRealtime::default_instance_,
      LoadRealtime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRealtime, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoadRealtime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRealtime, _internal_metadata_),
      -1);
  Action_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoadRealtime_descriptor_, &LoadRealtime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete LoadRealtime::default_instance_;
  delete LoadRealtime_reflection_;
}

void protobuf_AddDesc_task_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\tpbnavitia\"Y\n\004Task\022!\n\006actio"
    "n\030\001 \002(\0162\021.pbnavitia.Action\022.\n\rload_realt"
    "ime\030\002 \001(\0132\027.pbnavitia.LoadRealtime\"^\n\014Lo"
    "adRealtime\022\022\n\nqueue_name\030\001 \002(\t\022\024\n\014contri"
    "butors\030\002 \003(\t\022\022\n\nbegin_date\030\003 \001(\t\022\020\n\010end_"
    "date\030\004 \001(\t*6\n\006Action\022\n\n\006RELOAD\020\000\022\r\n\tHEAR"
    "TBEAT\020\003\022\021\n\rLOAD_REALTIME\020\004", 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  LoadRealtime::default_instance_ = new LoadRealtime();
  Task::default_instance_->InitAsDefaultInstance();
  LoadRealtime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;
const ::google::protobuf::EnumDescriptor* Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}
bool Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kActionFieldNumber;
const int Task::kLoadRealtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Task)
}

void Task::InitAsDefaultInstance() {
  load_realtime_ = const_cast< ::pbnavitia::LoadRealtime*>(&::pbnavitia::LoadRealtime::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Task)
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  load_realtime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:pbnavitia.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != default_instance_) {
    delete load_realtime_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New(::google::protobuf::Arena* arena) const {
  Task* n = new Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Task)
  if (_has_bits_[0 / 32] & 3u) {
    action_ = 0;
    if (has_load_realtime()) {
      if (load_realtime_ != NULL) load_realtime_->::pbnavitia::LoadRealtime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.Action action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::Action_IsValid(value)) {
            set_action(static_cast< ::pbnavitia::Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_load_realtime;
        break;
      }

      // optional .pbnavitia.LoadRealtime load_realtime = 2;
      case 2: {
        if (tag == 18) {
         parse_load_realtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_realtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Task)
  // required .pbnavitia.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .pbnavitia.LoadRealtime load_realtime = 2;
  if (has_load_realtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->load_realtime_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Task)
  // required .pbnavitia.Action action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional .pbnavitia.LoadRealtime load_realtime = 2;
  if (has_load_realtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->load_realtime_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Task)
  return target;
}

int Task::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Task)
  int total_size = 0;

  // required .pbnavitia.Action action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }
  // optional .pbnavitia.LoadRealtime load_realtime = 2;
  if (has_load_realtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->load_realtime_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Task* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_load_realtime()) {
      mutable_load_realtime()->::pbnavitia::LoadRealtime::MergeFrom(from.load_realtime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_load_realtime()) {
    if (!this->load_realtime_->IsInitialized()) return false;
  }
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  std::swap(action_, other->action_);
  std::swap(load_realtime_, other->load_realtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Task

// required .pbnavitia.Action action = 1;
bool Task::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Task::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void Task::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void Task::clear_action() {
  action_ = 0;
  clear_has_action();
}
 ::pbnavitia::Action Task::action() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Task.action)
  return static_cast< ::pbnavitia::Action >(action_);
}
 void Task::set_action(::pbnavitia::Action value) {
  assert(::pbnavitia::Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Task.action)
}

// optional .pbnavitia.LoadRealtime load_realtime = 2;
bool Task::has_load_realtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Task::set_has_load_realtime() {
  _has_bits_[0] |= 0x00000002u;
}
void Task::clear_has_load_realtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void Task::clear_load_realtime() {
  if (load_realtime_ != NULL) load_realtime_->::pbnavitia::LoadRealtime::Clear();
  clear_has_load_realtime();
}
const ::pbnavitia::LoadRealtime& Task::load_realtime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Task.load_realtime)
  return load_realtime_ != NULL ? *load_realtime_ : *default_instance_->load_realtime_;
}
::pbnavitia::LoadRealtime* Task::mutable_load_realtime() {
  set_has_load_realtime();
  if (load_realtime_ == NULL) {
    load_realtime_ = new ::pbnavitia::LoadRealtime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Task.load_realtime)
  return load_realtime_;
}
::pbnavitia::LoadRealtime* Task::release_load_realtime() {
  // @@protoc_insertion_point(field_release:pbnavitia.Task.load_realtime)
  clear_has_load_realtime();
  ::pbnavitia::LoadRealtime* temp = load_realtime_;
  load_realtime_ = NULL;
  return temp;
}
void Task::set_allocated_load_realtime(::pbnavitia::LoadRealtime* load_realtime) {
  delete load_realtime_;
  load_realtime_ = load_realtime;
  if (load_realtime) {
    set_has_load_realtime();
  } else {
    clear_has_load_realtime();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Task.load_realtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoadRealtime::kQueueNameFieldNumber;
const int LoadRealtime::kContributorsFieldNumber;
const int LoadRealtime::kBeginDateFieldNumber;
const int LoadRealtime::kEndDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoadRealtime::LoadRealtime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.LoadRealtime)
}

void LoadRealtime::InitAsDefaultInstance() {
}

LoadRealtime::LoadRealtime(const LoadRealtime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.LoadRealtime)
}

void LoadRealtime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadRealtime::~LoadRealtime() {
  // @@protoc_insertion_point(destructor:pbnavitia.LoadRealtime)
  SharedDtor();
}

void LoadRealtime::SharedDtor() {
  queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoadRealtime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadRealtime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadRealtime_descriptor_;
}

const LoadRealtime& LoadRealtime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

LoadRealtime* LoadRealtime::default_instance_ = NULL;

LoadRealtime* LoadRealtime::New(::google::protobuf::Arena* arena) const {
  LoadRealtime* n = new LoadRealtime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoadRealtime::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.LoadRealtime)
  if (_has_bits_[0 / 32] & 13u) {
    if (has_queue_name()) {
      queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_begin_date()) {
      begin_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_date()) {
      end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  contributors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoadRealtime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.LoadRealtime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queue_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queue_name().data(), this->queue_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LoadRealtime.queue_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contributors;
        break;
      }

      // repeated string contributors = 2;
      case 2: {
        if (tag == 18) {
         parse_contributors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_contributors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contributors(this->contributors_size() - 1).data(),
            this->contributors(this->contributors_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LoadRealtime.contributors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contributors;
        if (input->ExpectTag(26)) goto parse_begin_date;
        break;
      }

      // optional string begin_date = 3;
      case 3: {
        if (tag == 26) {
         parse_begin_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begin_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begin_date().data(), this->begin_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LoadRealtime.begin_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_date;
        break;
      }

      // optional string end_date = 4;
      case 4: {
        if (tag == 34) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end_date().data(), this->end_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LoadRealtime.end_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.LoadRealtime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.LoadRealtime)
  return false;
#undef DO_
}

void LoadRealtime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.LoadRealtime)
  // required string queue_name = 1;
  if (has_queue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LoadRealtime.queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queue_name(), output);
  }

  // repeated string contributors = 2;
  for (int i = 0; i < this->contributors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contributors(i).data(), this->contributors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LoadRealtime.contributors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contributors(i), output);
  }

  // optional string begin_date = 3;
  if (has_begin_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begin_date().data(), this->begin_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LoadRealtime.begin_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->begin_date(), output);
  }

  // optional string end_date = 4;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_date().data(), this->end_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LoadRealtime.end_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->end_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.LoadRealtime)
}

::google::protobuf::uint8* LoadRealtime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.LoadRealtime)
  // required string queue_name = 1;
  if (has_queue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queue_name().data(), this->queue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LoadRealtime.queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queue_name(), target);
  }

  // repeated string contributors = 2;
  for (int i = 0; i < this->contributors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contributors(i).data(), this->contributors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LoadRealtime.contributors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->contributors(i), target);
  }

  // optional string begin_date = 3;
  if (has_begin_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begin_date().data(), this->begin_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LoadRealtime.begin_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->begin_date(), target);
  }

  // optional string end_date = 4;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_date().data(), this->end_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LoadRealtime.end_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->end_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.LoadRealtime)
  return target;
}

int LoadRealtime::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.LoadRealtime)
  int total_size = 0;

  // required string queue_name = 1;
  if (has_queue_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_name());
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional string begin_date = 3;
    if (has_begin_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begin_date());
    }

    // optional string end_date = 4;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_date());
    }

  }
  // repeated string contributors = 2;
  total_size += 1 * this->contributors_size();
  for (int i = 0; i < this->contributors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->contributors(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadRealtime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.LoadRealtime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoadRealtime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoadRealtime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.LoadRealtime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.LoadRealtime)
    MergeFrom(*source);
  }
}

void LoadRealtime::MergeFrom(const LoadRealtime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.LoadRealtime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  contributors_.MergeFrom(from.contributors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue_name()) {
      set_has_queue_name();
      queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_name_);
    }
    if (from.has_begin_date()) {
      set_has_begin_date();
      begin_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begin_date_);
    }
    if (from.has_end_date()) {
      set_has_end_date();
      end_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_date_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoadRealtime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.LoadRealtime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadRealtime::CopyFrom(const LoadRealtime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.LoadRealtime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRealtime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoadRealtime::Swap(LoadRealtime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoadRealtime::InternalSwap(LoadRealtime* other) {
  queue_name_.Swap(&other->queue_name_);
  contributors_.UnsafeArenaSwap(&other->contributors_);
  begin_date_.Swap(&other->begin_date_);
  end_date_.Swap(&other->end_date_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoadRealtime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadRealtime_descriptor_;
  metadata.reflection = LoadRealtime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoadRealtime

// required string queue_name = 1;
bool LoadRealtime::has_queue_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoadRealtime::set_has_queue_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LoadRealtime::clear_has_queue_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoadRealtime::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_queue_name();
}
 const ::std::string& LoadRealtime::queue_name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LoadRealtime.queue_name)
  return queue_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadRealtime::set_queue_name(const ::std::string& value) {
  set_has_queue_name();
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LoadRealtime.queue_name)
}
 void LoadRealtime::set_queue_name(const char* value) {
  set_has_queue_name();
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LoadRealtime.queue_name)
}
 void LoadRealtime::set_queue_name(const char* value, size_t size) {
  set_has_queue_name();
  queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LoadRealtime.queue_name)
}
 ::std::string* LoadRealtime::mutable_queue_name() {
  set_has_queue_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LoadRealtime.queue_name)
  return queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoadRealtime::release_queue_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.LoadRealtime.queue_name)
  clear_has_queue_name();
  return queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadRealtime::set_allocated_queue_name(::std::string* queue_name) {
  if (queue_name != NULL) {
    set_has_queue_name();
  } else {
    clear_has_queue_name();
  }
  queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LoadRealtime.queue_name)
}

// repeated string contributors = 2;
int LoadRealtime::contributors_size() const {
  return contributors_.size();
}
void LoadRealtime::clear_contributors() {
  contributors_.Clear();
}
 const ::std::string& LoadRealtime::contributors(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LoadRealtime.contributors)
  return contributors_.Get(index);
}
 ::std::string* LoadRealtime::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LoadRealtime.contributors)
  return contributors_.Mutable(index);
}
 void LoadRealtime::set_contributors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.LoadRealtime.contributors)
  contributors_.Mutable(index)->assign(value);
}
 void LoadRealtime::set_contributors(int index, const char* value) {
  contributors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.LoadRealtime.contributors)
}
 void LoadRealtime::set_contributors(int index, const char* value, size_t size) {
  contributors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LoadRealtime.contributors)
}
 ::std::string* LoadRealtime::add_contributors() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.LoadRealtime.contributors)
  return contributors_.Add();
}
 void LoadRealtime::add_contributors(const ::std::string& value) {
  contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.LoadRealtime.contributors)
}
 void LoadRealtime::add_contributors(const char* value) {
  contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.LoadRealtime.contributors)
}
 void LoadRealtime::add_contributors(const char* value, size_t size) {
  contributors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.LoadRealtime.contributors)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoadRealtime::contributors() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LoadRealtime.contributors)
  return contributors_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LoadRealtime::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LoadRealtime.contributors)
  return &contributors_;
}

// optional string begin_date = 3;
bool LoadRealtime::has_begin_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoadRealtime::set_has_begin_date() {
  _has_bits_[0] |= 0x00000004u;
}
void LoadRealtime::clear_has_begin_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoadRealtime::clear_begin_date() {
  begin_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begin_date();
}
 const ::std::string& LoadRealtime::begin_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LoadRealtime.begin_date)
  return begin_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadRealtime::set_begin_date(const ::std::string& value) {
  set_has_begin_date();
  begin_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LoadRealtime.begin_date)
}
 void LoadRealtime::set_begin_date(const char* value) {
  set_has_begin_date();
  begin_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LoadRealtime.begin_date)
}
 void LoadRealtime::set_begin_date(const char* value, size_t size) {
  set_has_begin_date();
  begin_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LoadRealtime.begin_date)
}
 ::std::string* LoadRealtime::mutable_begin_date() {
  set_has_begin_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LoadRealtime.begin_date)
  return begin_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoadRealtime::release_begin_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.LoadRealtime.begin_date)
  clear_has_begin_date();
  return begin_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadRealtime::set_allocated_begin_date(::std::string* begin_date) {
  if (begin_date != NULL) {
    set_has_begin_date();
  } else {
    clear_has_begin_date();
  }
  begin_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begin_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LoadRealtime.begin_date)
}

// optional string end_date = 4;
bool LoadRealtime::has_end_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoadRealtime::set_has_end_date() {
  _has_bits_[0] |= 0x00000008u;
}
void LoadRealtime::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoadRealtime::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_date();
}
 const ::std::string& LoadRealtime::end_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LoadRealtime.end_date)
  return end_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadRealtime::set_end_date(const ::std::string& value) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LoadRealtime.end_date)
}
 void LoadRealtime::set_end_date(const char* value) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LoadRealtime.end_date)
}
 void LoadRealtime::set_end_date(const char* value, size_t size) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LoadRealtime.end_date)
}
 ::std::string* LoadRealtime::mutable_end_date() {
  set_has_end_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LoadRealtime.end_date)
  return end_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoadRealtime::release_end_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.LoadRealtime.end_date)
  clear_has_end_date();
  return end_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoadRealtime::set_allocated_end_date(::std::string* end_date) {
  if (end_date != NULL) {
    set_has_end_date();
  } else {
    clear_has_end_date();
  }
  end_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LoadRealtime.end_date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnavitia

// @@protoc_insertion_point(global_scope)
