// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef PROTOBUF_request_2eproto__INCLUDED
#define PROTOBUF_request_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "type.pb.h"
// @@protoc_insertion_point(includes)

namespace pbnavitia {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_request_2eproto();
void protobuf_AssignDesc_request_2eproto();
void protobuf_ShutdownFile_request_2eproto();

class CalendarsRequest;
class CarCO2EmissionRequest;
class DirectPathRequest;
class EquipmentReportsRequest;
class GraphicalIsochroneRequest;
class HeatMapRequest;
class JourneysRequest;
class LineReportsRequest;
class MatchingRoute;
class NearestStopPointsRequest;
class NextStopTimeRequest;
class PTRefRequest;
class PlaceCodeRequest;
class PlaceUriRequest;
class PlacesNearbyRequest;
class PlacesRequest;
class PtobjectRequest;
class Request;
class StreetNetworkParams;
class StreetNetworkRoutingMatrixRequest;
class TrafficReportsRequest;

enum PlaceCodeRequest_Type {
  PlaceCodeRequest_Type_StopArea = 0,
  PlaceCodeRequest_Type_Network = 1,
  PlaceCodeRequest_Type_Company = 2,
  PlaceCodeRequest_Type_Line = 3,
  PlaceCodeRequest_Type_Route = 4,
  PlaceCodeRequest_Type_VehicleJourney = 5,
  PlaceCodeRequest_Type_StopPoint = 6,
  PlaceCodeRequest_Type_Calendar = 7
};
bool PlaceCodeRequest_Type_IsValid(int value);
const PlaceCodeRequest_Type PlaceCodeRequest_Type_Type_MIN = PlaceCodeRequest_Type_StopArea;
const PlaceCodeRequest_Type PlaceCodeRequest_Type_Type_MAX = PlaceCodeRequest_Type_Calendar;
const int PlaceCodeRequest_Type_Type_ARRAYSIZE = PlaceCodeRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlaceCodeRequest_Type_descriptor();
inline const ::std::string& PlaceCodeRequest_Type_Name(PlaceCodeRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlaceCodeRequest_Type_descriptor(), value);
}
inline bool PlaceCodeRequest_Type_Parse(
    const ::std::string& name, PlaceCodeRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlaceCodeRequest_Type>(
    PlaceCodeRequest_Type_descriptor(), name, value);
}
// ===================================================================

class CalendarsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.CalendarsRequest) */ {
 public:
  CalendarsRequest();
  virtual ~CalendarsRequest();

  CalendarsRequest(const CalendarsRequest& from);

  inline CalendarsRequest& operator=(const CalendarsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalendarsRequest& default_instance();

  void Swap(CalendarsRequest* other);

  // implements Message ----------------------------------------------

  inline CalendarsRequest* New() const { return New(NULL); }

  CalendarsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalendarsRequest& from);
  void MergeFrom(const CalendarsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CalendarsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string start_date = 1;
  bool has_start_date() const;
  void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  const ::std::string& start_date() const;
  void set_start_date(const ::std::string& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  ::std::string* mutable_start_date();
  ::std::string* release_start_date();
  void set_allocated_start_date(::std::string* start_date);

  // optional string end_date = 2;
  bool has_end_date() const;
  void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  const ::std::string& end_date() const;
  void set_end_date(const ::std::string& value);
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  ::std::string* mutable_end_date();
  ::std::string* release_end_date();
  void set_allocated_end_date(::std::string* end_date);

  // optional int32 depth = 3;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional int32 start_page = 4;
  bool has_start_page() const;
  void clear_start_page();
  static const int kStartPageFieldNumber = 4;
  ::google::protobuf::int32 start_page() const;
  void set_start_page(::google::protobuf::int32 value);

  // optional int32 count = 5;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional string filter = 6;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 6;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // repeated string forbidden_uris = 7;
  int forbidden_uris_size() const;
  void clear_forbidden_uris();
  static const int kForbiddenUrisFieldNumber = 7;
  const ::std::string& forbidden_uris(int index) const;
  ::std::string* mutable_forbidden_uris(int index);
  void set_forbidden_uris(int index, const ::std::string& value);
  void set_forbidden_uris(int index, const char* value);
  void set_forbidden_uris(int index, const char* value, size_t size);
  ::std::string* add_forbidden_uris();
  void add_forbidden_uris(const ::std::string& value);
  void add_forbidden_uris(const char* value);
  void add_forbidden_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& forbidden_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_forbidden_uris();

  // @@protoc_insertion_point(class_scope:pbnavitia.CalendarsRequest)
 private:
  inline void set_has_start_date();
  inline void clear_has_start_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_start_page();
  inline void clear_has_start_page();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_filter();
  inline void clear_has_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr start_date_;
  ::google::protobuf::internal::ArenaStringPtr end_date_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 start_page_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> forbidden_uris_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static CalendarsRequest* default_instance_;
};
// -------------------------------------------------------------------

class TrafficReportsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.TrafficReportsRequest) */ {
 public:
  TrafficReportsRequest();
  virtual ~TrafficReportsRequest();

  TrafficReportsRequest(const TrafficReportsRequest& from);

  inline TrafficReportsRequest& operator=(const TrafficReportsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficReportsRequest& default_instance();

  void Swap(TrafficReportsRequest* other);

  // implements Message ----------------------------------------------

  inline TrafficReportsRequest* New() const { return New(NULL); }

  TrafficReportsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficReportsRequest& from);
  void MergeFrom(const TrafficReportsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficReportsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 application_period_begin = 8;
  bool has_application_period_begin() const;
  void clear_application_period_begin();
  static const int kApplicationPeriodBeginFieldNumber = 8;
  ::google::protobuf::uint64 application_period_begin() const;
  void set_application_period_begin(::google::protobuf::uint64 value);

  // optional uint64 application_period_end = 9;
  bool has_application_period_end() const;
  void clear_application_period_end();
  static const int kApplicationPeriodEndFieldNumber = 9;
  ::google::protobuf::uint64 application_period_end() const;
  void set_application_period_end(::google::protobuf::uint64 value);

  // optional uint64 _current_datetime = 10;
  bool has__current_datetime() const;
  void clear__current_datetime();
  static const int kCurrentDatetimeFieldNumber = 10;
  ::google::protobuf::uint64 _current_datetime() const;
  void set__current_datetime(::google::protobuf::uint64 value);

  // optional int32 depth = 3;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional int32 start_page = 4;
  bool has_start_page() const;
  void clear_start_page();
  static const int kStartPageFieldNumber = 4;
  ::google::protobuf::int32 start_page() const;
  void set_start_page(::google::protobuf::int32 value);

  // optional int32 count = 5;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional string filter = 6;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 6;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // repeated string forbidden_uris = 7;
  int forbidden_uris_size() const;
  void clear_forbidden_uris();
  static const int kForbiddenUrisFieldNumber = 7;
  const ::std::string& forbidden_uris(int index) const;
  ::std::string* mutable_forbidden_uris(int index);
  void set_forbidden_uris(int index, const ::std::string& value);
  void set_forbidden_uris(int index, const char* value);
  void set_forbidden_uris(int index, const char* value, size_t size);
  ::std::string* add_forbidden_uris();
  void add_forbidden_uris(const ::std::string& value);
  void add_forbidden_uris(const char* value);
  void add_forbidden_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& forbidden_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_forbidden_uris();

  // @@protoc_insertion_point(class_scope:pbnavitia.TrafficReportsRequest)
 private:
  inline void set_has_application_period_begin();
  inline void clear_has_application_period_begin();
  inline void set_has_application_period_end();
  inline void clear_has_application_period_end();
  inline void set_has__current_datetime();
  inline void clear_has__current_datetime();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_start_page();
  inline void clear_has_start_page();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_filter();
  inline void clear_has_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 application_period_begin_;
  ::google::protobuf::uint64 application_period_end_;
  ::google::protobuf::uint64 _current_datetime_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 start_page_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> forbidden_uris_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static TrafficReportsRequest* default_instance_;
};
// -------------------------------------------------------------------

class LineReportsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.LineReportsRequest) */ {
 public:
  LineReportsRequest();
  virtual ~LineReportsRequest();

  LineReportsRequest(const LineReportsRequest& from);

  inline LineReportsRequest& operator=(const LineReportsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineReportsRequest& default_instance();

  void Swap(LineReportsRequest* other);

  // implements Message ----------------------------------------------

  inline LineReportsRequest* New() const { return New(NULL); }

  LineReportsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineReportsRequest& from);
  void MergeFrom(const LineReportsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineReportsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 depth = 1;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 1;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional int32 start_page = 2;
  bool has_start_page() const;
  void clear_start_page();
  static const int kStartPageFieldNumber = 2;
  ::google::protobuf::int32 start_page() const;
  void set_start_page(::google::protobuf::int32 value);

  // optional int32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional string filter = 4;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 4;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // repeated string forbidden_uris = 5;
  int forbidden_uris_size() const;
  void clear_forbidden_uris();
  static const int kForbiddenUrisFieldNumber = 5;
  const ::std::string& forbidden_uris(int index) const;
  ::std::string* mutable_forbidden_uris(int index);
  void set_forbidden_uris(int index, const ::std::string& value);
  void set_forbidden_uris(int index, const char* value);
  void set_forbidden_uris(int index, const char* value, size_t size);
  ::std::string* add_forbidden_uris();
  void add_forbidden_uris(const ::std::string& value);
  void add_forbidden_uris(const char* value);
  void add_forbidden_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& forbidden_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_forbidden_uris();

  // optional uint64 since_datetime = 6;
  bool has_since_datetime() const;
  void clear_since_datetime();
  static const int kSinceDatetimeFieldNumber = 6;
  ::google::protobuf::uint64 since_datetime() const;
  void set_since_datetime(::google::protobuf::uint64 value);

  // optional uint64 until_datetime = 7;
  bool has_until_datetime() const;
  void clear_until_datetime();
  static const int kUntilDatetimeFieldNumber = 7;
  ::google::protobuf::uint64 until_datetime() const;
  void set_until_datetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.LineReportsRequest)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_start_page();
  inline void clear_has_start_page();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_since_datetime();
  inline void clear_has_since_datetime();
  inline void set_has_until_datetime();
  inline void clear_has_until_datetime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 start_page_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> forbidden_uris_;
  ::google::protobuf::uint64 since_datetime_;
  ::google::protobuf::uint64 until_datetime_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static LineReportsRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlacesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PlacesRequest) */ {
 public:
  PlacesRequest();
  virtual ~PlacesRequest();

  PlacesRequest(const PlacesRequest& from);

  inline PlacesRequest& operator=(const PlacesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlacesRequest& default_instance();

  void Swap(PlacesRequest* other);

  // implements Message ----------------------------------------------

  inline PlacesRequest* New() const { return New(NULL); }

  PlacesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlacesRequest& from);
  void MergeFrom(const PlacesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlacesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string q = 1;
  bool has_q() const;
  void clear_q();
  static const int kQFieldNumber = 1;
  const ::std::string& q() const;
  void set_q(const ::std::string& value);
  void set_q(const char* value);
  void set_q(const char* value, size_t size);
  ::std::string* mutable_q();
  ::std::string* release_q();
  void set_allocated_q(::std::string* q);

  // repeated .pbnavitia.NavitiaType types = 2;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 2;
  ::pbnavitia::NavitiaType types(int index) const;
  void set_types(int index, ::pbnavitia::NavitiaType value);
  void add_types(::pbnavitia::NavitiaType value);
  const ::google::protobuf::RepeatedField<int>& types() const;
  ::google::protobuf::RepeatedField<int>* mutable_types();

  // required int32 depth = 3;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // required int32 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // repeated string admin_uris = 5;
  int admin_uris_size() const;
  void clear_admin_uris();
  static const int kAdminUrisFieldNumber = 5;
  const ::std::string& admin_uris(int index) const;
  ::std::string* mutable_admin_uris(int index);
  void set_admin_uris(int index, const ::std::string& value);
  void set_admin_uris(int index, const char* value);
  void set_admin_uris(int index, const char* value, size_t size);
  ::std::string* add_admin_uris();
  void add_admin_uris(const ::std::string& value);
  void add_admin_uris(const char* value);
  void add_admin_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& admin_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_admin_uris();

  // optional int32 search_type = 6;
  bool has_search_type() const;
  void clear_search_type();
  static const int kSearchTypeFieldNumber = 6;
  ::google::protobuf::int32 search_type() const;
  void set_search_type(::google::protobuf::int32 value);

  // optional float main_stop_area_weight_factor = 7 [default = 1];
  bool has_main_stop_area_weight_factor() const;
  void clear_main_stop_area_weight_factor();
  static const int kMainStopAreaWeightFactorFieldNumber = 7;
  float main_stop_area_weight_factor() const;
  void set_main_stop_area_weight_factor(float value);

  // @@protoc_insertion_point(class_scope:pbnavitia.PlacesRequest)
 private:
  inline void set_has_q();
  inline void clear_has_q();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_search_type();
  inline void clear_has_search_type();
  inline void set_has_main_stop_area_weight_factor();
  inline void clear_has_main_stop_area_weight_factor();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr q_;
  ::google::protobuf::RepeatedField<int> types_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> admin_uris_;
  ::google::protobuf::int32 search_type_;
  float main_stop_area_weight_factor_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static PlacesRequest* default_instance_;
};
// -------------------------------------------------------------------

class NextStopTimeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.NextStopTimeRequest) */ {
 public:
  NextStopTimeRequest();
  virtual ~NextStopTimeRequest();

  NextStopTimeRequest(const NextStopTimeRequest& from);

  inline NextStopTimeRequest& operator=(const NextStopTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NextStopTimeRequest& default_instance();

  void Swap(NextStopTimeRequest* other);

  // implements Message ----------------------------------------------

  inline NextStopTimeRequest* New() const { return New(NULL); }

  NextStopTimeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NextStopTimeRequest& from);
  void MergeFrom(const NextStopTimeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NextStopTimeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string departure_filter = 1;
  bool has_departure_filter() const;
  void clear_departure_filter();
  static const int kDepartureFilterFieldNumber = 1;
  const ::std::string& departure_filter() const;
  void set_departure_filter(const ::std::string& value);
  void set_departure_filter(const char* value);
  void set_departure_filter(const char* value, size_t size);
  ::std::string* mutable_departure_filter();
  ::std::string* release_departure_filter();
  void set_allocated_departure_filter(::std::string* departure_filter);

  // required string arrival_filter = 2;
  bool has_arrival_filter() const;
  void clear_arrival_filter();
  static const int kArrivalFilterFieldNumber = 2;
  const ::std::string& arrival_filter() const;
  void set_arrival_filter(const ::std::string& value);
  void set_arrival_filter(const char* value);
  void set_arrival_filter(const char* value, size_t size);
  ::std::string* mutable_arrival_filter();
  ::std::string* release_arrival_filter();
  void set_allocated_arrival_filter(::std::string* arrival_filter);

  // optional uint64 from_datetime = 3;
  bool has_from_datetime() const;
  void clear_from_datetime();
  static const int kFromDatetimeFieldNumber = 3;
  ::google::protobuf::uint64 from_datetime() const;
  void set_from_datetime(::google::protobuf::uint64 value);

  // required int32 duration = 4;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 4;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // required int32 depth = 5;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 5;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // required int32 nb_stoptimes = 7;
  bool has_nb_stoptimes() const;
  void clear_nb_stoptimes();
  static const int kNbStoptimesFieldNumber = 7;
  ::google::protobuf::int32 nb_stoptimes() const;
  void set_nb_stoptimes(::google::protobuf::int32 value);

  // optional int32 interface_version = 8;
  bool has_interface_version() const;
  void clear_interface_version();
  static const int kInterfaceVersionFieldNumber = 8;
  ::google::protobuf::int32 interface_version() const;
  void set_interface_version(::google::protobuf::int32 value);

  // required int32 start_page = 9;
  bool has_start_page() const;
  void clear_start_page();
  static const int kStartPageFieldNumber = 9;
  ::google::protobuf::int32 start_page() const;
  void set_start_page(::google::protobuf::int32 value);

  // required int32 count = 10;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 10;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional int32 max_date_times = 11;
  bool has_max_date_times() const;
  void clear_max_date_times();
  static const int kMaxDateTimesFieldNumber = 11;
  ::google::protobuf::int32 max_date_times() const;
  void set_max_date_times(::google::protobuf::int32 value);

  // repeated string forbidden_uri = 12;
  int forbidden_uri_size() const;
  void clear_forbidden_uri();
  static const int kForbiddenUriFieldNumber = 12;
  const ::std::string& forbidden_uri(int index) const;
  ::std::string* mutable_forbidden_uri(int index);
  void set_forbidden_uri(int index, const ::std::string& value);
  void set_forbidden_uri(int index, const char* value);
  void set_forbidden_uri(int index, const char* value, size_t size);
  ::std::string* add_forbidden_uri();
  void add_forbidden_uri(const ::std::string& value);
  void add_forbidden_uri(const char* value);
  void add_forbidden_uri(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& forbidden_uri() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_forbidden_uri();

  // optional string calendar = 13;
  bool has_calendar() const;
  void clear_calendar();
  static const int kCalendarFieldNumber = 13;
  const ::std::string& calendar() const;
  void set_calendar(const ::std::string& value);
  void set_calendar(const char* value);
  void set_calendar(const char* value, size_t size);
  ::std::string* mutable_calendar();
  ::std::string* release_calendar();
  void set_allocated_calendar(::std::string* calendar);

  // optional bool show_codes = 14;
  bool has_show_codes() const;
  void clear_show_codes();
  static const int kShowCodesFieldNumber = 14;
  bool show_codes() const;
  void set_show_codes(bool value);

  // optional uint64 until_datetime = 15;
  bool has_until_datetime() const;
  void clear_until_datetime();
  static const int kUntilDatetimeFieldNumber = 15;
  ::google::protobuf::uint64 until_datetime() const;
  void set_until_datetime(::google::protobuf::uint64 value);

  // optional uint64 _current_datetime = 16;
  bool has__current_datetime() const;
  void clear__current_datetime();
  static const int kCurrentDatetimeFieldNumber = 16;
  ::google::protobuf::uint64 _current_datetime() const;
  void set__current_datetime(::google::protobuf::uint64 value);

  // optional .pbnavitia.RTLevel realtime_level = 17;
  bool has_realtime_level() const;
  void clear_realtime_level();
  static const int kRealtimeLevelFieldNumber = 17;
  ::pbnavitia::RTLevel realtime_level() const;
  void set_realtime_level(::pbnavitia::RTLevel value);

  // optional int32 items_per_schedule = 18;
  bool has_items_per_schedule() const;
  void clear_items_per_schedule();
  static const int kItemsPerScheduleFieldNumber = 18;
  ::google::protobuf::int32 items_per_schedule() const;
  void set_items_per_schedule(::google::protobuf::int32 value);

  // optional bool disable_geojson = 19;
  bool has_disable_geojson() const;
  void clear_disable_geojson();
  static const int kDisableGeojsonFieldNumber = 19;
  bool disable_geojson() const;
  void set_disable_geojson(bool value);

  // @@protoc_insertion_point(class_scope:pbnavitia.NextStopTimeRequest)
 private:
  inline void set_has_departure_filter();
  inline void clear_has_departure_filter();
  inline void set_has_arrival_filter();
  inline void clear_has_arrival_filter();
  inline void set_has_from_datetime();
  inline void clear_has_from_datetime();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_nb_stoptimes();
  inline void clear_has_nb_stoptimes();
  inline void set_has_interface_version();
  inline void clear_has_interface_version();
  inline void set_has_start_page();
  inline void clear_has_start_page();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_max_date_times();
  inline void clear_has_max_date_times();
  inline void set_has_calendar();
  inline void clear_has_calendar();
  inline void set_has_show_codes();
  inline void clear_has_show_codes();
  inline void set_has_until_datetime();
  inline void clear_has_until_datetime();
  inline void set_has__current_datetime();
  inline void clear_has__current_datetime();
  inline void set_has_realtime_level();
  inline void clear_has_realtime_level();
  inline void set_has_items_per_schedule();
  inline void clear_has_items_per_schedule();
  inline void set_has_disable_geojson();
  inline void clear_has_disable_geojson();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr departure_filter_;
  ::google::protobuf::internal::ArenaStringPtr arrival_filter_;
  ::google::protobuf::uint64 from_datetime_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 nb_stoptimes_;
  ::google::protobuf::int32 interface_version_;
  ::google::protobuf::int32 start_page_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> forbidden_uri_;
  ::google::protobuf::internal::ArenaStringPtr calendar_;
  ::google::protobuf::int32 max_date_times_;
  bool show_codes_;
  bool disable_geojson_;
  ::google::protobuf::uint64 until_datetime_;
  ::google::protobuf::uint64 _current_datetime_;
  int realtime_level_;
  ::google::protobuf::int32 items_per_schedule_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static NextStopTimeRequest* default_instance_;
};
// -------------------------------------------------------------------

class StreetNetworkParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StreetNetworkParams) */ {
 public:
  StreetNetworkParams();
  virtual ~StreetNetworkParams();

  StreetNetworkParams(const StreetNetworkParams& from);

  inline StreetNetworkParams& operator=(const StreetNetworkParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreetNetworkParams& default_instance();

  void Swap(StreetNetworkParams* other);

  // implements Message ----------------------------------------------

  inline StreetNetworkParams* New() const { return New(NULL); }

  StreetNetworkParams* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreetNetworkParams& from);
  void MergeFrom(const StreetNetworkParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreetNetworkParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string origin_mode = 1;
  bool has_origin_mode() const;
  void clear_origin_mode();
  static const int kOriginModeFieldNumber = 1;
  const ::std::string& origin_mode() const;
  void set_origin_mode(const ::std::string& value);
  void set_origin_mode(const char* value);
  void set_origin_mode(const char* value, size_t size);
  ::std::string* mutable_origin_mode();
  ::std::string* release_origin_mode();
  void set_allocated_origin_mode(::std::string* origin_mode);

  // optional string destination_mode = 2;
  bool has_destination_mode() const;
  void clear_destination_mode();
  static const int kDestinationModeFieldNumber = 2;
  const ::std::string& destination_mode() const;
  void set_destination_mode(const ::std::string& value);
  void set_destination_mode(const char* value);
  void set_destination_mode(const char* value, size_t size);
  ::std::string* mutable_destination_mode();
  ::std::string* release_destination_mode();
  void set_allocated_destination_mode(::std::string* destination_mode);

  // optional double walking_speed = 3;
  bool has_walking_speed() const;
  void clear_walking_speed();
  static const int kWalkingSpeedFieldNumber = 3;
  double walking_speed() const;
  void set_walking_speed(double value);

  // optional double bike_speed = 5;
  bool has_bike_speed() const;
  void clear_bike_speed();
  static const int kBikeSpeedFieldNumber = 5;
  double bike_speed() const;
  void set_bike_speed(double value);

  // optional double car_speed = 7;
  bool has_car_speed() const;
  void clear_car_speed();
  static const int kCarSpeedFieldNumber = 7;
  double car_speed() const;
  void set_car_speed(double value);

  // optional double bss_speed = 9;
  bool has_bss_speed() const;
  void clear_bss_speed();
  static const int kBssSpeedFieldNumber = 9;
  double bss_speed() const;
  void set_bss_speed(double value);

  // optional string origin_filter = 11;
  bool has_origin_filter() const;
  void clear_origin_filter();
  static const int kOriginFilterFieldNumber = 11;
  const ::std::string& origin_filter() const;
  void set_origin_filter(const ::std::string& value);
  void set_origin_filter(const char* value);
  void set_origin_filter(const char* value, size_t size);
  ::std::string* mutable_origin_filter();
  ::std::string* release_origin_filter();
  void set_allocated_origin_filter(::std::string* origin_filter);

  // optional string destination_filter = 12;
  bool has_destination_filter() const;
  void clear_destination_filter();
  static const int kDestinationFilterFieldNumber = 12;
  const ::std::string& destination_filter() const;
  void set_destination_filter(const ::std::string& value);
  void set_destination_filter(const char* value);
  void set_destination_filter(const char* value, size_t size);
  ::std::string* mutable_destination_filter();
  ::std::string* release_destination_filter();
  void set_allocated_destination_filter(::std::string* destination_filter);

  // optional int32 max_walking_duration_to_pt = 13;
  bool has_max_walking_duration_to_pt() const;
  void clear_max_walking_duration_to_pt();
  static const int kMaxWalkingDurationToPtFieldNumber = 13;
  ::google::protobuf::int32 max_walking_duration_to_pt() const;
  void set_max_walking_duration_to_pt(::google::protobuf::int32 value);

  // optional int32 max_bike_duration_to_pt = 14;
  bool has_max_bike_duration_to_pt() const;
  void clear_max_bike_duration_to_pt();
  static const int kMaxBikeDurationToPtFieldNumber = 14;
  ::google::protobuf::int32 max_bike_duration_to_pt() const;
  void set_max_bike_duration_to_pt(::google::protobuf::int32 value);

  // optional int32 max_bss_duration_to_pt = 15;
  bool has_max_bss_duration_to_pt() const;
  void clear_max_bss_duration_to_pt();
  static const int kMaxBssDurationToPtFieldNumber = 15;
  ::google::protobuf::int32 max_bss_duration_to_pt() const;
  void set_max_bss_duration_to_pt(::google::protobuf::int32 value);

  // optional int32 max_car_duration_to_pt = 16;
  bool has_max_car_duration_to_pt() const;
  void clear_max_car_duration_to_pt();
  static const int kMaxCarDurationToPtFieldNumber = 16;
  ::google::protobuf::int32 max_car_duration_to_pt() const;
  void set_max_car_duration_to_pt(::google::protobuf::int32 value);

  // optional bool enable_direct_path = 17 [default = true];
  bool has_enable_direct_path() const;
  void clear_enable_direct_path();
  static const int kEnableDirectPathFieldNumber = 17;
  bool enable_direct_path() const;
  void set_enable_direct_path(bool value);

  // optional double car_no_park_speed = 18;
  bool has_car_no_park_speed() const;
  void clear_car_no_park_speed();
  static const int kCarNoParkSpeedFieldNumber = 18;
  double car_no_park_speed() const;
  void set_car_no_park_speed(double value);

  // optional int32 max_car_no_park_duration_to_pt = 19;
  bool has_max_car_no_park_duration_to_pt() const;
  void clear_max_car_no_park_duration_to_pt();
  static const int kMaxCarNoParkDurationToPtFieldNumber = 19;
  ::google::protobuf::int32 max_car_no_park_duration_to_pt() const;
  void set_max_car_no_park_duration_to_pt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.StreetNetworkParams)
 private:
  inline void set_has_origin_mode();
  inline void clear_has_origin_mode();
  inline void set_has_destination_mode();
  inline void clear_has_destination_mode();
  inline void set_has_walking_speed();
  inline void clear_has_walking_speed();
  inline void set_has_bike_speed();
  inline void clear_has_bike_speed();
  inline void set_has_car_speed();
  inline void clear_has_car_speed();
  inline void set_has_bss_speed();
  inline void clear_has_bss_speed();
  inline void set_has_origin_filter();
  inline void clear_has_origin_filter();
  inline void set_has_destination_filter();
  inline void clear_has_destination_filter();
  inline void set_has_max_walking_duration_to_pt();
  inline void clear_has_max_walking_duration_to_pt();
  inline void set_has_max_bike_duration_to_pt();
  inline void clear_has_max_bike_duration_to_pt();
  inline void set_has_max_bss_duration_to_pt();
  inline void clear_has_max_bss_duration_to_pt();
  inline void set_has_max_car_duration_to_pt();
  inline void clear_has_max_car_duration_to_pt();
  inline void set_has_enable_direct_path();
  inline void clear_has_enable_direct_path();
  inline void set_has_car_no_park_speed();
  inline void clear_has_car_no_park_speed();
  inline void set_has_max_car_no_park_duration_to_pt();
  inline void clear_has_max_car_no_park_duration_to_pt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr origin_mode_;
  ::google::protobuf::internal::ArenaStringPtr destination_mode_;
  double walking_speed_;
  double bike_speed_;
  double car_speed_;
  double bss_speed_;
  ::google::protobuf::internal::ArenaStringPtr origin_filter_;
  ::google::protobuf::internal::ArenaStringPtr destination_filter_;
  ::google::protobuf::int32 max_walking_duration_to_pt_;
  ::google::protobuf::int32 max_bike_duration_to_pt_;
  ::google::protobuf::int32 max_bss_duration_to_pt_;
  ::google::protobuf::int32 max_car_duration_to_pt_;
  double car_no_park_speed_;
  bool enable_direct_path_;
  ::google::protobuf::int32 max_car_no_park_duration_to_pt_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static StreetNetworkParams* default_instance_;
};
// -------------------------------------------------------------------

class JourneysRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.JourneysRequest) */ {
 public:
  JourneysRequest();
  virtual ~JourneysRequest();

  JourneysRequest(const JourneysRequest& from);

  inline JourneysRequest& operator=(const JourneysRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JourneysRequest& default_instance();

  void Swap(JourneysRequest* other);

  // implements Message ----------------------------------------------

  inline JourneysRequest* New() const { return New(NULL); }

  JourneysRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JourneysRequest& from);
  void MergeFrom(const JourneysRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JourneysRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.LocationContext origin = 1;
  int origin_size() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::pbnavitia::LocationContext& origin(int index) const;
  ::pbnavitia::LocationContext* mutable_origin(int index);
  ::pbnavitia::LocationContext* add_origin();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
      mutable_origin();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
      origin() const;

  // repeated .pbnavitia.LocationContext destination = 2;
  int destination_size() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::pbnavitia::LocationContext& destination(int index) const;
  ::pbnavitia::LocationContext* mutable_destination(int index);
  ::pbnavitia::LocationContext* add_destination();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
      mutable_destination();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
      destination() const;

  // repeated uint64 datetimes = 3;
  int datetimes_size() const;
  void clear_datetimes();
  static const int kDatetimesFieldNumber = 3;
  ::google::protobuf::uint64 datetimes(int index) const;
  void set_datetimes(int index, ::google::protobuf::uint64 value);
  void add_datetimes(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      datetimes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_datetimes();

  // required bool clockwise = 4;
  bool has_clockwise() const;
  void clear_clockwise();
  static const int kClockwiseFieldNumber = 4;
  bool clockwise() const;
  void set_clockwise(bool value);

  // repeated string forbidden_uris = 5;
  int forbidden_uris_size() const;
  void clear_forbidden_uris();
  static const int kForbiddenUrisFieldNumber = 5;
  const ::std::string& forbidden_uris(int index) const;
  ::std::string* mutable_forbidden_uris(int index);
  void set_forbidden_uris(int index, const ::std::string& value);
  void set_forbidden_uris(int index, const char* value);
  void set_forbidden_uris(int index, const char* value, size_t size);
  ::std::string* add_forbidden_uris();
  void add_forbidden_uris(const ::std::string& value);
  void add_forbidden_uris(const char* value);
  void add_forbidden_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& forbidden_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_forbidden_uris();

  // required int32 max_duration = 6;
  bool has_max_duration() const;
  void clear_max_duration();
  static const int kMaxDurationFieldNumber = 6;
  ::google::protobuf::int32 max_duration() const;
  void set_max_duration(::google::protobuf::int32 value);

  // required int32 max_transfers = 7;
  bool has_max_transfers() const;
  void clear_max_transfers();
  static const int kMaxTransfersFieldNumber = 7;
  ::google::protobuf::int32 max_transfers() const;
  void set_max_transfers(::google::protobuf::int32 value);

  // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 8;
  bool has_streetnetwork_params() const;
  void clear_streetnetwork_params();
  static const int kStreetnetworkParamsFieldNumber = 8;
  const ::pbnavitia::StreetNetworkParams& streetnetwork_params() const;
  ::pbnavitia::StreetNetworkParams* mutable_streetnetwork_params();
  ::pbnavitia::StreetNetworkParams* release_streetnetwork_params();
  void set_allocated_streetnetwork_params(::pbnavitia::StreetNetworkParams* streetnetwork_params);

  // optional bool wheelchair = 9 [default = false];
  bool has_wheelchair() const;
  void clear_wheelchair();
  static const int kWheelchairFieldNumber = 9;
  bool wheelchair() const;
  void set_wheelchair(bool value);

  // optional bool show_codes = 11;
  bool has_show_codes() const;
  void clear_show_codes();
  static const int kShowCodesFieldNumber = 11;
  bool show_codes() const;
  void set_show_codes(bool value);

  // optional bool details = 13;
  bool has_details() const;
  void clear_details();
  static const int kDetailsFieldNumber = 13;
  bool details() const;
  void set_details(bool value);

  // optional .pbnavitia.RTLevel realtime_level = 14;
  bool has_realtime_level() const;
  void clear_realtime_level();
  static const int kRealtimeLevelFieldNumber = 14;
  ::pbnavitia::RTLevel realtime_level() const;
  void set_realtime_level(::pbnavitia::RTLevel value);

  // optional int32 max_extra_second_pass = 15 [default = 0];
  bool has_max_extra_second_pass() const;
  void clear_max_extra_second_pass();
  static const int kMaxExtraSecondPassFieldNumber = 15;
  ::google::protobuf::int32 max_extra_second_pass() const;
  void set_max_extra_second_pass(::google::protobuf::int32 value);

  // optional int32 walking_transfer_penalty = 16 [default = 120];
  bool has_walking_transfer_penalty() const;
  void clear_walking_transfer_penalty();
  static const int kWalkingTransferPenaltyFieldNumber = 16;
  ::google::protobuf::int32 walking_transfer_penalty() const;
  void set_walking_transfer_penalty(::google::protobuf::int32 value);

  // optional int32 direct_path_duration = 17;
  bool has_direct_path_duration() const;
  void clear_direct_path_duration();
  static const int kDirectPathDurationFieldNumber = 17;
  ::google::protobuf::int32 direct_path_duration() const;
  void set_direct_path_duration(::google::protobuf::int32 value);

  // optional bool bike_in_pt = 18;
  bool has_bike_in_pt() const;
  void clear_bike_in_pt();
  static const int kBikeInPtFieldNumber = 18;
  bool bike_in_pt() const;
  void set_bike_in_pt(bool value);

  // repeated string allowed_id = 19;
  int allowed_id_size() const;
  void clear_allowed_id();
  static const int kAllowedIdFieldNumber = 19;
  const ::std::string& allowed_id(int index) const;
  ::std::string* mutable_allowed_id(int index);
  void set_allowed_id(int index, const ::std::string& value);
  void set_allowed_id(int index, const char* value);
  void set_allowed_id(int index, const char* value, size_t size);
  ::std::string* add_allowed_id();
  void add_allowed_id(const ::std::string& value);
  void add_allowed_id(const char* value);
  void add_allowed_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allowed_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allowed_id();

  // optional int32 free_radius_from = 20 [default = 0];
  bool has_free_radius_from() const;
  void clear_free_radius_from();
  static const int kFreeRadiusFromFieldNumber = 20;
  ::google::protobuf::int32 free_radius_from() const;
  void set_free_radius_from(::google::protobuf::int32 value);

  // optional int32 free_radius_to = 21 [default = 0];
  bool has_free_radius_to() const;
  void clear_free_radius_to();
  static const int kFreeRadiusToFieldNumber = 21;
  ::google::protobuf::int32 free_radius_to() const;
  void set_free_radius_to(::google::protobuf::int32 value);

  // optional int32 min_nb_journeys = 22;
  bool has_min_nb_journeys() const;
  void clear_min_nb_journeys();
  static const int kMinNbJourneysFieldNumber = 22;
  ::google::protobuf::int32 min_nb_journeys() const;
  void set_min_nb_journeys(::google::protobuf::int32 value);

  // optional double night_bus_filter_max_factor = 23 [default = 1.5];
  bool has_night_bus_filter_max_factor() const;
  void clear_night_bus_filter_max_factor();
  static const int kNightBusFilterMaxFactorFieldNumber = 23;
  double night_bus_filter_max_factor() const;
  void set_night_bus_filter_max_factor(double value);

  // optional int32 night_bus_filter_base_factor = 24 [default = 900];
  bool has_night_bus_filter_base_factor() const;
  void clear_night_bus_filter_base_factor();
  static const int kNightBusFilterBaseFactorFieldNumber = 24;
  ::google::protobuf::int32 night_bus_filter_base_factor() const;
  void set_night_bus_filter_base_factor(::google::protobuf::int32 value);

  // optional uint32 timeframe_duration = 25;
  bool has_timeframe_duration() const;
  void clear_timeframe_duration();
  static const int kTimeframeDurationFieldNumber = 25;
  ::google::protobuf::uint32 timeframe_duration() const;
  void set_timeframe_duration(::google::protobuf::uint32 value);

  // optional int32 depth = 26 [default = 1];
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 26;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional .pbnavitia.LocationContext isochrone_center = 27;
  bool has_isochrone_center() const;
  void clear_isochrone_center();
  static const int kIsochroneCenterFieldNumber = 27;
  const ::pbnavitia::LocationContext& isochrone_center() const;
  ::pbnavitia::LocationContext* mutable_isochrone_center();
  ::pbnavitia::LocationContext* release_isochrone_center();
  void set_allocated_isochrone_center(::pbnavitia::LocationContext* isochrone_center);

  // @@protoc_insertion_point(class_scope:pbnavitia.JourneysRequest)
 private:
  inline void set_has_clockwise();
  inline void clear_has_clockwise();
  inline void set_has_max_duration();
  inline void clear_has_max_duration();
  inline void set_has_max_transfers();
  inline void clear_has_max_transfers();
  inline void set_has_streetnetwork_params();
  inline void clear_has_streetnetwork_params();
  inline void set_has_wheelchair();
  inline void clear_has_wheelchair();
  inline void set_has_show_codes();
  inline void clear_has_show_codes();
  inline void set_has_details();
  inline void clear_has_details();
  inline void set_has_realtime_level();
  inline void clear_has_realtime_level();
  inline void set_has_max_extra_second_pass();
  inline void clear_has_max_extra_second_pass();
  inline void set_has_walking_transfer_penalty();
  inline void clear_has_walking_transfer_penalty();
  inline void set_has_direct_path_duration();
  inline void clear_has_direct_path_duration();
  inline void set_has_bike_in_pt();
  inline void clear_has_bike_in_pt();
  inline void set_has_free_radius_from();
  inline void clear_has_free_radius_from();
  inline void set_has_free_radius_to();
  inline void clear_has_free_radius_to();
  inline void set_has_min_nb_journeys();
  inline void clear_has_min_nb_journeys();
  inline void set_has_night_bus_filter_max_factor();
  inline void clear_has_night_bus_filter_max_factor();
  inline void set_has_night_bus_filter_base_factor();
  inline void clear_has_night_bus_filter_base_factor();
  inline void set_has_timeframe_duration();
  inline void clear_has_timeframe_duration();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_isochrone_center();
  inline void clear_has_isochrone_center();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext > origin_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext > destination_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > datetimes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> forbidden_uris_;
  ::google::protobuf::int32 max_duration_;
  ::google::protobuf::int32 max_transfers_;
  ::pbnavitia::StreetNetworkParams* streetnetwork_params_;
  bool clockwise_;
  bool wheelchair_;
  bool show_codes_;
  bool details_;
  int realtime_level_;
  ::google::protobuf::int32 max_extra_second_pass_;
  ::google::protobuf::int32 walking_transfer_penalty_;
  ::google::protobuf::int32 direct_path_duration_;
  bool bike_in_pt_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allowed_id_;
  ::google::protobuf::int32 free_radius_from_;
  ::google::protobuf::int32 free_radius_to_;
  double night_bus_filter_max_factor_;
  ::google::protobuf::int32 min_nb_journeys_;
  ::google::protobuf::int32 night_bus_filter_base_factor_;
  ::google::protobuf::uint32 timeframe_duration_;
  ::google::protobuf::int32 depth_;
  ::pbnavitia::LocationContext* isochrone_center_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static JourneysRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlacesNearbyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PlacesNearbyRequest) */ {
 public:
  PlacesNearbyRequest();
  virtual ~PlacesNearbyRequest();

  PlacesNearbyRequest(const PlacesNearbyRequest& from);

  inline PlacesNearbyRequest& operator=(const PlacesNearbyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlacesNearbyRequest& default_instance();

  void Swap(PlacesNearbyRequest* other);

  // implements Message ----------------------------------------------

  inline PlacesNearbyRequest* New() const { return New(NULL); }

  PlacesNearbyRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlacesNearbyRequest& from);
  void MergeFrom(const PlacesNearbyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlacesNearbyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // required double distance = 2;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  double distance() const;
  void set_distance(double value);

  // repeated .pbnavitia.NavitiaType types = 3;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 3;
  ::pbnavitia::NavitiaType types(int index) const;
  void set_types(int index, ::pbnavitia::NavitiaType value);
  void add_types(::pbnavitia::NavitiaType value);
  const ::google::protobuf::RepeatedField<int>& types() const;
  ::google::protobuf::RepeatedField<int>* mutable_types();

  // required int32 depth = 4;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 4;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // required int32 count = 5;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // required int32 start_page = 6;
  bool has_start_page() const;
  void clear_start_page();
  static const int kStartPageFieldNumber = 6;
  ::google::protobuf::int32 start_page() const;
  void set_start_page(::google::protobuf::int32 value);

  // optional string filter = 7;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 7;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // optional double stop_points_nearby_radius = 8;
  bool has_stop_points_nearby_radius() const;
  void clear_stop_points_nearby_radius();
  static const int kStopPointsNearbyRadiusFieldNumber = 8;
  double stop_points_nearby_radius() const;
  void set_stop_points_nearby_radius(double value);

  // @@protoc_insertion_point(class_scope:pbnavitia.PlacesNearbyRequest)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_start_page();
  inline void clear_has_start_page();
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_stop_points_nearby_radius();
  inline void clear_has_stop_points_nearby_radius();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  double distance_;
  ::google::protobuf::RepeatedField<int> types_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  double stop_points_nearby_radius_;
  ::google::protobuf::int32 start_page_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static PlacesNearbyRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlaceUriRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PlaceUriRequest) */ {
 public:
  PlaceUriRequest();
  virtual ~PlaceUriRequest();

  PlaceUriRequest(const PlaceUriRequest& from);

  inline PlaceUriRequest& operator=(const PlaceUriRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceUriRequest& default_instance();

  void Swap(PlaceUriRequest* other);

  // implements Message ----------------------------------------------

  inline PlaceUriRequest* New() const { return New(NULL); }

  PlaceUriRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaceUriRequest& from);
  void MergeFrom(const PlaceUriRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlaceUriRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional int32 depth = 2 [default = 1];
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.PlaceUriRequest)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_depth();
  inline void clear_has_depth();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::int32 depth_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static PlaceUriRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlaceCodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PlaceCodeRequest) */ {
 public:
  PlaceCodeRequest();
  virtual ~PlaceCodeRequest();

  PlaceCodeRequest(const PlaceCodeRequest& from);

  inline PlaceCodeRequest& operator=(const PlaceCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceCodeRequest& default_instance();

  void Swap(PlaceCodeRequest* other);

  // implements Message ----------------------------------------------

  inline PlaceCodeRequest* New() const { return New(NULL); }

  PlaceCodeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaceCodeRequest& from);
  void MergeFrom(const PlaceCodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlaceCodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PlaceCodeRequest_Type Type;
  static const Type StopArea =
    PlaceCodeRequest_Type_StopArea;
  static const Type Network =
    PlaceCodeRequest_Type_Network;
  static const Type Company =
    PlaceCodeRequest_Type_Company;
  static const Type Line =
    PlaceCodeRequest_Type_Line;
  static const Type Route =
    PlaceCodeRequest_Type_Route;
  static const Type VehicleJourney =
    PlaceCodeRequest_Type_VehicleJourney;
  static const Type StopPoint =
    PlaceCodeRequest_Type_StopPoint;
  static const Type Calendar =
    PlaceCodeRequest_Type_Calendar;
  static inline bool Type_IsValid(int value) {
    return PlaceCodeRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PlaceCodeRequest_Type_Type_MIN;
  static const Type Type_MAX =
    PlaceCodeRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PlaceCodeRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PlaceCodeRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PlaceCodeRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PlaceCodeRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .pbnavitia.PlaceCodeRequest.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pbnavitia::PlaceCodeRequest_Type type() const;
  void set_type(::pbnavitia::PlaceCodeRequest_Type value);

  // required string type_code = 2;
  bool has_type_code() const;
  void clear_type_code();
  static const int kTypeCodeFieldNumber = 2;
  const ::std::string& type_code() const;
  void set_type_code(const ::std::string& value);
  void set_type_code(const char* value);
  void set_type_code(const char* value, size_t size);
  ::std::string* mutable_type_code();
  ::std::string* release_type_code();
  void set_allocated_type_code(::std::string* type_code);

  // required string code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:pbnavitia.PlaceCodeRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_type_code();
  inline void clear_has_type_code();
  inline void set_has_code();
  inline void clear_has_code();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_code_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  int type_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static PlaceCodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class PTRefRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PTRefRequest) */ {
 public:
  PTRefRequest();
  virtual ~PTRefRequest();

  PTRefRequest(const PTRefRequest& from);

  inline PTRefRequest& operator=(const PTRefRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PTRefRequest& default_instance();

  void Swap(PTRefRequest* other);

  // implements Message ----------------------------------------------

  inline PTRefRequest* New() const { return New(NULL); }

  PTRefRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PTRefRequest& from);
  void MergeFrom(const PTRefRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PTRefRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.NavitiaType requested_type = 1;
  bool has_requested_type() const;
  void clear_requested_type();
  static const int kRequestedTypeFieldNumber = 1;
  ::pbnavitia::NavitiaType requested_type() const;
  void set_requested_type(::pbnavitia::NavitiaType value);

  // required string filter = 2;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // required int32 depth = 3;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // required int32 start_page = 4;
  bool has_start_page() const;
  void clear_start_page();
  static const int kStartPageFieldNumber = 4;
  ::google::protobuf::int32 start_page() const;
  void set_start_page(::google::protobuf::int32 value);

  // required int32 count = 5;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional bool show_codes = 7;
  bool has_show_codes() const;
  void clear_show_codes();
  static const int kShowCodesFieldNumber = 7;
  bool show_codes() const;
  void set_show_codes(bool value);

  // optional .pbnavitia.OdtLevel odt_level = 8;
  bool has_odt_level() const;
  void clear_odt_level();
  static const int kOdtLevelFieldNumber = 8;
  ::pbnavitia::OdtLevel odt_level() const;
  void set_odt_level(::pbnavitia::OdtLevel value);

  // repeated string forbidden_uri = 6;
  int forbidden_uri_size() const;
  void clear_forbidden_uri();
  static const int kForbiddenUriFieldNumber = 6;
  const ::std::string& forbidden_uri(int index) const;
  ::std::string* mutable_forbidden_uri(int index);
  void set_forbidden_uri(int index, const ::std::string& value);
  void set_forbidden_uri(int index, const char* value);
  void set_forbidden_uri(int index, const char* value, size_t size);
  ::std::string* add_forbidden_uri();
  void add_forbidden_uri(const ::std::string& value);
  void add_forbidden_uri(const char* value);
  void add_forbidden_uri(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& forbidden_uri() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_forbidden_uri();

  // optional uint64 datetime = 9;
  bool has_datetime() const;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 9;
  ::google::protobuf::uint64 datetime() const;
  void set_datetime(::google::protobuf::uint64 value);

  // optional uint64 since_datetime = 10;
  bool has_since_datetime() const;
  void clear_since_datetime();
  static const int kSinceDatetimeFieldNumber = 10;
  ::google::protobuf::uint64 since_datetime() const;
  void set_since_datetime(::google::protobuf::uint64 value);

  // optional uint64 until_datetime = 11;
  bool has_until_datetime() const;
  void clear_until_datetime();
  static const int kUntilDatetimeFieldNumber = 11;
  ::google::protobuf::uint64 until_datetime() const;
  void set_until_datetime(::google::protobuf::uint64 value);

  // optional bool disable_geojson = 12;
  bool has_disable_geojson() const;
  void clear_disable_geojson();
  static const int kDisableGeojsonFieldNumber = 12;
  bool disable_geojson() const;
  void set_disable_geojson(bool value);

  // optional .pbnavitia.RTLevel realtime_level = 13;
  bool has_realtime_level() const;
  void clear_realtime_level();
  static const int kRealtimeLevelFieldNumber = 13;
  ::pbnavitia::RTLevel realtime_level() const;
  void set_realtime_level(::pbnavitia::RTLevel value);

  // @@protoc_insertion_point(class_scope:pbnavitia.PTRefRequest)
 private:
  inline void set_has_requested_type();
  inline void clear_has_requested_type();
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_start_page();
  inline void clear_has_start_page();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_show_codes();
  inline void clear_has_show_codes();
  inline void set_has_odt_level();
  inline void clear_has_odt_level();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_since_datetime();
  inline void clear_has_since_datetime();
  inline void set_has_until_datetime();
  inline void clear_has_until_datetime();
  inline void set_has_disable_geojson();
  inline void clear_has_disable_geojson();
  inline void set_has_realtime_level();
  inline void clear_has_realtime_level();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  int requested_type_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 start_page_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> forbidden_uri_;
  int odt_level_;
  bool show_codes_;
  bool disable_geojson_;
  ::google::protobuf::uint64 datetime_;
  ::google::protobuf::uint64 since_datetime_;
  ::google::protobuf::uint64 until_datetime_;
  int realtime_level_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static PTRefRequest* default_instance_;
};
// -------------------------------------------------------------------

class CarCO2EmissionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.CarCO2EmissionRequest) */ {
 public:
  CarCO2EmissionRequest();
  virtual ~CarCO2EmissionRequest();

  CarCO2EmissionRequest(const CarCO2EmissionRequest& from);

  inline CarCO2EmissionRequest& operator=(const CarCO2EmissionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CarCO2EmissionRequest& default_instance();

  void Swap(CarCO2EmissionRequest* other);

  // implements Message ----------------------------------------------

  inline CarCO2EmissionRequest* New() const { return New(NULL); }

  CarCO2EmissionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CarCO2EmissionRequest& from);
  void MergeFrom(const CarCO2EmissionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CarCO2EmissionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.LocationContext origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::pbnavitia::LocationContext& origin() const;
  ::pbnavitia::LocationContext* mutable_origin();
  ::pbnavitia::LocationContext* release_origin();
  void set_allocated_origin(::pbnavitia::LocationContext* origin);

  // optional .pbnavitia.LocationContext destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::pbnavitia::LocationContext& destination() const;
  ::pbnavitia::LocationContext* mutable_destination();
  ::pbnavitia::LocationContext* release_destination();
  void set_allocated_destination(::pbnavitia::LocationContext* destination);

  // @@protoc_insertion_point(class_scope:pbnavitia.CarCO2EmissionRequest)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_destination();
  inline void clear_has_destination();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::LocationContext* origin_;
  ::pbnavitia::LocationContext* destination_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static CarCO2EmissionRequest* default_instance_;
};
// -------------------------------------------------------------------

class DirectPathRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.DirectPathRequest) */ {
 public:
  DirectPathRequest();
  virtual ~DirectPathRequest();

  DirectPathRequest(const DirectPathRequest& from);

  inline DirectPathRequest& operator=(const DirectPathRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectPathRequest& default_instance();

  void Swap(DirectPathRequest* other);

  // implements Message ----------------------------------------------

  inline DirectPathRequest* New() const { return New(NULL); }

  DirectPathRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirectPathRequest& from);
  void MergeFrom(const DirectPathRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DirectPathRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.LocationContext origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::pbnavitia::LocationContext& origin() const;
  ::pbnavitia::LocationContext* mutable_origin();
  ::pbnavitia::LocationContext* release_origin();
  void set_allocated_origin(::pbnavitia::LocationContext* origin);

  // optional .pbnavitia.LocationContext destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::pbnavitia::LocationContext& destination() const;
  ::pbnavitia::LocationContext* mutable_destination();
  ::pbnavitia::LocationContext* release_destination();
  void set_allocated_destination(::pbnavitia::LocationContext* destination);

  // optional uint64 datetime = 3;
  bool has_datetime() const;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 3;
  ::google::protobuf::uint64 datetime() const;
  void set_datetime(::google::protobuf::uint64 value);

  // required bool clockwise = 4;
  bool has_clockwise() const;
  void clear_clockwise();
  static const int kClockwiseFieldNumber = 4;
  bool clockwise() const;
  void set_clockwise(bool value);

  // optional .pbnavitia.StreetNetworkParams streetnetwork_params = 5;
  bool has_streetnetwork_params() const;
  void clear_streetnetwork_params();
  static const int kStreetnetworkParamsFieldNumber = 5;
  const ::pbnavitia::StreetNetworkParams& streetnetwork_params() const;
  ::pbnavitia::StreetNetworkParams* mutable_streetnetwork_params();
  ::pbnavitia::StreetNetworkParams* release_streetnetwork_params();
  void set_allocated_streetnetwork_params(::pbnavitia::StreetNetworkParams* streetnetwork_params);

  // @@protoc_insertion_point(class_scope:pbnavitia.DirectPathRequest)
 private:
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_clockwise();
  inline void clear_has_clockwise();
  inline void set_has_streetnetwork_params();
  inline void clear_has_streetnetwork_params();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::LocationContext* origin_;
  ::pbnavitia::LocationContext* destination_;
  ::google::protobuf::uint64 datetime_;
  ::pbnavitia::StreetNetworkParams* streetnetwork_params_;
  bool clockwise_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static DirectPathRequest* default_instance_;
};
// -------------------------------------------------------------------

class StreetNetworkRoutingMatrixRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.StreetNetworkRoutingMatrixRequest) */ {
 public:
  StreetNetworkRoutingMatrixRequest();
  virtual ~StreetNetworkRoutingMatrixRequest();

  StreetNetworkRoutingMatrixRequest(const StreetNetworkRoutingMatrixRequest& from);

  inline StreetNetworkRoutingMatrixRequest& operator=(const StreetNetworkRoutingMatrixRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreetNetworkRoutingMatrixRequest& default_instance();

  void Swap(StreetNetworkRoutingMatrixRequest* other);

  // implements Message ----------------------------------------------

  inline StreetNetworkRoutingMatrixRequest* New() const { return New(NULL); }

  StreetNetworkRoutingMatrixRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreetNetworkRoutingMatrixRequest& from);
  void MergeFrom(const StreetNetworkRoutingMatrixRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreetNetworkRoutingMatrixRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbnavitia.LocationContext origins = 1;
  int origins_size() const;
  void clear_origins();
  static const int kOriginsFieldNumber = 1;
  const ::pbnavitia::LocationContext& origins(int index) const;
  ::pbnavitia::LocationContext* mutable_origins(int index);
  ::pbnavitia::LocationContext* add_origins();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
      mutable_origins();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
      origins() const;

  // repeated .pbnavitia.LocationContext destinations = 2;
  int destinations_size() const;
  void clear_destinations();
  static const int kDestinationsFieldNumber = 2;
  const ::pbnavitia::LocationContext& destinations(int index) const;
  ::pbnavitia::LocationContext* mutable_destinations(int index);
  ::pbnavitia::LocationContext* add_destinations();
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
      mutable_destinations();
  const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
      destinations() const;

  // optional string mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  const ::std::string& mode() const;
  void set_mode(const ::std::string& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  ::std::string* mutable_mode();
  ::std::string* release_mode();
  void set_allocated_mode(::std::string* mode);

  // optional float speed = 4;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // optional int32 max_duration = 5;
  bool has_max_duration() const;
  void clear_max_duration();
  static const int kMaxDurationFieldNumber = 5;
  ::google::protobuf::int32 max_duration() const;
  void set_max_duration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.StreetNetworkRoutingMatrixRequest)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_max_duration();
  inline void clear_has_max_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext > origins_;
  ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext > destinations_;
  ::google::protobuf::internal::ArenaStringPtr mode_;
  float speed_;
  ::google::protobuf::int32 max_duration_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static StreetNetworkRoutingMatrixRequest* default_instance_;
};
// -------------------------------------------------------------------

class MatchingRoute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.MatchingRoute) */ {
 public:
  MatchingRoute();
  virtual ~MatchingRoute();

  MatchingRoute(const MatchingRoute& from);

  inline MatchingRoute& operator=(const MatchingRoute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchingRoute& default_instance();

  void Swap(MatchingRoute* other);

  // implements Message ----------------------------------------------

  inline MatchingRoute* New() const { return New(NULL); }

  MatchingRoute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchingRoute& from);
  void MergeFrom(const MatchingRoute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchingRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string line_uri = 1;
  bool has_line_uri() const;
  void clear_line_uri();
  static const int kLineUriFieldNumber = 1;
  const ::std::string& line_uri() const;
  void set_line_uri(const ::std::string& value);
  void set_line_uri(const char* value);
  void set_line_uri(const char* value, size_t size);
  ::std::string* mutable_line_uri();
  ::std::string* release_line_uri();
  void set_allocated_line_uri(::std::string* line_uri);

  // optional string start_stop_point_uri = 2;
  bool has_start_stop_point_uri() const;
  void clear_start_stop_point_uri();
  static const int kStartStopPointUriFieldNumber = 2;
  const ::std::string& start_stop_point_uri() const;
  void set_start_stop_point_uri(const ::std::string& value);
  void set_start_stop_point_uri(const char* value);
  void set_start_stop_point_uri(const char* value, size_t size);
  ::std::string* mutable_start_stop_point_uri();
  ::std::string* release_start_stop_point_uri();
  void set_allocated_start_stop_point_uri(::std::string* start_stop_point_uri);

  // optional string destination_code_key = 3;
  bool has_destination_code_key() const;
  void clear_destination_code_key();
  static const int kDestinationCodeKeyFieldNumber = 3;
  const ::std::string& destination_code_key() const;
  void set_destination_code_key(const ::std::string& value);
  void set_destination_code_key(const char* value);
  void set_destination_code_key(const char* value, size_t size);
  ::std::string* mutable_destination_code_key();
  ::std::string* release_destination_code_key();
  void set_allocated_destination_code_key(::std::string* destination_code_key);

  // optional string destination_code = 4;
  bool has_destination_code() const;
  void clear_destination_code();
  static const int kDestinationCodeFieldNumber = 4;
  const ::std::string& destination_code() const;
  void set_destination_code(const ::std::string& value);
  void set_destination_code(const char* value);
  void set_destination_code(const char* value, size_t size);
  ::std::string* mutable_destination_code();
  ::std::string* release_destination_code();
  void set_allocated_destination_code(::std::string* destination_code);

  // @@protoc_insertion_point(class_scope:pbnavitia.MatchingRoute)
 private:
  inline void set_has_line_uri();
  inline void clear_has_line_uri();
  inline void set_has_start_stop_point_uri();
  inline void clear_has_start_stop_point_uri();
  inline void set_has_destination_code_key();
  inline void clear_has_destination_code_key();
  inline void set_has_destination_code();
  inline void clear_has_destination_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr line_uri_;
  ::google::protobuf::internal::ArenaStringPtr start_stop_point_uri_;
  ::google::protobuf::internal::ArenaStringPtr destination_code_key_;
  ::google::protobuf::internal::ArenaStringPtr destination_code_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static MatchingRoute* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pbnavitia.API requested_api = 1;
  bool has_requested_api() const;
  void clear_requested_api();
  static const int kRequestedApiFieldNumber = 1;
  ::pbnavitia::API requested_api() const;
  void set_requested_api(::pbnavitia::API value);

  // optional .pbnavitia.PlacesRequest places = 2;
  bool has_places() const;
  void clear_places();
  static const int kPlacesFieldNumber = 2;
  const ::pbnavitia::PlacesRequest& places() const;
  ::pbnavitia::PlacesRequest* mutable_places();
  ::pbnavitia::PlacesRequest* release_places();
  void set_allocated_places(::pbnavitia::PlacesRequest* places);

  // optional .pbnavitia.NextStopTimeRequest next_stop_times = 3;
  bool has_next_stop_times() const;
  void clear_next_stop_times();
  static const int kNextStopTimesFieldNumber = 3;
  const ::pbnavitia::NextStopTimeRequest& next_stop_times() const;
  ::pbnavitia::NextStopTimeRequest* mutable_next_stop_times();
  ::pbnavitia::NextStopTimeRequest* release_next_stop_times();
  void set_allocated_next_stop_times(::pbnavitia::NextStopTimeRequest* next_stop_times);

  // optional .pbnavitia.PlacesNearbyRequest places_nearby = 4;
  bool has_places_nearby() const;
  void clear_places_nearby();
  static const int kPlacesNearbyFieldNumber = 4;
  const ::pbnavitia::PlacesNearbyRequest& places_nearby() const;
  ::pbnavitia::PlacesNearbyRequest* mutable_places_nearby();
  ::pbnavitia::PlacesNearbyRequest* release_places_nearby();
  void set_allocated_places_nearby(::pbnavitia::PlacesNearbyRequest* places_nearby);

  // optional .pbnavitia.JourneysRequest journeys = 5;
  bool has_journeys() const;
  void clear_journeys();
  static const int kJourneysFieldNumber = 5;
  const ::pbnavitia::JourneysRequest& journeys() const;
  ::pbnavitia::JourneysRequest* mutable_journeys();
  ::pbnavitia::JourneysRequest* release_journeys();
  void set_allocated_journeys(::pbnavitia::JourneysRequest* journeys);

  // optional .pbnavitia.PTRefRequest ptref = 6;
  bool has_ptref() const;
  void clear_ptref();
  static const int kPtrefFieldNumber = 6;
  const ::pbnavitia::PTRefRequest& ptref() const;
  ::pbnavitia::PTRefRequest* mutable_ptref();
  ::pbnavitia::PTRefRequest* release_ptref();
  void set_allocated_ptref(::pbnavitia::PTRefRequest* ptref);

  // optional .pbnavitia.PlaceUriRequest place_uri = 7;
  bool has_place_uri() const;
  void clear_place_uri();
  static const int kPlaceUriFieldNumber = 7;
  const ::pbnavitia::PlaceUriRequest& place_uri() const;
  ::pbnavitia::PlaceUriRequest* mutable_place_uri();
  ::pbnavitia::PlaceUriRequest* release_place_uri();
  void set_allocated_place_uri(::pbnavitia::PlaceUriRequest* place_uri);

  // optional .pbnavitia.TrafficReportsRequest traffic_reports = 13;
  bool has_traffic_reports() const;
  void clear_traffic_reports();
  static const int kTrafficReportsFieldNumber = 13;
  const ::pbnavitia::TrafficReportsRequest& traffic_reports() const;
  ::pbnavitia::TrafficReportsRequest* mutable_traffic_reports();
  ::pbnavitia::TrafficReportsRequest* release_traffic_reports();
  void set_allocated_traffic_reports(::pbnavitia::TrafficReportsRequest* traffic_reports);

  // optional .pbnavitia.CalendarsRequest calendars = 9;
  bool has_calendars() const;
  void clear_calendars();
  static const int kCalendarsFieldNumber = 9;
  const ::pbnavitia::CalendarsRequest& calendars() const;
  ::pbnavitia::CalendarsRequest* mutable_calendars();
  ::pbnavitia::CalendarsRequest* release_calendars();
  void set_allocated_calendars(::pbnavitia::CalendarsRequest* calendars);

  // optional .pbnavitia.PtobjectRequest pt_objects = 10;
  bool has_pt_objects() const;
  void clear_pt_objects();
  static const int kPtObjectsFieldNumber = 10;
  const ::pbnavitia::PtobjectRequest& pt_objects() const;
  ::pbnavitia::PtobjectRequest* mutable_pt_objects();
  ::pbnavitia::PtobjectRequest* release_pt_objects();
  void set_allocated_pt_objects(::pbnavitia::PtobjectRequest* pt_objects);

  // optional .pbnavitia.PlaceCodeRequest place_code = 11;
  bool has_place_code() const;
  void clear_place_code();
  static const int kPlaceCodeFieldNumber = 11;
  const ::pbnavitia::PlaceCodeRequest& place_code() const;
  ::pbnavitia::PlaceCodeRequest* mutable_place_code();
  ::pbnavitia::PlaceCodeRequest* release_place_code();
  void set_allocated_place_code(::pbnavitia::PlaceCodeRequest* place_code);

  // optional .pbnavitia.NearestStopPointsRequest nearest_stop_points = 14;
  bool has_nearest_stop_points() const;
  void clear_nearest_stop_points();
  static const int kNearestStopPointsFieldNumber = 14;
  const ::pbnavitia::NearestStopPointsRequest& nearest_stop_points() const;
  ::pbnavitia::NearestStopPointsRequest* mutable_nearest_stop_points();
  ::pbnavitia::NearestStopPointsRequest* release_nearest_stop_points();
  void set_allocated_nearest_stop_points(::pbnavitia::NearestStopPointsRequest* nearest_stop_points);

  // optional uint64 _current_datetime = 15;
  bool has__current_datetime() const;
  void clear__current_datetime();
  static const int kCurrentDatetimeFieldNumber = 15;
  ::google::protobuf::uint64 _current_datetime() const;
  void set__current_datetime(::google::protobuf::uint64 value);

  // optional .pbnavitia.GraphicalIsochroneRequest isochrone = 16;
  bool has_isochrone() const;
  void clear_isochrone();
  static const int kIsochroneFieldNumber = 16;
  const ::pbnavitia::GraphicalIsochroneRequest& isochrone() const;
  ::pbnavitia::GraphicalIsochroneRequest* mutable_isochrone();
  ::pbnavitia::GraphicalIsochroneRequest* release_isochrone();
  void set_allocated_isochrone(::pbnavitia::GraphicalIsochroneRequest* isochrone);

  // optional .pbnavitia.CarCO2EmissionRequest car_co2_emission = 17;
  bool has_car_co2_emission() const;
  void clear_car_co2_emission();
  static const int kCarCo2EmissionFieldNumber = 17;
  const ::pbnavitia::CarCO2EmissionRequest& car_co2_emission() const;
  ::pbnavitia::CarCO2EmissionRequest* mutable_car_co2_emission();
  ::pbnavitia::CarCO2EmissionRequest* release_car_co2_emission();
  void set_allocated_car_co2_emission(::pbnavitia::CarCO2EmissionRequest* car_co2_emission);

  // optional .pbnavitia.DirectPathRequest direct_path = 18;
  bool has_direct_path() const;
  void clear_direct_path();
  static const int kDirectPathFieldNumber = 18;
  const ::pbnavitia::DirectPathRequest& direct_path() const;
  ::pbnavitia::DirectPathRequest* mutable_direct_path();
  ::pbnavitia::DirectPathRequest* release_direct_path();
  void set_allocated_direct_path(::pbnavitia::DirectPathRequest* direct_path);

  // optional .pbnavitia.HeatMapRequest heat_map = 19;
  bool has_heat_map() const;
  void clear_heat_map();
  static const int kHeatMapFieldNumber = 19;
  const ::pbnavitia::HeatMapRequest& heat_map() const;
  ::pbnavitia::HeatMapRequest* mutable_heat_map();
  ::pbnavitia::HeatMapRequest* release_heat_map();
  void set_allocated_heat_map(::pbnavitia::HeatMapRequest* heat_map);

  // optional .pbnavitia.StreetNetworkRoutingMatrixRequest sn_routing_matrix = 20;
  bool has_sn_routing_matrix() const;
  void clear_sn_routing_matrix();
  static const int kSnRoutingMatrixFieldNumber = 20;
  const ::pbnavitia::StreetNetworkRoutingMatrixRequest& sn_routing_matrix() const;
  ::pbnavitia::StreetNetworkRoutingMatrixRequest* mutable_sn_routing_matrix();
  ::pbnavitia::StreetNetworkRoutingMatrixRequest* release_sn_routing_matrix();
  void set_allocated_sn_routing_matrix(::pbnavitia::StreetNetworkRoutingMatrixRequest* sn_routing_matrix);

  // optional .pbnavitia.GeographicalCoord coord = 21;
  bool has_coord() const;
  void clear_coord();
  static const int kCoordFieldNumber = 21;
  const ::pbnavitia::GeographicalCoord& coord() const;
  ::pbnavitia::GeographicalCoord* mutable_coord();
  ::pbnavitia::GeographicalCoord* release_coord();
  void set_allocated_coord(::pbnavitia::GeographicalCoord* coord);

  // optional .pbnavitia.MatchingRoute matching_routes = 23;
  bool has_matching_routes() const;
  void clear_matching_routes();
  static const int kMatchingRoutesFieldNumber = 23;
  const ::pbnavitia::MatchingRoute& matching_routes() const;
  ::pbnavitia::MatchingRoute* mutable_matching_routes();
  ::pbnavitia::MatchingRoute* release_matching_routes();
  void set_allocated_matching_routes(::pbnavitia::MatchingRoute* matching_routes);

  // optional .pbnavitia.LineReportsRequest line_reports = 24;
  bool has_line_reports() const;
  void clear_line_reports();
  static const int kLineReportsFieldNumber = 24;
  const ::pbnavitia::LineReportsRequest& line_reports() const;
  ::pbnavitia::LineReportsRequest* mutable_line_reports();
  ::pbnavitia::LineReportsRequest* release_line_reports();
  void set_allocated_line_reports(::pbnavitia::LineReportsRequest* line_reports);

  // optional string request_id = 12;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 12;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional bool disable_feedpublisher = 22;
  bool has_disable_feedpublisher() const;
  void clear_disable_feedpublisher();
  static const int kDisableFeedpublisherFieldNumber = 22;
  bool disable_feedpublisher() const;
  void set_disable_feedpublisher(bool value);

  // optional bool disable_disruption = 25 [default = false];
  bool has_disable_disruption() const;
  void clear_disable_disruption();
  static const int kDisableDisruptionFieldNumber = 25;
  bool disable_disruption() const;
  void set_disable_disruption(bool value);

  // optional string deadline = 26;
  bool has_deadline() const;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 26;
  const ::std::string& deadline() const;
  void set_deadline(const ::std::string& value);
  void set_deadline(const char* value);
  void set_deadline(const char* value, size_t size);
  ::std::string* mutable_deadline();
  ::std::string* release_deadline();
  void set_allocated_deadline(::std::string* deadline);

  // optional .pbnavitia.EquipmentReportsRequest equipment_reports = 27;
  bool has_equipment_reports() const;
  void clear_equipment_reports();
  static const int kEquipmentReportsFieldNumber = 27;
  const ::pbnavitia::EquipmentReportsRequest& equipment_reports() const;
  ::pbnavitia::EquipmentReportsRequest* mutable_equipment_reports();
  ::pbnavitia::EquipmentReportsRequest* release_equipment_reports();
  void set_allocated_equipment_reports(::pbnavitia::EquipmentReportsRequest* equipment_reports);

  // @@protoc_insertion_point(class_scope:pbnavitia.Request)
 private:
  inline void set_has_requested_api();
  inline void clear_has_requested_api();
  inline void set_has_places();
  inline void clear_has_places();
  inline void set_has_next_stop_times();
  inline void clear_has_next_stop_times();
  inline void set_has_places_nearby();
  inline void clear_has_places_nearby();
  inline void set_has_journeys();
  inline void clear_has_journeys();
  inline void set_has_ptref();
  inline void clear_has_ptref();
  inline void set_has_place_uri();
  inline void clear_has_place_uri();
  inline void set_has_traffic_reports();
  inline void clear_has_traffic_reports();
  inline void set_has_calendars();
  inline void clear_has_calendars();
  inline void set_has_pt_objects();
  inline void clear_has_pt_objects();
  inline void set_has_place_code();
  inline void clear_has_place_code();
  inline void set_has_nearest_stop_points();
  inline void clear_has_nearest_stop_points();
  inline void set_has__current_datetime();
  inline void clear_has__current_datetime();
  inline void set_has_isochrone();
  inline void clear_has_isochrone();
  inline void set_has_car_co2_emission();
  inline void clear_has_car_co2_emission();
  inline void set_has_direct_path();
  inline void clear_has_direct_path();
  inline void set_has_heat_map();
  inline void clear_has_heat_map();
  inline void set_has_sn_routing_matrix();
  inline void clear_has_sn_routing_matrix();
  inline void set_has_coord();
  inline void clear_has_coord();
  inline void set_has_matching_routes();
  inline void clear_has_matching_routes();
  inline void set_has_line_reports();
  inline void clear_has_line_reports();
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_disable_feedpublisher();
  inline void clear_has_disable_feedpublisher();
  inline void set_has_disable_disruption();
  inline void clear_has_disable_disruption();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_equipment_reports();
  inline void clear_has_equipment_reports();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::PlacesRequest* places_;
  ::pbnavitia::NextStopTimeRequest* next_stop_times_;
  ::pbnavitia::PlacesNearbyRequest* places_nearby_;
  ::pbnavitia::JourneysRequest* journeys_;
  ::pbnavitia::PTRefRequest* ptref_;
  ::pbnavitia::PlaceUriRequest* place_uri_;
  ::pbnavitia::TrafficReportsRequest* traffic_reports_;
  ::pbnavitia::CalendarsRequest* calendars_;
  ::pbnavitia::PtobjectRequest* pt_objects_;
  ::pbnavitia::PlaceCodeRequest* place_code_;
  ::pbnavitia::NearestStopPointsRequest* nearest_stop_points_;
  ::google::protobuf::uint64 _current_datetime_;
  ::pbnavitia::GraphicalIsochroneRequest* isochrone_;
  ::pbnavitia::CarCO2EmissionRequest* car_co2_emission_;
  ::pbnavitia::DirectPathRequest* direct_path_;
  int requested_api_;
  bool disable_feedpublisher_;
  bool disable_disruption_;
  ::pbnavitia::HeatMapRequest* heat_map_;
  ::pbnavitia::StreetNetworkRoutingMatrixRequest* sn_routing_matrix_;
  ::pbnavitia::GeographicalCoord* coord_;
  ::pbnavitia::MatchingRoute* matching_routes_;
  ::pbnavitia::LineReportsRequest* line_reports_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr deadline_;
  ::pbnavitia::EquipmentReportsRequest* equipment_reports_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class NearestStopPointsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.NearestStopPointsRequest) */ {
 public:
  NearestStopPointsRequest();
  virtual ~NearestStopPointsRequest();

  NearestStopPointsRequest(const NearestStopPointsRequest& from);

  inline NearestStopPointsRequest& operator=(const NearestStopPointsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NearestStopPointsRequest& default_instance();

  void Swap(NearestStopPointsRequest* other);

  // implements Message ----------------------------------------------

  inline NearestStopPointsRequest* New() const { return New(NULL); }

  NearestStopPointsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NearestStopPointsRequest& from);
  void MergeFrom(const NearestStopPointsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NearestStopPointsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string place = 1;
  bool has_place() const;
  void clear_place();
  static const int kPlaceFieldNumber = 1;
  const ::std::string& place() const;
  void set_place(const ::std::string& value);
  void set_place(const char* value);
  void set_place(const char* value, size_t size);
  ::std::string* mutable_place();
  ::std::string* release_place();
  void set_allocated_place(::std::string* place);

  // optional string mode = 2;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  const ::std::string& mode() const;
  void set_mode(const ::std::string& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  ::std::string* mutable_mode();
  ::std::string* release_mode();
  void set_allocated_mode(::std::string* mode);

  // optional double walking_speed = 3;
  bool has_walking_speed() const;
  void clear_walking_speed();
  static const int kWalkingSpeedFieldNumber = 3;
  double walking_speed() const;
  void set_walking_speed(double value);

  // optional double bike_speed = 4;
  bool has_bike_speed() const;
  void clear_bike_speed();
  static const int kBikeSpeedFieldNumber = 4;
  double bike_speed() const;
  void set_bike_speed(double value);

  // optional double car_speed = 5;
  bool has_car_speed() const;
  void clear_car_speed();
  static const int kCarSpeedFieldNumber = 5;
  double car_speed() const;
  void set_car_speed(double value);

  // optional double bss_speed = 6;
  bool has_bss_speed() const;
  void clear_bss_speed();
  static const int kBssSpeedFieldNumber = 6;
  double bss_speed() const;
  void set_bss_speed(double value);

  // optional string filter = 7;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 7;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // optional int32 max_duration = 8;
  bool has_max_duration() const;
  void clear_max_duration();
  static const int kMaxDurationFieldNumber = 8;
  ::google::protobuf::int32 max_duration() const;
  void set_max_duration(::google::protobuf::int32 value);

  // optional bool reverse = 9;
  bool has_reverse() const;
  void clear_reverse();
  static const int kReverseFieldNumber = 9;
  bool reverse() const;
  void set_reverse(bool value);

  // optional double car_no_park_speed = 10;
  bool has_car_no_park_speed() const;
  void clear_car_no_park_speed();
  static const int kCarNoParkSpeedFieldNumber = 10;
  double car_no_park_speed() const;
  void set_car_no_park_speed(double value);

  // @@protoc_insertion_point(class_scope:pbnavitia.NearestStopPointsRequest)
 private:
  inline void set_has_place();
  inline void clear_has_place();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_walking_speed();
  inline void clear_has_walking_speed();
  inline void set_has_bike_speed();
  inline void clear_has_bike_speed();
  inline void set_has_car_speed();
  inline void clear_has_car_speed();
  inline void set_has_bss_speed();
  inline void clear_has_bss_speed();
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_max_duration();
  inline void clear_has_max_duration();
  inline void set_has_reverse();
  inline void clear_has_reverse();
  inline void set_has_car_no_park_speed();
  inline void clear_has_car_no_park_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr place_;
  ::google::protobuf::internal::ArenaStringPtr mode_;
  double walking_speed_;
  double bike_speed_;
  double car_speed_;
  double bss_speed_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::int32 max_duration_;
  bool reverse_;
  double car_no_park_speed_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static NearestStopPointsRequest* default_instance_;
};
// -------------------------------------------------------------------

class GraphicalIsochroneRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.GraphicalIsochroneRequest) */ {
 public:
  GraphicalIsochroneRequest();
  virtual ~GraphicalIsochroneRequest();

  GraphicalIsochroneRequest(const GraphicalIsochroneRequest& from);

  inline GraphicalIsochroneRequest& operator=(const GraphicalIsochroneRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphicalIsochroneRequest& default_instance();

  void Swap(GraphicalIsochroneRequest* other);

  // implements Message ----------------------------------------------

  inline GraphicalIsochroneRequest* New() const { return New(NULL); }

  GraphicalIsochroneRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraphicalIsochroneRequest& from);
  void MergeFrom(const GraphicalIsochroneRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphicalIsochroneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.JourneysRequest journeys_request = 1;
  bool has_journeys_request() const;
  void clear_journeys_request();
  static const int kJourneysRequestFieldNumber = 1;
  const ::pbnavitia::JourneysRequest& journeys_request() const;
  ::pbnavitia::JourneysRequest* mutable_journeys_request();
  ::pbnavitia::JourneysRequest* release_journeys_request();
  void set_allocated_journeys_request(::pbnavitia::JourneysRequest* journeys_request);

  // repeated int32 boundary_duration = 2;
  int boundary_duration_size() const;
  void clear_boundary_duration();
  static const int kBoundaryDurationFieldNumber = 2;
  ::google::protobuf::int32 boundary_duration(int index) const;
  void set_boundary_duration(int index, ::google::protobuf::int32 value);
  void add_boundary_duration(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boundary_duration() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boundary_duration();

  // @@protoc_insertion_point(class_scope:pbnavitia.GraphicalIsochroneRequest)
 private:
  inline void set_has_journeys_request();
  inline void clear_has_journeys_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::JourneysRequest* journeys_request_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boundary_duration_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static GraphicalIsochroneRequest* default_instance_;
};
// -------------------------------------------------------------------

class HeatMapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.HeatMapRequest) */ {
 public:
  HeatMapRequest();
  virtual ~HeatMapRequest();

  HeatMapRequest(const HeatMapRequest& from);

  inline HeatMapRequest& operator=(const HeatMapRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeatMapRequest& default_instance();

  void Swap(HeatMapRequest* other);

  // implements Message ----------------------------------------------

  inline HeatMapRequest* New() const { return New(NULL); }

  HeatMapRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeatMapRequest& from);
  void MergeFrom(const HeatMapRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeatMapRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pbnavitia.JourneysRequest journeys_request = 1;
  bool has_journeys_request() const;
  void clear_journeys_request();
  static const int kJourneysRequestFieldNumber = 1;
  const ::pbnavitia::JourneysRequest& journeys_request() const;
  ::pbnavitia::JourneysRequest* mutable_journeys_request();
  ::pbnavitia::JourneysRequest* release_journeys_request();
  void set_allocated_journeys_request(::pbnavitia::JourneysRequest* journeys_request);

  // optional int32 resolution = 2;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 2;
  ::google::protobuf::int32 resolution() const;
  void set_resolution(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbnavitia.HeatMapRequest)
 private:
  inline void set_has_journeys_request();
  inline void clear_has_journeys_request();
  inline void set_has_resolution();
  inline void clear_has_resolution();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pbnavitia::JourneysRequest* journeys_request_;
  ::google::protobuf::int32 resolution_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static HeatMapRequest* default_instance_;
};
// -------------------------------------------------------------------

class PtobjectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.PtobjectRequest) */ {
 public:
  PtobjectRequest();
  virtual ~PtobjectRequest();

  PtobjectRequest(const PtobjectRequest& from);

  inline PtobjectRequest& operator=(const PtobjectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PtobjectRequest& default_instance();

  void Swap(PtobjectRequest* other);

  // implements Message ----------------------------------------------

  inline PtobjectRequest* New() const { return New(NULL); }

  PtobjectRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PtobjectRequest& from);
  void MergeFrom(const PtobjectRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PtobjectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string q = 1;
  bool has_q() const;
  void clear_q();
  static const int kQFieldNumber = 1;
  const ::std::string& q() const;
  void set_q(const ::std::string& value);
  void set_q(const char* value);
  void set_q(const char* value, size_t size);
  ::std::string* mutable_q();
  ::std::string* release_q();
  void set_allocated_q(::std::string* q);

  // repeated .pbnavitia.NavitiaType types = 2;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 2;
  ::pbnavitia::NavitiaType types(int index) const;
  void set_types(int index, ::pbnavitia::NavitiaType value);
  void add_types(::pbnavitia::NavitiaType value);
  const ::google::protobuf::RepeatedField<int>& types() const;
  ::google::protobuf::RepeatedField<int>* mutable_types();

  // required int32 depth = 3;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 3;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // required int32 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // repeated string admin_uris = 5;
  int admin_uris_size() const;
  void clear_admin_uris();
  static const int kAdminUrisFieldNumber = 5;
  const ::std::string& admin_uris(int index) const;
  ::std::string* mutable_admin_uris(int index);
  void set_admin_uris(int index, const ::std::string& value);
  void set_admin_uris(int index, const char* value);
  void set_admin_uris(int index, const char* value, size_t size);
  ::std::string* add_admin_uris();
  void add_admin_uris(const ::std::string& value);
  void add_admin_uris(const char* value);
  void add_admin_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& admin_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_admin_uris();

  // optional int32 search_type = 6;
  bool has_search_type() const;
  void clear_search_type();
  static const int kSearchTypeFieldNumber = 6;
  ::google::protobuf::int32 search_type() const;
  void set_search_type(::google::protobuf::int32 value);

  // optional bool disable_geojson = 7;
  bool has_disable_geojson() const;
  void clear_disable_geojson();
  static const int kDisableGeojsonFieldNumber = 7;
  bool disable_geojson() const;
  void set_disable_geojson(bool value);

  // @@protoc_insertion_point(class_scope:pbnavitia.PtobjectRequest)
 private:
  inline void set_has_q();
  inline void clear_has_q();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_search_type();
  inline void clear_has_search_type();
  inline void set_has_disable_geojson();
  inline void clear_has_disable_geojson();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr q_;
  ::google::protobuf::RepeatedField<int> types_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> admin_uris_;
  ::google::protobuf::int32 search_type_;
  bool disable_geojson_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static PtobjectRequest* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentReportsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbnavitia.EquipmentReportsRequest) */ {
 public:
  EquipmentReportsRequest();
  virtual ~EquipmentReportsRequest();

  EquipmentReportsRequest(const EquipmentReportsRequest& from);

  inline EquipmentReportsRequest& operator=(const EquipmentReportsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentReportsRequest& default_instance();

  void Swap(EquipmentReportsRequest* other);

  // implements Message ----------------------------------------------

  inline EquipmentReportsRequest* New() const { return New(NULL); }

  EquipmentReportsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentReportsRequest& from);
  void MergeFrom(const EquipmentReportsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EquipmentReportsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 depth = 1;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 1;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional int32 start_page = 2;
  bool has_start_page() const;
  void clear_start_page();
  static const int kStartPageFieldNumber = 2;
  ::google::protobuf::int32 start_page() const;
  void set_start_page(::google::protobuf::int32 value);

  // optional int32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional string filter = 4;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 4;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // repeated string forbidden_uris = 5;
  int forbidden_uris_size() const;
  void clear_forbidden_uris();
  static const int kForbiddenUrisFieldNumber = 5;
  const ::std::string& forbidden_uris(int index) const;
  ::std::string* mutable_forbidden_uris(int index);
  void set_forbidden_uris(int index, const ::std::string& value);
  void set_forbidden_uris(int index, const char* value);
  void set_forbidden_uris(int index, const char* value, size_t size);
  ::std::string* add_forbidden_uris();
  void add_forbidden_uris(const ::std::string& value);
  void add_forbidden_uris(const char* value);
  void add_forbidden_uris(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& forbidden_uris() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_forbidden_uris();

  // @@protoc_insertion_point(class_scope:pbnavitia.EquipmentReportsRequest)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_start_page();
  inline void clear_has_start_page();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_filter();
  inline void clear_has_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 start_page_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> forbidden_uris_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static EquipmentReportsRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CalendarsRequest

// optional string start_date = 1;
inline bool CalendarsRequest::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalendarsRequest::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalendarsRequest::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalendarsRequest::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_date();
}
inline const ::std::string& CalendarsRequest::start_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.start_date)
  return start_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarsRequest::set_start_date(const ::std::string& value) {
  set_has_start_date();
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.start_date)
}
inline void CalendarsRequest::set_start_date(const char* value) {
  set_has_start_date();
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarsRequest.start_date)
}
inline void CalendarsRequest::set_start_date(const char* value, size_t size) {
  set_has_start_date();
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarsRequest.start_date)
}
inline ::std::string* CalendarsRequest::mutable_start_date() {
  set_has_start_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarsRequest.start_date)
  return start_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarsRequest::release_start_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarsRequest.start_date)
  clear_has_start_date();
  return start_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarsRequest::set_allocated_start_date(::std::string* start_date) {
  if (start_date != NULL) {
    set_has_start_date();
  } else {
    clear_has_start_date();
  }
  start_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarsRequest.start_date)
}

// optional string end_date = 2;
inline bool CalendarsRequest::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalendarsRequest::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalendarsRequest::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalendarsRequest::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_date();
}
inline const ::std::string& CalendarsRequest::end_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.end_date)
  return end_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarsRequest::set_end_date(const ::std::string& value) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.end_date)
}
inline void CalendarsRequest::set_end_date(const char* value) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarsRequest.end_date)
}
inline void CalendarsRequest::set_end_date(const char* value, size_t size) {
  set_has_end_date();
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarsRequest.end_date)
}
inline ::std::string* CalendarsRequest::mutable_end_date() {
  set_has_end_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarsRequest.end_date)
  return end_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarsRequest::release_end_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarsRequest.end_date)
  clear_has_end_date();
  return end_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarsRequest::set_allocated_end_date(::std::string* end_date) {
  if (end_date != NULL) {
    set_has_end_date();
  } else {
    clear_has_end_date();
  }
  end_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarsRequest.end_date)
}

// optional int32 depth = 3;
inline bool CalendarsRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CalendarsRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CalendarsRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CalendarsRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 CalendarsRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.depth)
  return depth_;
}
inline void CalendarsRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.depth)
}

// optional int32 start_page = 4;
inline bool CalendarsRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CalendarsRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CalendarsRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CalendarsRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
inline ::google::protobuf::int32 CalendarsRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.start_page)
  return start_page_;
}
inline void CalendarsRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.start_page)
}

// optional int32 count = 5;
inline bool CalendarsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CalendarsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CalendarsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CalendarsRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CalendarsRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.count)
  return count_;
}
inline void CalendarsRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.count)
}

// optional string filter = 6;
inline bool CalendarsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CalendarsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CalendarsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CalendarsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
inline const ::std::string& CalendarsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.filter)
}
inline void CalendarsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarsRequest.filter)
}
inline void CalendarsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarsRequest.filter)
}
inline ::std::string* CalendarsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarsRequest.filter)
}

// repeated string forbidden_uris = 7;
inline int CalendarsRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
inline void CalendarsRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
inline const ::std::string& CalendarsRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarsRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
inline ::std::string* CalendarsRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarsRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
inline void CalendarsRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarsRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
inline void CalendarsRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarsRequest.forbidden_uris)
}
inline void CalendarsRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarsRequest.forbidden_uris)
}
inline ::std::string* CalendarsRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.CalendarsRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
inline void CalendarsRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.CalendarsRequest.forbidden_uris)
}
inline void CalendarsRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.CalendarsRequest.forbidden_uris)
}
inline void CalendarsRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.CalendarsRequest.forbidden_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CalendarsRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.CalendarsRequest.forbidden_uris)
  return forbidden_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CalendarsRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.CalendarsRequest.forbidden_uris)
  return &forbidden_uris_;
}

// -------------------------------------------------------------------

// TrafficReportsRequest

// optional uint64 application_period_begin = 8;
inline bool TrafficReportsRequest::has_application_period_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficReportsRequest::set_has_application_period_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrafficReportsRequest::clear_has_application_period_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrafficReportsRequest::clear_application_period_begin() {
  application_period_begin_ = GOOGLE_ULONGLONG(0);
  clear_has_application_period_begin();
}
inline ::google::protobuf::uint64 TrafficReportsRequest::application_period_begin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.application_period_begin)
  return application_period_begin_;
}
inline void TrafficReportsRequest::set_application_period_begin(::google::protobuf::uint64 value) {
  set_has_application_period_begin();
  application_period_begin_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.application_period_begin)
}

// optional uint64 application_period_end = 9;
inline bool TrafficReportsRequest::has_application_period_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficReportsRequest::set_has_application_period_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrafficReportsRequest::clear_has_application_period_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrafficReportsRequest::clear_application_period_end() {
  application_period_end_ = GOOGLE_ULONGLONG(0);
  clear_has_application_period_end();
}
inline ::google::protobuf::uint64 TrafficReportsRequest::application_period_end() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.application_period_end)
  return application_period_end_;
}
inline void TrafficReportsRequest::set_application_period_end(::google::protobuf::uint64 value) {
  set_has_application_period_end();
  application_period_end_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.application_period_end)
}

// optional uint64 _current_datetime = 10;
inline bool TrafficReportsRequest::has__current_datetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficReportsRequest::set_has__current_datetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrafficReportsRequest::clear_has__current_datetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrafficReportsRequest::clear__current_datetime() {
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has__current_datetime();
}
inline ::google::protobuf::uint64 TrafficReportsRequest::_current_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest._current_datetime)
  return _current_datetime_;
}
inline void TrafficReportsRequest::set__current_datetime(::google::protobuf::uint64 value) {
  set_has__current_datetime();
  _current_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest._current_datetime)
}

// optional int32 depth = 3;
inline bool TrafficReportsRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrafficReportsRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrafficReportsRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrafficReportsRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 TrafficReportsRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.depth)
  return depth_;
}
inline void TrafficReportsRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.depth)
}

// optional int32 start_page = 4;
inline bool TrafficReportsRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrafficReportsRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrafficReportsRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrafficReportsRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
inline ::google::protobuf::int32 TrafficReportsRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.start_page)
  return start_page_;
}
inline void TrafficReportsRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.start_page)
}

// optional int32 count = 5;
inline bool TrafficReportsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrafficReportsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrafficReportsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrafficReportsRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 TrafficReportsRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.count)
  return count_;
}
inline void TrafficReportsRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.count)
}

// optional string filter = 6;
inline bool TrafficReportsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrafficReportsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrafficReportsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrafficReportsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
inline const ::std::string& TrafficReportsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficReportsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.filter)
}
inline void TrafficReportsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.TrafficReportsRequest.filter)
}
inline void TrafficReportsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.TrafficReportsRequest.filter)
}
inline ::std::string* TrafficReportsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReportsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficReportsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.TrafficReportsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficReportsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.TrafficReportsRequest.filter)
}

// repeated string forbidden_uris = 7;
inline int TrafficReportsRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
inline void TrafficReportsRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
inline const ::std::string& TrafficReportsRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
inline ::std::string* TrafficReportsRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
inline void TrafficReportsRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.TrafficReportsRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
inline void TrafficReportsRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
inline void TrafficReportsRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
inline ::std::string* TrafficReportsRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
inline void TrafficReportsRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
inline void TrafficReportsRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
inline void TrafficReportsRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.TrafficReportsRequest.forbidden_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrafficReportsRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return forbidden_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrafficReportsRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.TrafficReportsRequest.forbidden_uris)
  return &forbidden_uris_;
}

// -------------------------------------------------------------------

// LineReportsRequest

// optional int32 depth = 1;
inline bool LineReportsRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineReportsRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineReportsRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineReportsRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 LineReportsRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.depth)
  return depth_;
}
inline void LineReportsRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.depth)
}

// optional int32 start_page = 2;
inline bool LineReportsRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineReportsRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineReportsRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineReportsRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
inline ::google::protobuf::int32 LineReportsRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.start_page)
  return start_page_;
}
inline void LineReportsRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.start_page)
}

// optional int32 count = 3;
inline bool LineReportsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineReportsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineReportsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineReportsRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 LineReportsRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.count)
  return count_;
}
inline void LineReportsRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.count)
}

// optional string filter = 4;
inline bool LineReportsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineReportsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineReportsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineReportsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
inline const ::std::string& LineReportsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineReportsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.filter)
}
inline void LineReportsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LineReportsRequest.filter)
}
inline void LineReportsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LineReportsRequest.filter)
}
inline ::std::string* LineReportsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineReportsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LineReportsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineReportsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineReportsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineReportsRequest.filter)
}

// repeated string forbidden_uris = 5;
inline int LineReportsRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
inline void LineReportsRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
inline const ::std::string& LineReportsRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
inline ::std::string* LineReportsRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineReportsRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
inline void LineReportsRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
inline void LineReportsRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.LineReportsRequest.forbidden_uris)
}
inline void LineReportsRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LineReportsRequest.forbidden_uris)
}
inline ::std::string* LineReportsRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.LineReportsRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
inline void LineReportsRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.LineReportsRequest.forbidden_uris)
}
inline void LineReportsRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.LineReportsRequest.forbidden_uris)
}
inline void LineReportsRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.LineReportsRequest.forbidden_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LineReportsRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineReportsRequest.forbidden_uris)
  return forbidden_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LineReportsRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineReportsRequest.forbidden_uris)
  return &forbidden_uris_;
}

// optional uint64 since_datetime = 6;
inline bool LineReportsRequest::has_since_datetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LineReportsRequest::set_has_since_datetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LineReportsRequest::clear_has_since_datetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LineReportsRequest::clear_since_datetime() {
  since_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_since_datetime();
}
inline ::google::protobuf::uint64 LineReportsRequest::since_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.since_datetime)
  return since_datetime_;
}
inline void LineReportsRequest::set_since_datetime(::google::protobuf::uint64 value) {
  set_has_since_datetime();
  since_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.since_datetime)
}

// optional uint64 until_datetime = 7;
inline bool LineReportsRequest::has_until_datetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LineReportsRequest::set_has_until_datetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LineReportsRequest::clear_has_until_datetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LineReportsRequest::clear_until_datetime() {
  until_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_until_datetime();
}
inline ::google::protobuf::uint64 LineReportsRequest::until_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReportsRequest.until_datetime)
  return until_datetime_;
}
inline void LineReportsRequest::set_until_datetime(::google::protobuf::uint64 value) {
  set_has_until_datetime();
  until_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LineReportsRequest.until_datetime)
}

// -------------------------------------------------------------------

// PlacesRequest

// required string q = 1;
inline bool PlacesRequest::has_q() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlacesRequest::set_has_q() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlacesRequest::clear_has_q() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlacesRequest::clear_q() {
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_q();
}
inline const ::std::string& PlacesRequest::q() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.q)
  return q_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacesRequest::set_q(const ::std::string& value) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.q)
}
inline void PlacesRequest::set_q(const char* value) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlacesRequest.q)
}
inline void PlacesRequest::set_q(const char* value, size_t size) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlacesRequest.q)
}
inline ::std::string* PlacesRequest::mutable_q() {
  set_has_q();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlacesRequest.q)
  return q_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlacesRequest::release_q() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlacesRequest.q)
  clear_has_q();
  return q_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacesRequest::set_allocated_q(::std::string* q) {
  if (q != NULL) {
    set_has_q();
  } else {
    clear_has_q();
  }
  q_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), q);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlacesRequest.q)
}

// repeated .pbnavitia.NavitiaType types = 2;
inline int PlacesRequest::types_size() const {
  return types_.size();
}
inline void PlacesRequest::clear_types() {
  types_.Clear();
}
inline ::pbnavitia::NavitiaType PlacesRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.types)
  return static_cast< ::pbnavitia::NavitiaType >(types_.Get(index));
}
inline void PlacesRequest::set_types(int index, ::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.types)
}
inline void PlacesRequest::add_types(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PlacesRequest.types)
}
inline const ::google::protobuf::RepeatedField<int>&
PlacesRequest::types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PlacesRequest.types)
  return types_;
}
inline ::google::protobuf::RepeatedField<int>*
PlacesRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PlacesRequest.types)
  return &types_;
}

// required int32 depth = 3;
inline bool PlacesRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlacesRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlacesRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlacesRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 PlacesRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.depth)
  return depth_;
}
inline void PlacesRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.depth)
}

// required int32 count = 4;
inline bool PlacesRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlacesRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlacesRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlacesRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PlacesRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.count)
  return count_;
}
inline void PlacesRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.count)
}

// repeated string admin_uris = 5;
inline int PlacesRequest::admin_uris_size() const {
  return admin_uris_.size();
}
inline void PlacesRequest::clear_admin_uris() {
  admin_uris_.Clear();
}
inline const ::std::string& PlacesRequest::admin_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.admin_uris)
  return admin_uris_.Get(index);
}
inline ::std::string* PlacesRequest::mutable_admin_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlacesRequest.admin_uris)
  return admin_uris_.Mutable(index);
}
inline void PlacesRequest::set_admin_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.admin_uris)
  admin_uris_.Mutable(index)->assign(value);
}
inline void PlacesRequest::set_admin_uris(int index, const char* value) {
  admin_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlacesRequest.admin_uris)
}
inline void PlacesRequest::set_admin_uris(int index, const char* value, size_t size) {
  admin_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlacesRequest.admin_uris)
}
inline ::std::string* PlacesRequest::add_admin_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PlacesRequest.admin_uris)
  return admin_uris_.Add();
}
inline void PlacesRequest::add_admin_uris(const ::std::string& value) {
  admin_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PlacesRequest.admin_uris)
}
inline void PlacesRequest::add_admin_uris(const char* value) {
  admin_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PlacesRequest.admin_uris)
}
inline void PlacesRequest::add_admin_uris(const char* value, size_t size) {
  admin_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PlacesRequest.admin_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlacesRequest::admin_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PlacesRequest.admin_uris)
  return admin_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlacesRequest::mutable_admin_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PlacesRequest.admin_uris)
  return &admin_uris_;
}

// optional int32 search_type = 6;
inline bool PlacesRequest::has_search_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlacesRequest::set_has_search_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlacesRequest::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlacesRequest::clear_search_type() {
  search_type_ = 0;
  clear_has_search_type();
}
inline ::google::protobuf::int32 PlacesRequest::search_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.search_type)
  return search_type_;
}
inline void PlacesRequest::set_search_type(::google::protobuf::int32 value) {
  set_has_search_type();
  search_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.search_type)
}

// optional float main_stop_area_weight_factor = 7 [default = 1];
inline bool PlacesRequest::has_main_stop_area_weight_factor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlacesRequest::set_has_main_stop_area_weight_factor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlacesRequest::clear_has_main_stop_area_weight_factor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlacesRequest::clear_main_stop_area_weight_factor() {
  main_stop_area_weight_factor_ = 1;
  clear_has_main_stop_area_weight_factor();
}
inline float PlacesRequest::main_stop_area_weight_factor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesRequest.main_stop_area_weight_factor)
  return main_stop_area_weight_factor_;
}
inline void PlacesRequest::set_main_stop_area_weight_factor(float value) {
  set_has_main_stop_area_weight_factor();
  main_stop_area_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesRequest.main_stop_area_weight_factor)
}

// -------------------------------------------------------------------

// NextStopTimeRequest

// required string departure_filter = 1;
inline bool NextStopTimeRequest::has_departure_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NextStopTimeRequest::set_has_departure_filter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NextStopTimeRequest::clear_has_departure_filter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NextStopTimeRequest::clear_departure_filter() {
  departure_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_departure_filter();
}
inline const ::std::string& NextStopTimeRequest::departure_filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.departure_filter)
  return departure_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NextStopTimeRequest::set_departure_filter(const ::std::string& value) {
  set_has_departure_filter();
  departure_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.departure_filter)
}
inline void NextStopTimeRequest::set_departure_filter(const char* value) {
  set_has_departure_filter();
  departure_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NextStopTimeRequest.departure_filter)
}
inline void NextStopTimeRequest::set_departure_filter(const char* value, size_t size) {
  set_has_departure_filter();
  departure_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NextStopTimeRequest.departure_filter)
}
inline ::std::string* NextStopTimeRequest::mutable_departure_filter() {
  set_has_departure_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NextStopTimeRequest.departure_filter)
  return departure_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NextStopTimeRequest::release_departure_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.NextStopTimeRequest.departure_filter)
  clear_has_departure_filter();
  return departure_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NextStopTimeRequest::set_allocated_departure_filter(::std::string* departure_filter) {
  if (departure_filter != NULL) {
    set_has_departure_filter();
  } else {
    clear_has_departure_filter();
  }
  departure_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), departure_filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NextStopTimeRequest.departure_filter)
}

// required string arrival_filter = 2;
inline bool NextStopTimeRequest::has_arrival_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NextStopTimeRequest::set_has_arrival_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NextStopTimeRequest::clear_has_arrival_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NextStopTimeRequest::clear_arrival_filter() {
  arrival_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_arrival_filter();
}
inline const ::std::string& NextStopTimeRequest::arrival_filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.arrival_filter)
  return arrival_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NextStopTimeRequest::set_arrival_filter(const ::std::string& value) {
  set_has_arrival_filter();
  arrival_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.arrival_filter)
}
inline void NextStopTimeRequest::set_arrival_filter(const char* value) {
  set_has_arrival_filter();
  arrival_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NextStopTimeRequest.arrival_filter)
}
inline void NextStopTimeRequest::set_arrival_filter(const char* value, size_t size) {
  set_has_arrival_filter();
  arrival_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NextStopTimeRequest.arrival_filter)
}
inline ::std::string* NextStopTimeRequest::mutable_arrival_filter() {
  set_has_arrival_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NextStopTimeRequest.arrival_filter)
  return arrival_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NextStopTimeRequest::release_arrival_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.NextStopTimeRequest.arrival_filter)
  clear_has_arrival_filter();
  return arrival_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NextStopTimeRequest::set_allocated_arrival_filter(::std::string* arrival_filter) {
  if (arrival_filter != NULL) {
    set_has_arrival_filter();
  } else {
    clear_has_arrival_filter();
  }
  arrival_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arrival_filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NextStopTimeRequest.arrival_filter)
}

// optional uint64 from_datetime = 3;
inline bool NextStopTimeRequest::has_from_datetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NextStopTimeRequest::set_has_from_datetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NextStopTimeRequest::clear_has_from_datetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NextStopTimeRequest::clear_from_datetime() {
  from_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_from_datetime();
}
inline ::google::protobuf::uint64 NextStopTimeRequest::from_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.from_datetime)
  return from_datetime_;
}
inline void NextStopTimeRequest::set_from_datetime(::google::protobuf::uint64 value) {
  set_has_from_datetime();
  from_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.from_datetime)
}

// required int32 duration = 4;
inline bool NextStopTimeRequest::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NextStopTimeRequest::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NextStopTimeRequest::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NextStopTimeRequest::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 NextStopTimeRequest::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.duration)
  return duration_;
}
inline void NextStopTimeRequest::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.duration)
}

// required int32 depth = 5;
inline bool NextStopTimeRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NextStopTimeRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NextStopTimeRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NextStopTimeRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 NextStopTimeRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.depth)
  return depth_;
}
inline void NextStopTimeRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.depth)
}

// required int32 nb_stoptimes = 7;
inline bool NextStopTimeRequest::has_nb_stoptimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NextStopTimeRequest::set_has_nb_stoptimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NextStopTimeRequest::clear_has_nb_stoptimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NextStopTimeRequest::clear_nb_stoptimes() {
  nb_stoptimes_ = 0;
  clear_has_nb_stoptimes();
}
inline ::google::protobuf::int32 NextStopTimeRequest::nb_stoptimes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.nb_stoptimes)
  return nb_stoptimes_;
}
inline void NextStopTimeRequest::set_nb_stoptimes(::google::protobuf::int32 value) {
  set_has_nb_stoptimes();
  nb_stoptimes_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.nb_stoptimes)
}

// optional int32 interface_version = 8;
inline bool NextStopTimeRequest::has_interface_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NextStopTimeRequest::set_has_interface_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NextStopTimeRequest::clear_has_interface_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NextStopTimeRequest::clear_interface_version() {
  interface_version_ = 0;
  clear_has_interface_version();
}
inline ::google::protobuf::int32 NextStopTimeRequest::interface_version() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.interface_version)
  return interface_version_;
}
inline void NextStopTimeRequest::set_interface_version(::google::protobuf::int32 value) {
  set_has_interface_version();
  interface_version_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.interface_version)
}

// required int32 start_page = 9;
inline bool NextStopTimeRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NextStopTimeRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NextStopTimeRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NextStopTimeRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
inline ::google::protobuf::int32 NextStopTimeRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.start_page)
  return start_page_;
}
inline void NextStopTimeRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.start_page)
}

// required int32 count = 10;
inline bool NextStopTimeRequest::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NextStopTimeRequest::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NextStopTimeRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NextStopTimeRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 NextStopTimeRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.count)
  return count_;
}
inline void NextStopTimeRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.count)
}

// optional int32 max_date_times = 11;
inline bool NextStopTimeRequest::has_max_date_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NextStopTimeRequest::set_has_max_date_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NextStopTimeRequest::clear_has_max_date_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NextStopTimeRequest::clear_max_date_times() {
  max_date_times_ = 0;
  clear_has_max_date_times();
}
inline ::google::protobuf::int32 NextStopTimeRequest::max_date_times() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.max_date_times)
  return max_date_times_;
}
inline void NextStopTimeRequest::set_max_date_times(::google::protobuf::int32 value) {
  set_has_max_date_times();
  max_date_times_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.max_date_times)
}

// repeated string forbidden_uri = 12;
inline int NextStopTimeRequest::forbidden_uri_size() const {
  return forbidden_uri_.size();
}
inline void NextStopTimeRequest::clear_forbidden_uri() {
  forbidden_uri_.Clear();
}
inline const ::std::string& NextStopTimeRequest::forbidden_uri(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return forbidden_uri_.Get(index);
}
inline ::std::string* NextStopTimeRequest::mutable_forbidden_uri(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return forbidden_uri_.Mutable(index);
}
inline void NextStopTimeRequest::set_forbidden_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.forbidden_uri)
  forbidden_uri_.Mutable(index)->assign(value);
}
inline void NextStopTimeRequest::set_forbidden_uri(int index, const char* value) {
  forbidden_uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
inline void NextStopTimeRequest::set_forbidden_uri(int index, const char* value, size_t size) {
  forbidden_uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
inline ::std::string* NextStopTimeRequest::add_forbidden_uri() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return forbidden_uri_.Add();
}
inline void NextStopTimeRequest::add_forbidden_uri(const ::std::string& value) {
  forbidden_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
inline void NextStopTimeRequest::add_forbidden_uri(const char* value) {
  forbidden_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
inline void NextStopTimeRequest::add_forbidden_uri(const char* value, size_t size) {
  forbidden_uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.NextStopTimeRequest.forbidden_uri)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NextStopTimeRequest::forbidden_uri() const {
  // @@protoc_insertion_point(field_list:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return forbidden_uri_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NextStopTimeRequest::mutable_forbidden_uri() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.NextStopTimeRequest.forbidden_uri)
  return &forbidden_uri_;
}

// optional string calendar = 13;
inline bool NextStopTimeRequest::has_calendar() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NextStopTimeRequest::set_has_calendar() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NextStopTimeRequest::clear_has_calendar() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NextStopTimeRequest::clear_calendar() {
  calendar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_calendar();
}
inline const ::std::string& NextStopTimeRequest::calendar() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.calendar)
  return calendar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NextStopTimeRequest::set_calendar(const ::std::string& value) {
  set_has_calendar();
  calendar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.calendar)
}
inline void NextStopTimeRequest::set_calendar(const char* value) {
  set_has_calendar();
  calendar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NextStopTimeRequest.calendar)
}
inline void NextStopTimeRequest::set_calendar(const char* value, size_t size) {
  set_has_calendar();
  calendar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NextStopTimeRequest.calendar)
}
inline ::std::string* NextStopTimeRequest::mutable_calendar() {
  set_has_calendar();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NextStopTimeRequest.calendar)
  return calendar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NextStopTimeRequest::release_calendar() {
  // @@protoc_insertion_point(field_release:pbnavitia.NextStopTimeRequest.calendar)
  clear_has_calendar();
  return calendar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NextStopTimeRequest::set_allocated_calendar(::std::string* calendar) {
  if (calendar != NULL) {
    set_has_calendar();
  } else {
    clear_has_calendar();
  }
  calendar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calendar);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NextStopTimeRequest.calendar)
}

// optional bool show_codes = 14;
inline bool NextStopTimeRequest::has_show_codes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NextStopTimeRequest::set_has_show_codes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NextStopTimeRequest::clear_has_show_codes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NextStopTimeRequest::clear_show_codes() {
  show_codes_ = false;
  clear_has_show_codes();
}
inline bool NextStopTimeRequest::show_codes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.show_codes)
  return show_codes_;
}
inline void NextStopTimeRequest::set_show_codes(bool value) {
  set_has_show_codes();
  show_codes_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.show_codes)
}

// optional uint64 until_datetime = 15;
inline bool NextStopTimeRequest::has_until_datetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NextStopTimeRequest::set_has_until_datetime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NextStopTimeRequest::clear_has_until_datetime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NextStopTimeRequest::clear_until_datetime() {
  until_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_until_datetime();
}
inline ::google::protobuf::uint64 NextStopTimeRequest::until_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.until_datetime)
  return until_datetime_;
}
inline void NextStopTimeRequest::set_until_datetime(::google::protobuf::uint64 value) {
  set_has_until_datetime();
  until_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.until_datetime)
}

// optional uint64 _current_datetime = 16;
inline bool NextStopTimeRequest::has__current_datetime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NextStopTimeRequest::set_has__current_datetime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NextStopTimeRequest::clear_has__current_datetime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NextStopTimeRequest::clear__current_datetime() {
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has__current_datetime();
}
inline ::google::protobuf::uint64 NextStopTimeRequest::_current_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest._current_datetime)
  return _current_datetime_;
}
inline void NextStopTimeRequest::set__current_datetime(::google::protobuf::uint64 value) {
  set_has__current_datetime();
  _current_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest._current_datetime)
}

// optional .pbnavitia.RTLevel realtime_level = 17;
inline bool NextStopTimeRequest::has_realtime_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NextStopTimeRequest::set_has_realtime_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NextStopTimeRequest::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NextStopTimeRequest::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
inline ::pbnavitia::RTLevel NextStopTimeRequest::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
inline void NextStopTimeRequest::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.realtime_level)
}

// optional int32 items_per_schedule = 18;
inline bool NextStopTimeRequest::has_items_per_schedule() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NextStopTimeRequest::set_has_items_per_schedule() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NextStopTimeRequest::clear_has_items_per_schedule() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NextStopTimeRequest::clear_items_per_schedule() {
  items_per_schedule_ = 0;
  clear_has_items_per_schedule();
}
inline ::google::protobuf::int32 NextStopTimeRequest::items_per_schedule() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.items_per_schedule)
  return items_per_schedule_;
}
inline void NextStopTimeRequest::set_items_per_schedule(::google::protobuf::int32 value) {
  set_has_items_per_schedule();
  items_per_schedule_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.items_per_schedule)
}

// optional bool disable_geojson = 19;
inline bool NextStopTimeRequest::has_disable_geojson() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NextStopTimeRequest::set_has_disable_geojson() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NextStopTimeRequest::clear_has_disable_geojson() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NextStopTimeRequest::clear_disable_geojson() {
  disable_geojson_ = false;
  clear_has_disable_geojson();
}
inline bool NextStopTimeRequest::disable_geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NextStopTimeRequest.disable_geojson)
  return disable_geojson_;
}
inline void NextStopTimeRequest::set_disable_geojson(bool value) {
  set_has_disable_geojson();
  disable_geojson_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NextStopTimeRequest.disable_geojson)
}

// -------------------------------------------------------------------

// StreetNetworkParams

// optional string origin_mode = 1;
inline bool StreetNetworkParams::has_origin_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreetNetworkParams::set_has_origin_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreetNetworkParams::clear_has_origin_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreetNetworkParams::clear_origin_mode() {
  origin_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin_mode();
}
inline const ::std::string& StreetNetworkParams::origin_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.origin_mode)
  return origin_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkParams::set_origin_mode(const ::std::string& value) {
  set_has_origin_mode();
  origin_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.origin_mode)
}
inline void StreetNetworkParams::set_origin_mode(const char* value) {
  set_has_origin_mode();
  origin_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkParams.origin_mode)
}
inline void StreetNetworkParams::set_origin_mode(const char* value, size_t size) {
  set_has_origin_mode();
  origin_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkParams.origin_mode)
}
inline ::std::string* StreetNetworkParams::mutable_origin_mode() {
  set_has_origin_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkParams.origin_mode)
  return origin_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreetNetworkParams::release_origin_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkParams.origin_mode)
  clear_has_origin_mode();
  return origin_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkParams::set_allocated_origin_mode(::std::string* origin_mode) {
  if (origin_mode != NULL) {
    set_has_origin_mode();
  } else {
    clear_has_origin_mode();
  }
  origin_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkParams.origin_mode)
}

// optional string destination_mode = 2;
inline bool StreetNetworkParams::has_destination_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreetNetworkParams::set_has_destination_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreetNetworkParams::clear_has_destination_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreetNetworkParams::clear_destination_mode() {
  destination_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_mode();
}
inline const ::std::string& StreetNetworkParams::destination_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.destination_mode)
  return destination_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkParams::set_destination_mode(const ::std::string& value) {
  set_has_destination_mode();
  destination_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.destination_mode)
}
inline void StreetNetworkParams::set_destination_mode(const char* value) {
  set_has_destination_mode();
  destination_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkParams.destination_mode)
}
inline void StreetNetworkParams::set_destination_mode(const char* value, size_t size) {
  set_has_destination_mode();
  destination_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkParams.destination_mode)
}
inline ::std::string* StreetNetworkParams::mutable_destination_mode() {
  set_has_destination_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkParams.destination_mode)
  return destination_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreetNetworkParams::release_destination_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkParams.destination_mode)
  clear_has_destination_mode();
  return destination_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkParams::set_allocated_destination_mode(::std::string* destination_mode) {
  if (destination_mode != NULL) {
    set_has_destination_mode();
  } else {
    clear_has_destination_mode();
  }
  destination_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkParams.destination_mode)
}

// optional double walking_speed = 3;
inline bool StreetNetworkParams::has_walking_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreetNetworkParams::set_has_walking_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreetNetworkParams::clear_has_walking_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreetNetworkParams::clear_walking_speed() {
  walking_speed_ = 0;
  clear_has_walking_speed();
}
inline double StreetNetworkParams::walking_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.walking_speed)
  return walking_speed_;
}
inline void StreetNetworkParams::set_walking_speed(double value) {
  set_has_walking_speed();
  walking_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.walking_speed)
}

// optional double bike_speed = 5;
inline bool StreetNetworkParams::has_bike_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreetNetworkParams::set_has_bike_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreetNetworkParams::clear_has_bike_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreetNetworkParams::clear_bike_speed() {
  bike_speed_ = 0;
  clear_has_bike_speed();
}
inline double StreetNetworkParams::bike_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.bike_speed)
  return bike_speed_;
}
inline void StreetNetworkParams::set_bike_speed(double value) {
  set_has_bike_speed();
  bike_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.bike_speed)
}

// optional double car_speed = 7;
inline bool StreetNetworkParams::has_car_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreetNetworkParams::set_has_car_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreetNetworkParams::clear_has_car_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreetNetworkParams::clear_car_speed() {
  car_speed_ = 0;
  clear_has_car_speed();
}
inline double StreetNetworkParams::car_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.car_speed)
  return car_speed_;
}
inline void StreetNetworkParams::set_car_speed(double value) {
  set_has_car_speed();
  car_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.car_speed)
}

// optional double bss_speed = 9;
inline bool StreetNetworkParams::has_bss_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StreetNetworkParams::set_has_bss_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StreetNetworkParams::clear_has_bss_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StreetNetworkParams::clear_bss_speed() {
  bss_speed_ = 0;
  clear_has_bss_speed();
}
inline double StreetNetworkParams::bss_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.bss_speed)
  return bss_speed_;
}
inline void StreetNetworkParams::set_bss_speed(double value) {
  set_has_bss_speed();
  bss_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.bss_speed)
}

// optional string origin_filter = 11;
inline bool StreetNetworkParams::has_origin_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StreetNetworkParams::set_has_origin_filter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StreetNetworkParams::clear_has_origin_filter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StreetNetworkParams::clear_origin_filter() {
  origin_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin_filter();
}
inline const ::std::string& StreetNetworkParams::origin_filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.origin_filter)
  return origin_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkParams::set_origin_filter(const ::std::string& value) {
  set_has_origin_filter();
  origin_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.origin_filter)
}
inline void StreetNetworkParams::set_origin_filter(const char* value) {
  set_has_origin_filter();
  origin_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkParams.origin_filter)
}
inline void StreetNetworkParams::set_origin_filter(const char* value, size_t size) {
  set_has_origin_filter();
  origin_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkParams.origin_filter)
}
inline ::std::string* StreetNetworkParams::mutable_origin_filter() {
  set_has_origin_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkParams.origin_filter)
  return origin_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreetNetworkParams::release_origin_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkParams.origin_filter)
  clear_has_origin_filter();
  return origin_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkParams::set_allocated_origin_filter(::std::string* origin_filter) {
  if (origin_filter != NULL) {
    set_has_origin_filter();
  } else {
    clear_has_origin_filter();
  }
  origin_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkParams.origin_filter)
}

// optional string destination_filter = 12;
inline bool StreetNetworkParams::has_destination_filter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StreetNetworkParams::set_has_destination_filter() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StreetNetworkParams::clear_has_destination_filter() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StreetNetworkParams::clear_destination_filter() {
  destination_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_filter();
}
inline const ::std::string& StreetNetworkParams::destination_filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.destination_filter)
  return destination_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkParams::set_destination_filter(const ::std::string& value) {
  set_has_destination_filter();
  destination_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.destination_filter)
}
inline void StreetNetworkParams::set_destination_filter(const char* value) {
  set_has_destination_filter();
  destination_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkParams.destination_filter)
}
inline void StreetNetworkParams::set_destination_filter(const char* value, size_t size) {
  set_has_destination_filter();
  destination_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkParams.destination_filter)
}
inline ::std::string* StreetNetworkParams::mutable_destination_filter() {
  set_has_destination_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkParams.destination_filter)
  return destination_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreetNetworkParams::release_destination_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkParams.destination_filter)
  clear_has_destination_filter();
  return destination_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkParams::set_allocated_destination_filter(::std::string* destination_filter) {
  if (destination_filter != NULL) {
    set_has_destination_filter();
  } else {
    clear_has_destination_filter();
  }
  destination_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkParams.destination_filter)
}

// optional int32 max_walking_duration_to_pt = 13;
inline bool StreetNetworkParams::has_max_walking_duration_to_pt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StreetNetworkParams::set_has_max_walking_duration_to_pt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StreetNetworkParams::clear_has_max_walking_duration_to_pt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StreetNetworkParams::clear_max_walking_duration_to_pt() {
  max_walking_duration_to_pt_ = 0;
  clear_has_max_walking_duration_to_pt();
}
inline ::google::protobuf::int32 StreetNetworkParams::max_walking_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_walking_duration_to_pt)
  return max_walking_duration_to_pt_;
}
inline void StreetNetworkParams::set_max_walking_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_walking_duration_to_pt();
  max_walking_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_walking_duration_to_pt)
}

// optional int32 max_bike_duration_to_pt = 14;
inline bool StreetNetworkParams::has_max_bike_duration_to_pt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StreetNetworkParams::set_has_max_bike_duration_to_pt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StreetNetworkParams::clear_has_max_bike_duration_to_pt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StreetNetworkParams::clear_max_bike_duration_to_pt() {
  max_bike_duration_to_pt_ = 0;
  clear_has_max_bike_duration_to_pt();
}
inline ::google::protobuf::int32 StreetNetworkParams::max_bike_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_bike_duration_to_pt)
  return max_bike_duration_to_pt_;
}
inline void StreetNetworkParams::set_max_bike_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_bike_duration_to_pt();
  max_bike_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_bike_duration_to_pt)
}

// optional int32 max_bss_duration_to_pt = 15;
inline bool StreetNetworkParams::has_max_bss_duration_to_pt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StreetNetworkParams::set_has_max_bss_duration_to_pt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StreetNetworkParams::clear_has_max_bss_duration_to_pt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StreetNetworkParams::clear_max_bss_duration_to_pt() {
  max_bss_duration_to_pt_ = 0;
  clear_has_max_bss_duration_to_pt();
}
inline ::google::protobuf::int32 StreetNetworkParams::max_bss_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_bss_duration_to_pt)
  return max_bss_duration_to_pt_;
}
inline void StreetNetworkParams::set_max_bss_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_bss_duration_to_pt();
  max_bss_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_bss_duration_to_pt)
}

// optional int32 max_car_duration_to_pt = 16;
inline bool StreetNetworkParams::has_max_car_duration_to_pt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StreetNetworkParams::set_has_max_car_duration_to_pt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StreetNetworkParams::clear_has_max_car_duration_to_pt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StreetNetworkParams::clear_max_car_duration_to_pt() {
  max_car_duration_to_pt_ = 0;
  clear_has_max_car_duration_to_pt();
}
inline ::google::protobuf::int32 StreetNetworkParams::max_car_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_car_duration_to_pt)
  return max_car_duration_to_pt_;
}
inline void StreetNetworkParams::set_max_car_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_car_duration_to_pt();
  max_car_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_car_duration_to_pt)
}

// optional bool enable_direct_path = 17 [default = true];
inline bool StreetNetworkParams::has_enable_direct_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StreetNetworkParams::set_has_enable_direct_path() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StreetNetworkParams::clear_has_enable_direct_path() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StreetNetworkParams::clear_enable_direct_path() {
  enable_direct_path_ = true;
  clear_has_enable_direct_path();
}
inline bool StreetNetworkParams::enable_direct_path() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.enable_direct_path)
  return enable_direct_path_;
}
inline void StreetNetworkParams::set_enable_direct_path(bool value) {
  set_has_enable_direct_path();
  enable_direct_path_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.enable_direct_path)
}

// optional double car_no_park_speed = 18;
inline bool StreetNetworkParams::has_car_no_park_speed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StreetNetworkParams::set_has_car_no_park_speed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StreetNetworkParams::clear_has_car_no_park_speed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StreetNetworkParams::clear_car_no_park_speed() {
  car_no_park_speed_ = 0;
  clear_has_car_no_park_speed();
}
inline double StreetNetworkParams::car_no_park_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.car_no_park_speed)
  return car_no_park_speed_;
}
inline void StreetNetworkParams::set_car_no_park_speed(double value) {
  set_has_car_no_park_speed();
  car_no_park_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.car_no_park_speed)
}

// optional int32 max_car_no_park_duration_to_pt = 19;
inline bool StreetNetworkParams::has_max_car_no_park_duration_to_pt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StreetNetworkParams::set_has_max_car_no_park_duration_to_pt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StreetNetworkParams::clear_has_max_car_no_park_duration_to_pt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StreetNetworkParams::clear_max_car_no_park_duration_to_pt() {
  max_car_no_park_duration_to_pt_ = 0;
  clear_has_max_car_no_park_duration_to_pt();
}
inline ::google::protobuf::int32 StreetNetworkParams::max_car_no_park_duration_to_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkParams.max_car_no_park_duration_to_pt)
  return max_car_no_park_duration_to_pt_;
}
inline void StreetNetworkParams::set_max_car_no_park_duration_to_pt(::google::protobuf::int32 value) {
  set_has_max_car_no_park_duration_to_pt();
  max_car_no_park_duration_to_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkParams.max_car_no_park_duration_to_pt)
}

// -------------------------------------------------------------------

// JourneysRequest

// repeated .pbnavitia.LocationContext origin = 1;
inline int JourneysRequest::origin_size() const {
  return origin_.size();
}
inline void JourneysRequest::clear_origin() {
  origin_.Clear();
}
inline const ::pbnavitia::LocationContext& JourneysRequest::origin(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.origin)
  return origin_.Get(index);
}
inline ::pbnavitia::LocationContext* JourneysRequest::mutable_origin(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.origin)
  return origin_.Mutable(index);
}
inline ::pbnavitia::LocationContext* JourneysRequest::add_origin() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.origin)
  return origin_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
JourneysRequest::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.origin)
  return &origin_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
JourneysRequest::origin() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.origin)
  return origin_;
}

// repeated .pbnavitia.LocationContext destination = 2;
inline int JourneysRequest::destination_size() const {
  return destination_.size();
}
inline void JourneysRequest::clear_destination() {
  destination_.Clear();
}
inline const ::pbnavitia::LocationContext& JourneysRequest::destination(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.destination)
  return destination_.Get(index);
}
inline ::pbnavitia::LocationContext* JourneysRequest::mutable_destination(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.destination)
  return destination_.Mutable(index);
}
inline ::pbnavitia::LocationContext* JourneysRequest::add_destination() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.destination)
  return destination_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
JourneysRequest::mutable_destination() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.destination)
  return &destination_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
JourneysRequest::destination() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.destination)
  return destination_;
}

// repeated uint64 datetimes = 3;
inline int JourneysRequest::datetimes_size() const {
  return datetimes_.size();
}
inline void JourneysRequest::clear_datetimes() {
  datetimes_.Clear();
}
inline ::google::protobuf::uint64 JourneysRequest::datetimes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.datetimes)
  return datetimes_.Get(index);
}
inline void JourneysRequest::set_datetimes(int index, ::google::protobuf::uint64 value) {
  datetimes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.datetimes)
}
inline void JourneysRequest::add_datetimes(::google::protobuf::uint64 value) {
  datetimes_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.datetimes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
JourneysRequest::datetimes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.datetimes)
  return datetimes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
JourneysRequest::mutable_datetimes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.datetimes)
  return &datetimes_;
}

// required bool clockwise = 4;
inline bool JourneysRequest::has_clockwise() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JourneysRequest::set_has_clockwise() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JourneysRequest::clear_has_clockwise() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JourneysRequest::clear_clockwise() {
  clockwise_ = false;
  clear_has_clockwise();
}
inline bool JourneysRequest::clockwise() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.clockwise)
  return clockwise_;
}
inline void JourneysRequest::set_clockwise(bool value) {
  set_has_clockwise();
  clockwise_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.clockwise)
}

// repeated string forbidden_uris = 5;
inline int JourneysRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
inline void JourneysRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
inline const ::std::string& JourneysRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
inline ::std::string* JourneysRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
inline void JourneysRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
inline void JourneysRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneysRequest.forbidden_uris)
}
inline void JourneysRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneysRequest.forbidden_uris)
}
inline ::std::string* JourneysRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.JourneysRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
inline void JourneysRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.forbidden_uris)
}
inline void JourneysRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.JourneysRequest.forbidden_uris)
}
inline void JourneysRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.JourneysRequest.forbidden_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JourneysRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.forbidden_uris)
  return forbidden_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JourneysRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.forbidden_uris)
  return &forbidden_uris_;
}

// required int32 max_duration = 6;
inline bool JourneysRequest::has_max_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JourneysRequest::set_has_max_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JourneysRequest::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JourneysRequest::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
inline ::google::protobuf::int32 JourneysRequest::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.max_duration)
  return max_duration_;
}
inline void JourneysRequest::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.max_duration)
}

// required int32 max_transfers = 7;
inline bool JourneysRequest::has_max_transfers() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JourneysRequest::set_has_max_transfers() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JourneysRequest::clear_has_max_transfers() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JourneysRequest::clear_max_transfers() {
  max_transfers_ = 0;
  clear_has_max_transfers();
}
inline ::google::protobuf::int32 JourneysRequest::max_transfers() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.max_transfers)
  return max_transfers_;
}
inline void JourneysRequest::set_max_transfers(::google::protobuf::int32 value) {
  set_has_max_transfers();
  max_transfers_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.max_transfers)
}

// optional .pbnavitia.StreetNetworkParams streetnetwork_params = 8;
inline bool JourneysRequest::has_streetnetwork_params() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JourneysRequest::set_has_streetnetwork_params() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JourneysRequest::clear_has_streetnetwork_params() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JourneysRequest::clear_streetnetwork_params() {
  if (streetnetwork_params_ != NULL) streetnetwork_params_->::pbnavitia::StreetNetworkParams::Clear();
  clear_has_streetnetwork_params();
}
inline const ::pbnavitia::StreetNetworkParams& JourneysRequest::streetnetwork_params() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.streetnetwork_params)
  return streetnetwork_params_ != NULL ? *streetnetwork_params_ : *default_instance_->streetnetwork_params_;
}
inline ::pbnavitia::StreetNetworkParams* JourneysRequest::mutable_streetnetwork_params() {
  set_has_streetnetwork_params();
  if (streetnetwork_params_ == NULL) {
    streetnetwork_params_ = new ::pbnavitia::StreetNetworkParams;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.streetnetwork_params)
  return streetnetwork_params_;
}
inline ::pbnavitia::StreetNetworkParams* JourneysRequest::release_streetnetwork_params() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneysRequest.streetnetwork_params)
  clear_has_streetnetwork_params();
  ::pbnavitia::StreetNetworkParams* temp = streetnetwork_params_;
  streetnetwork_params_ = NULL;
  return temp;
}
inline void JourneysRequest::set_allocated_streetnetwork_params(::pbnavitia::StreetNetworkParams* streetnetwork_params) {
  delete streetnetwork_params_;
  streetnetwork_params_ = streetnetwork_params;
  if (streetnetwork_params) {
    set_has_streetnetwork_params();
  } else {
    clear_has_streetnetwork_params();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneysRequest.streetnetwork_params)
}

// optional bool wheelchair = 9 [default = false];
inline bool JourneysRequest::has_wheelchair() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JourneysRequest::set_has_wheelchair() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JourneysRequest::clear_has_wheelchair() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JourneysRequest::clear_wheelchair() {
  wheelchair_ = false;
  clear_has_wheelchair();
}
inline bool JourneysRequest::wheelchair() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.wheelchair)
  return wheelchair_;
}
inline void JourneysRequest::set_wheelchair(bool value) {
  set_has_wheelchair();
  wheelchair_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.wheelchair)
}

// optional bool show_codes = 11;
inline bool JourneysRequest::has_show_codes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JourneysRequest::set_has_show_codes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JourneysRequest::clear_has_show_codes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JourneysRequest::clear_show_codes() {
  show_codes_ = false;
  clear_has_show_codes();
}
inline bool JourneysRequest::show_codes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.show_codes)
  return show_codes_;
}
inline void JourneysRequest::set_show_codes(bool value) {
  set_has_show_codes();
  show_codes_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.show_codes)
}

// optional bool details = 13;
inline bool JourneysRequest::has_details() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JourneysRequest::set_has_details() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JourneysRequest::clear_has_details() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JourneysRequest::clear_details() {
  details_ = false;
  clear_has_details();
}
inline bool JourneysRequest::details() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.details)
  return details_;
}
inline void JourneysRequest::set_details(bool value) {
  set_has_details();
  details_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.details)
}

// optional .pbnavitia.RTLevel realtime_level = 14;
inline bool JourneysRequest::has_realtime_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JourneysRequest::set_has_realtime_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JourneysRequest::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JourneysRequest::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
inline ::pbnavitia::RTLevel JourneysRequest::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
inline void JourneysRequest::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.realtime_level)
}

// optional int32 max_extra_second_pass = 15 [default = 0];
inline bool JourneysRequest::has_max_extra_second_pass() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void JourneysRequest::set_has_max_extra_second_pass() {
  _has_bits_[0] |= 0x00001000u;
}
inline void JourneysRequest::clear_has_max_extra_second_pass() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void JourneysRequest::clear_max_extra_second_pass() {
  max_extra_second_pass_ = 0;
  clear_has_max_extra_second_pass();
}
inline ::google::protobuf::int32 JourneysRequest::max_extra_second_pass() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.max_extra_second_pass)
  return max_extra_second_pass_;
}
inline void JourneysRequest::set_max_extra_second_pass(::google::protobuf::int32 value) {
  set_has_max_extra_second_pass();
  max_extra_second_pass_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.max_extra_second_pass)
}

// optional int32 walking_transfer_penalty = 16 [default = 120];
inline bool JourneysRequest::has_walking_transfer_penalty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void JourneysRequest::set_has_walking_transfer_penalty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void JourneysRequest::clear_has_walking_transfer_penalty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void JourneysRequest::clear_walking_transfer_penalty() {
  walking_transfer_penalty_ = 120;
  clear_has_walking_transfer_penalty();
}
inline ::google::protobuf::int32 JourneysRequest::walking_transfer_penalty() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.walking_transfer_penalty)
  return walking_transfer_penalty_;
}
inline void JourneysRequest::set_walking_transfer_penalty(::google::protobuf::int32 value) {
  set_has_walking_transfer_penalty();
  walking_transfer_penalty_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.walking_transfer_penalty)
}

// optional int32 direct_path_duration = 17;
inline bool JourneysRequest::has_direct_path_duration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void JourneysRequest::set_has_direct_path_duration() {
  _has_bits_[0] |= 0x00004000u;
}
inline void JourneysRequest::clear_has_direct_path_duration() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void JourneysRequest::clear_direct_path_duration() {
  direct_path_duration_ = 0;
  clear_has_direct_path_duration();
}
inline ::google::protobuf::int32 JourneysRequest::direct_path_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.direct_path_duration)
  return direct_path_duration_;
}
inline void JourneysRequest::set_direct_path_duration(::google::protobuf::int32 value) {
  set_has_direct_path_duration();
  direct_path_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.direct_path_duration)
}

// optional bool bike_in_pt = 18;
inline bool JourneysRequest::has_bike_in_pt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void JourneysRequest::set_has_bike_in_pt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void JourneysRequest::clear_has_bike_in_pt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void JourneysRequest::clear_bike_in_pt() {
  bike_in_pt_ = false;
  clear_has_bike_in_pt();
}
inline bool JourneysRequest::bike_in_pt() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.bike_in_pt)
  return bike_in_pt_;
}
inline void JourneysRequest::set_bike_in_pt(bool value) {
  set_has_bike_in_pt();
  bike_in_pt_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.bike_in_pt)
}

// repeated string allowed_id = 19;
inline int JourneysRequest::allowed_id_size() const {
  return allowed_id_.size();
}
inline void JourneysRequest::clear_allowed_id() {
  allowed_id_.Clear();
}
inline const ::std::string& JourneysRequest::allowed_id(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.allowed_id)
  return allowed_id_.Get(index);
}
inline ::std::string* JourneysRequest::mutable_allowed_id(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.allowed_id)
  return allowed_id_.Mutable(index);
}
inline void JourneysRequest::set_allowed_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.allowed_id)
  allowed_id_.Mutable(index)->assign(value);
}
inline void JourneysRequest::set_allowed_id(int index, const char* value) {
  allowed_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneysRequest.allowed_id)
}
inline void JourneysRequest::set_allowed_id(int index, const char* value, size_t size) {
  allowed_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneysRequest.allowed_id)
}
inline ::std::string* JourneysRequest::add_allowed_id() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.JourneysRequest.allowed_id)
  return allowed_id_.Add();
}
inline void JourneysRequest::add_allowed_id(const ::std::string& value) {
  allowed_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneysRequest.allowed_id)
}
inline void JourneysRequest::add_allowed_id(const char* value) {
  allowed_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.JourneysRequest.allowed_id)
}
inline void JourneysRequest::add_allowed_id(const char* value, size_t size) {
  allowed_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.JourneysRequest.allowed_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JourneysRequest::allowed_id() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneysRequest.allowed_id)
  return allowed_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JourneysRequest::mutable_allowed_id() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneysRequest.allowed_id)
  return &allowed_id_;
}

// optional int32 free_radius_from = 20 [default = 0];
inline bool JourneysRequest::has_free_radius_from() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void JourneysRequest::set_has_free_radius_from() {
  _has_bits_[0] |= 0x00020000u;
}
inline void JourneysRequest::clear_has_free_radius_from() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void JourneysRequest::clear_free_radius_from() {
  free_radius_from_ = 0;
  clear_has_free_radius_from();
}
inline ::google::protobuf::int32 JourneysRequest::free_radius_from() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.free_radius_from)
  return free_radius_from_;
}
inline void JourneysRequest::set_free_radius_from(::google::protobuf::int32 value) {
  set_has_free_radius_from();
  free_radius_from_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.free_radius_from)
}

// optional int32 free_radius_to = 21 [default = 0];
inline bool JourneysRequest::has_free_radius_to() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void JourneysRequest::set_has_free_radius_to() {
  _has_bits_[0] |= 0x00040000u;
}
inline void JourneysRequest::clear_has_free_radius_to() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void JourneysRequest::clear_free_radius_to() {
  free_radius_to_ = 0;
  clear_has_free_radius_to();
}
inline ::google::protobuf::int32 JourneysRequest::free_radius_to() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.free_radius_to)
  return free_radius_to_;
}
inline void JourneysRequest::set_free_radius_to(::google::protobuf::int32 value) {
  set_has_free_radius_to();
  free_radius_to_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.free_radius_to)
}

// optional int32 min_nb_journeys = 22;
inline bool JourneysRequest::has_min_nb_journeys() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void JourneysRequest::set_has_min_nb_journeys() {
  _has_bits_[0] |= 0x00080000u;
}
inline void JourneysRequest::clear_has_min_nb_journeys() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void JourneysRequest::clear_min_nb_journeys() {
  min_nb_journeys_ = 0;
  clear_has_min_nb_journeys();
}
inline ::google::protobuf::int32 JourneysRequest::min_nb_journeys() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.min_nb_journeys)
  return min_nb_journeys_;
}
inline void JourneysRequest::set_min_nb_journeys(::google::protobuf::int32 value) {
  set_has_min_nb_journeys();
  min_nb_journeys_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.min_nb_journeys)
}

// optional double night_bus_filter_max_factor = 23 [default = 1.5];
inline bool JourneysRequest::has_night_bus_filter_max_factor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void JourneysRequest::set_has_night_bus_filter_max_factor() {
  _has_bits_[0] |= 0x00100000u;
}
inline void JourneysRequest::clear_has_night_bus_filter_max_factor() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void JourneysRequest::clear_night_bus_filter_max_factor() {
  night_bus_filter_max_factor_ = 1.5;
  clear_has_night_bus_filter_max_factor();
}
inline double JourneysRequest::night_bus_filter_max_factor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.night_bus_filter_max_factor)
  return night_bus_filter_max_factor_;
}
inline void JourneysRequest::set_night_bus_filter_max_factor(double value) {
  set_has_night_bus_filter_max_factor();
  night_bus_filter_max_factor_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.night_bus_filter_max_factor)
}

// optional int32 night_bus_filter_base_factor = 24 [default = 900];
inline bool JourneysRequest::has_night_bus_filter_base_factor() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void JourneysRequest::set_has_night_bus_filter_base_factor() {
  _has_bits_[0] |= 0x00200000u;
}
inline void JourneysRequest::clear_has_night_bus_filter_base_factor() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void JourneysRequest::clear_night_bus_filter_base_factor() {
  night_bus_filter_base_factor_ = 900;
  clear_has_night_bus_filter_base_factor();
}
inline ::google::protobuf::int32 JourneysRequest::night_bus_filter_base_factor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.night_bus_filter_base_factor)
  return night_bus_filter_base_factor_;
}
inline void JourneysRequest::set_night_bus_filter_base_factor(::google::protobuf::int32 value) {
  set_has_night_bus_filter_base_factor();
  night_bus_filter_base_factor_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.night_bus_filter_base_factor)
}

// optional uint32 timeframe_duration = 25;
inline bool JourneysRequest::has_timeframe_duration() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void JourneysRequest::set_has_timeframe_duration() {
  _has_bits_[0] |= 0x00400000u;
}
inline void JourneysRequest::clear_has_timeframe_duration() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void JourneysRequest::clear_timeframe_duration() {
  timeframe_duration_ = 0u;
  clear_has_timeframe_duration();
}
inline ::google::protobuf::uint32 JourneysRequest::timeframe_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.timeframe_duration)
  return timeframe_duration_;
}
inline void JourneysRequest::set_timeframe_duration(::google::protobuf::uint32 value) {
  set_has_timeframe_duration();
  timeframe_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.timeframe_duration)
}

// optional int32 depth = 26 [default = 1];
inline bool JourneysRequest::has_depth() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void JourneysRequest::set_has_depth() {
  _has_bits_[0] |= 0x00800000u;
}
inline void JourneysRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void JourneysRequest::clear_depth() {
  depth_ = 1;
  clear_has_depth();
}
inline ::google::protobuf::int32 JourneysRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.depth)
  return depth_;
}
inline void JourneysRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneysRequest.depth)
}

// optional .pbnavitia.LocationContext isochrone_center = 27;
inline bool JourneysRequest::has_isochrone_center() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void JourneysRequest::set_has_isochrone_center() {
  _has_bits_[0] |= 0x01000000u;
}
inline void JourneysRequest::clear_has_isochrone_center() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void JourneysRequest::clear_isochrone_center() {
  if (isochrone_center_ != NULL) isochrone_center_->::pbnavitia::LocationContext::Clear();
  clear_has_isochrone_center();
}
inline const ::pbnavitia::LocationContext& JourneysRequest::isochrone_center() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneysRequest.isochrone_center)
  return isochrone_center_ != NULL ? *isochrone_center_ : *default_instance_->isochrone_center_;
}
inline ::pbnavitia::LocationContext* JourneysRequest::mutable_isochrone_center() {
  set_has_isochrone_center();
  if (isochrone_center_ == NULL) {
    isochrone_center_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneysRequest.isochrone_center)
  return isochrone_center_;
}
inline ::pbnavitia::LocationContext* JourneysRequest::release_isochrone_center() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneysRequest.isochrone_center)
  clear_has_isochrone_center();
  ::pbnavitia::LocationContext* temp = isochrone_center_;
  isochrone_center_ = NULL;
  return temp;
}
inline void JourneysRequest::set_allocated_isochrone_center(::pbnavitia::LocationContext* isochrone_center) {
  delete isochrone_center_;
  isochrone_center_ = isochrone_center;
  if (isochrone_center) {
    set_has_isochrone_center();
  } else {
    clear_has_isochrone_center();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneysRequest.isochrone_center)
}

// -------------------------------------------------------------------

// PlacesNearbyRequest

// required string uri = 1;
inline bool PlacesNearbyRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlacesNearbyRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlacesNearbyRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlacesNearbyRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& PlacesNearbyRequest::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacesNearbyRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.uri)
}
inline void PlacesNearbyRequest::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlacesNearbyRequest.uri)
}
inline void PlacesNearbyRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlacesNearbyRequest.uri)
}
inline ::std::string* PlacesNearbyRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlacesNearbyRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlacesNearbyRequest::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlacesNearbyRequest.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacesNearbyRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlacesNearbyRequest.uri)
}

// required double distance = 2;
inline bool PlacesNearbyRequest::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlacesNearbyRequest::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlacesNearbyRequest::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlacesNearbyRequest::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline double PlacesNearbyRequest::distance() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.distance)
  return distance_;
}
inline void PlacesNearbyRequest::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.distance)
}

// repeated .pbnavitia.NavitiaType types = 3;
inline int PlacesNearbyRequest::types_size() const {
  return types_.size();
}
inline void PlacesNearbyRequest::clear_types() {
  types_.Clear();
}
inline ::pbnavitia::NavitiaType PlacesNearbyRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.types)
  return static_cast< ::pbnavitia::NavitiaType >(types_.Get(index));
}
inline void PlacesNearbyRequest::set_types(int index, ::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.types)
}
inline void PlacesNearbyRequest::add_types(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PlacesNearbyRequest.types)
}
inline const ::google::protobuf::RepeatedField<int>&
PlacesNearbyRequest::types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PlacesNearbyRequest.types)
  return types_;
}
inline ::google::protobuf::RepeatedField<int>*
PlacesNearbyRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PlacesNearbyRequest.types)
  return &types_;
}

// required int32 depth = 4;
inline bool PlacesNearbyRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlacesNearbyRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlacesNearbyRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlacesNearbyRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 PlacesNearbyRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.depth)
  return depth_;
}
inline void PlacesNearbyRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.depth)
}

// required int32 count = 5;
inline bool PlacesNearbyRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlacesNearbyRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlacesNearbyRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlacesNearbyRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PlacesNearbyRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.count)
  return count_;
}
inline void PlacesNearbyRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.count)
}

// required int32 start_page = 6;
inline bool PlacesNearbyRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlacesNearbyRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlacesNearbyRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlacesNearbyRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
inline ::google::protobuf::int32 PlacesNearbyRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.start_page)
  return start_page_;
}
inline void PlacesNearbyRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.start_page)
}

// optional string filter = 7;
inline bool PlacesNearbyRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlacesNearbyRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlacesNearbyRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlacesNearbyRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
inline const ::std::string& PlacesNearbyRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacesNearbyRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.filter)
}
inline void PlacesNearbyRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlacesNearbyRequest.filter)
}
inline void PlacesNearbyRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlacesNearbyRequest.filter)
}
inline ::std::string* PlacesNearbyRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlacesNearbyRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlacesNearbyRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlacesNearbyRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlacesNearbyRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlacesNearbyRequest.filter)
}

// optional double stop_points_nearby_radius = 8;
inline bool PlacesNearbyRequest::has_stop_points_nearby_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlacesNearbyRequest::set_has_stop_points_nearby_radius() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlacesNearbyRequest::clear_has_stop_points_nearby_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlacesNearbyRequest::clear_stop_points_nearby_radius() {
  stop_points_nearby_radius_ = 0;
  clear_has_stop_points_nearby_radius();
}
inline double PlacesNearbyRequest::stop_points_nearby_radius() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlacesNearbyRequest.stop_points_nearby_radius)
  return stop_points_nearby_radius_;
}
inline void PlacesNearbyRequest::set_stop_points_nearby_radius(double value) {
  set_has_stop_points_nearby_radius();
  stop_points_nearby_radius_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlacesNearbyRequest.stop_points_nearby_radius)
}

// -------------------------------------------------------------------

// PlaceUriRequest

// required string uri = 1;
inline bool PlaceUriRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaceUriRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaceUriRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaceUriRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& PlaceUriRequest::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceUriRequest.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceUriRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceUriRequest.uri)
}
inline void PlaceUriRequest::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlaceUriRequest.uri)
}
inline void PlaceUriRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlaceUriRequest.uri)
}
inline ::std::string* PlaceUriRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlaceUriRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceUriRequest::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlaceUriRequest.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceUriRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlaceUriRequest.uri)
}

// optional int32 depth = 2 [default = 1];
inline bool PlaceUriRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaceUriRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaceUriRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaceUriRequest::clear_depth() {
  depth_ = 1;
  clear_has_depth();
}
inline ::google::protobuf::int32 PlaceUriRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceUriRequest.depth)
  return depth_;
}
inline void PlaceUriRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceUriRequest.depth)
}

// -------------------------------------------------------------------

// PlaceCodeRequest

// required .pbnavitia.PlaceCodeRequest.Type type = 1;
inline bool PlaceCodeRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaceCodeRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaceCodeRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaceCodeRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pbnavitia::PlaceCodeRequest_Type PlaceCodeRequest::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceCodeRequest.type)
  return static_cast< ::pbnavitia::PlaceCodeRequest_Type >(type_);
}
inline void PlaceCodeRequest::set_type(::pbnavitia::PlaceCodeRequest_Type value) {
  assert(::pbnavitia::PlaceCodeRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceCodeRequest.type)
}

// required string type_code = 2;
inline bool PlaceCodeRequest::has_type_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlaceCodeRequest::set_has_type_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlaceCodeRequest::clear_has_type_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlaceCodeRequest::clear_type_code() {
  type_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_code();
}
inline const ::std::string& PlaceCodeRequest::type_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceCodeRequest.type_code)
  return type_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceCodeRequest::set_type_code(const ::std::string& value) {
  set_has_type_code();
  type_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceCodeRequest.type_code)
}
inline void PlaceCodeRequest::set_type_code(const char* value) {
  set_has_type_code();
  type_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlaceCodeRequest.type_code)
}
inline void PlaceCodeRequest::set_type_code(const char* value, size_t size) {
  set_has_type_code();
  type_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlaceCodeRequest.type_code)
}
inline ::std::string* PlaceCodeRequest::mutable_type_code() {
  set_has_type_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlaceCodeRequest.type_code)
  return type_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceCodeRequest::release_type_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlaceCodeRequest.type_code)
  clear_has_type_code();
  return type_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceCodeRequest::set_allocated_type_code(::std::string* type_code) {
  if (type_code != NULL) {
    set_has_type_code();
  } else {
    clear_has_type_code();
  }
  type_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlaceCodeRequest.type_code)
}

// required string code = 3;
inline bool PlaceCodeRequest::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlaceCodeRequest::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlaceCodeRequest::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlaceCodeRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& PlaceCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PlaceCodeRequest.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceCodeRequest::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PlaceCodeRequest.code)
}
inline void PlaceCodeRequest::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PlaceCodeRequest.code)
}
inline void PlaceCodeRequest::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PlaceCodeRequest.code)
}
inline ::std::string* PlaceCodeRequest::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PlaceCodeRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceCodeRequest::release_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.PlaceCodeRequest.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceCodeRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PlaceCodeRequest.code)
}

// -------------------------------------------------------------------

// PTRefRequest

// required .pbnavitia.NavitiaType requested_type = 1;
inline bool PTRefRequest::has_requested_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PTRefRequest::set_has_requested_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PTRefRequest::clear_has_requested_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PTRefRequest::clear_requested_type() {
  requested_type_ = 1;
  clear_has_requested_type();
}
inline ::pbnavitia::NavitiaType PTRefRequest::requested_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.requested_type)
  return static_cast< ::pbnavitia::NavitiaType >(requested_type_);
}
inline void PTRefRequest::set_requested_type(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  set_has_requested_type();
  requested_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.requested_type)
}

// required string filter = 2;
inline bool PTRefRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PTRefRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PTRefRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PTRefRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
inline const ::std::string& PTRefRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PTRefRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.filter)
}
inline void PTRefRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PTRefRequest.filter)
}
inline void PTRefRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PTRefRequest.filter)
}
inline ::std::string* PTRefRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PTRefRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PTRefRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.PTRefRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PTRefRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PTRefRequest.filter)
}

// required int32 depth = 3;
inline bool PTRefRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PTRefRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PTRefRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PTRefRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 PTRefRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.depth)
  return depth_;
}
inline void PTRefRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.depth)
}

// required int32 start_page = 4;
inline bool PTRefRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PTRefRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PTRefRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PTRefRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
inline ::google::protobuf::int32 PTRefRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.start_page)
  return start_page_;
}
inline void PTRefRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.start_page)
}

// required int32 count = 5;
inline bool PTRefRequest::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PTRefRequest::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PTRefRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PTRefRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PTRefRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.count)
  return count_;
}
inline void PTRefRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.count)
}

// optional bool show_codes = 7;
inline bool PTRefRequest::has_show_codes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PTRefRequest::set_has_show_codes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PTRefRequest::clear_has_show_codes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PTRefRequest::clear_show_codes() {
  show_codes_ = false;
  clear_has_show_codes();
}
inline bool PTRefRequest::show_codes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.show_codes)
  return show_codes_;
}
inline void PTRefRequest::set_show_codes(bool value) {
  set_has_show_codes();
  show_codes_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.show_codes)
}

// optional .pbnavitia.OdtLevel odt_level = 8;
inline bool PTRefRequest::has_odt_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PTRefRequest::set_has_odt_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PTRefRequest::clear_has_odt_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PTRefRequest::clear_odt_level() {
  odt_level_ = 0;
  clear_has_odt_level();
}
inline ::pbnavitia::OdtLevel PTRefRequest::odt_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.odt_level)
  return static_cast< ::pbnavitia::OdtLevel >(odt_level_);
}
inline void PTRefRequest::set_odt_level(::pbnavitia::OdtLevel value) {
  assert(::pbnavitia::OdtLevel_IsValid(value));
  set_has_odt_level();
  odt_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.odt_level)
}

// repeated string forbidden_uri = 6;
inline int PTRefRequest::forbidden_uri_size() const {
  return forbidden_uri_.size();
}
inline void PTRefRequest::clear_forbidden_uri() {
  forbidden_uri_.Clear();
}
inline const ::std::string& PTRefRequest::forbidden_uri(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.forbidden_uri)
  return forbidden_uri_.Get(index);
}
inline ::std::string* PTRefRequest::mutable_forbidden_uri(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PTRefRequest.forbidden_uri)
  return forbidden_uri_.Mutable(index);
}
inline void PTRefRequest::set_forbidden_uri(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.forbidden_uri)
  forbidden_uri_.Mutable(index)->assign(value);
}
inline void PTRefRequest::set_forbidden_uri(int index, const char* value) {
  forbidden_uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PTRefRequest.forbidden_uri)
}
inline void PTRefRequest::set_forbidden_uri(int index, const char* value, size_t size) {
  forbidden_uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PTRefRequest.forbidden_uri)
}
inline ::std::string* PTRefRequest::add_forbidden_uri() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PTRefRequest.forbidden_uri)
  return forbidden_uri_.Add();
}
inline void PTRefRequest::add_forbidden_uri(const ::std::string& value) {
  forbidden_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PTRefRequest.forbidden_uri)
}
inline void PTRefRequest::add_forbidden_uri(const char* value) {
  forbidden_uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PTRefRequest.forbidden_uri)
}
inline void PTRefRequest::add_forbidden_uri(const char* value, size_t size) {
  forbidden_uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PTRefRequest.forbidden_uri)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PTRefRequest::forbidden_uri() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PTRefRequest.forbidden_uri)
  return forbidden_uri_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PTRefRequest::mutable_forbidden_uri() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PTRefRequest.forbidden_uri)
  return &forbidden_uri_;
}

// optional uint64 datetime = 9;
inline bool PTRefRequest::has_datetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PTRefRequest::set_has_datetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PTRefRequest::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PTRefRequest::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
}
inline ::google::protobuf::uint64 PTRefRequest::datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.datetime)
  return datetime_;
}
inline void PTRefRequest::set_datetime(::google::protobuf::uint64 value) {
  set_has_datetime();
  datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.datetime)
}

// optional uint64 since_datetime = 10;
inline bool PTRefRequest::has_since_datetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PTRefRequest::set_has_since_datetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PTRefRequest::clear_has_since_datetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PTRefRequest::clear_since_datetime() {
  since_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_since_datetime();
}
inline ::google::protobuf::uint64 PTRefRequest::since_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.since_datetime)
  return since_datetime_;
}
inline void PTRefRequest::set_since_datetime(::google::protobuf::uint64 value) {
  set_has_since_datetime();
  since_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.since_datetime)
}

// optional uint64 until_datetime = 11;
inline bool PTRefRequest::has_until_datetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PTRefRequest::set_has_until_datetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PTRefRequest::clear_has_until_datetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PTRefRequest::clear_until_datetime() {
  until_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_until_datetime();
}
inline ::google::protobuf::uint64 PTRefRequest::until_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.until_datetime)
  return until_datetime_;
}
inline void PTRefRequest::set_until_datetime(::google::protobuf::uint64 value) {
  set_has_until_datetime();
  until_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.until_datetime)
}

// optional bool disable_geojson = 12;
inline bool PTRefRequest::has_disable_geojson() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PTRefRequest::set_has_disable_geojson() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PTRefRequest::clear_has_disable_geojson() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PTRefRequest::clear_disable_geojson() {
  disable_geojson_ = false;
  clear_has_disable_geojson();
}
inline bool PTRefRequest::disable_geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.disable_geojson)
  return disable_geojson_;
}
inline void PTRefRequest::set_disable_geojson(bool value) {
  set_has_disable_geojson();
  disable_geojson_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.disable_geojson)
}

// optional .pbnavitia.RTLevel realtime_level = 13;
inline bool PTRefRequest::has_realtime_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PTRefRequest::set_has_realtime_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PTRefRequest::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PTRefRequest::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
inline ::pbnavitia::RTLevel PTRefRequest::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PTRefRequest.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
inline void PTRefRequest::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PTRefRequest.realtime_level)
}

// -------------------------------------------------------------------

// CarCO2EmissionRequest

// optional .pbnavitia.LocationContext origin = 1;
inline bool CarCO2EmissionRequest::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CarCO2EmissionRequest::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CarCO2EmissionRequest::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CarCO2EmissionRequest::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::LocationContext::Clear();
  clear_has_origin();
}
inline const ::pbnavitia::LocationContext& CarCO2EmissionRequest::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CarCO2EmissionRequest.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pbnavitia::LocationContext* CarCO2EmissionRequest::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.CarCO2EmissionRequest.origin)
  return origin_;
}
inline ::pbnavitia::LocationContext* CarCO2EmissionRequest::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.CarCO2EmissionRequest.origin)
  clear_has_origin();
  ::pbnavitia::LocationContext* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void CarCO2EmissionRequest::set_allocated_origin(::pbnavitia::LocationContext* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CarCO2EmissionRequest.origin)
}

// optional .pbnavitia.LocationContext destination = 2;
inline bool CarCO2EmissionRequest::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CarCO2EmissionRequest::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CarCO2EmissionRequest::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CarCO2EmissionRequest::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::LocationContext::Clear();
  clear_has_destination();
}
inline const ::pbnavitia::LocationContext& CarCO2EmissionRequest::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CarCO2EmissionRequest.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
inline ::pbnavitia::LocationContext* CarCO2EmissionRequest::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.CarCO2EmissionRequest.destination)
  return destination_;
}
inline ::pbnavitia::LocationContext* CarCO2EmissionRequest::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.CarCO2EmissionRequest.destination)
  clear_has_destination();
  ::pbnavitia::LocationContext* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline void CarCO2EmissionRequest::set_allocated_destination(::pbnavitia::LocationContext* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CarCO2EmissionRequest.destination)
}

// -------------------------------------------------------------------

// DirectPathRequest

// optional .pbnavitia.LocationContext origin = 1;
inline bool DirectPathRequest::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DirectPathRequest::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DirectPathRequest::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DirectPathRequest::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::LocationContext::Clear();
  clear_has_origin();
}
inline const ::pbnavitia::LocationContext& DirectPathRequest::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pbnavitia::LocationContext* DirectPathRequest::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DirectPathRequest.origin)
  return origin_;
}
inline ::pbnavitia::LocationContext* DirectPathRequest::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.DirectPathRequest.origin)
  clear_has_origin();
  ::pbnavitia::LocationContext* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void DirectPathRequest::set_allocated_origin(::pbnavitia::LocationContext* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DirectPathRequest.origin)
}

// optional .pbnavitia.LocationContext destination = 2;
inline bool DirectPathRequest::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DirectPathRequest::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DirectPathRequest::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DirectPathRequest::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::LocationContext::Clear();
  clear_has_destination();
}
inline const ::pbnavitia::LocationContext& DirectPathRequest::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
inline ::pbnavitia::LocationContext* DirectPathRequest::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::LocationContext;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DirectPathRequest.destination)
  return destination_;
}
inline ::pbnavitia::LocationContext* DirectPathRequest::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.DirectPathRequest.destination)
  clear_has_destination();
  ::pbnavitia::LocationContext* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline void DirectPathRequest::set_allocated_destination(::pbnavitia::LocationContext* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DirectPathRequest.destination)
}

// optional uint64 datetime = 3;
inline bool DirectPathRequest::has_datetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DirectPathRequest::set_has_datetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DirectPathRequest::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DirectPathRequest::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
}
inline ::google::protobuf::uint64 DirectPathRequest::datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.datetime)
  return datetime_;
}
inline void DirectPathRequest::set_datetime(::google::protobuf::uint64 value) {
  set_has_datetime();
  datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.DirectPathRequest.datetime)
}

// required bool clockwise = 4;
inline bool DirectPathRequest::has_clockwise() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DirectPathRequest::set_has_clockwise() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DirectPathRequest::clear_has_clockwise() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DirectPathRequest::clear_clockwise() {
  clockwise_ = false;
  clear_has_clockwise();
}
inline bool DirectPathRequest::clockwise() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.clockwise)
  return clockwise_;
}
inline void DirectPathRequest::set_clockwise(bool value) {
  set_has_clockwise();
  clockwise_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.DirectPathRequest.clockwise)
}

// optional .pbnavitia.StreetNetworkParams streetnetwork_params = 5;
inline bool DirectPathRequest::has_streetnetwork_params() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DirectPathRequest::set_has_streetnetwork_params() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DirectPathRequest::clear_has_streetnetwork_params() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DirectPathRequest::clear_streetnetwork_params() {
  if (streetnetwork_params_ != NULL) streetnetwork_params_->::pbnavitia::StreetNetworkParams::Clear();
  clear_has_streetnetwork_params();
}
inline const ::pbnavitia::StreetNetworkParams& DirectPathRequest::streetnetwork_params() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DirectPathRequest.streetnetwork_params)
  return streetnetwork_params_ != NULL ? *streetnetwork_params_ : *default_instance_->streetnetwork_params_;
}
inline ::pbnavitia::StreetNetworkParams* DirectPathRequest::mutable_streetnetwork_params() {
  set_has_streetnetwork_params();
  if (streetnetwork_params_ == NULL) {
    streetnetwork_params_ = new ::pbnavitia::StreetNetworkParams;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DirectPathRequest.streetnetwork_params)
  return streetnetwork_params_;
}
inline ::pbnavitia::StreetNetworkParams* DirectPathRequest::release_streetnetwork_params() {
  // @@protoc_insertion_point(field_release:pbnavitia.DirectPathRequest.streetnetwork_params)
  clear_has_streetnetwork_params();
  ::pbnavitia::StreetNetworkParams* temp = streetnetwork_params_;
  streetnetwork_params_ = NULL;
  return temp;
}
inline void DirectPathRequest::set_allocated_streetnetwork_params(::pbnavitia::StreetNetworkParams* streetnetwork_params) {
  delete streetnetwork_params_;
  streetnetwork_params_ = streetnetwork_params;
  if (streetnetwork_params) {
    set_has_streetnetwork_params();
  } else {
    clear_has_streetnetwork_params();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DirectPathRequest.streetnetwork_params)
}

// -------------------------------------------------------------------

// StreetNetworkRoutingMatrixRequest

// repeated .pbnavitia.LocationContext origins = 1;
inline int StreetNetworkRoutingMatrixRequest::origins_size() const {
  return origins_.size();
}
inline void StreetNetworkRoutingMatrixRequest::clear_origins() {
  origins_.Clear();
}
inline const ::pbnavitia::LocationContext& StreetNetworkRoutingMatrixRequest::origins(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return origins_.Get(index);
}
inline ::pbnavitia::LocationContext* StreetNetworkRoutingMatrixRequest::mutable_origins(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return origins_.Mutable(index);
}
inline ::pbnavitia::LocationContext* StreetNetworkRoutingMatrixRequest::add_origins() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return origins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
StreetNetworkRoutingMatrixRequest::mutable_origins() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return &origins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
StreetNetworkRoutingMatrixRequest::origins() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetworkRoutingMatrixRequest.origins)
  return origins_;
}

// repeated .pbnavitia.LocationContext destinations = 2;
inline int StreetNetworkRoutingMatrixRequest::destinations_size() const {
  return destinations_.size();
}
inline void StreetNetworkRoutingMatrixRequest::clear_destinations() {
  destinations_.Clear();
}
inline const ::pbnavitia::LocationContext& StreetNetworkRoutingMatrixRequest::destinations(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return destinations_.Get(index);
}
inline ::pbnavitia::LocationContext* StreetNetworkRoutingMatrixRequest::mutable_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return destinations_.Mutable(index);
}
inline ::pbnavitia::LocationContext* StreetNetworkRoutingMatrixRequest::add_destinations() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return destinations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >*
StreetNetworkRoutingMatrixRequest::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return &destinations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LocationContext >&
StreetNetworkRoutingMatrixRequest::destinations() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetworkRoutingMatrixRequest.destinations)
  return destinations_;
}

// optional string mode = 3;
inline bool StreetNetworkRoutingMatrixRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreetNetworkRoutingMatrixRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreetNetworkRoutingMatrixRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreetNetworkRoutingMatrixRequest::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mode();
}
inline const ::std::string& StreetNetworkRoutingMatrixRequest::mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
  return mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkRoutingMatrixRequest::set_mode(const ::std::string& value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
}
inline void StreetNetworkRoutingMatrixRequest::set_mode(const char* value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
}
inline void StreetNetworkRoutingMatrixRequest::set_mode(const char* value, size_t size) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
}
inline ::std::string* StreetNetworkRoutingMatrixRequest::mutable_mode() {
  set_has_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreetNetworkRoutingMatrixRequest::release_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
  clear_has_mode();
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreetNetworkRoutingMatrixRequest::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    set_has_mode();
  } else {
    clear_has_mode();
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StreetNetworkRoutingMatrixRequest.mode)
}

// optional float speed = 4;
inline bool StreetNetworkRoutingMatrixRequest::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreetNetworkRoutingMatrixRequest::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreetNetworkRoutingMatrixRequest::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreetNetworkRoutingMatrixRequest::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float StreetNetworkRoutingMatrixRequest::speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.speed)
  return speed_;
}
inline void StreetNetworkRoutingMatrixRequest::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkRoutingMatrixRequest.speed)
}

// optional int32 max_duration = 5;
inline bool StreetNetworkRoutingMatrixRequest::has_max_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreetNetworkRoutingMatrixRequest::set_has_max_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreetNetworkRoutingMatrixRequest::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreetNetworkRoutingMatrixRequest::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
inline ::google::protobuf::int32 StreetNetworkRoutingMatrixRequest::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrixRequest.max_duration)
  return max_duration_;
}
inline void StreetNetworkRoutingMatrixRequest::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetworkRoutingMatrixRequest.max_duration)
}

// -------------------------------------------------------------------

// MatchingRoute

// optional string line_uri = 1;
inline bool MatchingRoute::has_line_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchingRoute::set_has_line_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchingRoute::clear_has_line_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchingRoute::clear_line_uri() {
  line_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_line_uri();
}
inline const ::std::string& MatchingRoute::line_uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MatchingRoute.line_uri)
  return line_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRoute::set_line_uri(const ::std::string& value) {
  set_has_line_uri();
  line_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MatchingRoute.line_uri)
}
inline void MatchingRoute::set_line_uri(const char* value) {
  set_has_line_uri();
  line_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MatchingRoute.line_uri)
}
inline void MatchingRoute::set_line_uri(const char* value, size_t size) {
  set_has_line_uri();
  line_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MatchingRoute.line_uri)
}
inline ::std::string* MatchingRoute::mutable_line_uri() {
  set_has_line_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MatchingRoute.line_uri)
  return line_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingRoute::release_line_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.MatchingRoute.line_uri)
  clear_has_line_uri();
  return line_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRoute::set_allocated_line_uri(::std::string* line_uri) {
  if (line_uri != NULL) {
    set_has_line_uri();
  } else {
    clear_has_line_uri();
  }
  line_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MatchingRoute.line_uri)
}

// optional string start_stop_point_uri = 2;
inline bool MatchingRoute::has_start_stop_point_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchingRoute::set_has_start_stop_point_uri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchingRoute::clear_has_start_stop_point_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchingRoute::clear_start_stop_point_uri() {
  start_stop_point_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_stop_point_uri();
}
inline const ::std::string& MatchingRoute::start_stop_point_uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MatchingRoute.start_stop_point_uri)
  return start_stop_point_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRoute::set_start_stop_point_uri(const ::std::string& value) {
  set_has_start_stop_point_uri();
  start_stop_point_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MatchingRoute.start_stop_point_uri)
}
inline void MatchingRoute::set_start_stop_point_uri(const char* value) {
  set_has_start_stop_point_uri();
  start_stop_point_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MatchingRoute.start_stop_point_uri)
}
inline void MatchingRoute::set_start_stop_point_uri(const char* value, size_t size) {
  set_has_start_stop_point_uri();
  start_stop_point_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MatchingRoute.start_stop_point_uri)
}
inline ::std::string* MatchingRoute::mutable_start_stop_point_uri() {
  set_has_start_stop_point_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MatchingRoute.start_stop_point_uri)
  return start_stop_point_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingRoute::release_start_stop_point_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.MatchingRoute.start_stop_point_uri)
  clear_has_start_stop_point_uri();
  return start_stop_point_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRoute::set_allocated_start_stop_point_uri(::std::string* start_stop_point_uri) {
  if (start_stop_point_uri != NULL) {
    set_has_start_stop_point_uri();
  } else {
    clear_has_start_stop_point_uri();
  }
  start_stop_point_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_stop_point_uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MatchingRoute.start_stop_point_uri)
}

// optional string destination_code_key = 3;
inline bool MatchingRoute::has_destination_code_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchingRoute::set_has_destination_code_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchingRoute::clear_has_destination_code_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchingRoute::clear_destination_code_key() {
  destination_code_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_code_key();
}
inline const ::std::string& MatchingRoute::destination_code_key() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MatchingRoute.destination_code_key)
  return destination_code_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRoute::set_destination_code_key(const ::std::string& value) {
  set_has_destination_code_key();
  destination_code_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MatchingRoute.destination_code_key)
}
inline void MatchingRoute::set_destination_code_key(const char* value) {
  set_has_destination_code_key();
  destination_code_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MatchingRoute.destination_code_key)
}
inline void MatchingRoute::set_destination_code_key(const char* value, size_t size) {
  set_has_destination_code_key();
  destination_code_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MatchingRoute.destination_code_key)
}
inline ::std::string* MatchingRoute::mutable_destination_code_key() {
  set_has_destination_code_key();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MatchingRoute.destination_code_key)
  return destination_code_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingRoute::release_destination_code_key() {
  // @@protoc_insertion_point(field_release:pbnavitia.MatchingRoute.destination_code_key)
  clear_has_destination_code_key();
  return destination_code_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRoute::set_allocated_destination_code_key(::std::string* destination_code_key) {
  if (destination_code_key != NULL) {
    set_has_destination_code_key();
  } else {
    clear_has_destination_code_key();
  }
  destination_code_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_code_key);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MatchingRoute.destination_code_key)
}

// optional string destination_code = 4;
inline bool MatchingRoute::has_destination_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchingRoute::set_has_destination_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchingRoute::clear_has_destination_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchingRoute::clear_destination_code() {
  destination_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_code();
}
inline const ::std::string& MatchingRoute::destination_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MatchingRoute.destination_code)
  return destination_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRoute::set_destination_code(const ::std::string& value) {
  set_has_destination_code();
  destination_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MatchingRoute.destination_code)
}
inline void MatchingRoute::set_destination_code(const char* value) {
  set_has_destination_code();
  destination_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MatchingRoute.destination_code)
}
inline void MatchingRoute::set_destination_code(const char* value, size_t size) {
  set_has_destination_code();
  destination_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MatchingRoute.destination_code)
}
inline ::std::string* MatchingRoute::mutable_destination_code() {
  set_has_destination_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MatchingRoute.destination_code)
  return destination_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingRoute::release_destination_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.MatchingRoute.destination_code)
  clear_has_destination_code();
  return destination_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingRoute::set_allocated_destination_code(::std::string* destination_code) {
  if (destination_code != NULL) {
    set_has_destination_code();
  } else {
    clear_has_destination_code();
  }
  destination_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MatchingRoute.destination_code)
}

// -------------------------------------------------------------------

// Request

// required .pbnavitia.API requested_api = 1;
inline bool Request::has_requested_api() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_requested_api() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_requested_api() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_requested_api() {
  requested_api_ = 1;
  clear_has_requested_api();
}
inline ::pbnavitia::API Request::requested_api() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.requested_api)
  return static_cast< ::pbnavitia::API >(requested_api_);
}
inline void Request::set_requested_api(::pbnavitia::API value) {
  assert(::pbnavitia::API_IsValid(value));
  set_has_requested_api();
  requested_api_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Request.requested_api)
}

// optional .pbnavitia.PlacesRequest places = 2;
inline bool Request::has_places() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_places() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_places() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_places() {
  if (places_ != NULL) places_->::pbnavitia::PlacesRequest::Clear();
  clear_has_places();
}
inline const ::pbnavitia::PlacesRequest& Request::places() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.places)
  return places_ != NULL ? *places_ : *default_instance_->places_;
}
inline ::pbnavitia::PlacesRequest* Request::mutable_places() {
  set_has_places();
  if (places_ == NULL) {
    places_ = new ::pbnavitia::PlacesRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.places)
  return places_;
}
inline ::pbnavitia::PlacesRequest* Request::release_places() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.places)
  clear_has_places();
  ::pbnavitia::PlacesRequest* temp = places_;
  places_ = NULL;
  return temp;
}
inline void Request::set_allocated_places(::pbnavitia::PlacesRequest* places) {
  delete places_;
  places_ = places;
  if (places) {
    set_has_places();
  } else {
    clear_has_places();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.places)
}

// optional .pbnavitia.NextStopTimeRequest next_stop_times = 3;
inline bool Request::has_next_stop_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_next_stop_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_next_stop_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_next_stop_times() {
  if (next_stop_times_ != NULL) next_stop_times_->::pbnavitia::NextStopTimeRequest::Clear();
  clear_has_next_stop_times();
}
inline const ::pbnavitia::NextStopTimeRequest& Request::next_stop_times() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.next_stop_times)
  return next_stop_times_ != NULL ? *next_stop_times_ : *default_instance_->next_stop_times_;
}
inline ::pbnavitia::NextStopTimeRequest* Request::mutable_next_stop_times() {
  set_has_next_stop_times();
  if (next_stop_times_ == NULL) {
    next_stop_times_ = new ::pbnavitia::NextStopTimeRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.next_stop_times)
  return next_stop_times_;
}
inline ::pbnavitia::NextStopTimeRequest* Request::release_next_stop_times() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.next_stop_times)
  clear_has_next_stop_times();
  ::pbnavitia::NextStopTimeRequest* temp = next_stop_times_;
  next_stop_times_ = NULL;
  return temp;
}
inline void Request::set_allocated_next_stop_times(::pbnavitia::NextStopTimeRequest* next_stop_times) {
  delete next_stop_times_;
  next_stop_times_ = next_stop_times;
  if (next_stop_times) {
    set_has_next_stop_times();
  } else {
    clear_has_next_stop_times();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.next_stop_times)
}

// optional .pbnavitia.PlacesNearbyRequest places_nearby = 4;
inline bool Request::has_places_nearby() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_places_nearby() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_places_nearby() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_places_nearby() {
  if (places_nearby_ != NULL) places_nearby_->::pbnavitia::PlacesNearbyRequest::Clear();
  clear_has_places_nearby();
}
inline const ::pbnavitia::PlacesNearbyRequest& Request::places_nearby() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.places_nearby)
  return places_nearby_ != NULL ? *places_nearby_ : *default_instance_->places_nearby_;
}
inline ::pbnavitia::PlacesNearbyRequest* Request::mutable_places_nearby() {
  set_has_places_nearby();
  if (places_nearby_ == NULL) {
    places_nearby_ = new ::pbnavitia::PlacesNearbyRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.places_nearby)
  return places_nearby_;
}
inline ::pbnavitia::PlacesNearbyRequest* Request::release_places_nearby() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.places_nearby)
  clear_has_places_nearby();
  ::pbnavitia::PlacesNearbyRequest* temp = places_nearby_;
  places_nearby_ = NULL;
  return temp;
}
inline void Request::set_allocated_places_nearby(::pbnavitia::PlacesNearbyRequest* places_nearby) {
  delete places_nearby_;
  places_nearby_ = places_nearby;
  if (places_nearby) {
    set_has_places_nearby();
  } else {
    clear_has_places_nearby();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.places_nearby)
}

// optional .pbnavitia.JourneysRequest journeys = 5;
inline bool Request::has_journeys() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_journeys() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_journeys() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_journeys() {
  if (journeys_ != NULL) journeys_->::pbnavitia::JourneysRequest::Clear();
  clear_has_journeys();
}
inline const ::pbnavitia::JourneysRequest& Request::journeys() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.journeys)
  return journeys_ != NULL ? *journeys_ : *default_instance_->journeys_;
}
inline ::pbnavitia::JourneysRequest* Request::mutable_journeys() {
  set_has_journeys();
  if (journeys_ == NULL) {
    journeys_ = new ::pbnavitia::JourneysRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.journeys)
  return journeys_;
}
inline ::pbnavitia::JourneysRequest* Request::release_journeys() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.journeys)
  clear_has_journeys();
  ::pbnavitia::JourneysRequest* temp = journeys_;
  journeys_ = NULL;
  return temp;
}
inline void Request::set_allocated_journeys(::pbnavitia::JourneysRequest* journeys) {
  delete journeys_;
  journeys_ = journeys;
  if (journeys) {
    set_has_journeys();
  } else {
    clear_has_journeys();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.journeys)
}

// optional .pbnavitia.PTRefRequest ptref = 6;
inline bool Request::has_ptref() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_ptref() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_ptref() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_ptref() {
  if (ptref_ != NULL) ptref_->::pbnavitia::PTRefRequest::Clear();
  clear_has_ptref();
}
inline const ::pbnavitia::PTRefRequest& Request::ptref() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.ptref)
  return ptref_ != NULL ? *ptref_ : *default_instance_->ptref_;
}
inline ::pbnavitia::PTRefRequest* Request::mutable_ptref() {
  set_has_ptref();
  if (ptref_ == NULL) {
    ptref_ = new ::pbnavitia::PTRefRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.ptref)
  return ptref_;
}
inline ::pbnavitia::PTRefRequest* Request::release_ptref() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.ptref)
  clear_has_ptref();
  ::pbnavitia::PTRefRequest* temp = ptref_;
  ptref_ = NULL;
  return temp;
}
inline void Request::set_allocated_ptref(::pbnavitia::PTRefRequest* ptref) {
  delete ptref_;
  ptref_ = ptref;
  if (ptref) {
    set_has_ptref();
  } else {
    clear_has_ptref();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.ptref)
}

// optional .pbnavitia.PlaceUriRequest place_uri = 7;
inline bool Request::has_place_uri() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_place_uri() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_place_uri() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_place_uri() {
  if (place_uri_ != NULL) place_uri_->::pbnavitia::PlaceUriRequest::Clear();
  clear_has_place_uri();
}
inline const ::pbnavitia::PlaceUriRequest& Request::place_uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.place_uri)
  return place_uri_ != NULL ? *place_uri_ : *default_instance_->place_uri_;
}
inline ::pbnavitia::PlaceUriRequest* Request::mutable_place_uri() {
  set_has_place_uri();
  if (place_uri_ == NULL) {
    place_uri_ = new ::pbnavitia::PlaceUriRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.place_uri)
  return place_uri_;
}
inline ::pbnavitia::PlaceUriRequest* Request::release_place_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.place_uri)
  clear_has_place_uri();
  ::pbnavitia::PlaceUriRequest* temp = place_uri_;
  place_uri_ = NULL;
  return temp;
}
inline void Request::set_allocated_place_uri(::pbnavitia::PlaceUriRequest* place_uri) {
  delete place_uri_;
  place_uri_ = place_uri;
  if (place_uri) {
    set_has_place_uri();
  } else {
    clear_has_place_uri();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.place_uri)
}

// optional .pbnavitia.TrafficReportsRequest traffic_reports = 13;
inline bool Request::has_traffic_reports() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::set_has_traffic_reports() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Request::clear_has_traffic_reports() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Request::clear_traffic_reports() {
  if (traffic_reports_ != NULL) traffic_reports_->::pbnavitia::TrafficReportsRequest::Clear();
  clear_has_traffic_reports();
}
inline const ::pbnavitia::TrafficReportsRequest& Request::traffic_reports() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.traffic_reports)
  return traffic_reports_ != NULL ? *traffic_reports_ : *default_instance_->traffic_reports_;
}
inline ::pbnavitia::TrafficReportsRequest* Request::mutable_traffic_reports() {
  set_has_traffic_reports();
  if (traffic_reports_ == NULL) {
    traffic_reports_ = new ::pbnavitia::TrafficReportsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.traffic_reports)
  return traffic_reports_;
}
inline ::pbnavitia::TrafficReportsRequest* Request::release_traffic_reports() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.traffic_reports)
  clear_has_traffic_reports();
  ::pbnavitia::TrafficReportsRequest* temp = traffic_reports_;
  traffic_reports_ = NULL;
  return temp;
}
inline void Request::set_allocated_traffic_reports(::pbnavitia::TrafficReportsRequest* traffic_reports) {
  delete traffic_reports_;
  traffic_reports_ = traffic_reports;
  if (traffic_reports) {
    set_has_traffic_reports();
  } else {
    clear_has_traffic_reports();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.traffic_reports)
}

// optional .pbnavitia.CalendarsRequest calendars = 9;
inline bool Request::has_calendars() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Request::set_has_calendars() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Request::clear_has_calendars() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Request::clear_calendars() {
  if (calendars_ != NULL) calendars_->::pbnavitia::CalendarsRequest::Clear();
  clear_has_calendars();
}
inline const ::pbnavitia::CalendarsRequest& Request::calendars() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.calendars)
  return calendars_ != NULL ? *calendars_ : *default_instance_->calendars_;
}
inline ::pbnavitia::CalendarsRequest* Request::mutable_calendars() {
  set_has_calendars();
  if (calendars_ == NULL) {
    calendars_ = new ::pbnavitia::CalendarsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.calendars)
  return calendars_;
}
inline ::pbnavitia::CalendarsRequest* Request::release_calendars() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.calendars)
  clear_has_calendars();
  ::pbnavitia::CalendarsRequest* temp = calendars_;
  calendars_ = NULL;
  return temp;
}
inline void Request::set_allocated_calendars(::pbnavitia::CalendarsRequest* calendars) {
  delete calendars_;
  calendars_ = calendars;
  if (calendars) {
    set_has_calendars();
  } else {
    clear_has_calendars();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.calendars)
}

// optional .pbnavitia.PtobjectRequest pt_objects = 10;
inline bool Request::has_pt_objects() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Request::set_has_pt_objects() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Request::clear_has_pt_objects() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Request::clear_pt_objects() {
  if (pt_objects_ != NULL) pt_objects_->::pbnavitia::PtobjectRequest::Clear();
  clear_has_pt_objects();
}
inline const ::pbnavitia::PtobjectRequest& Request::pt_objects() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.pt_objects)
  return pt_objects_ != NULL ? *pt_objects_ : *default_instance_->pt_objects_;
}
inline ::pbnavitia::PtobjectRequest* Request::mutable_pt_objects() {
  set_has_pt_objects();
  if (pt_objects_ == NULL) {
    pt_objects_ = new ::pbnavitia::PtobjectRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.pt_objects)
  return pt_objects_;
}
inline ::pbnavitia::PtobjectRequest* Request::release_pt_objects() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.pt_objects)
  clear_has_pt_objects();
  ::pbnavitia::PtobjectRequest* temp = pt_objects_;
  pt_objects_ = NULL;
  return temp;
}
inline void Request::set_allocated_pt_objects(::pbnavitia::PtobjectRequest* pt_objects) {
  delete pt_objects_;
  pt_objects_ = pt_objects;
  if (pt_objects) {
    set_has_pt_objects();
  } else {
    clear_has_pt_objects();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.pt_objects)
}

// optional .pbnavitia.PlaceCodeRequest place_code = 11;
inline bool Request::has_place_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Request::set_has_place_code() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Request::clear_has_place_code() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Request::clear_place_code() {
  if (place_code_ != NULL) place_code_->::pbnavitia::PlaceCodeRequest::Clear();
  clear_has_place_code();
}
inline const ::pbnavitia::PlaceCodeRequest& Request::place_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.place_code)
  return place_code_ != NULL ? *place_code_ : *default_instance_->place_code_;
}
inline ::pbnavitia::PlaceCodeRequest* Request::mutable_place_code() {
  set_has_place_code();
  if (place_code_ == NULL) {
    place_code_ = new ::pbnavitia::PlaceCodeRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.place_code)
  return place_code_;
}
inline ::pbnavitia::PlaceCodeRequest* Request::release_place_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.place_code)
  clear_has_place_code();
  ::pbnavitia::PlaceCodeRequest* temp = place_code_;
  place_code_ = NULL;
  return temp;
}
inline void Request::set_allocated_place_code(::pbnavitia::PlaceCodeRequest* place_code) {
  delete place_code_;
  place_code_ = place_code;
  if (place_code) {
    set_has_place_code();
  } else {
    clear_has_place_code();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.place_code)
}

// optional .pbnavitia.NearestStopPointsRequest nearest_stop_points = 14;
inline bool Request::has_nearest_stop_points() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Request::set_has_nearest_stop_points() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Request::clear_has_nearest_stop_points() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Request::clear_nearest_stop_points() {
  if (nearest_stop_points_ != NULL) nearest_stop_points_->::pbnavitia::NearestStopPointsRequest::Clear();
  clear_has_nearest_stop_points();
}
inline const ::pbnavitia::NearestStopPointsRequest& Request::nearest_stop_points() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.nearest_stop_points)
  return nearest_stop_points_ != NULL ? *nearest_stop_points_ : *default_instance_->nearest_stop_points_;
}
inline ::pbnavitia::NearestStopPointsRequest* Request::mutable_nearest_stop_points() {
  set_has_nearest_stop_points();
  if (nearest_stop_points_ == NULL) {
    nearest_stop_points_ = new ::pbnavitia::NearestStopPointsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.nearest_stop_points)
  return nearest_stop_points_;
}
inline ::pbnavitia::NearestStopPointsRequest* Request::release_nearest_stop_points() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.nearest_stop_points)
  clear_has_nearest_stop_points();
  ::pbnavitia::NearestStopPointsRequest* temp = nearest_stop_points_;
  nearest_stop_points_ = NULL;
  return temp;
}
inline void Request::set_allocated_nearest_stop_points(::pbnavitia::NearestStopPointsRequest* nearest_stop_points) {
  delete nearest_stop_points_;
  nearest_stop_points_ = nearest_stop_points;
  if (nearest_stop_points) {
    set_has_nearest_stop_points();
  } else {
    clear_has_nearest_stop_points();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.nearest_stop_points)
}

// optional uint64 _current_datetime = 15;
inline bool Request::has__current_datetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Request::set_has__current_datetime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Request::clear_has__current_datetime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Request::clear__current_datetime() {
  _current_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has__current_datetime();
}
inline ::google::protobuf::uint64 Request::_current_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request._current_datetime)
  return _current_datetime_;
}
inline void Request::set__current_datetime(::google::protobuf::uint64 value) {
  set_has__current_datetime();
  _current_datetime_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Request._current_datetime)
}

// optional .pbnavitia.GraphicalIsochroneRequest isochrone = 16;
inline bool Request::has_isochrone() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Request::set_has_isochrone() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Request::clear_has_isochrone() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Request::clear_isochrone() {
  if (isochrone_ != NULL) isochrone_->::pbnavitia::GraphicalIsochroneRequest::Clear();
  clear_has_isochrone();
}
inline const ::pbnavitia::GraphicalIsochroneRequest& Request::isochrone() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.isochrone)
  return isochrone_ != NULL ? *isochrone_ : *default_instance_->isochrone_;
}
inline ::pbnavitia::GraphicalIsochroneRequest* Request::mutable_isochrone() {
  set_has_isochrone();
  if (isochrone_ == NULL) {
    isochrone_ = new ::pbnavitia::GraphicalIsochroneRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.isochrone)
  return isochrone_;
}
inline ::pbnavitia::GraphicalIsochroneRequest* Request::release_isochrone() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.isochrone)
  clear_has_isochrone();
  ::pbnavitia::GraphicalIsochroneRequest* temp = isochrone_;
  isochrone_ = NULL;
  return temp;
}
inline void Request::set_allocated_isochrone(::pbnavitia::GraphicalIsochroneRequest* isochrone) {
  delete isochrone_;
  isochrone_ = isochrone;
  if (isochrone) {
    set_has_isochrone();
  } else {
    clear_has_isochrone();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.isochrone)
}

// optional .pbnavitia.CarCO2EmissionRequest car_co2_emission = 17;
inline bool Request::has_car_co2_emission() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Request::set_has_car_co2_emission() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Request::clear_has_car_co2_emission() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Request::clear_car_co2_emission() {
  if (car_co2_emission_ != NULL) car_co2_emission_->::pbnavitia::CarCO2EmissionRequest::Clear();
  clear_has_car_co2_emission();
}
inline const ::pbnavitia::CarCO2EmissionRequest& Request::car_co2_emission() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.car_co2_emission)
  return car_co2_emission_ != NULL ? *car_co2_emission_ : *default_instance_->car_co2_emission_;
}
inline ::pbnavitia::CarCO2EmissionRequest* Request::mutable_car_co2_emission() {
  set_has_car_co2_emission();
  if (car_co2_emission_ == NULL) {
    car_co2_emission_ = new ::pbnavitia::CarCO2EmissionRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.car_co2_emission)
  return car_co2_emission_;
}
inline ::pbnavitia::CarCO2EmissionRequest* Request::release_car_co2_emission() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.car_co2_emission)
  clear_has_car_co2_emission();
  ::pbnavitia::CarCO2EmissionRequest* temp = car_co2_emission_;
  car_co2_emission_ = NULL;
  return temp;
}
inline void Request::set_allocated_car_co2_emission(::pbnavitia::CarCO2EmissionRequest* car_co2_emission) {
  delete car_co2_emission_;
  car_co2_emission_ = car_co2_emission;
  if (car_co2_emission) {
    set_has_car_co2_emission();
  } else {
    clear_has_car_co2_emission();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.car_co2_emission)
}

// optional .pbnavitia.DirectPathRequest direct_path = 18;
inline bool Request::has_direct_path() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Request::set_has_direct_path() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Request::clear_has_direct_path() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Request::clear_direct_path() {
  if (direct_path_ != NULL) direct_path_->::pbnavitia::DirectPathRequest::Clear();
  clear_has_direct_path();
}
inline const ::pbnavitia::DirectPathRequest& Request::direct_path() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.direct_path)
  return direct_path_ != NULL ? *direct_path_ : *default_instance_->direct_path_;
}
inline ::pbnavitia::DirectPathRequest* Request::mutable_direct_path() {
  set_has_direct_path();
  if (direct_path_ == NULL) {
    direct_path_ = new ::pbnavitia::DirectPathRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.direct_path)
  return direct_path_;
}
inline ::pbnavitia::DirectPathRequest* Request::release_direct_path() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.direct_path)
  clear_has_direct_path();
  ::pbnavitia::DirectPathRequest* temp = direct_path_;
  direct_path_ = NULL;
  return temp;
}
inline void Request::set_allocated_direct_path(::pbnavitia::DirectPathRequest* direct_path) {
  delete direct_path_;
  direct_path_ = direct_path;
  if (direct_path) {
    set_has_direct_path();
  } else {
    clear_has_direct_path();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.direct_path)
}

// optional .pbnavitia.HeatMapRequest heat_map = 19;
inline bool Request::has_heat_map() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Request::set_has_heat_map() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Request::clear_has_heat_map() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Request::clear_heat_map() {
  if (heat_map_ != NULL) heat_map_->::pbnavitia::HeatMapRequest::Clear();
  clear_has_heat_map();
}
inline const ::pbnavitia::HeatMapRequest& Request::heat_map() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.heat_map)
  return heat_map_ != NULL ? *heat_map_ : *default_instance_->heat_map_;
}
inline ::pbnavitia::HeatMapRequest* Request::mutable_heat_map() {
  set_has_heat_map();
  if (heat_map_ == NULL) {
    heat_map_ = new ::pbnavitia::HeatMapRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.heat_map)
  return heat_map_;
}
inline ::pbnavitia::HeatMapRequest* Request::release_heat_map() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.heat_map)
  clear_has_heat_map();
  ::pbnavitia::HeatMapRequest* temp = heat_map_;
  heat_map_ = NULL;
  return temp;
}
inline void Request::set_allocated_heat_map(::pbnavitia::HeatMapRequest* heat_map) {
  delete heat_map_;
  heat_map_ = heat_map;
  if (heat_map) {
    set_has_heat_map();
  } else {
    clear_has_heat_map();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.heat_map)
}

// optional .pbnavitia.StreetNetworkRoutingMatrixRequest sn_routing_matrix = 20;
inline bool Request::has_sn_routing_matrix() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Request::set_has_sn_routing_matrix() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Request::clear_has_sn_routing_matrix() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Request::clear_sn_routing_matrix() {
  if (sn_routing_matrix_ != NULL) sn_routing_matrix_->::pbnavitia::StreetNetworkRoutingMatrixRequest::Clear();
  clear_has_sn_routing_matrix();
}
inline const ::pbnavitia::StreetNetworkRoutingMatrixRequest& Request::sn_routing_matrix() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.sn_routing_matrix)
  return sn_routing_matrix_ != NULL ? *sn_routing_matrix_ : *default_instance_->sn_routing_matrix_;
}
inline ::pbnavitia::StreetNetworkRoutingMatrixRequest* Request::mutable_sn_routing_matrix() {
  set_has_sn_routing_matrix();
  if (sn_routing_matrix_ == NULL) {
    sn_routing_matrix_ = new ::pbnavitia::StreetNetworkRoutingMatrixRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.sn_routing_matrix)
  return sn_routing_matrix_;
}
inline ::pbnavitia::StreetNetworkRoutingMatrixRequest* Request::release_sn_routing_matrix() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.sn_routing_matrix)
  clear_has_sn_routing_matrix();
  ::pbnavitia::StreetNetworkRoutingMatrixRequest* temp = sn_routing_matrix_;
  sn_routing_matrix_ = NULL;
  return temp;
}
inline void Request::set_allocated_sn_routing_matrix(::pbnavitia::StreetNetworkRoutingMatrixRequest* sn_routing_matrix) {
  delete sn_routing_matrix_;
  sn_routing_matrix_ = sn_routing_matrix;
  if (sn_routing_matrix) {
    set_has_sn_routing_matrix();
  } else {
    clear_has_sn_routing_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.sn_routing_matrix)
}

// optional .pbnavitia.GeographicalCoord coord = 21;
inline bool Request::has_coord() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Request::set_has_coord() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Request::clear_has_coord() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Request::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
inline const ::pbnavitia::GeographicalCoord& Request::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
inline ::pbnavitia::GeographicalCoord* Request::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.coord)
  return coord_;
}
inline ::pbnavitia::GeographicalCoord* Request::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
inline void Request::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.coord)
}

// optional .pbnavitia.MatchingRoute matching_routes = 23;
inline bool Request::has_matching_routes() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Request::set_has_matching_routes() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Request::clear_has_matching_routes() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Request::clear_matching_routes() {
  if (matching_routes_ != NULL) matching_routes_->::pbnavitia::MatchingRoute::Clear();
  clear_has_matching_routes();
}
inline const ::pbnavitia::MatchingRoute& Request::matching_routes() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.matching_routes)
  return matching_routes_ != NULL ? *matching_routes_ : *default_instance_->matching_routes_;
}
inline ::pbnavitia::MatchingRoute* Request::mutable_matching_routes() {
  set_has_matching_routes();
  if (matching_routes_ == NULL) {
    matching_routes_ = new ::pbnavitia::MatchingRoute;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.matching_routes)
  return matching_routes_;
}
inline ::pbnavitia::MatchingRoute* Request::release_matching_routes() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.matching_routes)
  clear_has_matching_routes();
  ::pbnavitia::MatchingRoute* temp = matching_routes_;
  matching_routes_ = NULL;
  return temp;
}
inline void Request::set_allocated_matching_routes(::pbnavitia::MatchingRoute* matching_routes) {
  delete matching_routes_;
  matching_routes_ = matching_routes;
  if (matching_routes) {
    set_has_matching_routes();
  } else {
    clear_has_matching_routes();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.matching_routes)
}

// optional .pbnavitia.LineReportsRequest line_reports = 24;
inline bool Request::has_line_reports() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Request::set_has_line_reports() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Request::clear_has_line_reports() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Request::clear_line_reports() {
  if (line_reports_ != NULL) line_reports_->::pbnavitia::LineReportsRequest::Clear();
  clear_has_line_reports();
}
inline const ::pbnavitia::LineReportsRequest& Request::line_reports() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.line_reports)
  return line_reports_ != NULL ? *line_reports_ : *default_instance_->line_reports_;
}
inline ::pbnavitia::LineReportsRequest* Request::mutable_line_reports() {
  set_has_line_reports();
  if (line_reports_ == NULL) {
    line_reports_ = new ::pbnavitia::LineReportsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.line_reports)
  return line_reports_;
}
inline ::pbnavitia::LineReportsRequest* Request::release_line_reports() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.line_reports)
  clear_has_line_reports();
  ::pbnavitia::LineReportsRequest* temp = line_reports_;
  line_reports_ = NULL;
  return temp;
}
inline void Request::set_allocated_line_reports(::pbnavitia::LineReportsRequest* line_reports) {
  delete line_reports_;
  line_reports_ = line_reports;
  if (line_reports) {
    set_has_line_reports();
  } else {
    clear_has_line_reports();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.line_reports)
}

// optional string request_id = 12;
inline bool Request::has_request_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Request::set_has_request_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Request::clear_has_request_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Request::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_id();
}
inline const ::std::string& Request::request_id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_request_id(const ::std::string& value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Request.request_id)
}
inline void Request::set_request_id(const char* value) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Request.request_id)
}
inline void Request::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Request.request_id)
}
inline ::std::string* Request::mutable_request_id() {
  set_has_request_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_request_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.request_id)
  clear_has_request_id();
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    set_has_request_id();
  } else {
    clear_has_request_id();
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.request_id)
}

// optional bool disable_feedpublisher = 22;
inline bool Request::has_disable_feedpublisher() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Request::set_has_disable_feedpublisher() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Request::clear_has_disable_feedpublisher() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Request::clear_disable_feedpublisher() {
  disable_feedpublisher_ = false;
  clear_has_disable_feedpublisher();
}
inline bool Request::disable_feedpublisher() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.disable_feedpublisher)
  return disable_feedpublisher_;
}
inline void Request::set_disable_feedpublisher(bool value) {
  set_has_disable_feedpublisher();
  disable_feedpublisher_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Request.disable_feedpublisher)
}

// optional bool disable_disruption = 25 [default = false];
inline bool Request::has_disable_disruption() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Request::set_has_disable_disruption() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Request::clear_has_disable_disruption() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Request::clear_disable_disruption() {
  disable_disruption_ = false;
  clear_has_disable_disruption();
}
inline bool Request::disable_disruption() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.disable_disruption)
  return disable_disruption_;
}
inline void Request::set_disable_disruption(bool value) {
  set_has_disable_disruption();
  disable_disruption_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Request.disable_disruption)
}

// optional string deadline = 26;
inline bool Request::has_deadline() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Request::set_has_deadline() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Request::clear_has_deadline() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Request::clear_deadline() {
  deadline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deadline();
}
inline const ::std::string& Request::deadline() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.deadline)
  return deadline_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_deadline(const ::std::string& value) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Request.deadline)
}
inline void Request::set_deadline(const char* value) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Request.deadline)
}
inline void Request::set_deadline(const char* value, size_t size) {
  set_has_deadline();
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Request.deadline)
}
inline ::std::string* Request::mutable_deadline() {
  set_has_deadline();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.deadline)
  return deadline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_deadline() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.deadline)
  clear_has_deadline();
  return deadline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_deadline(::std::string* deadline) {
  if (deadline != NULL) {
    set_has_deadline();
  } else {
    clear_has_deadline();
  }
  deadline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deadline);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.deadline)
}

// optional .pbnavitia.EquipmentReportsRequest equipment_reports = 27;
inline bool Request::has_equipment_reports() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Request::set_has_equipment_reports() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Request::clear_has_equipment_reports() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Request::clear_equipment_reports() {
  if (equipment_reports_ != NULL) equipment_reports_->::pbnavitia::EquipmentReportsRequest::Clear();
  clear_has_equipment_reports();
}
inline const ::pbnavitia::EquipmentReportsRequest& Request::equipment_reports() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Request.equipment_reports)
  return equipment_reports_ != NULL ? *equipment_reports_ : *default_instance_->equipment_reports_;
}
inline ::pbnavitia::EquipmentReportsRequest* Request::mutable_equipment_reports() {
  set_has_equipment_reports();
  if (equipment_reports_ == NULL) {
    equipment_reports_ = new ::pbnavitia::EquipmentReportsRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Request.equipment_reports)
  return equipment_reports_;
}
inline ::pbnavitia::EquipmentReportsRequest* Request::release_equipment_reports() {
  // @@protoc_insertion_point(field_release:pbnavitia.Request.equipment_reports)
  clear_has_equipment_reports();
  ::pbnavitia::EquipmentReportsRequest* temp = equipment_reports_;
  equipment_reports_ = NULL;
  return temp;
}
inline void Request::set_allocated_equipment_reports(::pbnavitia::EquipmentReportsRequest* equipment_reports) {
  delete equipment_reports_;
  equipment_reports_ = equipment_reports;
  if (equipment_reports) {
    set_has_equipment_reports();
  } else {
    clear_has_equipment_reports();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Request.equipment_reports)
}

// -------------------------------------------------------------------

// NearestStopPointsRequest

// optional string place = 1;
inline bool NearestStopPointsRequest::has_place() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearestStopPointsRequest::set_has_place() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NearestStopPointsRequest::clear_has_place() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NearestStopPointsRequest::clear_place() {
  place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_place();
}
inline const ::std::string& NearestStopPointsRequest::place() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.place)
  return place_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NearestStopPointsRequest::set_place(const ::std::string& value) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.place)
}
inline void NearestStopPointsRequest::set_place(const char* value) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NearestStopPointsRequest.place)
}
inline void NearestStopPointsRequest::set_place(const char* value, size_t size) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NearestStopPointsRequest.place)
}
inline ::std::string* NearestStopPointsRequest::mutable_place() {
  set_has_place();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NearestStopPointsRequest.place)
  return place_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NearestStopPointsRequest::release_place() {
  // @@protoc_insertion_point(field_release:pbnavitia.NearestStopPointsRequest.place)
  clear_has_place();
  return place_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NearestStopPointsRequest::set_allocated_place(::std::string* place) {
  if (place != NULL) {
    set_has_place();
  } else {
    clear_has_place();
  }
  place_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NearestStopPointsRequest.place)
}

// optional string mode = 2;
inline bool NearestStopPointsRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearestStopPointsRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NearestStopPointsRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NearestStopPointsRequest::clear_mode() {
  mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mode();
}
inline const ::std::string& NearestStopPointsRequest::mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.mode)
  return mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NearestStopPointsRequest::set_mode(const ::std::string& value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.mode)
}
inline void NearestStopPointsRequest::set_mode(const char* value) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NearestStopPointsRequest.mode)
}
inline void NearestStopPointsRequest::set_mode(const char* value, size_t size) {
  set_has_mode();
  mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NearestStopPointsRequest.mode)
}
inline ::std::string* NearestStopPointsRequest::mutable_mode() {
  set_has_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NearestStopPointsRequest.mode)
  return mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NearestStopPointsRequest::release_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.NearestStopPointsRequest.mode)
  clear_has_mode();
  return mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NearestStopPointsRequest::set_allocated_mode(::std::string* mode) {
  if (mode != NULL) {
    set_has_mode();
  } else {
    clear_has_mode();
  }
  mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NearestStopPointsRequest.mode)
}

// optional double walking_speed = 3;
inline bool NearestStopPointsRequest::has_walking_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NearestStopPointsRequest::set_has_walking_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NearestStopPointsRequest::clear_has_walking_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NearestStopPointsRequest::clear_walking_speed() {
  walking_speed_ = 0;
  clear_has_walking_speed();
}
inline double NearestStopPointsRequest::walking_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.walking_speed)
  return walking_speed_;
}
inline void NearestStopPointsRequest::set_walking_speed(double value) {
  set_has_walking_speed();
  walking_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.walking_speed)
}

// optional double bike_speed = 4;
inline bool NearestStopPointsRequest::has_bike_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NearestStopPointsRequest::set_has_bike_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NearestStopPointsRequest::clear_has_bike_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NearestStopPointsRequest::clear_bike_speed() {
  bike_speed_ = 0;
  clear_has_bike_speed();
}
inline double NearestStopPointsRequest::bike_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.bike_speed)
  return bike_speed_;
}
inline void NearestStopPointsRequest::set_bike_speed(double value) {
  set_has_bike_speed();
  bike_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.bike_speed)
}

// optional double car_speed = 5;
inline bool NearestStopPointsRequest::has_car_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NearestStopPointsRequest::set_has_car_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NearestStopPointsRequest::clear_has_car_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NearestStopPointsRequest::clear_car_speed() {
  car_speed_ = 0;
  clear_has_car_speed();
}
inline double NearestStopPointsRequest::car_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.car_speed)
  return car_speed_;
}
inline void NearestStopPointsRequest::set_car_speed(double value) {
  set_has_car_speed();
  car_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.car_speed)
}

// optional double bss_speed = 6;
inline bool NearestStopPointsRequest::has_bss_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NearestStopPointsRequest::set_has_bss_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NearestStopPointsRequest::clear_has_bss_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NearestStopPointsRequest::clear_bss_speed() {
  bss_speed_ = 0;
  clear_has_bss_speed();
}
inline double NearestStopPointsRequest::bss_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.bss_speed)
  return bss_speed_;
}
inline void NearestStopPointsRequest::set_bss_speed(double value) {
  set_has_bss_speed();
  bss_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.bss_speed)
}

// optional string filter = 7;
inline bool NearestStopPointsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NearestStopPointsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NearestStopPointsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NearestStopPointsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
inline const ::std::string& NearestStopPointsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NearestStopPointsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.filter)
}
inline void NearestStopPointsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.NearestStopPointsRequest.filter)
}
inline void NearestStopPointsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.NearestStopPointsRequest.filter)
}
inline ::std::string* NearestStopPointsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.NearestStopPointsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NearestStopPointsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.NearestStopPointsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NearestStopPointsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NearestStopPointsRequest.filter)
}

// optional int32 max_duration = 8;
inline bool NearestStopPointsRequest::has_max_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NearestStopPointsRequest::set_has_max_duration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NearestStopPointsRequest::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NearestStopPointsRequest::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
inline ::google::protobuf::int32 NearestStopPointsRequest::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.max_duration)
  return max_duration_;
}
inline void NearestStopPointsRequest::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.max_duration)
}

// optional bool reverse = 9;
inline bool NearestStopPointsRequest::has_reverse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NearestStopPointsRequest::set_has_reverse() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NearestStopPointsRequest::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NearestStopPointsRequest::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
inline bool NearestStopPointsRequest::reverse() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.reverse)
  return reverse_;
}
inline void NearestStopPointsRequest::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.reverse)
}

// optional double car_no_park_speed = 10;
inline bool NearestStopPointsRequest::has_car_no_park_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NearestStopPointsRequest::set_has_car_no_park_speed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NearestStopPointsRequest::clear_has_car_no_park_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NearestStopPointsRequest::clear_car_no_park_speed() {
  car_no_park_speed_ = 0;
  clear_has_car_no_park_speed();
}
inline double NearestStopPointsRequest::car_no_park_speed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPointsRequest.car_no_park_speed)
  return car_no_park_speed_;
}
inline void NearestStopPointsRequest::set_car_no_park_speed(double value) {
  set_has_car_no_park_speed();
  car_no_park_speed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPointsRequest.car_no_park_speed)
}

// -------------------------------------------------------------------

// GraphicalIsochroneRequest

// optional .pbnavitia.JourneysRequest journeys_request = 1;
inline bool GraphicalIsochroneRequest::has_journeys_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GraphicalIsochroneRequest::set_has_journeys_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GraphicalIsochroneRequest::clear_has_journeys_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GraphicalIsochroneRequest::clear_journeys_request() {
  if (journeys_request_ != NULL) journeys_request_->::pbnavitia::JourneysRequest::Clear();
  clear_has_journeys_request();
}
inline const ::pbnavitia::JourneysRequest& GraphicalIsochroneRequest::journeys_request() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochroneRequest.journeys_request)
  return journeys_request_ != NULL ? *journeys_request_ : *default_instance_->journeys_request_;
}
inline ::pbnavitia::JourneysRequest* GraphicalIsochroneRequest::mutable_journeys_request() {
  set_has_journeys_request();
  if (journeys_request_ == NULL) {
    journeys_request_ = new ::pbnavitia::JourneysRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.GraphicalIsochroneRequest.journeys_request)
  return journeys_request_;
}
inline ::pbnavitia::JourneysRequest* GraphicalIsochroneRequest::release_journeys_request() {
  // @@protoc_insertion_point(field_release:pbnavitia.GraphicalIsochroneRequest.journeys_request)
  clear_has_journeys_request();
  ::pbnavitia::JourneysRequest* temp = journeys_request_;
  journeys_request_ = NULL;
  return temp;
}
inline void GraphicalIsochroneRequest::set_allocated_journeys_request(::pbnavitia::JourneysRequest* journeys_request) {
  delete journeys_request_;
  journeys_request_ = journeys_request;
  if (journeys_request) {
    set_has_journeys_request();
  } else {
    clear_has_journeys_request();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GraphicalIsochroneRequest.journeys_request)
}

// repeated int32 boundary_duration = 2;
inline int GraphicalIsochroneRequest::boundary_duration_size() const {
  return boundary_duration_.size();
}
inline void GraphicalIsochroneRequest::clear_boundary_duration() {
  boundary_duration_.Clear();
}
inline ::google::protobuf::int32 GraphicalIsochroneRequest::boundary_duration(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
  return boundary_duration_.Get(index);
}
inline void GraphicalIsochroneRequest::set_boundary_duration(int index, ::google::protobuf::int32 value) {
  boundary_duration_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
}
inline void GraphicalIsochroneRequest::add_boundary_duration(::google::protobuf::int32 value) {
  boundary_duration_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GraphicalIsochroneRequest::boundary_duration() const {
  // @@protoc_insertion_point(field_list:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
  return boundary_duration_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GraphicalIsochroneRequest::mutable_boundary_duration() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.GraphicalIsochroneRequest.boundary_duration)
  return &boundary_duration_;
}

// -------------------------------------------------------------------

// HeatMapRequest

// optional .pbnavitia.JourneysRequest journeys_request = 1;
inline bool HeatMapRequest::has_journeys_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeatMapRequest::set_has_journeys_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeatMapRequest::clear_has_journeys_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeatMapRequest::clear_journeys_request() {
  if (journeys_request_ != NULL) journeys_request_->::pbnavitia::JourneysRequest::Clear();
  clear_has_journeys_request();
}
inline const ::pbnavitia::JourneysRequest& HeatMapRequest::journeys_request() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMapRequest.journeys_request)
  return journeys_request_ != NULL ? *journeys_request_ : *default_instance_->journeys_request_;
}
inline ::pbnavitia::JourneysRequest* HeatMapRequest::mutable_journeys_request() {
  set_has_journeys_request();
  if (journeys_request_ == NULL) {
    journeys_request_ = new ::pbnavitia::JourneysRequest;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.HeatMapRequest.journeys_request)
  return journeys_request_;
}
inline ::pbnavitia::JourneysRequest* HeatMapRequest::release_journeys_request() {
  // @@protoc_insertion_point(field_release:pbnavitia.HeatMapRequest.journeys_request)
  clear_has_journeys_request();
  ::pbnavitia::JourneysRequest* temp = journeys_request_;
  journeys_request_ = NULL;
  return temp;
}
inline void HeatMapRequest::set_allocated_journeys_request(::pbnavitia::JourneysRequest* journeys_request) {
  delete journeys_request_;
  journeys_request_ = journeys_request;
  if (journeys_request) {
    set_has_journeys_request();
  } else {
    clear_has_journeys_request();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.HeatMapRequest.journeys_request)
}

// optional int32 resolution = 2;
inline bool HeatMapRequest::has_resolution() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeatMapRequest::set_has_resolution() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeatMapRequest::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeatMapRequest::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline ::google::protobuf::int32 HeatMapRequest::resolution() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMapRequest.resolution)
  return resolution_;
}
inline void HeatMapRequest::set_resolution(::google::protobuf::int32 value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.HeatMapRequest.resolution)
}

// -------------------------------------------------------------------

// PtobjectRequest

// required string q = 1;
inline bool PtobjectRequest::has_q() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PtobjectRequest::set_has_q() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PtobjectRequest::clear_has_q() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PtobjectRequest::clear_q() {
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_q();
}
inline const ::std::string& PtobjectRequest::q() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.q)
  return q_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtobjectRequest::set_q(const ::std::string& value) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.q)
}
inline void PtobjectRequest::set_q(const char* value) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtobjectRequest.q)
}
inline void PtobjectRequest::set_q(const char* value, size_t size) {
  set_has_q();
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtobjectRequest.q)
}
inline ::std::string* PtobjectRequest::mutable_q() {
  set_has_q();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtobjectRequest.q)
  return q_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PtobjectRequest::release_q() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtobjectRequest.q)
  clear_has_q();
  return q_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PtobjectRequest::set_allocated_q(::std::string* q) {
  if (q != NULL) {
    set_has_q();
  } else {
    clear_has_q();
  }
  q_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), q);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtobjectRequest.q)
}

// repeated .pbnavitia.NavitiaType types = 2;
inline int PtobjectRequest::types_size() const {
  return types_.size();
}
inline void PtobjectRequest::clear_types() {
  types_.Clear();
}
inline ::pbnavitia::NavitiaType PtobjectRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.types)
  return static_cast< ::pbnavitia::NavitiaType >(types_.Get(index));
}
inline void PtobjectRequest::set_types(int index, ::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.types)
}
inline void PtobjectRequest::add_types(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtobjectRequest.types)
}
inline const ::google::protobuf::RepeatedField<int>&
PtobjectRequest::types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtobjectRequest.types)
  return types_;
}
inline ::google::protobuf::RepeatedField<int>*
PtobjectRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtobjectRequest.types)
  return &types_;
}

// required int32 depth = 3;
inline bool PtobjectRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PtobjectRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PtobjectRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PtobjectRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 PtobjectRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.depth)
  return depth_;
}
inline void PtobjectRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.depth)
}

// required int32 count = 4;
inline bool PtobjectRequest::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PtobjectRequest::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PtobjectRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PtobjectRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PtobjectRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.count)
  return count_;
}
inline void PtobjectRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.count)
}

// repeated string admin_uris = 5;
inline int PtobjectRequest::admin_uris_size() const {
  return admin_uris_.size();
}
inline void PtobjectRequest::clear_admin_uris() {
  admin_uris_.Clear();
}
inline const ::std::string& PtobjectRequest::admin_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.admin_uris)
  return admin_uris_.Get(index);
}
inline ::std::string* PtobjectRequest::mutable_admin_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtobjectRequest.admin_uris)
  return admin_uris_.Mutable(index);
}
inline void PtobjectRequest::set_admin_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.admin_uris)
  admin_uris_.Mutable(index)->assign(value);
}
inline void PtobjectRequest::set_admin_uris(int index, const char* value) {
  admin_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtobjectRequest.admin_uris)
}
inline void PtobjectRequest::set_admin_uris(int index, const char* value, size_t size) {
  admin_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtobjectRequest.admin_uris)
}
inline ::std::string* PtobjectRequest::add_admin_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PtobjectRequest.admin_uris)
  return admin_uris_.Add();
}
inline void PtobjectRequest::add_admin_uris(const ::std::string& value) {
  admin_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtobjectRequest.admin_uris)
}
inline void PtobjectRequest::add_admin_uris(const char* value) {
  admin_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PtobjectRequest.admin_uris)
}
inline void PtobjectRequest::add_admin_uris(const char* value, size_t size) {
  admin_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PtobjectRequest.admin_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PtobjectRequest::admin_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtobjectRequest.admin_uris)
  return admin_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PtobjectRequest::mutable_admin_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtobjectRequest.admin_uris)
  return &admin_uris_;
}

// optional int32 search_type = 6;
inline bool PtobjectRequest::has_search_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PtobjectRequest::set_has_search_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PtobjectRequest::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PtobjectRequest::clear_search_type() {
  search_type_ = 0;
  clear_has_search_type();
}
inline ::google::protobuf::int32 PtobjectRequest::search_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.search_type)
  return search_type_;
}
inline void PtobjectRequest::set_search_type(::google::protobuf::int32 value) {
  set_has_search_type();
  search_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.search_type)
}

// optional bool disable_geojson = 7;
inline bool PtobjectRequest::has_disable_geojson() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PtobjectRequest::set_has_disable_geojson() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PtobjectRequest::clear_has_disable_geojson() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PtobjectRequest::clear_disable_geojson() {
  disable_geojson_ = false;
  clear_has_disable_geojson();
}
inline bool PtobjectRequest::disable_geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtobjectRequest.disable_geojson)
  return disable_geojson_;
}
inline void PtobjectRequest::set_disable_geojson(bool value) {
  set_has_disable_geojson();
  disable_geojson_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtobjectRequest.disable_geojson)
}

// -------------------------------------------------------------------

// EquipmentReportsRequest

// optional int32 depth = 1;
inline bool EquipmentReportsRequest::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentReportsRequest::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentReportsRequest::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentReportsRequest::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 EquipmentReportsRequest::depth() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.depth)
  return depth_;
}
inline void EquipmentReportsRequest::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.depth)
}

// optional int32 start_page = 2;
inline bool EquipmentReportsRequest::has_start_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentReportsRequest::set_has_start_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentReportsRequest::clear_has_start_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentReportsRequest::clear_start_page() {
  start_page_ = 0;
  clear_has_start_page();
}
inline ::google::protobuf::int32 EquipmentReportsRequest::start_page() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.start_page)
  return start_page_;
}
inline void EquipmentReportsRequest::set_start_page(::google::protobuf::int32 value) {
  set_has_start_page();
  start_page_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.start_page)
}

// optional int32 count = 3;
inline bool EquipmentReportsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentReportsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentReportsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentReportsRequest::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 EquipmentReportsRequest::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.count)
  return count_;
}
inline void EquipmentReportsRequest::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.count)
}

// optional string filter = 4;
inline bool EquipmentReportsRequest::has_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentReportsRequest::set_has_filter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentReportsRequest::clear_has_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentReportsRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
inline const ::std::string& EquipmentReportsRequest::filter() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentReportsRequest::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.filter)
}
inline void EquipmentReportsRequest::set_filter(const char* value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentReportsRequest.filter)
}
inline void EquipmentReportsRequest::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentReportsRequest.filter)
}
inline ::std::string* EquipmentReportsRequest::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentReportsRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EquipmentReportsRequest::release_filter() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentReportsRequest.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EquipmentReportsRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentReportsRequest.filter)
}

// repeated string forbidden_uris = 5;
inline int EquipmentReportsRequest::forbidden_uris_size() const {
  return forbidden_uris_.size();
}
inline void EquipmentReportsRequest::clear_forbidden_uris() {
  forbidden_uris_.Clear();
}
inline const ::std::string& EquipmentReportsRequest::forbidden_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return forbidden_uris_.Get(index);
}
inline ::std::string* EquipmentReportsRequest::mutable_forbidden_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return forbidden_uris_.Mutable(index);
}
inline void EquipmentReportsRequest::set_forbidden_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  forbidden_uris_.Mutable(index)->assign(value);
}
inline void EquipmentReportsRequest::set_forbidden_uris(int index, const char* value) {
  forbidden_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
inline void EquipmentReportsRequest::set_forbidden_uris(int index, const char* value, size_t size) {
  forbidden_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
inline ::std::string* EquipmentReportsRequest::add_forbidden_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return forbidden_uris_.Add();
}
inline void EquipmentReportsRequest::add_forbidden_uris(const ::std::string& value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
inline void EquipmentReportsRequest::add_forbidden_uris(const char* value) {
  forbidden_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
inline void EquipmentReportsRequest::add_forbidden_uris(const char* value, size_t size) {
  forbidden_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.EquipmentReportsRequest.forbidden_uris)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EquipmentReportsRequest::forbidden_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return forbidden_uris_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EquipmentReportsRequest::mutable_forbidden_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.EquipmentReportsRequest.forbidden_uris)
  return &forbidden_uris_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnavitia

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pbnavitia::PlaceCodeRequest_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnavitia::PlaceCodeRequest_Type>() {
  return ::pbnavitia::PlaceCodeRequest_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_request_2eproto__INCLUDED
