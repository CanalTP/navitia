// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbnavitia {

namespace {

const ::google::protobuf::Descriptor* Code_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Code_reflection_ = NULL;
const ::google::protobuf::Descriptor* Period_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Period_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Channel_ChannelType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Severity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Severity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Severity_Effect_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StopTimeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopTimeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineSectionImpact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineSectionImpact_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImpactedObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImpactedObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisruptionProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisruptionProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* Impact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Impact_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeographicalCoord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeographicalCoord_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdministrativeRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdministrativeRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Comment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Comment_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineString_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiLineString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiLineString_reflection_ = NULL;
const ::google::protobuf::Descriptor* Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Route_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Route_reflection_ = NULL;
const ::google::protobuf::Descriptor* JourneyPattern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JourneyPattern_reflection_ = NULL;
const ::google::protobuf::Descriptor* Destination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Destination_reflection_ = NULL;
const ::google::protobuf::Descriptor* Note_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Note_reflection_ = NULL;
const ::google::protobuf::Descriptor* Properties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Properties_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Properties_AdditionalInformation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* hasEquipments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hasEquipments_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* hasEquipments_Equipment_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StopDateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopDateTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* VehicleJourney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleJourney_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trip_reflection_ = NULL;
const ::google::protobuf::Descriptor* JourneyPatternPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JourneyPatternPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Contributor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contributor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dataset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dataset_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoiType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoiType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Poi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Poi_reflection_ = NULL;
const ::google::protobuf::Descriptor* Network_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Network_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhysicalMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhysicalMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommercialMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommercialMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* Connection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Company_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Company_reflection_ = NULL;
const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalendarException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalendarException_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalendarPeriod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalendarPeriod_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekPattern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekPattern_reflection_ = NULL;
const ::google::protobuf::Descriptor* Calendar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Calendar_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValidityPattern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValidityPattern_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* PtObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PtObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* FareZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FareZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentDetails_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentDetails_EquipmentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CurrentAvailability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentAvailability_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CurrentAvailability_EquipmentStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EquipmentCause_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentCause_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopAreaEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopAreaEquipment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NavitiaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* API_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActiveStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StopTimeUpdateStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OdtLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RTLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExceptionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_type_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_type_2eproto() {
  protobuf_AddDesc_type_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "type.proto");
  GOOGLE_CHECK(file != NULL);
  Code_descriptor_ = file->message_type(0);
  static const int Code_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, value_),
  };
  Code_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Code_descriptor_,
      Code::default_instance_,
      Code_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, _has_bits_[0]),
      -1,
      -1,
      sizeof(Code),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Code, _internal_metadata_),
      -1);
  Period_descriptor_ = file->message_type(1);
  static const int Period_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Period, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Period, end_),
  };
  Period_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Period_descriptor_,
      Period::default_instance_,
      Period_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Period, _has_bits_[0]),
      -1,
      -1,
      sizeof(Period),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Period, _internal_metadata_),
      -1);
  Property_descriptor_ = file->message_type(2);
  static const int Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_),
  };
  Property_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      -1,
      -1,
      sizeof(Property),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _internal_metadata_),
      -1);
  Channel_descriptor_ = file->message_type(3);
  static const int Channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, channel_types_),
  };
  Channel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Channel_descriptor_,
      Channel::default_instance_,
      Channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _has_bits_[0]),
      -1,
      -1,
      sizeof(Channel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _internal_metadata_),
      -1);
  Channel_ChannelType_descriptor_ = Channel_descriptor_->enum_type(0);
  MessageContent_descriptor_ = file->message_type(4);
  static const int MessageContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageContent, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageContent, channel_),
  };
  MessageContent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageContent_descriptor_,
      MessageContent::default_instance_,
      MessageContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageContent, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageContent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageContent, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(5);
  static const int Message_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, start_application_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, end_application_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, start_application_daily_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, end_application_daily_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, message_status_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  Severity_descriptor_ = file->message_type(6);
  static const int Severity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Severity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Severity, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Severity, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Severity, priority_),
  };
  Severity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Severity_descriptor_,
      Severity::default_instance_,
      Severity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Severity, _has_bits_[0]),
      -1,
      -1,
      sizeof(Severity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Severity, _internal_metadata_),
      -1);
  Severity_Effect_descriptor_ = Severity_descriptor_->enum_type(0);
  StopTimeUpdate_descriptor_ = file->message_type(7);
  static const int StopTimeUpdate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, amended_stop_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, base_stop_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, departure_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, arrival_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, is_detour_),
  };
  StopTimeUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopTimeUpdate_descriptor_,
      StopTimeUpdate::default_instance_,
      StopTimeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopTimeUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTimeUpdate, _internal_metadata_),
      -1);
  LineSectionImpact_descriptor_ = file->message_type(8);
  static const int LineSectionImpact_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSectionImpact, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSectionImpact, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSectionImpact, routes_),
  };
  LineSectionImpact_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LineSectionImpact_descriptor_,
      LineSectionImpact::default_instance_,
      LineSectionImpact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSectionImpact, _has_bits_[0]),
      -1,
      -1,
      sizeof(LineSectionImpact),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSectionImpact, _internal_metadata_),
      -1);
  ImpactedObject_descriptor_ = file->message_type(9);
  static const int ImpactedObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactedObject, pt_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactedObject, impacted_stops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactedObject, impacted_section_),
  };
  ImpactedObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImpactedObject_descriptor_,
      ImpactedObject::default_instance_,
      ImpactedObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactedObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImpactedObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactedObject, _internal_metadata_),
      -1);
  DisruptionProperty_descriptor_ = file->message_type(10);
  static const int DisruptionProperty_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisruptionProperty, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisruptionProperty, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisruptionProperty, value_),
  };
  DisruptionProperty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DisruptionProperty_descriptor_,
      DisruptionProperty::default_instance_,
      DisruptionProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisruptionProperty, _has_bits_[0]),
      -1,
      -1,
      sizeof(DisruptionProperty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisruptionProperty, _internal_metadata_),
      -1);
  Impact_descriptor_ = file->message_type(11);
  static const int Impact_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, disruption_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, application_periods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, contributor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, impacted_objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, properties_),
  };
  Impact_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Impact_descriptor_,
      Impact::default_instance_,
      Impact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, _has_bits_[0]),
      -1,
      -1,
      sizeof(Impact),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Impact, _internal_metadata_),
      -1);
  GeographicalCoord_descriptor_ = file->message_type(12);
  static const int GeographicalCoord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographicalCoord, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographicalCoord, lat_),
  };
  GeographicalCoord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeographicalCoord_descriptor_,
      GeographicalCoord::default_instance_,
      GeographicalCoord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographicalCoord, _has_bits_[0]),
      -1,
      -1,
      sizeof(GeographicalCoord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographicalCoord, _internal_metadata_),
      -1);
  AdministrativeRegion_descriptor_ = file->message_type(13);
  static const int AdministrativeRegion_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, zip_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, insee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, main_stop_areas_),
  };
  AdministrativeRegion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdministrativeRegion_descriptor_,
      AdministrativeRegion::default_instance_,
      AdministrativeRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, _has_bits_[0]),
      -1,
      -1,
      sizeof(AdministrativeRegion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministrativeRegion, _internal_metadata_),
      -1);
  Comment_descriptor_ = file->message_type(14);
  static const int Comment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, type_),
  };
  Comment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Comment_descriptor_,
      Comment::default_instance_,
      Comment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, _has_bits_[0]),
      -1,
      -1,
      sizeof(Comment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Comment, _internal_metadata_),
      -1);
  StopArea_descriptor_ = file->message_type(15);
  static const int StopArea_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, administrative_regions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, stop_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, impact_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, commercial_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, physical_modes_),
  };
  StopArea_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopArea_descriptor_,
      StopArea::default_instance_,
      StopArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopArea),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopArea, _internal_metadata_),
      -1);
  StopPoint_descriptor_ = file->message_type(16);
  static const int StopPoint_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, administrative_regions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, stop_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, has_equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, impact_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, platform_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, commercial_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, physical_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, fare_zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, equipment_details_),
  };
  StopPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopPoint_descriptor_,
      StopPoint::default_instance_,
      StopPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPoint, _internal_metadata_),
      -1);
  LineString_descriptor_ = file->message_type(17);
  static const int LineString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineString, coordinates_),
  };
  LineString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LineString_descriptor_,
      LineString::default_instance_,
      LineString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineString, _has_bits_[0]),
      -1,
      -1,
      sizeof(LineString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineString, _internal_metadata_),
      -1);
  MultiLineString_descriptor_ = file->message_type(18);
  static const int MultiLineString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLineString, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLineString, length_),
  };
  MultiLineString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiLineString_descriptor_,
      MultiLineString::default_instance_,
      MultiLineString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLineString, _has_bits_[0]),
      -1,
      -1,
      sizeof(MultiLineString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLineString, _internal_metadata_),
      -1);
  Line_descriptor_ = file->message_type(19);
  static const int Line_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, commercial_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, physical_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, impact_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, geojson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, opening_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, closing_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, line_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, text_color_),
  };
  Line_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Line_descriptor_,
      Line::default_instance_,
      Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, _has_bits_[0]),
      -1,
      -1,
      sizeof(Line),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, _internal_metadata_),
      -1);
  LineGroup_descriptor_ = file->message_type(20);
  static const int LineGroup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGroup, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGroup, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGroup, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGroup, main_line_),
  };
  LineGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LineGroup_descriptor_,
      LineGroup::default_instance_,
      LineGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(LineGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGroup, _internal_metadata_),
      -1);
  Route_descriptor_ = file->message_type(21);
  static const int Route_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, is_frequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, journey_patterns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, impact_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, stop_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, geojson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, physical_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, direction_type_),
  };
  Route_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Route_descriptor_,
      Route::default_instance_,
      Route_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _has_bits_[0]),
      -1,
      -1,
      sizeof(Route),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _internal_metadata_),
      -1);
  JourneyPattern_descriptor_ = file->message_type(22);
  static const int JourneyPattern_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, is_frequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, physical_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, journey_pattern_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, impact_uris_),
  };
  JourneyPattern_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JourneyPattern_descriptor_,
      JourneyPattern::default_instance_,
      JourneyPattern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, _has_bits_[0]),
      -1,
      -1,
      sizeof(JourneyPattern),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPattern, _internal_metadata_),
      -1);
  Destination_descriptor_ = file->message_type(23);
  static const int Destination_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, destination_),
  };
  Destination_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Destination_descriptor_,
      Destination::default_instance_,
      Destination_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, _has_bits_[0]),
      -1,
      -1,
      sizeof(Destination),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, _internal_metadata_),
      -1);
  Note_descriptor_ = file->message_type(24);
  static const int Note_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, comment_type_),
  };
  Note_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Note_descriptor_,
      Note::default_instance_,
      Note_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, _has_bits_[0]),
      -1,
      -1,
      sizeof(Note),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Note, _internal_metadata_),
      -1);
  Properties_descriptor_ = file->message_type(25);
  static const int Properties_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, additional_informations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, exceptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, vehicle_journey_id_),
  };
  Properties_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Properties_descriptor_,
      Properties::default_instance_,
      Properties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, _has_bits_[0]),
      -1,
      -1,
      sizeof(Properties),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Properties, _internal_metadata_),
      -1);
  Properties_AdditionalInformation_descriptor_ = Properties_descriptor_->enum_type(0);
  hasEquipments_descriptor_ = file->message_type(26);
  static const int hasEquipments_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hasEquipments, has_equipments_),
  };
  hasEquipments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hasEquipments_descriptor_,
      hasEquipments::default_instance_,
      hasEquipments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hasEquipments, _has_bits_[0]),
      -1,
      -1,
      sizeof(hasEquipments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hasEquipments, _internal_metadata_),
      -1);
  hasEquipments_Equipment_descriptor_ = hasEquipments_descriptor_->enum_type(0);
  StopDateTime_descriptor_ = file->message_type(27);
  static const int StopDateTime_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, arrival_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, departure_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, base_arrival_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, base_departure_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, data_freshness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, departure_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, arrival_status_),
  };
  StopDateTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopDateTime_descriptor_,
      StopDateTime::default_instance_,
      StopDateTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopDateTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDateTime, _internal_metadata_),
      -1);
  StopTime_descriptor_ = file->message_type(28);
  static const int StopTime_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, arrival_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, utc_arrival_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, departure_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, utc_departure_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, vehicle_journey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, journey_pattern_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, pickup_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, drop_off_allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, headsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, stop_point_),
  };
  StopTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopTime_descriptor_,
      StopTime::default_instance_,
      StopTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopTime, _internal_metadata_),
      -1);
  VehicleJourney_descriptor_ = file->message_type(29);
  static const int VehicleJourney_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, stop_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, journey_pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, trip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, impact_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, is_adapted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, validity_pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, adapted_validity_pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, odt_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, wheelchair_accessible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, bike_accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, air_conditioned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, visual_announcement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, audible_announcement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, appropriate_escort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, appropriate_signage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, school_vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, codes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, calendars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, headway_secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, headsign_),
  };
  VehicleJourney_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VehicleJourney_descriptor_,
      VehicleJourney::default_instance_,
      VehicleJourney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, _has_bits_[0]),
      -1,
      -1,
      sizeof(VehicleJourney),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleJourney, _internal_metadata_),
      -1);
  Trip_descriptor_ = file->message_type(30);
  static const int Trip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trip, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trip, name_),
  };
  Trip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trip_descriptor_,
      Trip::default_instance_,
      Trip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trip, _has_bits_[0]),
      -1,
      -1,
      sizeof(Trip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trip, _internal_metadata_),
      -1);
  JourneyPatternPoint_descriptor_ = file->message_type(31);
  static const int JourneyPatternPoint_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPatternPoint, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPatternPoint, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPatternPoint, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPatternPoint, journey_pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPatternPoint, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPatternPoint, impact_uris_),
  };
  JourneyPatternPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JourneyPatternPoint_descriptor_,
      JourneyPatternPoint::default_instance_,
      JourneyPatternPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPatternPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(JourneyPatternPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JourneyPatternPoint, _internal_metadata_),
      -1);
  Contributor_descriptor_ = file->message_type(32);
  static const int Contributor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contributor, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contributor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contributor, website_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contributor, license_),
  };
  Contributor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Contributor_descriptor_,
      Contributor::default_instance_,
      Contributor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contributor, _has_bits_[0]),
      -1,
      -1,
      sizeof(Contributor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contributor, _internal_metadata_),
      -1);
  Dataset_descriptor_ = file->message_type(33);
  static const int Dataset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, contributor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, start_validation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, end_validation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, realtime_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, system_),
  };
  Dataset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Dataset_descriptor_,
      Dataset::default_instance_,
      Dataset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, _has_bits_[0]),
      -1,
      -1,
      sizeof(Dataset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dataset, _internal_metadata_),
      -1);
  PoiType_descriptor_ = file->message_type(34);
  static const int PoiType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiType, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiType, name_),
  };
  PoiType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoiType_descriptor_,
      PoiType::default_instance_,
      PoiType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiType, _has_bits_[0]),
      -1,
      -1,
      sizeof(PoiType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiType, _internal_metadata_),
      -1);
  Poi_descriptor_ = file->message_type(35);
  static const int Poi_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, poi_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, administrative_regions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, label_),
  };
  Poi_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Poi_descriptor_,
      Poi::default_instance_,
      Poi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, _has_bits_[0]),
      -1,
      -1,
      sizeof(Poi),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poi, _internal_metadata_),
      -1);
  Network_descriptor_ = file->message_type(36);
  static const int Network_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, impact_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, codes_),
  };
  Network_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Network_descriptor_,
      Network::default_instance_,
      Network_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _has_bits_[0]),
      -1,
      -1,
      sizeof(Network),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _internal_metadata_),
      -1);
  PhysicalMode_descriptor_ = file->message_type(37);
  static const int PhysicalMode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalMode, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalMode, name_),
  };
  PhysicalMode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhysicalMode_descriptor_,
      PhysicalMode::default_instance_,
      PhysicalMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalMode, _has_bits_[0]),
      -1,
      -1,
      sizeof(PhysicalMode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalMode, _internal_metadata_),
      -1);
  CommercialMode_descriptor_ = file->message_type(38);
  static const int CommercialMode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommercialMode, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommercialMode, name_),
  };
  CommercialMode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommercialMode_descriptor_,
      CommercialMode::default_instance_,
      CommercialMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommercialMode, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommercialMode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommercialMode, _internal_metadata_),
      -1);
  Connection_descriptor_ = file->message_type(39);
  static const int Connection_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, display_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, max_duration_),
  };
  Connection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Connection_descriptor_,
      Connection::default_instance_,
      Connection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, _has_bits_[0]),
      -1,
      -1,
      sizeof(Connection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, _internal_metadata_),
      -1);
  Company_descriptor_ = file->message_type(40);
  static const int Company_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, codes_),
  };
  Company_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Company_descriptor_,
      Company::default_instance_,
      Company_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, _has_bits_[0]),
      -1,
      -1,
      sizeof(Company),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, _internal_metadata_),
      -1);
  Address_descriptor_ = file->message_type(41);
  static const int Address_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, administrative_regions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, house_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, label_),
  };
  Address_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      -1,
      -1,
      sizeof(Address),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _internal_metadata_),
      -1);
  CalendarException_descriptor_ = file->message_type(42);
  static const int CalendarException_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarException, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarException, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarException, type_),
  };
  CalendarException_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalendarException_descriptor_,
      CalendarException::default_instance_,
      CalendarException_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarException, _has_bits_[0]),
      -1,
      -1,
      sizeof(CalendarException),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarException, _internal_metadata_),
      -1);
  CalendarPeriod_descriptor_ = file->message_type(43);
  static const int CalendarPeriod_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarPeriod, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarPeriod, end_),
  };
  CalendarPeriod_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalendarPeriod_descriptor_,
      CalendarPeriod::default_instance_,
      CalendarPeriod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarPeriod, _has_bits_[0]),
      -1,
      -1,
      sizeof(CalendarPeriod),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalendarPeriod, _internal_metadata_),
      -1);
  WeekPattern_descriptor_ = file->message_type(44);
  static const int WeekPattern_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, monday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, tuesday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, wednesday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, thursday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, friday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, saturday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, sunday_),
  };
  WeekPattern_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WeekPattern_descriptor_,
      WeekPattern::default_instance_,
      WeekPattern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, _has_bits_[0]),
      -1,
      -1,
      sizeof(WeekPattern),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekPattern, _internal_metadata_),
      -1);
  Calendar_descriptor_ = file->message_type(45);
  static const int Calendar_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, week_pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, active_periods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, exceptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, validity_pattern_),
  };
  Calendar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Calendar_descriptor_,
      Calendar::default_instance_,
      Calendar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, _has_bits_[0]),
      -1,
      -1,
      sizeof(Calendar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Calendar, _internal_metadata_),
      -1);
  ValidityPattern_descriptor_ = file->message_type(46);
  static const int ValidityPattern_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityPattern, beginning_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityPattern, days_),
  };
  ValidityPattern_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ValidityPattern_descriptor_,
      ValidityPattern::default_instance_,
      ValidityPattern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityPattern, _has_bits_[0]),
      -1,
      -1,
      sizeof(ValidityPattern),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValidityPattern, _internal_metadata_),
      -1);
  LocationContext_descriptor_ = file->message_type(47);
  static const int LocationContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationContext, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationContext, access_duration_),
  };
  LocationContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocationContext_descriptor_,
      LocationContext::default_instance_,
      LocationContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationContext, _has_bits_[0]),
      -1,
      -1,
      sizeof(LocationContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationContext, _internal_metadata_),
      -1);
  PtObject_descriptor_ = file->message_type(48);
  static const int PtObject_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, embedded_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, stop_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, commercial_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, administrative_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, company_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, vehicle_journey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, calendar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, trip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, stop_points_nearby_),
  };
  PtObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PtObject_descriptor_,
      PtObject::default_instance_,
      PtObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(PtObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtObject, _internal_metadata_),
      -1);
  FareZone_descriptor_ = file->message_type(49);
  static const int FareZone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FareZone, name_),
  };
  FareZone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FareZone_descriptor_,
      FareZone::default_instance_,
      FareZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FareZone, _has_bits_[0]),
      -1,
      -1,
      sizeof(FareZone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FareZone, _internal_metadata_),
      -1);
  EquipmentDetails_descriptor_ = file->message_type(50);
  static const int EquipmentDetails_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDetails, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDetails, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDetails, embedded_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDetails, current_availability_),
  };
  EquipmentDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EquipmentDetails_descriptor_,
      EquipmentDetails::default_instance_,
      EquipmentDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(EquipmentDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDetails, _internal_metadata_),
      -1);
  EquipmentDetails_EquipmentType_descriptor_ = EquipmentDetails_descriptor_->enum_type(0);
  CurrentAvailability_descriptor_ = file->message_type(51);
  static const int CurrentAvailability_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentAvailability, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentAvailability, periods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentAvailability, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentAvailability, cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentAvailability, effect_),
  };
  CurrentAvailability_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CurrentAvailability_descriptor_,
      CurrentAvailability::default_instance_,
      CurrentAvailability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentAvailability, _has_bits_[0]),
      -1,
      -1,
      sizeof(CurrentAvailability),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentAvailability, _internal_metadata_),
      -1);
  CurrentAvailability_EquipmentStatus_descriptor_ = CurrentAvailability_descriptor_->enum_type(0);
  EquipmentCause_descriptor_ = file->message_type(52);
  static const int EquipmentCause_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCause, label_),
  };
  EquipmentCause_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EquipmentCause_descriptor_,
      EquipmentCause::default_instance_,
      EquipmentCause_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCause, _has_bits_[0]),
      -1,
      -1,
      sizeof(EquipmentCause),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCause, _internal_metadata_),
      -1);
  EquipmentEffect_descriptor_ = file->message_type(53);
  static const int EquipmentEffect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentEffect, label_),
  };
  EquipmentEffect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EquipmentEffect_descriptor_,
      EquipmentEffect::default_instance_,
      EquipmentEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentEffect, _has_bits_[0]),
      -1,
      -1,
      sizeof(EquipmentEffect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentEffect, _internal_metadata_),
      -1);
  StopAreaEquipment_descriptor_ = file->message_type(54);
  static const int StopAreaEquipment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAreaEquipment, stop_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAreaEquipment, equipment_details_),
  };
  StopAreaEquipment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopAreaEquipment_descriptor_,
      StopAreaEquipment::default_instance_,
      StopAreaEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAreaEquipment, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopAreaEquipment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAreaEquipment, _internal_metadata_),
      -1);
  NavitiaType_descriptor_ = file->enum_type(0);
  API_descriptor_ = file->enum_type(1);
  ResponseStatus_descriptor_ = file->enum_type(2);
  ActiveStatus_descriptor_ = file->enum_type(3);
  MessageStatus_descriptor_ = file->enum_type(4);
  StopTimeUpdateStatus_descriptor_ = file->enum_type(5);
  OdtLevel_descriptor_ = file->enum_type(6);
  RTLevel_descriptor_ = file->enum_type(7);
  ExceptionType_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_type_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Code_descriptor_, &Code::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Period_descriptor_, &Period::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Channel_descriptor_, &Channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageContent_descriptor_, &MessageContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Severity_descriptor_, &Severity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopTimeUpdate_descriptor_, &StopTimeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LineSectionImpact_descriptor_, &LineSectionImpact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImpactedObject_descriptor_, &ImpactedObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DisruptionProperty_descriptor_, &DisruptionProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Impact_descriptor_, &Impact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeographicalCoord_descriptor_, &GeographicalCoord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdministrativeRegion_descriptor_, &AdministrativeRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Comment_descriptor_, &Comment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopArea_descriptor_, &StopArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopPoint_descriptor_, &StopPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LineString_descriptor_, &LineString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiLineString_descriptor_, &MultiLineString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Line_descriptor_, &Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LineGroup_descriptor_, &LineGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Route_descriptor_, &Route::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JourneyPattern_descriptor_, &JourneyPattern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Destination_descriptor_, &Destination::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Note_descriptor_, &Note::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Properties_descriptor_, &Properties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hasEquipments_descriptor_, &hasEquipments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopDateTime_descriptor_, &StopDateTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopTime_descriptor_, &StopTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VehicleJourney_descriptor_, &VehicleJourney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trip_descriptor_, &Trip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JourneyPatternPoint_descriptor_, &JourneyPatternPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Contributor_descriptor_, &Contributor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Dataset_descriptor_, &Dataset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoiType_descriptor_, &PoiType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Poi_descriptor_, &Poi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Network_descriptor_, &Network::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhysicalMode_descriptor_, &PhysicalMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommercialMode_descriptor_, &CommercialMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Connection_descriptor_, &Connection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Company_descriptor_, &Company::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalendarException_descriptor_, &CalendarException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalendarPeriod_descriptor_, &CalendarPeriod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WeekPattern_descriptor_, &WeekPattern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Calendar_descriptor_, &Calendar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ValidityPattern_descriptor_, &ValidityPattern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocationContext_descriptor_, &LocationContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PtObject_descriptor_, &PtObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FareZone_descriptor_, &FareZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EquipmentDetails_descriptor_, &EquipmentDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CurrentAvailability_descriptor_, &CurrentAvailability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EquipmentCause_descriptor_, &EquipmentCause::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EquipmentEffect_descriptor_, &EquipmentEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopAreaEquipment_descriptor_, &StopAreaEquipment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_type_2eproto() {
  delete Code::default_instance_;
  delete Code_reflection_;
  delete Period::default_instance_;
  delete Period_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete Channel::default_instance_;
  delete Channel_reflection_;
  delete MessageContent::default_instance_;
  delete MessageContent_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Severity::default_instance_;
  delete Severity_reflection_;
  delete StopTimeUpdate::default_instance_;
  delete StopTimeUpdate_reflection_;
  delete LineSectionImpact::default_instance_;
  delete LineSectionImpact_reflection_;
  delete ImpactedObject::default_instance_;
  delete ImpactedObject_reflection_;
  delete DisruptionProperty::default_instance_;
  delete DisruptionProperty_reflection_;
  delete Impact::default_instance_;
  delete Impact_reflection_;
  delete GeographicalCoord::default_instance_;
  delete GeographicalCoord_reflection_;
  delete AdministrativeRegion::default_instance_;
  delete AdministrativeRegion_reflection_;
  delete Comment::default_instance_;
  delete Comment_reflection_;
  delete StopArea::default_instance_;
  delete StopArea_reflection_;
  delete StopPoint::default_instance_;
  delete StopPoint_reflection_;
  delete LineString::default_instance_;
  delete LineString_reflection_;
  delete MultiLineString::default_instance_;
  delete MultiLineString_reflection_;
  delete Line::default_instance_;
  delete Line_reflection_;
  delete LineGroup::default_instance_;
  delete LineGroup_reflection_;
  delete Route::default_instance_;
  delete Route_reflection_;
  delete JourneyPattern::default_instance_;
  delete JourneyPattern_reflection_;
  delete Destination::default_instance_;
  delete Destination_reflection_;
  delete Note::default_instance_;
  delete Note_reflection_;
  delete Properties::default_instance_;
  delete Properties_reflection_;
  delete hasEquipments::default_instance_;
  delete hasEquipments_reflection_;
  delete StopDateTime::default_instance_;
  delete StopDateTime_reflection_;
  delete StopTime::default_instance_;
  delete StopTime_reflection_;
  delete VehicleJourney::default_instance_;
  delete VehicleJourney_reflection_;
  delete Trip::default_instance_;
  delete Trip_reflection_;
  delete JourneyPatternPoint::default_instance_;
  delete JourneyPatternPoint_reflection_;
  delete Contributor::default_instance_;
  delete Contributor_reflection_;
  delete Dataset::default_instance_;
  delete Dataset_reflection_;
  delete PoiType::default_instance_;
  delete PoiType_reflection_;
  delete Poi::default_instance_;
  delete Poi_reflection_;
  delete Network::default_instance_;
  delete Network_reflection_;
  delete PhysicalMode::default_instance_;
  delete PhysicalMode_reflection_;
  delete CommercialMode::default_instance_;
  delete CommercialMode_reflection_;
  delete Connection::default_instance_;
  delete Connection_reflection_;
  delete Company::default_instance_;
  delete Company_reflection_;
  delete Address::default_instance_;
  delete Address_reflection_;
  delete CalendarException::default_instance_;
  delete CalendarException_reflection_;
  delete CalendarPeriod::default_instance_;
  delete CalendarPeriod_reflection_;
  delete WeekPattern::default_instance_;
  delete WeekPattern_reflection_;
  delete Calendar::default_instance_;
  delete Calendar_reflection_;
  delete ValidityPattern::default_instance_;
  delete ValidityPattern_reflection_;
  delete LocationContext::default_instance_;
  delete LocationContext_reflection_;
  delete PtObject::default_instance_;
  delete PtObject_reflection_;
  delete FareZone::default_instance_;
  delete FareZone_reflection_;
  delete EquipmentDetails::default_instance_;
  delete EquipmentDetails_reflection_;
  delete CurrentAvailability::default_instance_;
  delete CurrentAvailability_reflection_;
  delete EquipmentCause::default_instance_;
  delete EquipmentCause_reflection_;
  delete EquipmentEffect::default_instance_;
  delete EquipmentEffect_reflection_;
  delete StopAreaEquipment::default_instance_;
  delete StopAreaEquipment_reflection_;
}

void protobuf_AddDesc_type_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_type_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntype.proto\022\tpbnavitia\"#\n\004Code\022\014\n\004type\030"
    "\001 \002(\t\022\r\n\005value\030\002 \002(\t\"$\n\006Period\022\r\n\005begin\030"
    "\001 \001(\004\022\013\n\003end\030\002 \001(\004\"\'\n\010Property\022\014\n\004name\030\001"
    " \001(\t\022\r\n\005value\030\002 \001(\t\"\377\001\n\007Channel\022\n\n\002id\030\001 "
    "\001(\t\022\014\n\004name\030\002 \001(\t\022\024\n\014content_type\030\003 \001(\t\022"
    "5\n\rchannel_types\030\004 \003(\0162\036.pbnavitia.Chann"
    "el.ChannelType\"\214\001\n\013ChannelType\022\007\n\003web\020\001\022"
    "\007\n\003sms\020\002\022\t\n\005email\020\003\022\n\n\006mobile\020\004\022\020\n\014notif"
    "ication\020\005\022\013\n\007twitter\020\006\022\014\n\010facebook\020\007\022\020\n\014"
    "unknown_type\020\010\022\t\n\005title\020\t\022\n\n\006beacon\020\n\"C\n"
    "\016MessageContent\022\014\n\004text\030\001 \001(\t\022#\n\007channel"
    "\030\004 \001(\0132\022.pbnavitia.Channel\"\360\001\n\007Message\022\013"
    "\n\003uri\030\001 \001(\t\022\017\n\007message\030\002 \001(\t\022\r\n\005title\030\003 "
    "\001(\t\022\036\n\026start_application_date\030\004 \001(\004\022\034\n\024e"
    "nd_application_date\030\005 \001(\004\022$\n\034start_appli"
    "cation_daily_hour\030\006 \001(\t\022\"\n\032end_applicati"
    "on_daily_hour\030\007 \001(\t\0220\n\016message_status\030\010 "
    "\001(\0162\030.pbnavitia.MessageStatus\"\255\002\n\010Severi"
    "ty\022\014\n\004name\030\001 \001(\t\022\r\n\005color\030\002 \001(\t\022:\n\006effec"
    "t\030\003 \001(\0162\032.pbnavitia.Severity.Effect:\016UNK"
    "NOWN_EFFECT\022\020\n\010priority\030\004 \001(\005\"\265\001\n\006Effect"
    "\022\016\n\nNO_SERVICE\020\001\022\023\n\017REDUCED_SERVICE\020\002\022\026\n"
    "\022SIGNIFICANT_DELAYS\020\003\022\n\n\006DETOUR\020\004\022\026\n\022ADD"
    "ITIONAL_SERVICE\020\005\022\024\n\020MODIFIED_SERVICE\020\006\022"
    "\020\n\014OTHER_EFFECT\020\007\022\022\n\016UNKNOWN_EFFECT\020\010\022\016\n"
    "\nSTOP_MOVED\020\t\"\336\002\n\016StopTimeUpdate\022.\n\021amen"
    "ded_stop_time\030\001 \001(\0132\023.pbnavitia.StopTime"
    "\022+\n\016base_stop_time\030\002 \001(\0132\023.pbnavitia.Sto"
    "pTime\022\r\n\005cause\030\003 \001(\t\022/\n\006effect\030\004 \001(\0162\037.p"
    "bnavitia.StopTimeUpdateStatus\022(\n\nstop_po"
    "int\030\005 \001(\0132\024.pbnavitia.StopPoint\0229\n\020depar"
    "ture_status\030\006 \001(\0162\037.pbnavitia.StopTimeUp"
    "dateStatus\0227\n\016arrival_status\030\007 \001(\0162\037.pbn"
    "avitia.StopTimeUpdateStatus\022\021\n\tis_detour"
    "\030\010 \001(\010\"y\n\021LineSectionImpact\022!\n\004from\030\001 \001("
    "\0132\023.pbnavitia.PtObject\022\037\n\002to\030\002 \001(\0132\023.pbn"
    "avitia.PtObject\022 \n\006routes\030\003 \003(\0132\020.pbnavi"
    "tia.Route\"\243\001\n\016ImpactedObject\022&\n\tpt_objec"
    "t\030\001 \001(\0132\023.pbnavitia.PtObject\0221\n\016impacted"
    "_stops\030\002 \003(\0132\031.pbnavitia.StopTimeUpdate\022"
    "6\n\020impacted_section\030\003 \001(\0132\034.pbnavitia.Li"
    "neSectionImpact\">\n\022DisruptionProperty\022\013\n"
    "\003key\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\r\n\005value\030\003 \002(\t\""
    "\232\003\n\006Impact\022\013\n\003uri\030\001 \001(\t\022\026\n\016disruption_ur"
    "i\030\002 \001(\t\022.\n\023application_periods\030\n \003(\0132\021.p"
    "bnavitia.Period\022\'\n\006status\030\013 \001(\0162\027.pbnavi"
    "tia.ActiveStatus\022\022\n\nupdated_at\030\014 \001(\004\022\014\n\004"
    "tags\030\r \003(\t\022\r\n\005cause\030\016 \001(\t\022+\n\010messages\030\017 "
    "\003(\0132\031.pbnavitia.MessageContent\022%\n\010severi"
    "ty\030\020 \001(\0132\023.pbnavitia.Severity\022\023\n\013contrib"
    "utor\030\021 \001(\t\0223\n\020impacted_objects\030\022 \003(\0132\031.p"
    "bnavitia.ImpactedObject\022\020\n\010category\030\023 \001("
    "\t\0221\n\nproperties\030\024 \003(\0132\035.pbnavitia.Disrup"
    "tionProperty\"-\n\021GeographicalCoord\022\013\n\003lon"
    "\030\001 \002(\001\022\013\n\003lat\030\002 \002(\001\"\313\001\n\024AdministrativeRe"
    "gion\022\013\n\003uri\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\020\n\010zip_c"
    "ode\030\004 \001(\t\022\r\n\005level\030\005 \001(\005\022+\n\005coord\030\006 \001(\0132"
    "\034.pbnavitia.GeographicalCoord\022\r\n\005label\030\007"
    " \001(\t\022\r\n\005insee\030\010 \001(\t\022,\n\017main_stop_areas\030\t"
    " \003(\0132\023.pbnavitia.StopArea\"&\n\007Comment\022\r\n\005"
    "value\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\"\306\003\n\010StopArea\022\014"
    "\n\004name\030\003 \001(\t\022\013\n\003uri\030\004 \001(\t\022+\n\005coord\030\005 \001(\013"
    "2\034.pbnavitia.GeographicalCoord\022\?\n\026admini"
    "strative_regions\030\n \003(\0132\037.pbnavitia.Admin"
    "istrativeRegion\022)\n\013stop_points\030\010 \003(\0132\024.p"
    "bnavitia.StopPoint\022$\n\010messages\030\t \003(\0132\022.p"
    "bnavitia.Message\022\023\n\013impact_uris\030\031 \003(\t\022$\n"
    "\010comments\030\027 \003(\0132\022.pbnavitia.Comment\022\036\n\005c"
    "odes\030\014 \003(\0132\017.pbnavitia.Code\022\020\n\010timezone\030"
    "\017 \001(\t\022\r\n\005label\030\020 \001(\t\0223\n\020commercial_modes"
    "\030\025 \003(\0132\031.pbnavitia.CommercialMode\022/\n\016phy"
    "sical_modes\030\026 \003(\0132\027.pbnavitia.PhysicalMo"
    "de\"\200\005\n\tStopPoint\022\014\n\004name\030\003 \001(\t\022\?\n\026admini"
    "strative_regions\030\n \003(\0132\037.pbnavitia.Admin"
    "istrativeRegion\022\013\n\003uri\030\005 \001(\t\022+\n\005coord\030\006 "
    "\001(\0132\034.pbnavitia.GeographicalCoord\022&\n\tsto"
    "p_area\030\007 \001(\0132\023.pbnavitia.StopArea\0220\n\016has"
    "_equipments\030\010 \001(\0132\030.pbnavitia.hasEquipme"
    "nts\022$\n\010messages\030\t \003(\0132\022.pbnavitia.Messag"
    "e\022\023\n\013impact_uris\030\026 \003(\t\022$\n\010comments\030\020 \003(\013"
    "2\022.pbnavitia.Comment\022\036\n\005codes\030\014 \003(\0132\017.pb"
    "navitia.Code\022#\n\007address\030\r \001(\0132\022.pbnaviti"
    "a.Address\022\025\n\rplatform_code\030\016 \001(\t\022\r\n\005labe"
    "l\030\017 \001(\t\0223\n\020commercial_modes\030\021 \003(\0132\031.pbna"
    "vitia.CommercialMode\022/\n\016physical_modes\030\022"
    " \003(\0132\027.pbnavitia.PhysicalMode\022&\n\tfare_zo"
    "ne\030\023 \001(\0132\023.pbnavitia.FareZone\0226\n\021equipme"
    "nt_details\030\024 \003(\0132\033.pbnavitia.EquipmentDe"
    "tails\"\?\n\nLineString\0221\n\013coordinates\030\001 \003(\013"
    "2\034.pbnavitia.GeographicalCoord\"G\n\017MultiL"
    "ineString\022$\n\005lines\030\001 \003(\0132\025.pbnavitia.Lin"
    "eString\022\016\n\006length\030\002 \001(\001\"\254\004\n\004Line\022\014\n\004name"
    "\030\003 \001(\t\022\013\n\003uri\030\004 \001(\t\022\014\n\004code\030\005 \001(\t\022\r\n\005col"
    "or\030\t \001(\t\022 \n\006routes\030\n \003(\0132\020.pbnavitia.Rou"
    "te\0222\n\017commercial_mode\030\013 \001(\0132\031.pbnavitia."
    "CommercialMode\022/\n\016physical_modes\030\014 \003(\0132\027"
    ".pbnavitia.PhysicalMode\022#\n\007network\030\r \001(\013"
    "2\022.pbnavitia.Network\022$\n\010messages\030\016 \003(\0132\022"
    ".pbnavitia.Message\022\023\n\013impact_uris\030\032 \003(\t\022"
    "$\n\010comments\030\026 \003(\0132\022.pbnavitia.Comment\022\036\n"
    "\005codes\030\020 \003(\0132\017.pbnavitia.Code\022+\n\007geojson"
    "\030\021 \001(\0132\032.pbnavitia.MultiLineString\022\024\n\014op"
    "ening_time\030\022 \001(\r\022\024\n\014closing_time\030\023 \001(\r\022\'"
    "\n\nproperties\030\025 \003(\0132\023.pbnavitia.Property\022"
    ")\n\013line_groups\030\027 \003(\0132\024.pbnavitia.LineGro"
    "up\022\022\n\ntext_color\030\030 \001(\t\"\220\001\n\tLineGroup\022\014\n\004"
    "name\030\001 \001(\t\022\013\n\003uri\030\002 \001(\t\022$\n\010comments\030\003 \003("
    "\0132\022.pbnavitia.Comment\022\036\n\005lines\030\004 \003(\0132\017.p"
    "bnavitia.Line\022\"\n\tmain_line\030\005 \001(\0132\017.pbnav"
    "itia.Line\"\326\003\n\005Route\022\014\n\004name\030\003 \001(\t\022\013\n\003uri"
    "\030\004 \001(\t\022\024\n\014is_frequence\030\005 \001(\010\022\035\n\004line\030\007 \001"
    "(\0132\017.pbnavitia.Line\0223\n\020journey_patterns\030"
    "\010 \003(\0132\031.pbnavitia.JourneyPattern\022$\n\010mess"
    "ages\030\t \003(\0132\022.pbnavitia.Message\022\023\n\013impact"
    "_uris\030\022 \003(\t\022\036\n\005codes\030\n \003(\0132\017.pbnavitia.C"
    "ode\022)\n\013stop_points\030\001 \003(\0132\024.pbnavitia.Sto"
    "pPoint\022&\n\tdirection\030\014 \001(\0132\023.pbnavitia.Pt"
    "Object\022+\n\007geojson\030\r \001(\0132\032.pbnavitia.Mult"
    "iLineString\022/\n\016physical_modes\030\016 \003(\0132\027.pb"
    "navitia.PhysicalMode\022$\n\010comments\030\017 \003(\0132\022"
    ".pbnavitia.Comment\022\026\n\016direction_type\030\021 \001"
    "(\t\"\215\002\n\016JourneyPattern\022\014\n\004name\030\003 \001(\t\022\013\n\003u"
    "ri\030\004 \001(\t\022\024\n\014is_frequence\030\005 \001(\010\022.\n\rphysic"
    "al_mode\030\006 \001(\0132\027.pbnavitia.PhysicalMode\022\037"
    "\n\005route\030\007 \001(\0132\020.pbnavitia.Route\022>\n\026journ"
    "ey_pattern_points\030\010 \003(\0132\036.pbnavitia.Jour"
    "neyPatternPoint\022$\n\010messages\030\t \003(\0132\022.pbna"
    "vitia.Message\022\023\n\013impact_uris\030\026 \003(\t\"/\n\013De"
    "stination\022\013\n\003uri\030\001 \002(\t\022\023\n\013destination\030\002 "
    "\001(\t\"7\n\004Note\022\013\n\003uri\030\001 \002(\t\022\014\n\004note\030\002 \001(\t\022\024"
    "\n\014comment_type\030\003 \001(\t\"\345\002\n\nProperties\022L\n\027a"
    "dditional_informations\030\001 \003(\0162+.pbnavitia"
    ".Properties.AdditionalInformation\022\036\n\005not"
    "es\030\005 \003(\0132\017.pbnavitia.Note\0220\n\nexceptions\030"
    "\006 \003(\0132\034.pbnavitia.CalendarException\022+\n\013d"
    "estination\030\007 \001(\0132\026.pbnavitia.Destination"
    "\022\032\n\022vehicle_journey_id\030\010 \001(\t\"n\n\025Addition"
    "alInformation\022\020\n\014pick_up_only\020\001\022\021\n\rdrop_"
    "off_only\020\002\022\027\n\023on_demand_transport\020\003\022\027\n\023d"
    "ate_time_estimated\020\004\"\240\003\n\rhasEquipments\022:"
    "\n\016has_equipments\030\001 \003(\0162\".pbnavitia.hasEq"
    "uipments.Equipment\"\322\002\n\tEquipment\022 \n\034has_"
    "wheelchair_accessibility\020\001\022\025\n\021has_bike_a"
    "ccepted\020\002\022\027\n\023has_air_conditioned\020\003\022\033\n\027ha"
    "s_visual_announcement\020\004\022\034\n\030has_audible_a"
    "nnouncement\020\005\022\032\n\026has_appropriate_escort\020"
    "\006\022\033\n\027has_appropriate_signage\020\007\022\026\n\022has_sc"
    "hool_vehicle\020\010\022\033\n\027has_wheelchair_boardin"
    "g\020\t\022\021\n\rhas_sheltered\020\n\022\020\n\014has_elevator\020\013"
    "\022\021\n\rhas_escalator\020\014\022\022\n\016has_bike_depot\020\r\""
    "\357\002\n\014StopDateTime\022\031\n\021arrival_date_time\030\001 "
    "\001(\004\022\033\n\023departure_date_time\030\002 \001(\004\022\036\n\026base"
    "_arrival_date_time\030\005 \001(\004\022 \n\030base_departu"
    "re_date_time\030\006 \001(\004\022(\n\nstop_point\030\003 \001(\0132\024"
    ".pbnavitia.StopPoint\022)\n\nproperties\030\004 \001(\013"
    "2\025.pbnavitia.Properties\022*\n\016data_freshnes"
    "s\030\007 \001(\0162\022.pbnavitia.RTLevel\0222\n\020departure"
    "_status\030\010 \001(\0162\030.pbnavitia.MessageStatus\022"
    "0\n\016arrival_status\030\t \001(\0162\030.pbnavitia.Mess"
    "ageStatus\"\317\002\n\010StopTime\022\024\n\014arrival_time\030\001"
    " \001(\004\022\030\n\020utc_arrival_time\030\n \001(\004\022\026\n\016depart"
    "ure_time\030\003 \001(\004\022\032\n\022utc_departure_time\030\013 \001"
    "(\004\0222\n\017vehicle_journey\030\004 \001(\0132\031.pbnavitia."
    "VehicleJourney\022=\n\025journey_pattern_point\030"
    "\005 \001(\0132\036.pbnavitia.JourneyPatternPoint\022\026\n"
    "\016pickup_allowed\030\006 \001(\010\022\030\n\020drop_off_allowe"
    "d\030\007 \001(\010\022\020\n\010headsign\030\010 \001(\t\022(\n\nstop_point\030"
    "\t \001(\0132\024.pbnavitia.StopPoint\"\267\006\n\016VehicleJ"
    "ourney\022\014\n\004name\030\003 \001(\t\022\013\n\003uri\030\004 \001(\t\022\'\n\nsto"
    "p_times\030\006 \003(\0132\023.pbnavitia.StopTime\022\037\n\005ro"
    "ute\030\007 \001(\0132\020.pbnavitia.Route\0222\n\017journey_p"
    "attern\030\010 \001(\0132\031.pbnavitia.JourneyPattern\022"
    "\035\n\004trip\030\t \001(\0132\017.pbnavitia.Trip\022$\n\010messag"
    "es\030\n \003(\0132\022.pbnavitia.Message\022\023\n\013impact_u"
    "ris\030  \003(\t\022\022\n\nis_adapted\030\013 \001(\010\0224\n\020validit"
    "y_pattern\030\014 \001(\0132\032.pbnavitia.ValidityPatt"
    "ern\022<\n\030adapted_validity_pattern\030\r \001(\0132\032."
    "pbnavitia.ValidityPattern\022\023\n\013odt_message"
    "\030\016 \001(\t\022\035\n\025wheelchair_accessible\030\020 \001(\010\022\025\n"
    "\rbike_accepted\030\021 \001(\010\022\027\n\017air_conditioned\030"
    "\022 \001(\010\022\033\n\023visual_announcement\030\023 \001(\010\022\034\n\024au"
    "dible_announcement\030\024 \001(\010\022\032\n\022appropriate_"
    "escort\030\025 \001(\010\022\033\n\023appropriate_signage\030\026 \001("
    "\010\022\026\n\016school_vehicle\030\027 \001(\010\022$\n\010comments\030\033 "
    "\003(\0132\022.pbnavitia.Comment\022\036\n\005codes\030\031 \003(\0132\017"
    ".pbnavitia.Code\022&\n\tcalendars\030\032 \003(\0132\023.pbn"
    "avitia.Calendar\022\022\n\nstart_time\030\034 \001(\004\022\020\n\010e"
    "nd_time\030\035 \001(\004\022\024\n\014headway_secs\030\036 \001(\004\022\020\n\010h"
    "eadsign\030! \001(\t\"!\n\004Trip\022\013\n\003uri\030\001 \001(\t\022\014\n\004na"
    "me\030\002 \001(\t\"\312\001\n\023JourneyPatternPoint\022\013\n\003uri\030"
    "\003 \001(\t\022\r\n\005order\030\004 \001(\005\022(\n\nstop_point\030\005 \001(\013"
    "2\024.pbnavitia.StopPoint\0222\n\017journey_patter"
    "n\030\006 \001(\0132\031.pbnavitia.JourneyPattern\022$\n\010me"
    "ssages\030\007 \003(\0132\022.pbnavitia.Message\022\023\n\013impa"
    "ct_uris\030\026 \003(\t\"J\n\013Contributor\022\013\n\003uri\030\001 \001("
    "\t\022\014\n\004name\030\002 \001(\t\022\017\n\007website\030\003 \001(\t\022\017\n\007lice"
    "nse\030\004 \001(\t\"\311\001\n\007Dataset\022\013\n\003uri\030\001 \002(\t\022+\n\013co"
    "ntributor\030\002 \002(\0132\026.pbnavitia.Contributor\022"
    "\035\n\025start_validation_date\030\003 \002(\004\022\033\n\023end_va"
    "lidation_date\030\004 \002(\004\022*\n\016realtime_level\030\005 "
    "\002(\0162\022.pbnavitia.RTLevel\022\014\n\004desc\030\006 \001(\t\022\016\n"
    "\006system\030\007 \001(\t\"$\n\007PoiType\022\013\n\003uri\030\001 \001(\t\022\014\n"
    "\004name\030\002 \001(\t\"\215\002\n\003Poi\022\013\n\003uri\030\003 \001(\t\022\014\n\004name"
    "\030\004 \001(\t\022+\n\005coord\030\006 \001(\0132\034.pbnavitia.Geogra"
    "phicalCoord\022$\n\010poi_type\030\007 \001(\0132\022.pbnaviti"
    "a.PoiType\022\?\n\026administrative_regions\030\n \003("
    "\0132\037.pbnavitia.AdministrativeRegion\022#\n\007ad"
    "dress\030\013 \001(\0132\022.pbnavitia.Address\022#\n\nprope"
    "rties\030\014 \003(\0132\017.pbnavitia.Code\022\r\n\005label\030\r "
    "\001(\t\"\177\n\007Network\022\013\n\003uri\030\003 \001(\t\022\014\n\004name\030\004 \001("
    "\t\022$\n\010messages\030\006 \003(\0132\022.pbnavitia.Message\022"
    "\023\n\013impact_uris\030\026 \003(\t\022\036\n\005codes\030\007 \003(\0132\017.pb"
    "navitia.Code\")\n\014PhysicalMode\022\013\n\003uri\030\003 \001("
    "\t\022\014\n\004name\030\004 \001(\t\"+\n\016CommercialMode\022\013\n\003uri"
    "\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\"\237\001\n\nConnection\022$\n\006o"
    "rigin\030\001 \001(\0132\024.pbnavitia.StopPoint\022)\n\013des"
    "tination\030\002 \001(\0132\024.pbnavitia.StopPoint\022\020\n\010"
    "duration\030\003 \001(\005\022\030\n\020display_duration\030\004 \001(\005"
    "\022\024\n\014max_duration\030\005 \001(\005\"D\n\007Company\022\013\n\003uri"
    "\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\036\n\005codes\030\010 \003(\0132\017.pb"
    "navitia.Code\"\267\001\n\007Address\022\013\n\003uri\030\003 \001(\t\022\014\n"
    "\004name\030\004 \001(\t\022+\n\005coord\030\006 \001(\0132\034.pbnavitia.G"
    "eographicalCoord\022\?\n\026administrative_regio"
    "ns\030\n \003(\0132\037.pbnavitia.AdministrativeRegio"
    "n\022\024\n\014house_number\030\002 \001(\005\022\r\n\005label\030\020 \001(\t\"V"
    "\n\021CalendarException\022\013\n\003uri\030\001 \001(\t\022\014\n\004date"
    "\030\002 \001(\t\022&\n\004type\030\003 \001(\0162\030.pbnavitia.Excepti"
    "onType\",\n\016CalendarPeriod\022\r\n\005begin\030\001 \001(\t\022"
    "\013\n\003end\030\002 \001(\t\"\205\001\n\013WeekPattern\022\016\n\006monday\030\001"
    " \001(\010\022\017\n\007tuesday\030\002 \001(\010\022\021\n\twednesday\030\003 \001(\010"
    "\022\020\n\010thursday\030\004 \001(\010\022\016\n\006friday\030\005 \001(\010\022\020\n\010sa"
    "turday\030\006 \001(\010\022\016\n\006sunday\030\007 \001(\010\"\356\001\n\010Calenda"
    "r\022\013\n\003uri\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022,\n\014week_pat"
    "tern\030\003 \001(\0132\026.pbnavitia.WeekPattern\0221\n\016ac"
    "tive_periods\030\004 \003(\0132\031.pbnavitia.CalendarP"
    "eriod\0220\n\nexceptions\030\005 \003(\0132\034.pbnavitia.Ca"
    "lendarException\0224\n\020validity_pattern\030\006 \001("
    "\0132\032.pbnavitia.ValidityPattern\"7\n\017Validit"
    "yPattern\022\026\n\016beginning_date\030\001 \001(\t\022\014\n\004days"
    "\030\002 \001(\t\"9\n\017LocationContext\022\r\n\005place\030\001 \002(\t"
    "\022\027\n\017access_duration\030\002 \002(\005\"\323\005\n\010PtObject\022\014"
    "\n\004name\030\001 \002(\t\022\013\n\003uri\030\002 \002(\t\022-\n\rembedded_ty"
    "pe\030\003 \001(\0162\026.pbnavitia.NavitiaType\022&\n\tstop"
    "_area\030\004 \001(\0132\023.pbnavitia.StopArea\022\033\n\003poi\030"
    "\005 \001(\0132\016.pbnavitia.Poi\022(\n\nstop_point\030\006 \001("
    "\0132\024.pbnavitia.StopPoint\022#\n\007address\030\007 \001(\013"
    "2\022.pbnavitia.Address\022\035\n\004line\030\t \001(\0132\017.pbn"
    "avitia.Line\022#\n\007network\030\n \001(\0132\022.pbnavitia"
    ".Network\0222\n\017commercial_mode\030\013 \001(\0132\031.pbna"
    "vitia.CommercialMode\022\037\n\005route\030\014 \001(\0132\020.pb"
    "navitia.Route\022>\n\025administrative_region\030\r"
    " \001(\0132\037.pbnavitia.AdministrativeRegion\022\020\n"
    "\010distance\030\016 \001(\005\022\017\n\007quality\030\017 \001(\005\022#\n\007comp"
    "any\030\020 \001(\0132\022.pbnavitia.Company\0222\n\017vehicle"
    "_journey\030\021 \001(\0132\031.pbnavitia.VehicleJourne"
    "y\022%\n\010calendar\030\022 \001(\0132\023.pbnavitia.Calendar"
    "\022\r\n\005score\030\023 \001(\005\022\035\n\004trip\030\024 \001(\0132\017.pbnaviti"
    "a.Trip\022\016\n\006scores\030\025 \003(\005\022/\n\022stop_points_ne"
    "arby\030\026 \003(\0132\023.pbnavitia.PtObject\"\030\n\010FareZ"
    "one\022\014\n\004name\030\001 \001(\t\"\332\001\n\020EquipmentDetails\022\n"
    "\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022@\n\rembedded_typ"
    "e\030\003 \001(\0162).pbnavitia.EquipmentDetails.Equ"
    "ipmentType\022<\n\024current_availability\030\004 \001(\013"
    "2\036.pbnavitia.CurrentAvailability\",\n\rEqui"
    "pmentType\022\r\n\tescalator\020\001\022\014\n\010elevator\020\002\"\243"
    "\002\n\023CurrentAvailability\022>\n\006status\030\001 \001(\0162."
    ".pbnavitia.CurrentAvailability.Equipment"
    "Status\022\"\n\007periods\030\002 \003(\0132\021.pbnavitia.Peri"
    "od\022\022\n\nupdated_at\030\003 \001(\t\022(\n\005cause\030\004 \001(\0132\031."
    "pbnavitia.EquipmentCause\022*\n\006effect\030\005 \001(\013"
    "2\032.pbnavitia.EquipmentEffect\">\n\017Equipmen"
    "tStatus\022\013\n\007unknown\020\000\022\r\n\tavailable\020\001\022\017\n\013u"
    "navailable\020\002\"\037\n\016EquipmentCause\022\r\n\005label\030"
    "\001 \001(\t\" \n\017EquipmentEffect\022\r\n\005label\030\001 \001(\t\""
    "s\n\021StopAreaEquipment\022&\n\tstop_area\030\001 \001(\0132"
    "\023.pbnavitia.StopArea\0226\n\021equipment_detail"
    "s\030\002 \003(\0132\033.pbnavitia.EquipmentDetails*\350\002\n"
    "\013NavitiaType\022\010\n\004LINE\020\001\022\023\n\017JOURNEY_PATTER"
    "N\020\002\022\023\n\017VEHICLE_JOURNEY\020\003\022\016\n\nSTOP_POINT\020\004"
    "\022\r\n\tSTOP_AREA\020\005\022\013\n\007NETWORK\020\006\022\021\n\rPHYSICAL"
    "_MODE\020\007\022\023\n\017COMMERCIAL_MODE\020\010\022\016\n\nCONNECTI"
    "ON\020\t\022\031\n\025JOURNEY_PATTERN_POINT\020\n\022\013\n\007COMPA"
    "NY\020\013\022\t\n\005ROUTE\020\014\022\007\n\003POI\020\r\022\017\n\013CONTRIBUTOR\020"
    "\020\022\013\n\007ADDRESS\020\022\022\013\n\007POITYPE\020\027\022\031\n\025ADMINISTR"
    "ATIVE_REGION\020\026\022\014\n\010CALENDAR\020\031\022\016\n\nLINE_GRO"
    "UP\020\032\022\n\n\006IMPACT\020\033\022\013\n\007DATASET\020\034\022\010\n\004TRIP\020\035*"
    "\332\004\n\003API\022\n\n\006places\020\001\022\021\n\rPTREFERENTIAL\020\002\022\013"
    "\n\007PLANNER\020\004\022\021\n\rplaces_nearby\020\006\022\n\n\006STATUS"
    "\020\007\022\023\n\017NEXT_DEPARTURES\020\010\022\021\n\rNEXT_ARRIVALS"
    "\020\t\022\024\n\020DEPARTURE_BOARDS\020\n\022\023\n\017ROUTE_SCHEDU"
    "LES\020\013\022\r\n\tISOCHRONE\020\r\022\r\n\tMETADATAS\020\016\022\r\n\tp"
    "lace_uri\020\017\022\017\n\013UNKNOWN_API\020\020\022\023\n\017traffic_r"
    "eports\020\032\022\r\n\tcalendars\020\022\022\r\n\tNMPLANNER\020\023\022\016"
    "\n\npt_objects\020\024\022\016\n\nplace_code\020\025\022\017\n\013disrup"
    "tions\020\031\022\027\n\023nearest_stop_points\020\033\022\016\n\npt_p"
    "lanner\020\034\022\027\n\023graphical_isochrone\020\035\022\016\n\ngeo"
    "_status\020\036\022\024\n\020car_co2_emission\020\037\022\017\n\013direc"
    "t_path\020 \022\014\n\010heat_map\020!\022!\n\035street_network"
    "_routing_matrix\020\"\022\023\n\017odt_stop_points\020#\022\023"
    "\n\017matching_routes\020$\022\020\n\014line_reports\020%\022\025\n"
    "\021equipment_reports\020&\022\026\n\022terminus_schedul"
    "es\020\'*\320\001\n\016ResponseStatus\022\010\n\004none\020\000\022\031\n\025no_"
    "departure_this_day\020\001\022\033\n\027no_active_mode_t"
    "his_day\020\002\022\"\n\036no_active_circulation_this_"
    "day\020\003\022\014\n\010terminus\020\006\022\025\n\021date_out_of_bound"
    "\020\007\022\024\n\020partial_terminus\020\010\022\006\n\002ok\020\t\022\025\n\021acti"
    "ve_disruption\020\n*0\n\014ActiveStatus\022\010\n\004past\020"
    "\000\022\n\n\006active\020\001\022\n\n\006future\020\002*:\n\rMessageStat"
    "us\022\017\n\013information\020\000\022\013\n\007warning\020\001\022\013\n\007disr"
    "upt\020\002*J\n\024StopTimeUpdateStatus\022\013\n\007DELAYED"
    "\020\000\022\t\n\005ADDED\020\001\022\013\n\007DELETED\020\002\022\r\n\tUNCHANGED\020"
    "\003*=\n\010OdtLevel\022\r\n\tscheduled\020\000\022\016\n\nwith_sto"
    "ps\020\001\022\t\n\005zonal\020\002\022\007\n\003all\020\003*@\n\007RTLevel\022\021\n\rB"
    "ASE_SCHEDULE\020\001\022\024\n\020ADAPTED_SCHEDULE\020\002\022\014\n\010"
    "REALTIME\020\003*$\n\rExceptionType\022\007\n\003Add\020\000\022\n\n\006"
    "Remove\020\001", 12608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "type.proto", &protobuf_RegisterTypes);
  Code::default_instance_ = new Code();
  Period::default_instance_ = new Period();
  Property::default_instance_ = new Property();
  Channel::default_instance_ = new Channel();
  MessageContent::default_instance_ = new MessageContent();
  Message::default_instance_ = new Message();
  Severity::default_instance_ = new Severity();
  StopTimeUpdate::default_instance_ = new StopTimeUpdate();
  LineSectionImpact::default_instance_ = new LineSectionImpact();
  ImpactedObject::default_instance_ = new ImpactedObject();
  DisruptionProperty::default_instance_ = new DisruptionProperty();
  Impact::default_instance_ = new Impact();
  GeographicalCoord::default_instance_ = new GeographicalCoord();
  AdministrativeRegion::default_instance_ = new AdministrativeRegion();
  Comment::default_instance_ = new Comment();
  StopArea::default_instance_ = new StopArea();
  StopPoint::default_instance_ = new StopPoint();
  LineString::default_instance_ = new LineString();
  MultiLineString::default_instance_ = new MultiLineString();
  Line::default_instance_ = new Line();
  LineGroup::default_instance_ = new LineGroup();
  Route::default_instance_ = new Route();
  JourneyPattern::default_instance_ = new JourneyPattern();
  Destination::default_instance_ = new Destination();
  Note::default_instance_ = new Note();
  Properties::default_instance_ = new Properties();
  hasEquipments::default_instance_ = new hasEquipments();
  StopDateTime::default_instance_ = new StopDateTime();
  StopTime::default_instance_ = new StopTime();
  VehicleJourney::default_instance_ = new VehicleJourney();
  Trip::default_instance_ = new Trip();
  JourneyPatternPoint::default_instance_ = new JourneyPatternPoint();
  Contributor::default_instance_ = new Contributor();
  Dataset::default_instance_ = new Dataset();
  PoiType::default_instance_ = new PoiType();
  Poi::default_instance_ = new Poi();
  Network::default_instance_ = new Network();
  PhysicalMode::default_instance_ = new PhysicalMode();
  CommercialMode::default_instance_ = new CommercialMode();
  Connection::default_instance_ = new Connection();
  Company::default_instance_ = new Company();
  Address::default_instance_ = new Address();
  CalendarException::default_instance_ = new CalendarException();
  CalendarPeriod::default_instance_ = new CalendarPeriod();
  WeekPattern::default_instance_ = new WeekPattern();
  Calendar::default_instance_ = new Calendar();
  ValidityPattern::default_instance_ = new ValidityPattern();
  LocationContext::default_instance_ = new LocationContext();
  PtObject::default_instance_ = new PtObject();
  FareZone::default_instance_ = new FareZone();
  EquipmentDetails::default_instance_ = new EquipmentDetails();
  CurrentAvailability::default_instance_ = new CurrentAvailability();
  EquipmentCause::default_instance_ = new EquipmentCause();
  EquipmentEffect::default_instance_ = new EquipmentEffect();
  StopAreaEquipment::default_instance_ = new StopAreaEquipment();
  Code::default_instance_->InitAsDefaultInstance();
  Period::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  Channel::default_instance_->InitAsDefaultInstance();
  MessageContent::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  Severity::default_instance_->InitAsDefaultInstance();
  StopTimeUpdate::default_instance_->InitAsDefaultInstance();
  LineSectionImpact::default_instance_->InitAsDefaultInstance();
  ImpactedObject::default_instance_->InitAsDefaultInstance();
  DisruptionProperty::default_instance_->InitAsDefaultInstance();
  Impact::default_instance_->InitAsDefaultInstance();
  GeographicalCoord::default_instance_->InitAsDefaultInstance();
  AdministrativeRegion::default_instance_->InitAsDefaultInstance();
  Comment::default_instance_->InitAsDefaultInstance();
  StopArea::default_instance_->InitAsDefaultInstance();
  StopPoint::default_instance_->InitAsDefaultInstance();
  LineString::default_instance_->InitAsDefaultInstance();
  MultiLineString::default_instance_->InitAsDefaultInstance();
  Line::default_instance_->InitAsDefaultInstance();
  LineGroup::default_instance_->InitAsDefaultInstance();
  Route::default_instance_->InitAsDefaultInstance();
  JourneyPattern::default_instance_->InitAsDefaultInstance();
  Destination::default_instance_->InitAsDefaultInstance();
  Note::default_instance_->InitAsDefaultInstance();
  Properties::default_instance_->InitAsDefaultInstance();
  hasEquipments::default_instance_->InitAsDefaultInstance();
  StopDateTime::default_instance_->InitAsDefaultInstance();
  StopTime::default_instance_->InitAsDefaultInstance();
  VehicleJourney::default_instance_->InitAsDefaultInstance();
  Trip::default_instance_->InitAsDefaultInstance();
  JourneyPatternPoint::default_instance_->InitAsDefaultInstance();
  Contributor::default_instance_->InitAsDefaultInstance();
  Dataset::default_instance_->InitAsDefaultInstance();
  PoiType::default_instance_->InitAsDefaultInstance();
  Poi::default_instance_->InitAsDefaultInstance();
  Network::default_instance_->InitAsDefaultInstance();
  PhysicalMode::default_instance_->InitAsDefaultInstance();
  CommercialMode::default_instance_->InitAsDefaultInstance();
  Connection::default_instance_->InitAsDefaultInstance();
  Company::default_instance_->InitAsDefaultInstance();
  Address::default_instance_->InitAsDefaultInstance();
  CalendarException::default_instance_->InitAsDefaultInstance();
  CalendarPeriod::default_instance_->InitAsDefaultInstance();
  WeekPattern::default_instance_->InitAsDefaultInstance();
  Calendar::default_instance_->InitAsDefaultInstance();
  ValidityPattern::default_instance_->InitAsDefaultInstance();
  LocationContext::default_instance_->InitAsDefaultInstance();
  PtObject::default_instance_->InitAsDefaultInstance();
  FareZone::default_instance_->InitAsDefaultInstance();
  EquipmentDetails::default_instance_->InitAsDefaultInstance();
  CurrentAvailability::default_instance_->InitAsDefaultInstance();
  EquipmentCause::default_instance_->InitAsDefaultInstance();
  EquipmentEffect::default_instance_->InitAsDefaultInstance();
  StopAreaEquipment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_type_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_type_2eproto {
  StaticDescriptorInitializer_type_2eproto() {
    protobuf_AddDesc_type_2eproto();
  }
} static_descriptor_initializer_type_2eproto_;
const ::google::protobuf::EnumDescriptor* NavitiaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavitiaType_descriptor_;
}
bool NavitiaType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 16:
    case 18:
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* API_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return API_descriptor_;
}
bool API_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStatus_descriptor_;
}
bool ResponseStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActiveStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveStatus_descriptor_;
}
bool ActiveStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageStatus_descriptor_;
}
bool MessageStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StopTimeUpdateStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopTimeUpdateStatus_descriptor_;
}
bool StopTimeUpdateStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OdtLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OdtLevel_descriptor_;
}
bool OdtLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RTLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTLevel_descriptor_;
}
bool RTLevel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExceptionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExceptionType_descriptor_;
}
bool ExceptionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Code::kTypeFieldNumber;
const int Code::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Code::Code()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Code)
}

void Code::InitAsDefaultInstance() {
}

Code::Code(const Code& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Code)
}

void Code::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Code::~Code() {
  // @@protoc_insertion_point(destructor:pbnavitia.Code)
  SharedDtor();
}

void Code::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Code::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Code::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Code_descriptor_;
}

const Code& Code::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Code* Code::default_instance_ = NULL;

Code* Code::New(::google::protobuf::Arena* arena) const {
  Code* n = new Code;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Code::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Code)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Code)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Code.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Code.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Code)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Code)
  return false;
#undef DO_
}

void Code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Code)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Code.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Code.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Code)
}

::google::protobuf::uint8* Code::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Code)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Code.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Code.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Code)
  return target;
}

int Code::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.Code)
  int total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int Code::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Code)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Code::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Code)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Code* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Code>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Code)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Code)
    MergeFrom(*source);
  }
}

void Code::MergeFrom(const Code& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Code)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Code::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Code::CopyFrom(const Code& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Code)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Code::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Code::Swap(Code* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Code::InternalSwap(Code* other) {
  type_.Swap(&other->type_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Code::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Code_descriptor_;
  metadata.reflection = Code_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Code

// required string type = 1;
bool Code::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Code::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Code::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Code::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Code::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Code.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Code::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Code.type)
}
 void Code::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Code.type)
}
 void Code::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Code.type)
}
 ::std::string* Code::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Code.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Code::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Code.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Code::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Code.type)
}

// required string value = 2;
bool Code::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Code::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Code::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Code::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Code::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Code.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Code::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Code.value)
}
 void Code::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Code.value)
}
 void Code::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Code.value)
}
 ::std::string* Code::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Code.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Code::release_value() {
  // @@protoc_insertion_point(field_release:pbnavitia.Code.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Code::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Code.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Period::kBeginFieldNumber;
const int Period::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Period::Period()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Period)
}

void Period::InitAsDefaultInstance() {
}

Period::Period(const Period& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Period)
}

void Period::SharedCtor() {
  _cached_size_ = 0;
  begin_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Period::~Period() {
  // @@protoc_insertion_point(destructor:pbnavitia.Period)
  SharedDtor();
}

void Period::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Period::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Period::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Period_descriptor_;
}

const Period& Period::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Period* Period::default_instance_ = NULL;

Period* Period::New(::google::protobuf::Arena* arena) const {
  Period* n = new Period;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Period::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Period)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Period, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Period*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(begin_, end_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Period::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Period)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 begin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional uint64 end = 2;
      case 2: {
        if (tag == 16) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Period)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Period)
  return false;
#undef DO_
}

void Period::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Period)
  // optional uint64 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begin(), output);
  }

  // optional uint64 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Period)
}

::google::protobuf::uint8* Period::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Period)
  // optional uint64 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begin(), target);
  }

  // optional uint64 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Period)
  return target;
}

int Period::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Period)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin());
    }

    // optional uint64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Period::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Period)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Period* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Period>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Period)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Period)
    MergeFrom(*source);
  }
}

void Period::MergeFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Period)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Period::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Period::CopyFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Period::IsInitialized() const {

  return true;
}

void Period::Swap(Period* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Period::InternalSwap(Period* other) {
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Period::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Period_descriptor_;
  metadata.reflection = Period_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Period

// optional uint64 begin = 1;
bool Period::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Period::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
void Period::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
void Period::clear_begin() {
  begin_ = GOOGLE_ULONGLONG(0);
  clear_has_begin();
}
 ::google::protobuf::uint64 Period::begin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Period.begin)
  return begin_;
}
 void Period::set_begin(::google::protobuf::uint64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Period.begin)
}

// optional uint64 end = 2;
bool Period::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Period::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void Period::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void Period::clear_end() {
  end_ = GOOGLE_ULONGLONG(0);
  clear_has_end();
}
 ::google::protobuf::uint64 Period::end() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Period.end)
  return end_;
}
 void Period::set_end(::google::protobuf::uint64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Period.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Property::kNameFieldNumber;
const int Property::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Property::Property()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Property)
}

void Property::InitAsDefaultInstance() {
}

Property::Property(const Property& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Property)
}

void Property::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:pbnavitia.Property)
  SharedDtor();
}

void Property::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New(::google::protobuf::Arena* arena) const {
  Property* n = new Property;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Property)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Property)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Property.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Property.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Property)
  return false;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Property)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Property.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Property.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Property)
}

::google::protobuf::uint8* Property::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Property)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Property.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Property.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Property)
  return target;
}

int Property::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Property)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Property)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Property* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Property>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Property)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Property)
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Property)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {

  return true;
}

void Property::Swap(Property* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Property::InternalSwap(Property* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Property

// optional string name = 1;
bool Property::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Property::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Property::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Property::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Property.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Property::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Property.name)
}
 void Property::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Property.name)
}
 void Property::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Property.name)
}
 ::std::string* Property::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Property.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Property.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Property::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Property.name)
}

// optional string value = 2;
bool Property::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Property::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Property::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Property::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Property.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Property::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Property.value)
}
 void Property::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Property.value)
}
 void Property::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Property.value)
}
 ::std::string* Property::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Property.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:pbnavitia.Property.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Property::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Property.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Channel_ChannelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_ChannelType_descriptor_;
}
bool Channel_ChannelType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Channel_ChannelType Channel::web;
const Channel_ChannelType Channel::sms;
const Channel_ChannelType Channel::email;
const Channel_ChannelType Channel::mobile;
const Channel_ChannelType Channel::notification;
const Channel_ChannelType Channel::twitter;
const Channel_ChannelType Channel::facebook;
const Channel_ChannelType Channel::unknown_type;
const Channel_ChannelType Channel::title;
const Channel_ChannelType Channel::beacon;
const Channel_ChannelType Channel::ChannelType_MIN;
const Channel_ChannelType Channel::ChannelType_MAX;
const int Channel::ChannelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kIdFieldNumber;
const int Channel::kNameFieldNumber;
const int Channel::kContentTypeFieldNumber;
const int Channel::kChannelTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Channel)
}

void Channel::InitAsDefaultInstance() {
}

Channel::Channel(const Channel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Channel)
}

void Channel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:pbnavitia.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_descriptor_;
}

const Channel& Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Channel* Channel::default_instance_ = NULL;

Channel* Channel::New(::google::protobuf::Arena* arena) const {
  Channel* n = new Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Channel)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_content_type()) {
      content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  channel_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Channel.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Channel.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content_type;
        break;
      }

      // optional string content_type = 3;
      case 3: {
        if (tag == 26) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_type().data(), this->content_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Channel.content_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_types;
        break;
      }

      // repeated .pbnavitia.Channel.ChannelType channel_types = 4;
      case 4: {
        if (tag == 32) {
         parse_channel_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::Channel_ChannelType_IsValid(value)) {
            add_channel_types(static_cast< ::pbnavitia::Channel_ChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::pbnavitia::Channel_ChannelType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_channel_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_types;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Channel)
  return false;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Channel)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Channel.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Channel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string content_type = 3;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Channel.content_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content_type(), output);
  }

  // repeated .pbnavitia.Channel.ChannelType channel_types = 4;
  for (int i = 0; i < this->channel_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channel_types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Channel)
}

::google::protobuf::uint8* Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Channel)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Channel.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Channel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string content_type = 3;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_type().data(), this->content_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Channel.content_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content_type(), target);
  }

  // repeated .pbnavitia.Channel.ChannelType channel_types = 4;
  for (int i = 0; i < this->channel_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channel_types(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Channel)
  return target;
}

int Channel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Channel)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string content_type = 3;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_type());
    }

  }
  // repeated .pbnavitia.Channel.ChannelType channel_types = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->channel_types(i));
    }
    total_size += 1 * this->channel_types_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Channel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Channel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  channel_types_.MergeFrom(from.channel_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_content_type()) {
      set_has_content_type();
      content_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {

  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  content_type_.Swap(&other->content_type_);
  channel_types_.UnsafeArenaSwap(&other->channel_types_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channel_descriptor_;
  metadata.reflection = Channel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Channel

// optional string id = 1;
bool Channel::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Channel::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Channel::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Channel::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Channel::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Channel.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Channel.id)
}
 void Channel::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Channel.id)
}
 void Channel::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Channel.id)
}
 ::std::string* Channel::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Channel.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Channel::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Channel.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Channel.id)
}

// optional string name = 2;
bool Channel::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Channel::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Channel::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Channel.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Channel.name)
}
 void Channel::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Channel.name)
}
 void Channel::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Channel.name)
}
 ::std::string* Channel::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Channel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Channel::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Channel.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Channel.name)
}

// optional string content_type = 3;
bool Channel::has_content_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Channel::set_has_content_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Channel::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Channel::clear_content_type() {
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content_type();
}
 const ::std::string& Channel::content_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Channel.content_type)
  return content_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_content_type(const ::std::string& value) {
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Channel.content_type)
}
 void Channel::set_content_type(const char* value) {
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Channel.content_type)
}
 void Channel::set_content_type(const char* value, size_t size) {
  set_has_content_type();
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Channel.content_type)
}
 ::std::string* Channel::mutable_content_type() {
  set_has_content_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Channel.content_type)
  return content_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Channel::release_content_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Channel.content_type)
  clear_has_content_type();
  return content_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_allocated_content_type(::std::string* content_type) {
  if (content_type != NULL) {
    set_has_content_type();
  } else {
    clear_has_content_type();
  }
  content_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Channel.content_type)
}

// repeated .pbnavitia.Channel.ChannelType channel_types = 4;
int Channel::channel_types_size() const {
  return channel_types_.size();
}
void Channel::clear_channel_types() {
  channel_types_.Clear();
}
 ::pbnavitia::Channel_ChannelType Channel::channel_types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Channel.channel_types)
  return static_cast< ::pbnavitia::Channel_ChannelType >(channel_types_.Get(index));
}
 void Channel::set_channel_types(int index, ::pbnavitia::Channel_ChannelType value) {
  assert(::pbnavitia::Channel_ChannelType_IsValid(value));
  channel_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.Channel.channel_types)
}
 void Channel::add_channel_types(::pbnavitia::Channel_ChannelType value) {
  assert(::pbnavitia::Channel_ChannelType_IsValid(value));
  channel_types_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Channel.channel_types)
}
 const ::google::protobuf::RepeatedField<int>&
Channel::channel_types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Channel.channel_types)
  return channel_types_;
}
 ::google::protobuf::RepeatedField<int>*
Channel::mutable_channel_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Channel.channel_types)
  return &channel_types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageContent::kTextFieldNumber;
const int MessageContent::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageContent::MessageContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.MessageContent)
}

void MessageContent::InitAsDefaultInstance() {
  channel_ = const_cast< ::pbnavitia::Channel*>(&::pbnavitia::Channel::default_instance());
}

MessageContent::MessageContent(const MessageContent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.MessageContent)
}

void MessageContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageContent::~MessageContent() {
  // @@protoc_insertion_point(destructor:pbnavitia.MessageContent)
  SharedDtor();
}

void MessageContent::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete channel_;
  }
}

void MessageContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageContent_descriptor_;
}

const MessageContent& MessageContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

MessageContent* MessageContent::default_instance_ = NULL;

MessageContent* MessageContent::New(::google::protobuf::Arena* arena) const {
  MessageContent* n = new MessageContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageContent::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.MessageContent)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_channel()) {
      if (channel_ != NULL) channel_->::pbnavitia::Channel::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.MessageContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.MessageContent.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_channel;
        break;
      }

      // optional .pbnavitia.Channel channel = 4;
      case 4: {
        if (tag == 34) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.MessageContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.MessageContent)
  return false;
#undef DO_
}

void MessageContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.MessageContent)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MessageContent.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional .pbnavitia.Channel channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->channel_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.MessageContent)
}

::google::protobuf::uint8* MessageContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.MessageContent)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.MessageContent.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional .pbnavitia.Channel channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->channel_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.MessageContent)
  return target;
}

int MessageContent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.MessageContent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .pbnavitia.Channel channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->channel_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.MessageContent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageContent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.MessageContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.MessageContent)
    MergeFrom(*source);
  }
}

void MessageContent::MergeFrom(const MessageContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.MessageContent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_channel()) {
      mutable_channel()->::pbnavitia::Channel::MergeFrom(from.channel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.MessageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageContent::CopyFrom(const MessageContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.MessageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageContent::IsInitialized() const {

  return true;
}

void MessageContent::Swap(MessageContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageContent::InternalSwap(MessageContent* other) {
  text_.Swap(&other->text_);
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageContent_descriptor_;
  metadata.reflection = MessageContent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageContent

// optional string text = 1;
bool MessageContent::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageContent::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageContent::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageContent::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& MessageContent::text() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MessageContent.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageContent::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.MessageContent.text)
}
 void MessageContent::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.MessageContent.text)
}
 void MessageContent::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.MessageContent.text)
}
 ::std::string* MessageContent::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:pbnavitia.MessageContent.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageContent::release_text() {
  // @@protoc_insertion_point(field_release:pbnavitia.MessageContent.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageContent::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MessageContent.text)
}

// optional .pbnavitia.Channel channel = 4;
bool MessageContent::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageContent::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageContent::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageContent::clear_channel() {
  if (channel_ != NULL) channel_->::pbnavitia::Channel::Clear();
  clear_has_channel();
}
const ::pbnavitia::Channel& MessageContent::channel() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MessageContent.channel)
  return channel_ != NULL ? *channel_ : *default_instance_->channel_;
}
::pbnavitia::Channel* MessageContent::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) {
    channel_ = new ::pbnavitia::Channel;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.MessageContent.channel)
  return channel_;
}
::pbnavitia::Channel* MessageContent::release_channel() {
  // @@protoc_insertion_point(field_release:pbnavitia.MessageContent.channel)
  clear_has_channel();
  ::pbnavitia::Channel* temp = channel_;
  channel_ = NULL;
  return temp;
}
void MessageContent::set_allocated_channel(::pbnavitia::Channel* channel) {
  delete channel_;
  channel_ = channel;
  if (channel) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.MessageContent.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kUriFieldNumber;
const int Message::kMessageFieldNumber;
const int Message::kTitleFieldNumber;
const int Message::kStartApplicationDateFieldNumber;
const int Message::kEndApplicationDateFieldNumber;
const int Message::kStartApplicationDailyHourFieldNumber;
const int Message::kEndApplicationDailyHourFieldNumber;
const int Message::kMessageStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_application_date_ = GOOGLE_ULONGLONG(0);
  end_application_date_ = GOOGLE_ULONGLONG(0);
  start_application_daily_hour_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_application_daily_hour_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:pbnavitia.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_application_daily_hour_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_application_daily_hour_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Message)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Message, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Message*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(start_application_date_, end_application_date_);
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_start_application_daily_hour()) {
      start_application_daily_hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_application_daily_hour()) {
      end_application_daily_hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    message_status_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Message.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Message.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Message.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_application_date;
        break;
      }

      // optional uint64 start_application_date = 4;
      case 4: {
        if (tag == 32) {
         parse_start_application_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_application_date_)));
          set_has_start_application_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_application_date;
        break;
      }

      // optional uint64 end_application_date = 5;
      case 5: {
        if (tag == 40) {
         parse_end_application_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_application_date_)));
          set_has_end_application_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_start_application_daily_hour;
        break;
      }

      // optional string start_application_daily_hour = 6;
      case 6: {
        if (tag == 50) {
         parse_start_application_daily_hour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_application_daily_hour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_application_daily_hour().data(), this->start_application_daily_hour().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Message.start_application_daily_hour");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_end_application_daily_hour;
        break;
      }

      // optional string end_application_daily_hour = 7;
      case 7: {
        if (tag == 58) {
         parse_end_application_daily_hour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_application_daily_hour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end_application_daily_hour().data(), this->end_application_daily_hour().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Message.end_application_daily_hour");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_message_status;
        break;
      }

      // optional .pbnavitia.MessageStatus message_status = 8;
      case 8: {
        if (tag == 64) {
         parse_message_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::MessageStatus_IsValid(value)) {
            set_message_status(static_cast< ::pbnavitia::MessageStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Message)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional uint64 start_application_date = 4;
  if (has_start_application_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->start_application_date(), output);
  }

  // optional uint64 end_application_date = 5;
  if (has_end_application_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->end_application_date(), output);
  }

  // optional string start_application_daily_hour = 6;
  if (has_start_application_daily_hour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_application_daily_hour().data(), this->start_application_daily_hour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.start_application_daily_hour");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->start_application_daily_hour(), output);
  }

  // optional string end_application_daily_hour = 7;
  if (has_end_application_daily_hour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_application_daily_hour().data(), this->end_application_daily_hour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.end_application_daily_hour");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->end_application_daily_hour(), output);
  }

  // optional .pbnavitia.MessageStatus message_status = 8;
  if (has_message_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->message_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Message)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional uint64 start_application_date = 4;
  if (has_start_application_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_application_date(), target);
  }

  // optional uint64 end_application_date = 5;
  if (has_end_application_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->end_application_date(), target);
  }

  // optional string start_application_daily_hour = 6;
  if (has_start_application_daily_hour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_application_daily_hour().data(), this->start_application_daily_hour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.start_application_daily_hour");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->start_application_daily_hour(), target);
  }

  // optional string end_application_daily_hour = 7;
  if (has_end_application_daily_hour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_application_daily_hour().data(), this->end_application_daily_hour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Message.end_application_daily_hour");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->end_application_daily_hour(), target);
  }

  // optional .pbnavitia.MessageStatus message_status = 8;
  if (has_message_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->message_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Message)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint64 start_application_date = 4;
    if (has_start_application_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_application_date());
    }

    // optional uint64 end_application_date = 5;
    if (has_end_application_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_application_date());
    }

    // optional string start_application_daily_hour = 6;
    if (has_start_application_daily_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_application_daily_hour());
    }

    // optional string end_application_daily_hour = 7;
    if (has_end_application_daily_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_application_daily_hour());
    }

    // optional .pbnavitia.MessageStatus message_status = 8;
    if (has_message_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_start_application_date()) {
      set_start_application_date(from.start_application_date());
    }
    if (from.has_end_application_date()) {
      set_end_application_date(from.end_application_date());
    }
    if (from.has_start_application_daily_hour()) {
      set_has_start_application_daily_hour();
      start_application_daily_hour_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_application_daily_hour_);
    }
    if (from.has_end_application_daily_hour()) {
      set_has_end_application_daily_hour();
      end_application_daily_hour_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_application_daily_hour_);
    }
    if (from.has_message_status()) {
      set_message_status(from.message_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  uri_.Swap(&other->uri_);
  message_.Swap(&other->message_);
  title_.Swap(&other->title_);
  std::swap(start_application_date_, other->start_application_date_);
  std::swap(end_application_date_, other->end_application_date_);
  start_application_daily_hour_.Swap(&other->start_application_daily_hour_);
  end_application_daily_hour_.Swap(&other->end_application_daily_hour_);
  std::swap(message_status_, other->message_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional string uri = 1;
bool Message::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Message::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.uri)
}
 void Message::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.uri)
}
 void Message::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.uri)
}
 ::std::string* Message::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.uri)
}

// optional string message = 2;
bool Message::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.message)
}
 void Message::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.message)
}
 void Message::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.message)
}
 ::std::string* Message::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.message)
}

// optional string title = 3;
bool Message::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& Message::title() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.title)
}
 void Message::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.title)
}
 void Message::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.title)
}
 ::std::string* Message::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_title() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.title)
}

// optional uint64 start_application_date = 4;
bool Message::has_start_application_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Message::set_has_start_application_date() {
  _has_bits_[0] |= 0x00000008u;
}
void Message::clear_has_start_application_date() {
  _has_bits_[0] &= ~0x00000008u;
}
void Message::clear_start_application_date() {
  start_application_date_ = GOOGLE_ULONGLONG(0);
  clear_has_start_application_date();
}
 ::google::protobuf::uint64 Message::start_application_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.start_application_date)
  return start_application_date_;
}
 void Message::set_start_application_date(::google::protobuf::uint64 value) {
  set_has_start_application_date();
  start_application_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Message.start_application_date)
}

// optional uint64 end_application_date = 5;
bool Message::has_end_application_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Message::set_has_end_application_date() {
  _has_bits_[0] |= 0x00000010u;
}
void Message::clear_has_end_application_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void Message::clear_end_application_date() {
  end_application_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_application_date();
}
 ::google::protobuf::uint64 Message::end_application_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.end_application_date)
  return end_application_date_;
}
 void Message::set_end_application_date(::google::protobuf::uint64 value) {
  set_has_end_application_date();
  end_application_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Message.end_application_date)
}

// optional string start_application_daily_hour = 6;
bool Message::has_start_application_daily_hour() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Message::set_has_start_application_daily_hour() {
  _has_bits_[0] |= 0x00000020u;
}
void Message::clear_has_start_application_daily_hour() {
  _has_bits_[0] &= ~0x00000020u;
}
void Message::clear_start_application_daily_hour() {
  start_application_daily_hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_application_daily_hour();
}
 const ::std::string& Message::start_application_daily_hour() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.start_application_daily_hour)
  return start_application_daily_hour_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_start_application_daily_hour(const ::std::string& value) {
  set_has_start_application_daily_hour();
  start_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.start_application_daily_hour)
}
 void Message::set_start_application_daily_hour(const char* value) {
  set_has_start_application_daily_hour();
  start_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.start_application_daily_hour)
}
 void Message::set_start_application_daily_hour(const char* value, size_t size) {
  set_has_start_application_daily_hour();
  start_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.start_application_daily_hour)
}
 ::std::string* Message::mutable_start_application_daily_hour() {
  set_has_start_application_daily_hour();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.start_application_daily_hour)
  return start_application_daily_hour_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_start_application_daily_hour() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.start_application_daily_hour)
  clear_has_start_application_daily_hour();
  return start_application_daily_hour_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_start_application_daily_hour(::std::string* start_application_daily_hour) {
  if (start_application_daily_hour != NULL) {
    set_has_start_application_daily_hour();
  } else {
    clear_has_start_application_daily_hour();
  }
  start_application_daily_hour_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_application_daily_hour);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.start_application_daily_hour)
}

// optional string end_application_daily_hour = 7;
bool Message::has_end_application_daily_hour() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Message::set_has_end_application_daily_hour() {
  _has_bits_[0] |= 0x00000040u;
}
void Message::clear_has_end_application_daily_hour() {
  _has_bits_[0] &= ~0x00000040u;
}
void Message::clear_end_application_daily_hour() {
  end_application_daily_hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_application_daily_hour();
}
 const ::std::string& Message::end_application_daily_hour() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.end_application_daily_hour)
  return end_application_daily_hour_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_end_application_daily_hour(const ::std::string& value) {
  set_has_end_application_daily_hour();
  end_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Message.end_application_daily_hour)
}
 void Message::set_end_application_daily_hour(const char* value) {
  set_has_end_application_daily_hour();
  end_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Message.end_application_daily_hour)
}
 void Message::set_end_application_daily_hour(const char* value, size_t size) {
  set_has_end_application_daily_hour();
  end_application_daily_hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Message.end_application_daily_hour)
}
 ::std::string* Message::mutable_end_application_daily_hour() {
  set_has_end_application_daily_hour();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Message.end_application_daily_hour)
  return end_application_daily_hour_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_end_application_daily_hour() {
  // @@protoc_insertion_point(field_release:pbnavitia.Message.end_application_daily_hour)
  clear_has_end_application_daily_hour();
  return end_application_daily_hour_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_end_application_daily_hour(::std::string* end_application_daily_hour) {
  if (end_application_daily_hour != NULL) {
    set_has_end_application_daily_hour();
  } else {
    clear_has_end_application_daily_hour();
  }
  end_application_daily_hour_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_application_daily_hour);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Message.end_application_daily_hour)
}

// optional .pbnavitia.MessageStatus message_status = 8;
bool Message::has_message_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Message::set_has_message_status() {
  _has_bits_[0] |= 0x00000080u;
}
void Message::clear_has_message_status() {
  _has_bits_[0] &= ~0x00000080u;
}
void Message::clear_message_status() {
  message_status_ = 0;
  clear_has_message_status();
}
 ::pbnavitia::MessageStatus Message::message_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Message.message_status)
  return static_cast< ::pbnavitia::MessageStatus >(message_status_);
}
 void Message::set_message_status(::pbnavitia::MessageStatus value) {
  assert(::pbnavitia::MessageStatus_IsValid(value));
  set_has_message_status();
  message_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Message.message_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Severity_Effect_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Severity_Effect_descriptor_;
}
bool Severity_Effect_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Severity_Effect Severity::NO_SERVICE;
const Severity_Effect Severity::REDUCED_SERVICE;
const Severity_Effect Severity::SIGNIFICANT_DELAYS;
const Severity_Effect Severity::DETOUR;
const Severity_Effect Severity::ADDITIONAL_SERVICE;
const Severity_Effect Severity::MODIFIED_SERVICE;
const Severity_Effect Severity::OTHER_EFFECT;
const Severity_Effect Severity::UNKNOWN_EFFECT;
const Severity_Effect Severity::STOP_MOVED;
const Severity_Effect Severity::Effect_MIN;
const Severity_Effect Severity::Effect_MAX;
const int Severity::Effect_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Severity::kNameFieldNumber;
const int Severity::kColorFieldNumber;
const int Severity::kEffectFieldNumber;
const int Severity::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Severity::Severity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Severity)
}

void Severity::InitAsDefaultInstance() {
}

Severity::Severity(const Severity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Severity)
}

void Severity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_ = 8;
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Severity::~Severity() {
  // @@protoc_insertion_point(destructor:pbnavitia.Severity)
  SharedDtor();
}

void Severity::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Severity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Severity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Severity_descriptor_;
}

const Severity& Severity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Severity* Severity::default_instance_ = NULL;

Severity* Severity::New(::google::protobuf::Arena* arena) const {
  Severity* n = new Severity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Severity::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Severity)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_color()) {
      color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    effect_ = 8;
    priority_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Severity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Severity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Severity.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // optional string color = 2;
      case 2: {
        if (tag == 18) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Severity.color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effect;
        break;
      }

      // optional .pbnavitia.Severity.Effect effect = 3 [default = UNKNOWN_EFFECT];
      case 3: {
        if (tag == 24) {
         parse_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::Severity_Effect_IsValid(value)) {
            set_effect(static_cast< ::pbnavitia::Severity_Effect >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Severity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Severity)
  return false;
#undef DO_
}

void Severity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Severity)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Severity.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Severity.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->color(), output);
  }

  // optional .pbnavitia.Severity.Effect effect = 3 [default = UNKNOWN_EFFECT];
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Severity)
}

::google::protobuf::uint8* Severity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Severity)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Severity.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Severity.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->color(), target);
  }

  // optional .pbnavitia.Severity.Effect effect = 3 [default = UNKNOWN_EFFECT];
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect(), target);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Severity)
  return target;
}

int Severity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Severity)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional .pbnavitia.Severity.Effect effect = 3 [default = UNKNOWN_EFFECT];
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Severity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Severity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Severity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Severity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Severity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Severity)
    MergeFrom(*source);
  }
}

void Severity::MergeFrom(const Severity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Severity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_color()) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Severity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Severity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Severity::CopyFrom(const Severity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Severity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Severity::IsInitialized() const {

  return true;
}

void Severity::Swap(Severity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Severity::InternalSwap(Severity* other) {
  name_.Swap(&other->name_);
  color_.Swap(&other->color_);
  std::swap(effect_, other->effect_);
  std::swap(priority_, other->priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Severity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Severity_descriptor_;
  metadata.reflection = Severity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Severity

// optional string name = 1;
bool Severity::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Severity::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Severity::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Severity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Severity::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Severity.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Severity::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Severity.name)
}
 void Severity::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Severity.name)
}
 void Severity::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Severity.name)
}
 ::std::string* Severity::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Severity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Severity::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Severity.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Severity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Severity.name)
}

// optional string color = 2;
bool Severity::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Severity::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
void Severity::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void Severity::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
 const ::std::string& Severity::color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Severity.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Severity::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Severity.color)
}
 void Severity::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Severity.color)
}
 void Severity::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Severity.color)
}
 ::std::string* Severity::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Severity.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Severity::release_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.Severity.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Severity::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Severity.color)
}

// optional .pbnavitia.Severity.Effect effect = 3 [default = UNKNOWN_EFFECT];
bool Severity::has_effect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Severity::set_has_effect() {
  _has_bits_[0] |= 0x00000004u;
}
void Severity::clear_has_effect() {
  _has_bits_[0] &= ~0x00000004u;
}
void Severity::clear_effect() {
  effect_ = 8;
  clear_has_effect();
}
 ::pbnavitia::Severity_Effect Severity::effect() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Severity.effect)
  return static_cast< ::pbnavitia::Severity_Effect >(effect_);
}
 void Severity::set_effect(::pbnavitia::Severity_Effect value) {
  assert(::pbnavitia::Severity_Effect_IsValid(value));
  set_has_effect();
  effect_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Severity.effect)
}

// optional int32 priority = 4;
bool Severity::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Severity::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
void Severity::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
void Severity::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
 ::google::protobuf::int32 Severity::priority() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Severity.priority)
  return priority_;
}
 void Severity::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Severity.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopTimeUpdate::kAmendedStopTimeFieldNumber;
const int StopTimeUpdate::kBaseStopTimeFieldNumber;
const int StopTimeUpdate::kCauseFieldNumber;
const int StopTimeUpdate::kEffectFieldNumber;
const int StopTimeUpdate::kStopPointFieldNumber;
const int StopTimeUpdate::kDepartureStatusFieldNumber;
const int StopTimeUpdate::kArrivalStatusFieldNumber;
const int StopTimeUpdate::kIsDetourFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopTimeUpdate::StopTimeUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StopTimeUpdate)
}

void StopTimeUpdate::InitAsDefaultInstance() {
  amended_stop_time_ = const_cast< ::pbnavitia::StopTime*>(&::pbnavitia::StopTime::default_instance());
  base_stop_time_ = const_cast< ::pbnavitia::StopTime*>(&::pbnavitia::StopTime::default_instance());
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
}

StopTimeUpdate::StopTimeUpdate(const StopTimeUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StopTimeUpdate)
}

void StopTimeUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  amended_stop_time_ = NULL;
  base_stop_time_ = NULL;
  cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effect_ = 0;
  stop_point_ = NULL;
  departure_status_ = 0;
  arrival_status_ = 0;
  is_detour_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopTimeUpdate::~StopTimeUpdate() {
  // @@protoc_insertion_point(destructor:pbnavitia.StopTimeUpdate)
  SharedDtor();
}

void StopTimeUpdate::SharedDtor() {
  cause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete amended_stop_time_;
    delete base_stop_time_;
    delete stop_point_;
  }
}

void StopTimeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopTimeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopTimeUpdate_descriptor_;
}

const StopTimeUpdate& StopTimeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

StopTimeUpdate* StopTimeUpdate::default_instance_ = NULL;

StopTimeUpdate* StopTimeUpdate::New(::google::protobuf::Arena* arena) const {
  StopTimeUpdate* n = new StopTimeUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopTimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StopTimeUpdate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StopTimeUpdate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StopTimeUpdate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(effect_, is_detour_);
    if (has_amended_stop_time()) {
      if (amended_stop_time_ != NULL) amended_stop_time_->::pbnavitia::StopTime::Clear();
    }
    if (has_base_stop_time()) {
      if (base_stop_time_ != NULL) base_stop_time_->::pbnavitia::StopTime::Clear();
    }
    if (has_cause()) {
      cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopTimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StopTimeUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.StopTime amended_stop_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amended_stop_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base_stop_time;
        break;
      }

      // optional .pbnavitia.StopTime base_stop_time = 2;
      case 2: {
        if (tag == 18) {
         parse_base_stop_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_stop_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cause;
        break;
      }

      // optional string cause = 3;
      case 3: {
        if (tag == 26) {
         parse_cause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cause()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cause().data(), this->cause().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopTimeUpdate.cause");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_effect;
        break;
      }

      // optional .pbnavitia.StopTimeUpdateStatus effect = 4;
      case 4: {
        if (tag == 32) {
         parse_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::StopTimeUpdateStatus_IsValid(value)) {
            set_effect(static_cast< ::pbnavitia::StopTimeUpdateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stop_point;
        break;
      }

      // optional .pbnavitia.StopPoint stop_point = 5;
      case 5: {
        if (tag == 42) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_departure_status;
        break;
      }

      // optional .pbnavitia.StopTimeUpdateStatus departure_status = 6;
      case 6: {
        if (tag == 48) {
         parse_departure_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::StopTimeUpdateStatus_IsValid(value)) {
            set_departure_status(static_cast< ::pbnavitia::StopTimeUpdateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_arrival_status;
        break;
      }

      // optional .pbnavitia.StopTimeUpdateStatus arrival_status = 7;
      case 7: {
        if (tag == 56) {
         parse_arrival_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::StopTimeUpdateStatus_IsValid(value)) {
            set_arrival_status(static_cast< ::pbnavitia::StopTimeUpdateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_detour;
        break;
      }

      // optional bool is_detour = 8;
      case 8: {
        if (tag == 64) {
         parse_is_detour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_detour_)));
          set_has_is_detour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StopTimeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StopTimeUpdate)
  return false;
#undef DO_
}

void StopTimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StopTimeUpdate)
  // optional .pbnavitia.StopTime amended_stop_time = 1;
  if (has_amended_stop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->amended_stop_time_, output);
  }

  // optional .pbnavitia.StopTime base_stop_time = 2;
  if (has_base_stop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_stop_time_, output);
  }

  // optional string cause = 3;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cause().data(), this->cause().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopTimeUpdate.cause");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cause(), output);
  }

  // optional .pbnavitia.StopTimeUpdateStatus effect = 4;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->effect(), output);
  }

  // optional .pbnavitia.StopPoint stop_point = 5;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stop_point_, output);
  }

  // optional .pbnavitia.StopTimeUpdateStatus departure_status = 6;
  if (has_departure_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->departure_status(), output);
  }

  // optional .pbnavitia.StopTimeUpdateStatus arrival_status = 7;
  if (has_arrival_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->arrival_status(), output);
  }

  // optional bool is_detour = 8;
  if (has_is_detour()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_detour(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StopTimeUpdate)
}

::google::protobuf::uint8* StopTimeUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StopTimeUpdate)
  // optional .pbnavitia.StopTime amended_stop_time = 1;
  if (has_amended_stop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->amended_stop_time_, false, target);
  }

  // optional .pbnavitia.StopTime base_stop_time = 2;
  if (has_base_stop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_stop_time_, false, target);
  }

  // optional string cause = 3;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cause().data(), this->cause().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopTimeUpdate.cause");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cause(), target);
  }

  // optional .pbnavitia.StopTimeUpdateStatus effect = 4;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->effect(), target);
  }

  // optional .pbnavitia.StopPoint stop_point = 5;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stop_point_, false, target);
  }

  // optional .pbnavitia.StopTimeUpdateStatus departure_status = 6;
  if (has_departure_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->departure_status(), target);
  }

  // optional .pbnavitia.StopTimeUpdateStatus arrival_status = 7;
  if (has_arrival_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->arrival_status(), target);
  }

  // optional bool is_detour = 8;
  if (has_is_detour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_detour(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StopTimeUpdate)
  return target;
}

int StopTimeUpdate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StopTimeUpdate)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .pbnavitia.StopTime amended_stop_time = 1;
    if (has_amended_stop_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->amended_stop_time_);
    }

    // optional .pbnavitia.StopTime base_stop_time = 2;
    if (has_base_stop_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->base_stop_time_);
    }

    // optional string cause = 3;
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cause());
    }

    // optional .pbnavitia.StopTimeUpdateStatus effect = 4;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
    }

    // optional .pbnavitia.StopPoint stop_point = 5;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional .pbnavitia.StopTimeUpdateStatus departure_status = 6;
    if (has_departure_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->departure_status());
    }

    // optional .pbnavitia.StopTimeUpdateStatus arrival_status = 7;
    if (has_arrival_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->arrival_status());
    }

    // optional bool is_detour = 8;
    if (has_is_detour()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopTimeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StopTimeUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopTimeUpdate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopTimeUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StopTimeUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StopTimeUpdate)
    MergeFrom(*source);
  }
}

void StopTimeUpdate::MergeFrom(const StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StopTimeUpdate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amended_stop_time()) {
      mutable_amended_stop_time()->::pbnavitia::StopTime::MergeFrom(from.amended_stop_time());
    }
    if (from.has_base_stop_time()) {
      mutable_base_stop_time()->::pbnavitia::StopTime::MergeFrom(from.base_stop_time());
    }
    if (from.has_cause()) {
      set_has_cause();
      cause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cause_);
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_departure_status()) {
      set_departure_status(from.departure_status());
    }
    if (from.has_arrival_status()) {
      set_arrival_status(from.arrival_status());
    }
    if (from.has_is_detour()) {
      set_is_detour(from.is_detour());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopTimeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopTimeUpdate::CopyFrom(const StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTimeUpdate::IsInitialized() const {

  if (has_amended_stop_time()) {
    if (!this->amended_stop_time_->IsInitialized()) return false;
  }
  if (has_base_stop_time()) {
    if (!this->base_stop_time_->IsInitialized()) return false;
  }
  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  return true;
}

void StopTimeUpdate::Swap(StopTimeUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopTimeUpdate::InternalSwap(StopTimeUpdate* other) {
  std::swap(amended_stop_time_, other->amended_stop_time_);
  std::swap(base_stop_time_, other->base_stop_time_);
  cause_.Swap(&other->cause_);
  std::swap(effect_, other->effect_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(departure_status_, other->departure_status_);
  std::swap(arrival_status_, other->arrival_status_);
  std::swap(is_detour_, other->is_detour_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopTimeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopTimeUpdate_descriptor_;
  metadata.reflection = StopTimeUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopTimeUpdate

// optional .pbnavitia.StopTime amended_stop_time = 1;
bool StopTimeUpdate::has_amended_stop_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopTimeUpdate::set_has_amended_stop_time() {
  _has_bits_[0] |= 0x00000001u;
}
void StopTimeUpdate::clear_has_amended_stop_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopTimeUpdate::clear_amended_stop_time() {
  if (amended_stop_time_ != NULL) amended_stop_time_->::pbnavitia::StopTime::Clear();
  clear_has_amended_stop_time();
}
const ::pbnavitia::StopTime& StopTimeUpdate::amended_stop_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.amended_stop_time)
  return amended_stop_time_ != NULL ? *amended_stop_time_ : *default_instance_->amended_stop_time_;
}
::pbnavitia::StopTime* StopTimeUpdate::mutable_amended_stop_time() {
  set_has_amended_stop_time();
  if (amended_stop_time_ == NULL) {
    amended_stop_time_ = new ::pbnavitia::StopTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTimeUpdate.amended_stop_time)
  return amended_stop_time_;
}
::pbnavitia::StopTime* StopTimeUpdate::release_amended_stop_time() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTimeUpdate.amended_stop_time)
  clear_has_amended_stop_time();
  ::pbnavitia::StopTime* temp = amended_stop_time_;
  amended_stop_time_ = NULL;
  return temp;
}
void StopTimeUpdate::set_allocated_amended_stop_time(::pbnavitia::StopTime* amended_stop_time) {
  delete amended_stop_time_;
  amended_stop_time_ = amended_stop_time;
  if (amended_stop_time) {
    set_has_amended_stop_time();
  } else {
    clear_has_amended_stop_time();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTimeUpdate.amended_stop_time)
}

// optional .pbnavitia.StopTime base_stop_time = 2;
bool StopTimeUpdate::has_base_stop_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopTimeUpdate::set_has_base_stop_time() {
  _has_bits_[0] |= 0x00000002u;
}
void StopTimeUpdate::clear_has_base_stop_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopTimeUpdate::clear_base_stop_time() {
  if (base_stop_time_ != NULL) base_stop_time_->::pbnavitia::StopTime::Clear();
  clear_has_base_stop_time();
}
const ::pbnavitia::StopTime& StopTimeUpdate::base_stop_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.base_stop_time)
  return base_stop_time_ != NULL ? *base_stop_time_ : *default_instance_->base_stop_time_;
}
::pbnavitia::StopTime* StopTimeUpdate::mutable_base_stop_time() {
  set_has_base_stop_time();
  if (base_stop_time_ == NULL) {
    base_stop_time_ = new ::pbnavitia::StopTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTimeUpdate.base_stop_time)
  return base_stop_time_;
}
::pbnavitia::StopTime* StopTimeUpdate::release_base_stop_time() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTimeUpdate.base_stop_time)
  clear_has_base_stop_time();
  ::pbnavitia::StopTime* temp = base_stop_time_;
  base_stop_time_ = NULL;
  return temp;
}
void StopTimeUpdate::set_allocated_base_stop_time(::pbnavitia::StopTime* base_stop_time) {
  delete base_stop_time_;
  base_stop_time_ = base_stop_time;
  if (base_stop_time) {
    set_has_base_stop_time();
  } else {
    clear_has_base_stop_time();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTimeUpdate.base_stop_time)
}

// optional string cause = 3;
bool StopTimeUpdate::has_cause() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StopTimeUpdate::set_has_cause() {
  _has_bits_[0] |= 0x00000004u;
}
void StopTimeUpdate::clear_has_cause() {
  _has_bits_[0] &= ~0x00000004u;
}
void StopTimeUpdate::clear_cause() {
  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cause();
}
 const ::std::string& StopTimeUpdate::cause() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.cause)
  return cause_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopTimeUpdate::set_cause(const ::std::string& value) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.cause)
}
 void StopTimeUpdate::set_cause(const char* value) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopTimeUpdate.cause)
}
 void StopTimeUpdate::set_cause(const char* value, size_t size) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopTimeUpdate.cause)
}
 ::std::string* StopTimeUpdate::mutable_cause() {
  set_has_cause();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTimeUpdate.cause)
  return cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopTimeUpdate::release_cause() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTimeUpdate.cause)
  clear_has_cause();
  return cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopTimeUpdate::set_allocated_cause(::std::string* cause) {
  if (cause != NULL) {
    set_has_cause();
  } else {
    clear_has_cause();
  }
  cause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cause);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTimeUpdate.cause)
}

// optional .pbnavitia.StopTimeUpdateStatus effect = 4;
bool StopTimeUpdate::has_effect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StopTimeUpdate::set_has_effect() {
  _has_bits_[0] |= 0x00000008u;
}
void StopTimeUpdate::clear_has_effect() {
  _has_bits_[0] &= ~0x00000008u;
}
void StopTimeUpdate::clear_effect() {
  effect_ = 0;
  clear_has_effect();
}
 ::pbnavitia::StopTimeUpdateStatus StopTimeUpdate::effect() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.effect)
  return static_cast< ::pbnavitia::StopTimeUpdateStatus >(effect_);
}
 void StopTimeUpdate::set_effect(::pbnavitia::StopTimeUpdateStatus value) {
  assert(::pbnavitia::StopTimeUpdateStatus_IsValid(value));
  set_has_effect();
  effect_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.effect)
}

// optional .pbnavitia.StopPoint stop_point = 5;
bool StopTimeUpdate::has_stop_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StopTimeUpdate::set_has_stop_point() {
  _has_bits_[0] |= 0x00000010u;
}
void StopTimeUpdate::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000010u;
}
void StopTimeUpdate::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& StopTimeUpdate::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* StopTimeUpdate::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTimeUpdate.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* StopTimeUpdate::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTimeUpdate.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void StopTimeUpdate::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTimeUpdate.stop_point)
}

// optional .pbnavitia.StopTimeUpdateStatus departure_status = 6;
bool StopTimeUpdate::has_departure_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StopTimeUpdate::set_has_departure_status() {
  _has_bits_[0] |= 0x00000020u;
}
void StopTimeUpdate::clear_has_departure_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void StopTimeUpdate::clear_departure_status() {
  departure_status_ = 0;
  clear_has_departure_status();
}
 ::pbnavitia::StopTimeUpdateStatus StopTimeUpdate::departure_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.departure_status)
  return static_cast< ::pbnavitia::StopTimeUpdateStatus >(departure_status_);
}
 void StopTimeUpdate::set_departure_status(::pbnavitia::StopTimeUpdateStatus value) {
  assert(::pbnavitia::StopTimeUpdateStatus_IsValid(value));
  set_has_departure_status();
  departure_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.departure_status)
}

// optional .pbnavitia.StopTimeUpdateStatus arrival_status = 7;
bool StopTimeUpdate::has_arrival_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StopTimeUpdate::set_has_arrival_status() {
  _has_bits_[0] |= 0x00000040u;
}
void StopTimeUpdate::clear_has_arrival_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void StopTimeUpdate::clear_arrival_status() {
  arrival_status_ = 0;
  clear_has_arrival_status();
}
 ::pbnavitia::StopTimeUpdateStatus StopTimeUpdate::arrival_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.arrival_status)
  return static_cast< ::pbnavitia::StopTimeUpdateStatus >(arrival_status_);
}
 void StopTimeUpdate::set_arrival_status(::pbnavitia::StopTimeUpdateStatus value) {
  assert(::pbnavitia::StopTimeUpdateStatus_IsValid(value));
  set_has_arrival_status();
  arrival_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.arrival_status)
}

// optional bool is_detour = 8;
bool StopTimeUpdate::has_is_detour() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StopTimeUpdate::set_has_is_detour() {
  _has_bits_[0] |= 0x00000080u;
}
void StopTimeUpdate::clear_has_is_detour() {
  _has_bits_[0] &= ~0x00000080u;
}
void StopTimeUpdate::clear_is_detour() {
  is_detour_ = false;
  clear_has_is_detour();
}
 bool StopTimeUpdate::is_detour() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTimeUpdate.is_detour)
  return is_detour_;
}
 void StopTimeUpdate::set_is_detour(bool value) {
  set_has_is_detour();
  is_detour_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTimeUpdate.is_detour)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineSectionImpact::kFromFieldNumber;
const int LineSectionImpact::kToFieldNumber;
const int LineSectionImpact::kRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineSectionImpact::LineSectionImpact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.LineSectionImpact)
}

void LineSectionImpact::InitAsDefaultInstance() {
  from_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  to_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
}

LineSectionImpact::LineSectionImpact(const LineSectionImpact& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.LineSectionImpact)
}

void LineSectionImpact::SharedCtor() {
  _cached_size_ = 0;
  from_ = NULL;
  to_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineSectionImpact::~LineSectionImpact() {
  // @@protoc_insertion_point(destructor:pbnavitia.LineSectionImpact)
  SharedDtor();
}

void LineSectionImpact::SharedDtor() {
  if (this != default_instance_) {
    delete from_;
    delete to_;
  }
}

void LineSectionImpact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineSectionImpact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineSectionImpact_descriptor_;
}

const LineSectionImpact& LineSectionImpact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

LineSectionImpact* LineSectionImpact::default_instance_ = NULL;

LineSectionImpact* LineSectionImpact::New(::google::protobuf::Arena* arena) const {
  LineSectionImpact* n = new LineSectionImpact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineSectionImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.LineSectionImpact)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_from()) {
      if (from_ != NULL) from_->::pbnavitia::PtObject::Clear();
    }
    if (has_to()) {
      if (to_ != NULL) to_->::pbnavitia::PtObject::Clear();
    }
  }
  routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LineSectionImpact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.LineSectionImpact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.PtObject from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional .pbnavitia.PtObject to = 2;
      case 2: {
        if (tag == 18) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_routes;
        break;
      }

      // repeated .pbnavitia.Route routes = 3;
      case 3: {
        if (tag == 26) {
         parse_routes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_routes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.LineSectionImpact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.LineSectionImpact)
  return false;
#undef DO_
}

void LineSectionImpact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.LineSectionImpact)
  // optional .pbnavitia.PtObject from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->from_, output);
  }

  // optional .pbnavitia.PtObject to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->to_, output);
  }

  // repeated .pbnavitia.Route routes = 3;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->routes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.LineSectionImpact)
}

::google::protobuf::uint8* LineSectionImpact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.LineSectionImpact)
  // optional .pbnavitia.PtObject from = 1;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->from_, false, target);
  }

  // optional .pbnavitia.PtObject to = 2;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->to_, false, target);
  }

  // repeated .pbnavitia.Route routes = 3;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->routes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.LineSectionImpact)
  return target;
}

int LineSectionImpact::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.LineSectionImpact)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .pbnavitia.PtObject from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->from_);
    }

    // optional .pbnavitia.PtObject to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->to_);
    }

  }
  // repeated .pbnavitia.Route routes = 3;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineSectionImpact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.LineSectionImpact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LineSectionImpact* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LineSectionImpact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.LineSectionImpact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.LineSectionImpact)
    MergeFrom(*source);
  }
}

void LineSectionImpact::MergeFrom(const LineSectionImpact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.LineSectionImpact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  routes_.MergeFrom(from.routes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      mutable_from()->::pbnavitia::PtObject::MergeFrom(from.from());
    }
    if (from.has_to()) {
      mutable_to()->::pbnavitia::PtObject::MergeFrom(from.to());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LineSectionImpact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.LineSectionImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSectionImpact::CopyFrom(const LineSectionImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.LineSectionImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSectionImpact::IsInitialized() const {

  if (has_from()) {
    if (!this->from_->IsInitialized()) return false;
  }
  if (has_to()) {
    if (!this->to_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->routes())) return false;
  return true;
}

void LineSectionImpact::Swap(LineSectionImpact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineSectionImpact::InternalSwap(LineSectionImpact* other) {
  std::swap(from_, other->from_);
  std::swap(to_, other->to_);
  routes_.UnsafeArenaSwap(&other->routes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineSectionImpact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineSectionImpact_descriptor_;
  metadata.reflection = LineSectionImpact_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineSectionImpact

// optional .pbnavitia.PtObject from = 1;
bool LineSectionImpact::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LineSectionImpact::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
void LineSectionImpact::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
void LineSectionImpact::clear_from() {
  if (from_ != NULL) from_->::pbnavitia::PtObject::Clear();
  clear_has_from();
}
const ::pbnavitia::PtObject& LineSectionImpact::from() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineSectionImpact.from)
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
::pbnavitia::PtObject* LineSectionImpact::mutable_from() {
  set_has_from();
  if (from_ == NULL) {
    from_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineSectionImpact.from)
  return from_;
}
::pbnavitia::PtObject* LineSectionImpact::release_from() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineSectionImpact.from)
  clear_has_from();
  ::pbnavitia::PtObject* temp = from_;
  from_ = NULL;
  return temp;
}
void LineSectionImpact::set_allocated_from(::pbnavitia::PtObject* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineSectionImpact.from)
}

// optional .pbnavitia.PtObject to = 2;
bool LineSectionImpact::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LineSectionImpact::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void LineSectionImpact::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void LineSectionImpact::clear_to() {
  if (to_ != NULL) to_->::pbnavitia::PtObject::Clear();
  clear_has_to();
}
const ::pbnavitia::PtObject& LineSectionImpact::to() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineSectionImpact.to)
  return to_ != NULL ? *to_ : *default_instance_->to_;
}
::pbnavitia::PtObject* LineSectionImpact::mutable_to() {
  set_has_to();
  if (to_ == NULL) {
    to_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineSectionImpact.to)
  return to_;
}
::pbnavitia::PtObject* LineSectionImpact::release_to() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineSectionImpact.to)
  clear_has_to();
  ::pbnavitia::PtObject* temp = to_;
  to_ = NULL;
  return temp;
}
void LineSectionImpact::set_allocated_to(::pbnavitia::PtObject* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineSectionImpact.to)
}

// repeated .pbnavitia.Route routes = 3;
int LineSectionImpact::routes_size() const {
  return routes_.size();
}
void LineSectionImpact::clear_routes() {
  routes_.Clear();
}
const ::pbnavitia::Route& LineSectionImpact::routes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineSectionImpact.routes)
  return routes_.Get(index);
}
::pbnavitia::Route* LineSectionImpact::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineSectionImpact.routes)
  return routes_.Mutable(index);
}
::pbnavitia::Route* LineSectionImpact::add_routes() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineSectionImpact.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
LineSectionImpact::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineSectionImpact.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
LineSectionImpact::routes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineSectionImpact.routes)
  return routes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImpactedObject::kPtObjectFieldNumber;
const int ImpactedObject::kImpactedStopsFieldNumber;
const int ImpactedObject::kImpactedSectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImpactedObject::ImpactedObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.ImpactedObject)
}

void ImpactedObject::InitAsDefaultInstance() {
  pt_object_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  impacted_section_ = const_cast< ::pbnavitia::LineSectionImpact*>(&::pbnavitia::LineSectionImpact::default_instance());
}

ImpactedObject::ImpactedObject(const ImpactedObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.ImpactedObject)
}

void ImpactedObject::SharedCtor() {
  _cached_size_ = 0;
  pt_object_ = NULL;
  impacted_section_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImpactedObject::~ImpactedObject() {
  // @@protoc_insertion_point(destructor:pbnavitia.ImpactedObject)
  SharedDtor();
}

void ImpactedObject::SharedDtor() {
  if (this != default_instance_) {
    delete pt_object_;
    delete impacted_section_;
  }
}

void ImpactedObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImpactedObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpactedObject_descriptor_;
}

const ImpactedObject& ImpactedObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

ImpactedObject* ImpactedObject::default_instance_ = NULL;

ImpactedObject* ImpactedObject::New(::google::protobuf::Arena* arena) const {
  ImpactedObject* n = new ImpactedObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImpactedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.ImpactedObject)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_pt_object()) {
      if (pt_object_ != NULL) pt_object_->::pbnavitia::PtObject::Clear();
    }
    if (has_impacted_section()) {
      if (impacted_section_ != NULL) impacted_section_->::pbnavitia::LineSectionImpact::Clear();
    }
  }
  impacted_stops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImpactedObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.ImpactedObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.PtObject pt_object = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impacted_stops;
        break;
      }

      // repeated .pbnavitia.StopTimeUpdate impacted_stops = 2;
      case 2: {
        if (tag == 18) {
         parse_impacted_stops:
          DO_(input->IncrementRecursionDepth());
         parse_loop_impacted_stops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_impacted_stops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_impacted_stops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_impacted_section;
        break;
      }

      // optional .pbnavitia.LineSectionImpact impacted_section = 3;
      case 3: {
        if (tag == 26) {
         parse_impacted_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impacted_section()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.ImpactedObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.ImpactedObject)
  return false;
#undef DO_
}

void ImpactedObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.ImpactedObject)
  // optional .pbnavitia.PtObject pt_object = 1;
  if (has_pt_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pt_object_, output);
  }

  // repeated .pbnavitia.StopTimeUpdate impacted_stops = 2;
  for (unsigned int i = 0, n = this->impacted_stops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->impacted_stops(i), output);
  }

  // optional .pbnavitia.LineSectionImpact impacted_section = 3;
  if (has_impacted_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->impacted_section_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.ImpactedObject)
}

::google::protobuf::uint8* ImpactedObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.ImpactedObject)
  // optional .pbnavitia.PtObject pt_object = 1;
  if (has_pt_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pt_object_, false, target);
  }

  // repeated .pbnavitia.StopTimeUpdate impacted_stops = 2;
  for (unsigned int i = 0, n = this->impacted_stops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->impacted_stops(i), false, target);
  }

  // optional .pbnavitia.LineSectionImpact impacted_section = 3;
  if (has_impacted_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->impacted_section_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.ImpactedObject)
  return target;
}

int ImpactedObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.ImpactedObject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .pbnavitia.PtObject pt_object = 1;
    if (has_pt_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pt_object_);
    }

    // optional .pbnavitia.LineSectionImpact impacted_section = 3;
    if (has_impacted_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->impacted_section_);
    }

  }
  // repeated .pbnavitia.StopTimeUpdate impacted_stops = 2;
  total_size += 1 * this->impacted_stops_size();
  for (int i = 0; i < this->impacted_stops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->impacted_stops(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImpactedObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.ImpactedObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImpactedObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImpactedObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.ImpactedObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.ImpactedObject)
    MergeFrom(*source);
  }
}

void ImpactedObject::MergeFrom(const ImpactedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.ImpactedObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  impacted_stops_.MergeFrom(from.impacted_stops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt_object()) {
      mutable_pt_object()->::pbnavitia::PtObject::MergeFrom(from.pt_object());
    }
    if (from.has_impacted_section()) {
      mutable_impacted_section()->::pbnavitia::LineSectionImpact::MergeFrom(from.impacted_section());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImpactedObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.ImpactedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImpactedObject::CopyFrom(const ImpactedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.ImpactedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpactedObject::IsInitialized() const {

  if (has_pt_object()) {
    if (!this->pt_object_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->impacted_stops())) return false;
  if (has_impacted_section()) {
    if (!this->impacted_section_->IsInitialized()) return false;
  }
  return true;
}

void ImpactedObject::Swap(ImpactedObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImpactedObject::InternalSwap(ImpactedObject* other) {
  std::swap(pt_object_, other->pt_object_);
  impacted_stops_.UnsafeArenaSwap(&other->impacted_stops_);
  std::swap(impacted_section_, other->impacted_section_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImpactedObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImpactedObject_descriptor_;
  metadata.reflection = ImpactedObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImpactedObject

// optional .pbnavitia.PtObject pt_object = 1;
bool ImpactedObject::has_pt_object() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImpactedObject::set_has_pt_object() {
  _has_bits_[0] |= 0x00000001u;
}
void ImpactedObject::clear_has_pt_object() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImpactedObject::clear_pt_object() {
  if (pt_object_ != NULL) pt_object_->::pbnavitia::PtObject::Clear();
  clear_has_pt_object();
}
const ::pbnavitia::PtObject& ImpactedObject::pt_object() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ImpactedObject.pt_object)
  return pt_object_ != NULL ? *pt_object_ : *default_instance_->pt_object_;
}
::pbnavitia::PtObject* ImpactedObject::mutable_pt_object() {
  set_has_pt_object();
  if (pt_object_ == NULL) {
    pt_object_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.ImpactedObject.pt_object)
  return pt_object_;
}
::pbnavitia::PtObject* ImpactedObject::release_pt_object() {
  // @@protoc_insertion_point(field_release:pbnavitia.ImpactedObject.pt_object)
  clear_has_pt_object();
  ::pbnavitia::PtObject* temp = pt_object_;
  pt_object_ = NULL;
  return temp;
}
void ImpactedObject::set_allocated_pt_object(::pbnavitia::PtObject* pt_object) {
  delete pt_object_;
  pt_object_ = pt_object;
  if (pt_object) {
    set_has_pt_object();
  } else {
    clear_has_pt_object();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ImpactedObject.pt_object)
}

// repeated .pbnavitia.StopTimeUpdate impacted_stops = 2;
int ImpactedObject::impacted_stops_size() const {
  return impacted_stops_.size();
}
void ImpactedObject::clear_impacted_stops() {
  impacted_stops_.Clear();
}
const ::pbnavitia::StopTimeUpdate& ImpactedObject::impacted_stops(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.ImpactedObject.impacted_stops)
  return impacted_stops_.Get(index);
}
::pbnavitia::StopTimeUpdate* ImpactedObject::mutable_impacted_stops(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.ImpactedObject.impacted_stops)
  return impacted_stops_.Mutable(index);
}
::pbnavitia::StopTimeUpdate* ImpactedObject::add_impacted_stops() {
  // @@protoc_insertion_point(field_add:pbnavitia.ImpactedObject.impacted_stops)
  return impacted_stops_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTimeUpdate >*
ImpactedObject::mutable_impacted_stops() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.ImpactedObject.impacted_stops)
  return &impacted_stops_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTimeUpdate >&
ImpactedObject::impacted_stops() const {
  // @@protoc_insertion_point(field_list:pbnavitia.ImpactedObject.impacted_stops)
  return impacted_stops_;
}

// optional .pbnavitia.LineSectionImpact impacted_section = 3;
bool ImpactedObject::has_impacted_section() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImpactedObject::set_has_impacted_section() {
  _has_bits_[0] |= 0x00000004u;
}
void ImpactedObject::clear_has_impacted_section() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImpactedObject::clear_impacted_section() {
  if (impacted_section_ != NULL) impacted_section_->::pbnavitia::LineSectionImpact::Clear();
  clear_has_impacted_section();
}
const ::pbnavitia::LineSectionImpact& ImpactedObject::impacted_section() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ImpactedObject.impacted_section)
  return impacted_section_ != NULL ? *impacted_section_ : *default_instance_->impacted_section_;
}
::pbnavitia::LineSectionImpact* ImpactedObject::mutable_impacted_section() {
  set_has_impacted_section();
  if (impacted_section_ == NULL) {
    impacted_section_ = new ::pbnavitia::LineSectionImpact;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.ImpactedObject.impacted_section)
  return impacted_section_;
}
::pbnavitia::LineSectionImpact* ImpactedObject::release_impacted_section() {
  // @@protoc_insertion_point(field_release:pbnavitia.ImpactedObject.impacted_section)
  clear_has_impacted_section();
  ::pbnavitia::LineSectionImpact* temp = impacted_section_;
  impacted_section_ = NULL;
  return temp;
}
void ImpactedObject::set_allocated_impacted_section(::pbnavitia::LineSectionImpact* impacted_section) {
  delete impacted_section_;
  impacted_section_ = impacted_section;
  if (impacted_section) {
    set_has_impacted_section();
  } else {
    clear_has_impacted_section();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ImpactedObject.impacted_section)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisruptionProperty::kKeyFieldNumber;
const int DisruptionProperty::kTypeFieldNumber;
const int DisruptionProperty::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisruptionProperty::DisruptionProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.DisruptionProperty)
}

void DisruptionProperty::InitAsDefaultInstance() {
}

DisruptionProperty::DisruptionProperty(const DisruptionProperty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.DisruptionProperty)
}

void DisruptionProperty::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisruptionProperty::~DisruptionProperty() {
  // @@protoc_insertion_point(destructor:pbnavitia.DisruptionProperty)
  SharedDtor();
}

void DisruptionProperty::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DisruptionProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisruptionProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisruptionProperty_descriptor_;
}

const DisruptionProperty& DisruptionProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

DisruptionProperty* DisruptionProperty::default_instance_ = NULL;

DisruptionProperty* DisruptionProperty::New(::google::protobuf::Arena* arena) const {
  DisruptionProperty* n = new DisruptionProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisruptionProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.DisruptionProperty)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DisruptionProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.DisruptionProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.DisruptionProperty.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.DisruptionProperty.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // required string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.DisruptionProperty.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.DisruptionProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.DisruptionProperty)
  return false;
#undef DO_
}

void DisruptionProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.DisruptionProperty)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.DisruptionProperty.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.DisruptionProperty.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.DisruptionProperty.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.DisruptionProperty)
}

::google::protobuf::uint8* DisruptionProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.DisruptionProperty)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.DisruptionProperty.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.DisruptionProperty.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.DisruptionProperty.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.DisruptionProperty)
  return target;
}

int DisruptionProperty::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.DisruptionProperty)
  int total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_value()) {
    // required string value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int DisruptionProperty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.DisruptionProperty)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required string value = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisruptionProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.DisruptionProperty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DisruptionProperty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DisruptionProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.DisruptionProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.DisruptionProperty)
    MergeFrom(*source);
  }
}

void DisruptionProperty::MergeFrom(const DisruptionProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.DisruptionProperty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DisruptionProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.DisruptionProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisruptionProperty::CopyFrom(const DisruptionProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.DisruptionProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisruptionProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DisruptionProperty::Swap(DisruptionProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisruptionProperty::InternalSwap(DisruptionProperty* other) {
  key_.Swap(&other->key_);
  type_.Swap(&other->type_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisruptionProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisruptionProperty_descriptor_;
  metadata.reflection = DisruptionProperty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisruptionProperty

// required string key = 1;
bool DisruptionProperty::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DisruptionProperty::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void DisruptionProperty::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void DisruptionProperty::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& DisruptionProperty::key() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DisruptionProperty.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisruptionProperty::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.DisruptionProperty.key)
}
 void DisruptionProperty::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.DisruptionProperty.key)
}
 void DisruptionProperty::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.DisruptionProperty.key)
}
 ::std::string* DisruptionProperty::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pbnavitia.DisruptionProperty.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DisruptionProperty::release_key() {
  // @@protoc_insertion_point(field_release:pbnavitia.DisruptionProperty.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisruptionProperty::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DisruptionProperty.key)
}

// required string type = 2;
bool DisruptionProperty::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DisruptionProperty::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DisruptionProperty::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DisruptionProperty::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& DisruptionProperty::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DisruptionProperty.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisruptionProperty::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.DisruptionProperty.type)
}
 void DisruptionProperty::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.DisruptionProperty.type)
}
 void DisruptionProperty::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.DisruptionProperty.type)
}
 ::std::string* DisruptionProperty::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.DisruptionProperty.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DisruptionProperty::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.DisruptionProperty.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisruptionProperty::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DisruptionProperty.type)
}

// required string value = 3;
bool DisruptionProperty::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DisruptionProperty::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void DisruptionProperty::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void DisruptionProperty::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& DisruptionProperty::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DisruptionProperty.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisruptionProperty::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.DisruptionProperty.value)
}
 void DisruptionProperty::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.DisruptionProperty.value)
}
 void DisruptionProperty::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.DisruptionProperty.value)
}
 ::std::string* DisruptionProperty::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pbnavitia.DisruptionProperty.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DisruptionProperty::release_value() {
  // @@protoc_insertion_point(field_release:pbnavitia.DisruptionProperty.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DisruptionProperty::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DisruptionProperty.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Impact::kUriFieldNumber;
const int Impact::kDisruptionUriFieldNumber;
const int Impact::kApplicationPeriodsFieldNumber;
const int Impact::kStatusFieldNumber;
const int Impact::kUpdatedAtFieldNumber;
const int Impact::kTagsFieldNumber;
const int Impact::kCauseFieldNumber;
const int Impact::kMessagesFieldNumber;
const int Impact::kSeverityFieldNumber;
const int Impact::kContributorFieldNumber;
const int Impact::kImpactedObjectsFieldNumber;
const int Impact::kCategoryFieldNumber;
const int Impact::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Impact::Impact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Impact)
}

void Impact::InitAsDefaultInstance() {
  severity_ = const_cast< ::pbnavitia::Severity*>(&::pbnavitia::Severity::default_instance());
}

Impact::Impact(const Impact& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Impact)
}

void Impact::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disruption_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  updated_at_ = GOOGLE_ULONGLONG(0);
  cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  severity_ = NULL;
  contributor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Impact::~Impact() {
  // @@protoc_insertion_point(destructor:pbnavitia.Impact)
  SharedDtor();
}

void Impact::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disruption_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contributor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete severity_;
  }
}

void Impact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Impact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Impact_descriptor_;
}

const Impact& Impact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Impact* Impact::default_instance_ = NULL;

Impact* Impact::New(::google::protobuf::Arena* arena) const {
  Impact* n = new Impact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Impact::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Impact)
  if (_has_bits_[0 / 32] & 91u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_disruption_uri()) {
      disruption_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
    updated_at_ = GOOGLE_ULONGLONG(0);
    if (has_cause()) {
      cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 2816u) {
    if (has_severity()) {
      if (severity_ != NULL) severity_->::pbnavitia::Severity::Clear();
    }
    if (has_contributor()) {
      contributor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_category()) {
      category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  application_periods_.Clear();
  tags_.Clear();
  messages_.Clear();
  impacted_objects_.Clear();
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Impact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Impact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Impact.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_disruption_uri;
        break;
      }

      // optional string disruption_uri = 2;
      case 2: {
        if (tag == 18) {
         parse_disruption_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disruption_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->disruption_uri().data(), this->disruption_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Impact.disruption_uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_application_periods;
        break;
      }

      // repeated .pbnavitia.Period application_periods = 10;
      case 10: {
        if (tag == 82) {
         parse_application_periods:
          DO_(input->IncrementRecursionDepth());
         parse_loop_application_periods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_application_periods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_application_periods;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }

      // optional .pbnavitia.ActiveStatus status = 11;
      case 11: {
        if (tag == 88) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::ActiveStatus_IsValid(value)) {
            set_status(static_cast< ::pbnavitia::ActiveStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_updated_at;
        break;
      }

      // optional uint64 updated_at = 12;
      case 12: {
        if (tag == 96) {
         parse_updated_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updated_at_)));
          set_has_updated_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_tags;
        break;
      }

      // repeated string tags = 13;
      case 13: {
        if (tag == 106) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Impact.tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_tags;
        if (input->ExpectTag(114)) goto parse_cause;
        break;
      }

      // optional string cause = 14;
      case 14: {
        if (tag == 114) {
         parse_cause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cause()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cause().data(), this->cause().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Impact.cause");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_messages;
        break;
      }

      // repeated .pbnavitia.MessageContent messages = 15;
      case 15: {
        if (tag == 122) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(130)) goto parse_severity;
        break;
      }

      // optional .pbnavitia.Severity severity = 16;
      case 16: {
        if (tag == 130) {
         parse_severity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_severity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_contributor;
        break;
      }

      // optional string contributor = 17;
      case 17: {
        if (tag == 138) {
         parse_contributor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contributor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contributor().data(), this->contributor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Impact.contributor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_impacted_objects;
        break;
      }

      // repeated .pbnavitia.ImpactedObject impacted_objects = 18;
      case 18: {
        if (tag == 146) {
         parse_impacted_objects:
          DO_(input->IncrementRecursionDepth());
         parse_loop_impacted_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_impacted_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_impacted_objects;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(154)) goto parse_category;
        break;
      }

      // optional string category = 19;
      case 19: {
        if (tag == 154) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Impact.category");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_properties;
        break;
      }

      // repeated .pbnavitia.DisruptionProperty properties = 20;
      case 20: {
        if (tag == 162) {
         parse_properties:
          DO_(input->IncrementRecursionDepth());
         parse_loop_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_properties;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Impact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Impact)
  return false;
#undef DO_
}

void Impact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Impact)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string disruption_uri = 2;
  if (has_disruption_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->disruption_uri().data(), this->disruption_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.disruption_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->disruption_uri(), output);
  }

  // repeated .pbnavitia.Period application_periods = 10;
  for (unsigned int i = 0, n = this->application_periods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->application_periods(i), output);
  }

  // optional .pbnavitia.ActiveStatus status = 11;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->status(), output);
  }

  // optional uint64 updated_at = 12;
  if (has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->updated_at(), output);
  }

  // repeated string tags = 13;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->tags(i), output);
  }

  // optional string cause = 14;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cause().data(), this->cause().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.cause");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->cause(), output);
  }

  // repeated .pbnavitia.MessageContent messages = 15;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->messages(i), output);
  }

  // optional .pbnavitia.Severity severity = 16;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->severity_, output);
  }

  // optional string contributor = 17;
  if (has_contributor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contributor().data(), this->contributor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.contributor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->contributor(), output);
  }

  // repeated .pbnavitia.ImpactedObject impacted_objects = 18;
  for (unsigned int i = 0, n = this->impacted_objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->impacted_objects(i), output);
  }

  // optional string category = 19;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->category(), output);
  }

  // repeated .pbnavitia.DisruptionProperty properties = 20;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->properties(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Impact)
}

::google::protobuf::uint8* Impact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Impact)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string disruption_uri = 2;
  if (has_disruption_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->disruption_uri().data(), this->disruption_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.disruption_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->disruption_uri(), target);
  }

  // repeated .pbnavitia.Period application_periods = 10;
  for (unsigned int i = 0, n = this->application_periods_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->application_periods(i), false, target);
  }

  // optional .pbnavitia.ActiveStatus status = 11;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->status(), target);
  }

  // optional uint64 updated_at = 12;
  if (has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->updated_at(), target);
  }

  // repeated string tags = 13;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->tags(i), target);
  }

  // optional string cause = 14;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cause().data(), this->cause().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.cause");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->cause(), target);
  }

  // repeated .pbnavitia.MessageContent messages = 15;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->messages(i), false, target);
  }

  // optional .pbnavitia.Severity severity = 16;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->severity_, false, target);
  }

  // optional string contributor = 17;
  if (has_contributor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contributor().data(), this->contributor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.contributor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->contributor(), target);
  }

  // repeated .pbnavitia.ImpactedObject impacted_objects = 18;
  for (unsigned int i = 0, n = this->impacted_objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->impacted_objects(i), false, target);
  }

  // optional string category = 19;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Impact.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->category(), target);
  }

  // repeated .pbnavitia.DisruptionProperty properties = 20;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->properties(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Impact)
  return target;
}

int Impact::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Impact)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 91u) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string disruption_uri = 2;
    if (has_disruption_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disruption_uri());
    }

    // optional .pbnavitia.ActiveStatus status = 11;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 updated_at = 12;
    if (has_updated_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updated_at());
    }

    // optional string cause = 14;
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cause());
    }

  }
  if (_has_bits_[8 / 32] & 2816u) {
    // optional .pbnavitia.Severity severity = 16;
    if (has_severity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->severity_);
    }

    // optional string contributor = 17;
    if (has_contributor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contributor());
    }

    // optional string category = 19;
    if (has_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

  }
  // repeated .pbnavitia.Period application_periods = 10;
  total_size += 1 * this->application_periods_size();
  for (int i = 0; i < this->application_periods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->application_periods(i));
  }

  // repeated string tags = 13;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .pbnavitia.MessageContent messages = 15;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated .pbnavitia.ImpactedObject impacted_objects = 18;
  total_size += 2 * this->impacted_objects_size();
  for (int i = 0; i < this->impacted_objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->impacted_objects(i));
  }

  // repeated .pbnavitia.DisruptionProperty properties = 20;
  total_size += 2 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Impact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Impact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Impact* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Impact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Impact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Impact)
    MergeFrom(*source);
  }
}

void Impact::MergeFrom(const Impact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Impact)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  application_periods_.MergeFrom(from.application_periods_);
  tags_.MergeFrom(from.tags_);
  messages_.MergeFrom(from.messages_);
  impacted_objects_.MergeFrom(from.impacted_objects_);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_disruption_uri()) {
      set_has_disruption_uri();
      disruption_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disruption_uri_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_updated_at()) {
      set_updated_at(from.updated_at());
    }
    if (from.has_cause()) {
      set_has_cause();
      cause_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cause_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_severity()) {
      mutable_severity()->::pbnavitia::Severity::MergeFrom(from.severity());
    }
    if (from.has_contributor()) {
      set_has_contributor();
      contributor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contributor_);
    }
    if (from.has_category()) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Impact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Impact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Impact::CopyFrom(const Impact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Impact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Impact::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->impacted_objects())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  return true;
}

void Impact::Swap(Impact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Impact::InternalSwap(Impact* other) {
  uri_.Swap(&other->uri_);
  disruption_uri_.Swap(&other->disruption_uri_);
  application_periods_.UnsafeArenaSwap(&other->application_periods_);
  std::swap(status_, other->status_);
  std::swap(updated_at_, other->updated_at_);
  tags_.UnsafeArenaSwap(&other->tags_);
  cause_.Swap(&other->cause_);
  messages_.UnsafeArenaSwap(&other->messages_);
  std::swap(severity_, other->severity_);
  contributor_.Swap(&other->contributor_);
  impacted_objects_.UnsafeArenaSwap(&other->impacted_objects_);
  category_.Swap(&other->category_);
  properties_.UnsafeArenaSwap(&other->properties_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Impact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Impact_descriptor_;
  metadata.reflection = Impact_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Impact

// optional string uri = 1;
bool Impact::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Impact::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Impact::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Impact::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Impact::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.uri)
}
 void Impact::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.uri)
}
 void Impact::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.uri)
}
 ::std::string* Impact::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Impact::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.uri)
}

// optional string disruption_uri = 2;
bool Impact::has_disruption_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Impact::set_has_disruption_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void Impact::clear_has_disruption_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void Impact::clear_disruption_uri() {
  disruption_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_disruption_uri();
}
 const ::std::string& Impact::disruption_uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.disruption_uri)
  return disruption_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_disruption_uri(const ::std::string& value) {
  set_has_disruption_uri();
  disruption_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.disruption_uri)
}
 void Impact::set_disruption_uri(const char* value) {
  set_has_disruption_uri();
  disruption_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.disruption_uri)
}
 void Impact::set_disruption_uri(const char* value, size_t size) {
  set_has_disruption_uri();
  disruption_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.disruption_uri)
}
 ::std::string* Impact::mutable_disruption_uri() {
  set_has_disruption_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.disruption_uri)
  return disruption_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Impact::release_disruption_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.disruption_uri)
  clear_has_disruption_uri();
  return disruption_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_allocated_disruption_uri(::std::string* disruption_uri) {
  if (disruption_uri != NULL) {
    set_has_disruption_uri();
  } else {
    clear_has_disruption_uri();
  }
  disruption_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disruption_uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.disruption_uri)
}

// repeated .pbnavitia.Period application_periods = 10;
int Impact::application_periods_size() const {
  return application_periods_.size();
}
void Impact::clear_application_periods() {
  application_periods_.Clear();
}
const ::pbnavitia::Period& Impact::application_periods(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.application_periods)
  return application_periods_.Get(index);
}
::pbnavitia::Period* Impact::mutable_application_periods(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.application_periods)
  return application_periods_.Mutable(index);
}
::pbnavitia::Period* Impact::add_application_periods() {
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.application_periods)
  return application_periods_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >*
Impact::mutable_application_periods() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.application_periods)
  return &application_periods_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >&
Impact::application_periods() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.application_periods)
  return application_periods_;
}

// optional .pbnavitia.ActiveStatus status = 11;
bool Impact::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Impact::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void Impact::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void Impact::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::pbnavitia::ActiveStatus Impact::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.status)
  return static_cast< ::pbnavitia::ActiveStatus >(status_);
}
 void Impact::set_status(::pbnavitia::ActiveStatus value) {
  assert(::pbnavitia::ActiveStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.status)
}

// optional uint64 updated_at = 12;
bool Impact::has_updated_at() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Impact::set_has_updated_at() {
  _has_bits_[0] |= 0x00000010u;
}
void Impact::clear_has_updated_at() {
  _has_bits_[0] &= ~0x00000010u;
}
void Impact::clear_updated_at() {
  updated_at_ = GOOGLE_ULONGLONG(0);
  clear_has_updated_at();
}
 ::google::protobuf::uint64 Impact::updated_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.updated_at)
  return updated_at_;
}
 void Impact::set_updated_at(::google::protobuf::uint64 value) {
  set_has_updated_at();
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.updated_at)
}

// repeated string tags = 13;
int Impact::tags_size() const {
  return tags_.size();
}
void Impact::clear_tags() {
  tags_.Clear();
}
 const ::std::string& Impact::tags(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.tags)
  return tags_.Get(index);
}
 ::std::string* Impact::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.tags)
  return tags_.Mutable(index);
}
 void Impact::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.tags)
  tags_.Mutable(index)->assign(value);
}
 void Impact::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.tags)
}
 void Impact::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.tags)
}
 ::std::string* Impact::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Impact.tags)
  return tags_.Add();
}
 void Impact::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.tags)
}
 void Impact::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Impact.tags)
}
 void Impact::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Impact.tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Impact::tags() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Impact::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.tags)
  return &tags_;
}

// optional string cause = 14;
bool Impact::has_cause() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Impact::set_has_cause() {
  _has_bits_[0] |= 0x00000040u;
}
void Impact::clear_has_cause() {
  _has_bits_[0] &= ~0x00000040u;
}
void Impact::clear_cause() {
  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cause();
}
 const ::std::string& Impact::cause() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.cause)
  return cause_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_cause(const ::std::string& value) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.cause)
}
 void Impact::set_cause(const char* value) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.cause)
}
 void Impact::set_cause(const char* value, size_t size) {
  set_has_cause();
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.cause)
}
 ::std::string* Impact::mutable_cause() {
  set_has_cause();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.cause)
  return cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Impact::release_cause() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.cause)
  clear_has_cause();
  return cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_allocated_cause(::std::string* cause) {
  if (cause != NULL) {
    set_has_cause();
  } else {
    clear_has_cause();
  }
  cause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cause);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.cause)
}

// repeated .pbnavitia.MessageContent messages = 15;
int Impact::messages_size() const {
  return messages_.size();
}
void Impact::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::MessageContent& Impact::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.messages)
  return messages_.Get(index);
}
::pbnavitia::MessageContent* Impact::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.messages)
  return messages_.Mutable(index);
}
::pbnavitia::MessageContent* Impact::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::MessageContent >*
Impact::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::MessageContent >&
Impact::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.messages)
  return messages_;
}

// optional .pbnavitia.Severity severity = 16;
bool Impact::has_severity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Impact::set_has_severity() {
  _has_bits_[0] |= 0x00000100u;
}
void Impact::clear_has_severity() {
  _has_bits_[0] &= ~0x00000100u;
}
void Impact::clear_severity() {
  if (severity_ != NULL) severity_->::pbnavitia::Severity::Clear();
  clear_has_severity();
}
const ::pbnavitia::Severity& Impact::severity() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.severity)
  return severity_ != NULL ? *severity_ : *default_instance_->severity_;
}
::pbnavitia::Severity* Impact::mutable_severity() {
  set_has_severity();
  if (severity_ == NULL) {
    severity_ = new ::pbnavitia::Severity;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.severity)
  return severity_;
}
::pbnavitia::Severity* Impact::release_severity() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.severity)
  clear_has_severity();
  ::pbnavitia::Severity* temp = severity_;
  severity_ = NULL;
  return temp;
}
void Impact::set_allocated_severity(::pbnavitia::Severity* severity) {
  delete severity_;
  severity_ = severity;
  if (severity) {
    set_has_severity();
  } else {
    clear_has_severity();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.severity)
}

// optional string contributor = 17;
bool Impact::has_contributor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Impact::set_has_contributor() {
  _has_bits_[0] |= 0x00000200u;
}
void Impact::clear_has_contributor() {
  _has_bits_[0] &= ~0x00000200u;
}
void Impact::clear_contributor() {
  contributor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contributor();
}
 const ::std::string& Impact::contributor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.contributor)
  return contributor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_contributor(const ::std::string& value) {
  set_has_contributor();
  contributor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.contributor)
}
 void Impact::set_contributor(const char* value) {
  set_has_contributor();
  contributor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.contributor)
}
 void Impact::set_contributor(const char* value, size_t size) {
  set_has_contributor();
  contributor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.contributor)
}
 ::std::string* Impact::mutable_contributor() {
  set_has_contributor();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.contributor)
  return contributor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Impact::release_contributor() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.contributor)
  clear_has_contributor();
  return contributor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_allocated_contributor(::std::string* contributor) {
  if (contributor != NULL) {
    set_has_contributor();
  } else {
    clear_has_contributor();
  }
  contributor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contributor);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.contributor)
}

// repeated .pbnavitia.ImpactedObject impacted_objects = 18;
int Impact::impacted_objects_size() const {
  return impacted_objects_.size();
}
void Impact::clear_impacted_objects() {
  impacted_objects_.Clear();
}
const ::pbnavitia::ImpactedObject& Impact::impacted_objects(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.impacted_objects)
  return impacted_objects_.Get(index);
}
::pbnavitia::ImpactedObject* Impact::mutable_impacted_objects(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.impacted_objects)
  return impacted_objects_.Mutable(index);
}
::pbnavitia::ImpactedObject* Impact::add_impacted_objects() {
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.impacted_objects)
  return impacted_objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::ImpactedObject >*
Impact::mutable_impacted_objects() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.impacted_objects)
  return &impacted_objects_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ImpactedObject >&
Impact::impacted_objects() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.impacted_objects)
  return impacted_objects_;
}

// optional string category = 19;
bool Impact::has_category() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Impact::set_has_category() {
  _has_bits_[0] |= 0x00000800u;
}
void Impact::clear_has_category() {
  _has_bits_[0] &= ~0x00000800u;
}
void Impact::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
 const ::std::string& Impact::category() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.category)
  return category_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Impact.category)
}
 void Impact::set_category(const char* value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Impact.category)
}
 void Impact::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Impact.category)
}
 ::std::string* Impact::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Impact::release_category() {
  // @@protoc_insertion_point(field_release:pbnavitia.Impact.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Impact::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Impact.category)
}

// repeated .pbnavitia.DisruptionProperty properties = 20;
int Impact::properties_size() const {
  return properties_.size();
}
void Impact::clear_properties() {
  properties_.Clear();
}
const ::pbnavitia::DisruptionProperty& Impact::properties(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Impact.properties)
  return properties_.Get(index);
}
::pbnavitia::DisruptionProperty* Impact::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Impact.properties)
  return properties_.Mutable(index);
}
::pbnavitia::DisruptionProperty* Impact::add_properties() {
  // @@protoc_insertion_point(field_add:pbnavitia.Impact.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::DisruptionProperty >*
Impact::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Impact.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::DisruptionProperty >&
Impact::properties() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Impact.properties)
  return properties_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographicalCoord::kLonFieldNumber;
const int GeographicalCoord::kLatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographicalCoord::GeographicalCoord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.GeographicalCoord)
}

void GeographicalCoord::InitAsDefaultInstance() {
}

GeographicalCoord::GeographicalCoord(const GeographicalCoord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.GeographicalCoord)
}

void GeographicalCoord::SharedCtor() {
  _cached_size_ = 0;
  lon_ = 0;
  lat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeographicalCoord::~GeographicalCoord() {
  // @@protoc_insertion_point(destructor:pbnavitia.GeographicalCoord)
  SharedDtor();
}

void GeographicalCoord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeographicalCoord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeographicalCoord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeographicalCoord_descriptor_;
}

const GeographicalCoord& GeographicalCoord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

GeographicalCoord* GeographicalCoord::default_instance_ = NULL;

GeographicalCoord* GeographicalCoord::New(::google::protobuf::Arena* arena) const {
  GeographicalCoord* n = new GeographicalCoord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeographicalCoord::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.GeographicalCoord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GeographicalCoord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GeographicalCoord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lon_, lat_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GeographicalCoord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.GeographicalCoord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lon = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // required double lat = 2;
      case 2: {
        if (tag == 17) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.GeographicalCoord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.GeographicalCoord)
  return false;
#undef DO_
}

void GeographicalCoord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.GeographicalCoord)
  // required double lon = 1;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lon(), output);
  }

  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.GeographicalCoord)
}

::google::protobuf::uint8* GeographicalCoord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.GeographicalCoord)
  // required double lon = 1;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lon(), target);
  }

  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.GeographicalCoord)
  return target;
}

int GeographicalCoord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.GeographicalCoord)
  int total_size = 0;

  if (has_lon()) {
    // required double lon = 1;
    total_size += 1 + 8;
  }

  if (has_lat()) {
    // required double lat = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int GeographicalCoord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.GeographicalCoord)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double lon = 1;
    total_size += 1 + 8;

    // required double lat = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeographicalCoord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.GeographicalCoord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeographicalCoord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographicalCoord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.GeographicalCoord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.GeographicalCoord)
    MergeFrom(*source);
  }
}

void GeographicalCoord::MergeFrom(const GeographicalCoord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.GeographicalCoord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GeographicalCoord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.GeographicalCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographicalCoord::CopyFrom(const GeographicalCoord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.GeographicalCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographicalCoord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GeographicalCoord::Swap(GeographicalCoord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographicalCoord::InternalSwap(GeographicalCoord* other) {
  std::swap(lon_, other->lon_);
  std::swap(lat_, other->lat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeographicalCoord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeographicalCoord_descriptor_;
  metadata.reflection = GeographicalCoord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeographicalCoord

// required double lon = 1;
bool GeographicalCoord::has_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeographicalCoord::set_has_lon() {
  _has_bits_[0] |= 0x00000001u;
}
void GeographicalCoord::clear_has_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeographicalCoord::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 double GeographicalCoord::lon() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeographicalCoord.lon)
  return lon_;
}
 void GeographicalCoord::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeographicalCoord.lon)
}

// required double lat = 2;
bool GeographicalCoord::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeographicalCoord::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
void GeographicalCoord::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeographicalCoord::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 double GeographicalCoord::lat() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeographicalCoord.lat)
  return lat_;
}
 void GeographicalCoord::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeographicalCoord.lat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdministrativeRegion::kUriFieldNumber;
const int AdministrativeRegion::kNameFieldNumber;
const int AdministrativeRegion::kZipCodeFieldNumber;
const int AdministrativeRegion::kLevelFieldNumber;
const int AdministrativeRegion::kCoordFieldNumber;
const int AdministrativeRegion::kLabelFieldNumber;
const int AdministrativeRegion::kInseeFieldNumber;
const int AdministrativeRegion::kMainStopAreasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdministrativeRegion::AdministrativeRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.AdministrativeRegion)
}

void AdministrativeRegion::InitAsDefaultInstance() {
  coord_ = const_cast< ::pbnavitia::GeographicalCoord*>(&::pbnavitia::GeographicalCoord::default_instance());
}

AdministrativeRegion::AdministrativeRegion(const AdministrativeRegion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.AdministrativeRegion)
}

void AdministrativeRegion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  coord_ = NULL;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdministrativeRegion::~AdministrativeRegion() {
  // @@protoc_insertion_point(destructor:pbnavitia.AdministrativeRegion)
  SharedDtor();
}

void AdministrativeRegion::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete coord_;
  }
}

void AdministrativeRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdministrativeRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdministrativeRegion_descriptor_;
}

const AdministrativeRegion& AdministrativeRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

AdministrativeRegion* AdministrativeRegion::default_instance_ = NULL;

AdministrativeRegion* AdministrativeRegion::New(::google::protobuf::Arena* arena) const {
  AdministrativeRegion* n = new AdministrativeRegion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdministrativeRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.AdministrativeRegion)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_zip_code()) {
      zip_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    level_ = 0;
    if (has_coord()) {
      if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
    }
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_insee()) {
      insee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  main_stop_areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AdministrativeRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.AdministrativeRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.AdministrativeRegion.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.AdministrativeRegion.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_zip_code;
        break;
      }

      // optional string zip_code = 4;
      case 4: {
        if (tag == 34) {
         parse_zip_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zip_code().data(), this->zip_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.AdministrativeRegion.zip_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_coord;
        break;
      }

      // optional .pbnavitia.GeographicalCoord coord = 6;
      case 6: {
        if (tag == 50) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_label;
        break;
      }

      // optional string label = 7;
      case 7: {
        if (tag == 58) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.AdministrativeRegion.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_insee;
        break;
      }

      // optional string insee = 8;
      case 8: {
        if (tag == 66) {
         parse_insee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insee()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->insee().data(), this->insee().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.AdministrativeRegion.insee");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_main_stop_areas;
        break;
      }

      // repeated .pbnavitia.StopArea main_stop_areas = 9;
      case 9: {
        if (tag == 74) {
         parse_main_stop_areas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_main_stop_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_main_stop_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_main_stop_areas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.AdministrativeRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.AdministrativeRegion)
  return false;
#undef DO_
}

void AdministrativeRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.AdministrativeRegion)
  // optional string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string zip_code = 4;
  if (has_zip_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip_code().data(), this->zip_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.zip_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->zip_code(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional .pbnavitia.GeographicalCoord coord = 6;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->coord_, output);
  }

  // optional string label = 7;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->label(), output);
  }

  // optional string insee = 8;
  if (has_insee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insee().data(), this->insee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.insee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->insee(), output);
  }

  // repeated .pbnavitia.StopArea main_stop_areas = 9;
  for (unsigned int i = 0, n = this->main_stop_areas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->main_stop_areas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.AdministrativeRegion)
}

::google::protobuf::uint8* AdministrativeRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.AdministrativeRegion)
  // optional string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string zip_code = 4;
  if (has_zip_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip_code().data(), this->zip_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.zip_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->zip_code(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional .pbnavitia.GeographicalCoord coord = 6;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->coord_, false, target);
  }

  // optional string label = 7;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->label(), target);
  }

  // optional string insee = 8;
  if (has_insee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insee().data(), this->insee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.AdministrativeRegion.insee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->insee(), target);
  }

  // repeated .pbnavitia.StopArea main_stop_areas = 9;
  for (unsigned int i = 0, n = this->main_stop_areas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->main_stop_areas(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.AdministrativeRegion)
  return target;
}

int AdministrativeRegion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.AdministrativeRegion)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string uri = 2;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string zip_code = 4;
    if (has_zip_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip_code());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .pbnavitia.GeographicalCoord coord = 6;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->coord_);
    }

    // optional string label = 7;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string insee = 8;
    if (has_insee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insee());
    }

  }
  // repeated .pbnavitia.StopArea main_stop_areas = 9;
  total_size += 1 * this->main_stop_areas_size();
  for (int i = 0; i < this->main_stop_areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->main_stop_areas(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdministrativeRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.AdministrativeRegion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AdministrativeRegion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AdministrativeRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.AdministrativeRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.AdministrativeRegion)
    MergeFrom(*source);
  }
}

void AdministrativeRegion::MergeFrom(const AdministrativeRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.AdministrativeRegion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  main_stop_areas_.MergeFrom(from.main_stop_areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_zip_code()) {
      set_has_zip_code();
      zip_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zip_code_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_coord()) {
      mutable_coord()->::pbnavitia::GeographicalCoord::MergeFrom(from.coord());
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_insee()) {
      set_has_insee();
      insee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insee_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AdministrativeRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.AdministrativeRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdministrativeRegion::CopyFrom(const AdministrativeRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.AdministrativeRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdministrativeRegion::IsInitialized() const {

  if (has_coord()) {
    if (!this->coord_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->main_stop_areas())) return false;
  return true;
}

void AdministrativeRegion::Swap(AdministrativeRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdministrativeRegion::InternalSwap(AdministrativeRegion* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  zip_code_.Swap(&other->zip_code_);
  std::swap(level_, other->level_);
  std::swap(coord_, other->coord_);
  label_.Swap(&other->label_);
  insee_.Swap(&other->insee_);
  main_stop_areas_.UnsafeArenaSwap(&other->main_stop_areas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdministrativeRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdministrativeRegion_descriptor_;
  metadata.reflection = AdministrativeRegion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdministrativeRegion

// optional string uri = 2;
bool AdministrativeRegion::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AdministrativeRegion::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void AdministrativeRegion::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void AdministrativeRegion::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& AdministrativeRegion::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.uri)
}
 void AdministrativeRegion::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.uri)
}
 void AdministrativeRegion::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.uri)
}
 ::std::string* AdministrativeRegion::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AdministrativeRegion::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.uri)
}

// optional string name = 3;
bool AdministrativeRegion::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AdministrativeRegion::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void AdministrativeRegion::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void AdministrativeRegion::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& AdministrativeRegion::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.name)
}
 void AdministrativeRegion::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.name)
}
 void AdministrativeRegion::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.name)
}
 ::std::string* AdministrativeRegion::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AdministrativeRegion::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.name)
}

// optional string zip_code = 4;
bool AdministrativeRegion::has_zip_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AdministrativeRegion::set_has_zip_code() {
  _has_bits_[0] |= 0x00000004u;
}
void AdministrativeRegion::clear_has_zip_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void AdministrativeRegion::clear_zip_code() {
  zip_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zip_code();
}
 const ::std::string& AdministrativeRegion::zip_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.zip_code)
  return zip_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_zip_code(const ::std::string& value) {
  set_has_zip_code();
  zip_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.zip_code)
}
 void AdministrativeRegion::set_zip_code(const char* value) {
  set_has_zip_code();
  zip_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.zip_code)
}
 void AdministrativeRegion::set_zip_code(const char* value, size_t size) {
  set_has_zip_code();
  zip_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.zip_code)
}
 ::std::string* AdministrativeRegion::mutable_zip_code() {
  set_has_zip_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.zip_code)
  return zip_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AdministrativeRegion::release_zip_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.zip_code)
  clear_has_zip_code();
  return zip_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_allocated_zip_code(::std::string* zip_code) {
  if (zip_code != NULL) {
    set_has_zip_code();
  } else {
    clear_has_zip_code();
  }
  zip_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip_code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.zip_code)
}

// optional int32 level = 5;
bool AdministrativeRegion::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AdministrativeRegion::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void AdministrativeRegion::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void AdministrativeRegion::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 AdministrativeRegion::level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.level)
  return level_;
}
 void AdministrativeRegion::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.level)
}

// optional .pbnavitia.GeographicalCoord coord = 6;
bool AdministrativeRegion::has_coord() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AdministrativeRegion::set_has_coord() {
  _has_bits_[0] |= 0x00000010u;
}
void AdministrativeRegion::clear_has_coord() {
  _has_bits_[0] &= ~0x00000010u;
}
void AdministrativeRegion::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
const ::pbnavitia::GeographicalCoord& AdministrativeRegion::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
::pbnavitia::GeographicalCoord* AdministrativeRegion::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.coord)
  return coord_;
}
::pbnavitia::GeographicalCoord* AdministrativeRegion::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
void AdministrativeRegion::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.coord)
}

// optional string label = 7;
bool AdministrativeRegion::has_label() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AdministrativeRegion::set_has_label() {
  _has_bits_[0] |= 0x00000020u;
}
void AdministrativeRegion::clear_has_label() {
  _has_bits_[0] &= ~0x00000020u;
}
void AdministrativeRegion::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& AdministrativeRegion::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.label)
}
 void AdministrativeRegion::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.label)
}
 void AdministrativeRegion::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.label)
}
 ::std::string* AdministrativeRegion::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AdministrativeRegion::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.label)
}

// optional string insee = 8;
bool AdministrativeRegion::has_insee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AdministrativeRegion::set_has_insee() {
  _has_bits_[0] |= 0x00000040u;
}
void AdministrativeRegion::clear_has_insee() {
  _has_bits_[0] &= ~0x00000040u;
}
void AdministrativeRegion::clear_insee() {
  insee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insee();
}
 const ::std::string& AdministrativeRegion::insee() const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.insee)
  return insee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_insee(const ::std::string& value) {
  set_has_insee();
  insee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.AdministrativeRegion.insee)
}
 void AdministrativeRegion::set_insee(const char* value) {
  set_has_insee();
  insee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.AdministrativeRegion.insee)
}
 void AdministrativeRegion::set_insee(const char* value, size_t size) {
  set_has_insee();
  insee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.AdministrativeRegion.insee)
}
 ::std::string* AdministrativeRegion::mutable_insee() {
  set_has_insee();
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.insee)
  return insee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AdministrativeRegion::release_insee() {
  // @@protoc_insertion_point(field_release:pbnavitia.AdministrativeRegion.insee)
  clear_has_insee();
  return insee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AdministrativeRegion::set_allocated_insee(::std::string* insee) {
  if (insee != NULL) {
    set_has_insee();
  } else {
    clear_has_insee();
  }
  insee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insee);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.AdministrativeRegion.insee)
}

// repeated .pbnavitia.StopArea main_stop_areas = 9;
int AdministrativeRegion::main_stop_areas_size() const {
  return main_stop_areas_.size();
}
void AdministrativeRegion::clear_main_stop_areas() {
  main_stop_areas_.Clear();
}
const ::pbnavitia::StopArea& AdministrativeRegion::main_stop_areas(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.AdministrativeRegion.main_stop_areas)
  return main_stop_areas_.Get(index);
}
::pbnavitia::StopArea* AdministrativeRegion::mutable_main_stop_areas(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.AdministrativeRegion.main_stop_areas)
  return main_stop_areas_.Mutable(index);
}
::pbnavitia::StopArea* AdministrativeRegion::add_main_stop_areas() {
  // @@protoc_insertion_point(field_add:pbnavitia.AdministrativeRegion.main_stop_areas)
  return main_stop_areas_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
AdministrativeRegion::mutable_main_stop_areas() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.AdministrativeRegion.main_stop_areas)
  return &main_stop_areas_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
AdministrativeRegion::main_stop_areas() const {
  // @@protoc_insertion_point(field_list:pbnavitia.AdministrativeRegion.main_stop_areas)
  return main_stop_areas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Comment::kValueFieldNumber;
const int Comment::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Comment::Comment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Comment)
}

void Comment::InitAsDefaultInstance() {
}

Comment::Comment(const Comment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Comment)
}

void Comment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Comment::~Comment() {
  // @@protoc_insertion_point(destructor:pbnavitia.Comment)
  SharedDtor();
}

void Comment::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Comment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Comment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Comment_descriptor_;
}

const Comment& Comment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Comment* Comment::default_instance_ = NULL;

Comment* Comment::New(::google::protobuf::Arena* arena) const {
  Comment* n = new Comment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Comment)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Comment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Comment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Comment.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Comment.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Comment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Comment)
  return false;
#undef DO_
}

void Comment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Comment)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Comment.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Comment.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Comment)
}

::google::protobuf::uint8* Comment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Comment)
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Comment.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Comment.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Comment)
  return target;
}

int Comment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Comment)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Comment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Comment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Comment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Comment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Comment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Comment)
    MergeFrom(*source);
  }
}

void Comment::MergeFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Comment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Comment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Comment::CopyFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Comment::IsInitialized() const {

  return true;
}

void Comment::Swap(Comment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Comment::InternalSwap(Comment* other) {
  value_.Swap(&other->value_);
  type_.Swap(&other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Comment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Comment_descriptor_;
  metadata.reflection = Comment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Comment

// optional string value = 1;
bool Comment::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Comment::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Comment::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Comment::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Comment::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Comment.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Comment::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Comment.value)
}
 void Comment::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Comment.value)
}
 void Comment::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Comment.value)
}
 ::std::string* Comment::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Comment.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Comment::release_value() {
  // @@protoc_insertion_point(field_release:pbnavitia.Comment.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Comment::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Comment.value)
}

// optional string type = 2;
bool Comment::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Comment::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Comment::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Comment::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Comment::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Comment.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Comment::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Comment.type)
}
 void Comment::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Comment.type)
}
 void Comment::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Comment.type)
}
 ::std::string* Comment::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Comment.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Comment::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Comment.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Comment::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Comment.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopArea::kNameFieldNumber;
const int StopArea::kUriFieldNumber;
const int StopArea::kCoordFieldNumber;
const int StopArea::kAdministrativeRegionsFieldNumber;
const int StopArea::kStopPointsFieldNumber;
const int StopArea::kMessagesFieldNumber;
const int StopArea::kImpactUrisFieldNumber;
const int StopArea::kCommentsFieldNumber;
const int StopArea::kCodesFieldNumber;
const int StopArea::kTimezoneFieldNumber;
const int StopArea::kLabelFieldNumber;
const int StopArea::kCommercialModesFieldNumber;
const int StopArea::kPhysicalModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopArea::StopArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StopArea)
}

void StopArea::InitAsDefaultInstance() {
  coord_ = const_cast< ::pbnavitia::GeographicalCoord*>(&::pbnavitia::GeographicalCoord::default_instance());
}

StopArea::StopArea(const StopArea& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StopArea)
}

void StopArea::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coord_ = NULL;
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopArea::~StopArea() {
  // @@protoc_insertion_point(destructor:pbnavitia.StopArea)
  SharedDtor();
}

void StopArea::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete coord_;
  }
}

void StopArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopArea_descriptor_;
}

const StopArea& StopArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

StopArea* StopArea::default_instance_ = NULL;

StopArea* StopArea::New(::google::protobuf::Arena* arena) const {
  StopArea* n = new StopArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopArea::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StopArea)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_coord()) {
      if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1536u) {
    if (has_timezone()) {
      timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  administrative_regions_.Clear();
  stop_points_.Clear();
  messages_.Clear();
  impact_uris_.Clear();
  comments_.Clear();
  codes_.Clear();
  commercial_modes_.Clear();
  physical_modes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StopArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopArea.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uri;
        break;
      }

      // optional string uri = 4;
      case 4: {
        if (tag == 34) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopArea.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_coord;
        break;
      }

      // optional .pbnavitia.GeographicalCoord coord = 5;
      case 5: {
        if (tag == 42) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_stop_points;
        break;
      }

      // repeated .pbnavitia.StopPoint stop_points = 8;
      case 8: {
        if (tag == 66) {
         parse_stop_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_stop_points;
        if (input->ExpectTag(74)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Message messages = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_messages;
        if (input->ExpectTag(82)) goto parse_loop_administrative_regions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_administrative_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_administrative_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_administrative_regions;
        if (input->ExpectTag(98)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Code codes = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(122)) goto parse_timezone;
        break;
      }

      // optional string timezone = 15;
      case 15: {
        if (tag == 122) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopArea.timezone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_label;
        break;
      }

      // optional string label = 16;
      case 16: {
        if (tag == 130) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopArea.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_commercial_modes;
        break;
      }

      // repeated .pbnavitia.CommercialMode commercial_modes = 21;
      case 21: {
        if (tag == 170) {
         parse_commercial_modes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_commercial_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commercial_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_loop_commercial_modes;
        if (input->ExpectTag(178)) goto parse_loop_physical_modes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.PhysicalMode physical_modes = 22;
      case 22: {
        if (tag == 178) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_physical_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_physical_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_physical_modes;
        if (input->ExpectTag(186)) goto parse_loop_comments;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Comment comments = 23;
      case 23: {
        if (tag == 186) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_comments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_loop_comments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(202)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 25;
      case 25: {
        if (tag == 202) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopArea.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_impact_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StopArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StopArea)
  return false;
#undef DO_
}

void StopArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StopArea)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional .pbnavitia.GeographicalCoord coord = 5;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->coord_, output);
  }

  // repeated .pbnavitia.StopPoint stop_points = 8;
  for (unsigned int i = 0, n = this->stop_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stop_points(i), output);
  }

  // repeated .pbnavitia.Message messages = 9;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->messages(i), output);
  }

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  for (unsigned int i = 0, n = this->administrative_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->administrative_regions(i), output);
  }

  // repeated .pbnavitia.Code codes = 12;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->codes(i), output);
  }

  // optional string timezone = 15;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->timezone(), output);
  }

  // optional string label = 16;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->label(), output);
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 21;
  for (unsigned int i = 0, n = this->commercial_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->commercial_modes(i), output);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 22;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->physical_modes(i), output);
  }

  // repeated .pbnavitia.Comment comments = 23;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->comments(i), output);
  }

  // repeated string impact_uris = 25;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->impact_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StopArea)
}

::google::protobuf::uint8* StopArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StopArea)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional .pbnavitia.GeographicalCoord coord = 5;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->coord_, false, target);
  }

  // repeated .pbnavitia.StopPoint stop_points = 8;
  for (unsigned int i = 0, n = this->stop_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->stop_points(i), false, target);
  }

  // repeated .pbnavitia.Message messages = 9;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->messages(i), false, target);
  }

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  for (unsigned int i = 0, n = this->administrative_regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->administrative_regions(i), false, target);
  }

  // repeated .pbnavitia.Code codes = 12;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->codes(i), false, target);
  }

  // optional string timezone = 15;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->timezone(), target);
  }

  // optional string label = 16;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->label(), target);
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 21;
  for (unsigned int i = 0, n = this->commercial_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->commercial_modes(i), false, target);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 22;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->physical_modes(i), false, target);
  }

  // repeated .pbnavitia.Comment comments = 23;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->comments(i), false, target);
  }

  // repeated string impact_uris = 25;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopArea.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(25, this->impact_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StopArea)
  return target;
}

int StopArea::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StopArea)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string uri = 4;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional .pbnavitia.GeographicalCoord coord = 5;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->coord_);
    }

  }
  if (_has_bits_[9 / 32] & 1536u) {
    // optional string timezone = 15;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional string label = 16;
    if (has_label()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  total_size += 1 * this->administrative_regions_size();
  for (int i = 0; i < this->administrative_regions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->administrative_regions(i));
  }

  // repeated .pbnavitia.StopPoint stop_points = 8;
  total_size += 1 * this->stop_points_size();
  for (int i = 0; i < this->stop_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_points(i));
  }

  // repeated .pbnavitia.Message messages = 9;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 25;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  // repeated .pbnavitia.Comment comments = 23;
  total_size += 2 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  // repeated .pbnavitia.Code codes = 12;
  total_size += 1 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 21;
  total_size += 2 * this->commercial_modes_size();
  for (int i = 0; i < this->commercial_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commercial_modes(i));
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 22;
  total_size += 2 * this->physical_modes_size();
  for (int i = 0; i < this->physical_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physical_modes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StopArea)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopArea* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StopArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StopArea)
    MergeFrom(*source);
  }
}

void StopArea::MergeFrom(const StopArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StopArea)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  administrative_regions_.MergeFrom(from.administrative_regions_);
  stop_points_.MergeFrom(from.stop_points_);
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  comments_.MergeFrom(from.comments_);
  codes_.MergeFrom(from.codes_);
  commercial_modes_.MergeFrom(from.commercial_modes_);
  physical_modes_.MergeFrom(from.physical_modes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_coord()) {
      mutable_coord()->::pbnavitia::GeographicalCoord::MergeFrom(from.coord());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_timezone()) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StopArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopArea::CopyFrom(const StopArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StopArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopArea::IsInitialized() const {

  if (has_coord()) {
    if (!this->coord_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->administrative_regions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->codes())) return false;
  return true;
}

void StopArea::Swap(StopArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopArea::InternalSwap(StopArea* other) {
  name_.Swap(&other->name_);
  uri_.Swap(&other->uri_);
  std::swap(coord_, other->coord_);
  administrative_regions_.UnsafeArenaSwap(&other->administrative_regions_);
  stop_points_.UnsafeArenaSwap(&other->stop_points_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  comments_.UnsafeArenaSwap(&other->comments_);
  codes_.UnsafeArenaSwap(&other->codes_);
  timezone_.Swap(&other->timezone_);
  label_.Swap(&other->label_);
  commercial_modes_.UnsafeArenaSwap(&other->commercial_modes_);
  physical_modes_.UnsafeArenaSwap(&other->physical_modes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopArea_descriptor_;
  metadata.reflection = StopArea_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopArea

// optional string name = 3;
bool StopArea::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopArea::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void StopArea::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopArea::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& StopArea::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopArea::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.name)
}
 void StopArea::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.name)
}
 void StopArea::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.name)
}
 ::std::string* StopArea::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopArea::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopArea::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.name)
}

// optional string uri = 4;
bool StopArea::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopArea::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void StopArea::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopArea::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& StopArea::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopArea::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.uri)
}
 void StopArea::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.uri)
}
 void StopArea::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.uri)
}
 ::std::string* StopArea::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopArea::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopArea::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.uri)
}

// optional .pbnavitia.GeographicalCoord coord = 5;
bool StopArea::has_coord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StopArea::set_has_coord() {
  _has_bits_[0] |= 0x00000004u;
}
void StopArea::clear_has_coord() {
  _has_bits_[0] &= ~0x00000004u;
}
void StopArea::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
const ::pbnavitia::GeographicalCoord& StopArea::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
::pbnavitia::GeographicalCoord* StopArea::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.coord)
  return coord_;
}
::pbnavitia::GeographicalCoord* StopArea::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
void StopArea::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.coord)
}

// repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
int StopArea::administrative_regions_size() const {
  return administrative_regions_.size();
}
void StopArea::clear_administrative_regions() {
  administrative_regions_.Clear();
}
const ::pbnavitia::AdministrativeRegion& StopArea::administrative_regions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.administrative_regions)
  return administrative_regions_.Get(index);
}
::pbnavitia::AdministrativeRegion* StopArea::mutable_administrative_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.administrative_regions)
  return administrative_regions_.Mutable(index);
}
::pbnavitia::AdministrativeRegion* StopArea::add_administrative_regions() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.administrative_regions)
  return administrative_regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
StopArea::mutable_administrative_regions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.administrative_regions)
  return &administrative_regions_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
StopArea::administrative_regions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.administrative_regions)
  return administrative_regions_;
}

// repeated .pbnavitia.StopPoint stop_points = 8;
int StopArea::stop_points_size() const {
  return stop_points_.size();
}
void StopArea::clear_stop_points() {
  stop_points_.Clear();
}
const ::pbnavitia::StopPoint& StopArea::stop_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.stop_points)
  return stop_points_.Get(index);
}
::pbnavitia::StopPoint* StopArea::mutable_stop_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.stop_points)
  return stop_points_.Mutable(index);
}
::pbnavitia::StopPoint* StopArea::add_stop_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.stop_points)
  return stop_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
StopArea::mutable_stop_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.stop_points)
  return &stop_points_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
StopArea::stop_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.stop_points)
  return stop_points_;
}

// repeated .pbnavitia.Message messages = 9;
int StopArea::messages_size() const {
  return messages_.size();
}
void StopArea::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& StopArea::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* StopArea::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* StopArea::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
StopArea::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
StopArea::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.messages)
  return messages_;
}

// repeated string impact_uris = 25;
int StopArea::impact_uris_size() const {
  return impact_uris_.size();
}
void StopArea::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& StopArea::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* StopArea::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.impact_uris)
  return impact_uris_.Mutable(index);
}
 void StopArea::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void StopArea::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.impact_uris)
}
 void StopArea::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.impact_uris)
}
 ::std::string* StopArea::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.StopArea.impact_uris)
  return impact_uris_.Add();
}
 void StopArea::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.impact_uris)
}
 void StopArea::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.StopArea.impact_uris)
}
 void StopArea::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.StopArea.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StopArea::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StopArea::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Comment comments = 23;
int StopArea::comments_size() const {
  return comments_.size();
}
void StopArea::clear_comments() {
  comments_.Clear();
}
const ::pbnavitia::Comment& StopArea::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.comments)
  return comments_.Get(index);
}
::pbnavitia::Comment* StopArea::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.comments)
  return comments_.Mutable(index);
}
::pbnavitia::Comment* StopArea::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.comments)
  return comments_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
StopArea::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.comments)
  return &comments_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
StopArea::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.comments)
  return comments_;
}

// repeated .pbnavitia.Code codes = 12;
int StopArea::codes_size() const {
  return codes_.size();
}
void StopArea::clear_codes() {
  codes_.Clear();
}
const ::pbnavitia::Code& StopArea::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.codes)
  return codes_.Get(index);
}
::pbnavitia::Code* StopArea::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.codes)
  return codes_.Mutable(index);
}
::pbnavitia::Code* StopArea::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.codes)
  return codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
StopArea::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.codes)
  return &codes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
StopArea::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.codes)
  return codes_;
}

// optional string timezone = 15;
bool StopArea::has_timezone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StopArea::set_has_timezone() {
  _has_bits_[0] |= 0x00000200u;
}
void StopArea::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000200u;
}
void StopArea::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
 const ::std::string& StopArea::timezone() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopArea::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.timezone)
}
 void StopArea::set_timezone(const char* value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.timezone)
}
 void StopArea::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.timezone)
}
 ::std::string* StopArea::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopArea::release_timezone() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.timezone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopArea::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.timezone)
}

// optional string label = 16;
bool StopArea::has_label() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void StopArea::set_has_label() {
  _has_bits_[0] |= 0x00000400u;
}
void StopArea::clear_has_label() {
  _has_bits_[0] &= ~0x00000400u;
}
void StopArea::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& StopArea::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopArea::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopArea.label)
}
 void StopArea::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopArea.label)
}
 void StopArea::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopArea.label)
}
 ::std::string* StopArea::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopArea::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopArea.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopArea::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopArea.label)
}

// repeated .pbnavitia.CommercialMode commercial_modes = 21;
int StopArea::commercial_modes_size() const {
  return commercial_modes_.size();
}
void StopArea::clear_commercial_modes() {
  commercial_modes_.Clear();
}
const ::pbnavitia::CommercialMode& StopArea::commercial_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.commercial_modes)
  return commercial_modes_.Get(index);
}
::pbnavitia::CommercialMode* StopArea::mutable_commercial_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.commercial_modes)
  return commercial_modes_.Mutable(index);
}
::pbnavitia::CommercialMode* StopArea::add_commercial_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.commercial_modes)
  return commercial_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
StopArea::mutable_commercial_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.commercial_modes)
  return &commercial_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
StopArea::commercial_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.commercial_modes)
  return commercial_modes_;
}

// repeated .pbnavitia.PhysicalMode physical_modes = 22;
int StopArea::physical_modes_size() const {
  return physical_modes_.size();
}
void StopArea::clear_physical_modes() {
  physical_modes_.Clear();
}
const ::pbnavitia::PhysicalMode& StopArea::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopArea.physical_modes)
  return physical_modes_.Get(index);
}
::pbnavitia::PhysicalMode* StopArea::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopArea.physical_modes)
  return physical_modes_.Mutable(index);
}
::pbnavitia::PhysicalMode* StopArea::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopArea.physical_modes)
  return physical_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
StopArea::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopArea.physical_modes)
  return &physical_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
StopArea::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopArea.physical_modes)
  return physical_modes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopPoint::kNameFieldNumber;
const int StopPoint::kAdministrativeRegionsFieldNumber;
const int StopPoint::kUriFieldNumber;
const int StopPoint::kCoordFieldNumber;
const int StopPoint::kStopAreaFieldNumber;
const int StopPoint::kHasEquipmentsFieldNumber;
const int StopPoint::kMessagesFieldNumber;
const int StopPoint::kImpactUrisFieldNumber;
const int StopPoint::kCommentsFieldNumber;
const int StopPoint::kCodesFieldNumber;
const int StopPoint::kAddressFieldNumber;
const int StopPoint::kPlatformCodeFieldNumber;
const int StopPoint::kLabelFieldNumber;
const int StopPoint::kCommercialModesFieldNumber;
const int StopPoint::kPhysicalModesFieldNumber;
const int StopPoint::kFareZoneFieldNumber;
const int StopPoint::kEquipmentDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopPoint::StopPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StopPoint)
}

void StopPoint::InitAsDefaultInstance() {
  coord_ = const_cast< ::pbnavitia::GeographicalCoord*>(&::pbnavitia::GeographicalCoord::default_instance());
  stop_area_ = const_cast< ::pbnavitia::StopArea*>(&::pbnavitia::StopArea::default_instance());
  has_equipments_ = const_cast< ::pbnavitia::hasEquipments*>(&::pbnavitia::hasEquipments::default_instance());
  address_ = const_cast< ::pbnavitia::Address*>(&::pbnavitia::Address::default_instance());
  fare_zone_ = const_cast< ::pbnavitia::FareZone*>(&::pbnavitia::FareZone::default_instance());
}

StopPoint::StopPoint(const StopPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StopPoint)
}

void StopPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coord_ = NULL;
  stop_area_ = NULL;
  has_equipments_ = NULL;
  address_ = NULL;
  platform_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fare_zone_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopPoint::~StopPoint() {
  // @@protoc_insertion_point(destructor:pbnavitia.StopPoint)
  SharedDtor();
}

void StopPoint::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete coord_;
    delete stop_area_;
    delete has_equipments_;
    delete address_;
    delete fare_zone_;
  }
}

void StopPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopPoint_descriptor_;
}

const StopPoint& StopPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

StopPoint* StopPoint::default_instance_ = NULL;

StopPoint* StopPoint::New(::google::protobuf::Arena* arena) const {
  StopPoint* n = new StopPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StopPoint)
  if (_has_bits_[0 / 32] & 61u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_coord()) {
      if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
    }
    if (has_stop_area()) {
      if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
    }
    if (has_has_equipments()) {
      if (has_equipments_ != NULL) has_equipments_->::pbnavitia::hasEquipments::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 39936u) {
    if (has_address()) {
      if (address_ != NULL) address_->::pbnavitia::Address::Clear();
    }
    if (has_platform_code()) {
      platform_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fare_zone()) {
      if (fare_zone_ != NULL) fare_zone_->::pbnavitia::FareZone::Clear();
    }
  }
  administrative_regions_.Clear();
  messages_.Clear();
  impact_uris_.Clear();
  comments_.Clear();
  codes_.Clear();
  commercial_modes_.Clear();
  physical_modes_.Clear();
  equipment_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StopPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopPoint.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uri;
        break;
      }

      // optional string uri = 5;
      case 5: {
        if (tag == 42) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopPoint.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_coord;
        break;
      }

      // optional .pbnavitia.GeographicalCoord coord = 6;
      case 6: {
        if (tag == 50) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stop_area;
        break;
      }

      // optional .pbnavitia.StopArea stop_area = 7;
      case 7: {
        if (tag == 58) {
         parse_stop_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_has_equipments;
        break;
      }

      // optional .pbnavitia.hasEquipments has_equipments = 8;
      case 8: {
        if (tag == 66) {
         parse_has_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_has_equipments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_messages;
        break;
      }

      // repeated .pbnavitia.Message messages = 9;
      case 9: {
        if (tag == 74) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_messages;
        if (input->ExpectTag(82)) goto parse_loop_administrative_regions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_administrative_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_administrative_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_administrative_regions;
        if (input->ExpectTag(98)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Code codes = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_address;
        break;
      }

      // optional .pbnavitia.Address address = 13;
      case 13: {
        if (tag == 106) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_platform_code;
        break;
      }

      // optional string platform_code = 14;
      case 14: {
        if (tag == 114) {
         parse_platform_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform_code().data(), this->platform_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopPoint.platform_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_label;
        break;
      }

      // optional string label = 15;
      case 15: {
        if (tag == 122) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopPoint.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_comments;
        break;
      }

      // repeated .pbnavitia.Comment comments = 16;
      case 16: {
        if (tag == 130) {
         parse_comments:
          DO_(input->IncrementRecursionDepth());
         parse_loop_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_comments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_comments;
        if (input->ExpectTag(138)) goto parse_loop_commercial_modes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.CommercialMode commercial_modes = 17;
      case 17: {
        if (tag == 138) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_commercial_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commercial_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_commercial_modes;
        if (input->ExpectTag(146)) goto parse_loop_physical_modes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.PhysicalMode physical_modes = 18;
      case 18: {
        if (tag == 146) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_physical_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_physical_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_physical_modes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(154)) goto parse_fare_zone;
        break;
      }

      // optional .pbnavitia.FareZone fare_zone = 19;
      case 19: {
        if (tag == 154) {
         parse_fare_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fare_zone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_equipment_details;
        break;
      }

      // repeated .pbnavitia.EquipmentDetails equipment_details = 20;
      case 20: {
        if (tag == 162) {
         parse_equipment_details:
          DO_(input->IncrementRecursionDepth());
         parse_loop_equipment_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_equipment_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_equipment_details;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(178)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 22;
      case 22: {
        if (tag == 178) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopPoint.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_impact_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StopPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StopPoint)
  return false;
#undef DO_
}

void StopPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StopPoint)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string uri = 5;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uri(), output);
  }

  // optional .pbnavitia.GeographicalCoord coord = 6;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->coord_, output);
  }

  // optional .pbnavitia.StopArea stop_area = 7;
  if (has_stop_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stop_area_, output);
  }

  // optional .pbnavitia.hasEquipments has_equipments = 8;
  if (has_has_equipments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->has_equipments_, output);
  }

  // repeated .pbnavitia.Message messages = 9;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->messages(i), output);
  }

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  for (unsigned int i = 0, n = this->administrative_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->administrative_regions(i), output);
  }

  // repeated .pbnavitia.Code codes = 12;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->codes(i), output);
  }

  // optional .pbnavitia.Address address = 13;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->address_, output);
  }

  // optional string platform_code = 14;
  if (has_platform_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_code().data(), this->platform_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.platform_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->platform_code(), output);
  }

  // optional string label = 15;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->label(), output);
  }

  // repeated .pbnavitia.Comment comments = 16;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->comments(i), output);
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 17;
  for (unsigned int i = 0, n = this->commercial_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->commercial_modes(i), output);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 18;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->physical_modes(i), output);
  }

  // optional .pbnavitia.FareZone fare_zone = 19;
  if (has_fare_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->fare_zone_, output);
  }

  // repeated .pbnavitia.EquipmentDetails equipment_details = 20;
  for (unsigned int i = 0, n = this->equipment_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->equipment_details(i), output);
  }

  // repeated string impact_uris = 22;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->impact_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StopPoint)
}

::google::protobuf::uint8* StopPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StopPoint)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string uri = 5;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uri(), target);
  }

  // optional .pbnavitia.GeographicalCoord coord = 6;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->coord_, false, target);
  }

  // optional .pbnavitia.StopArea stop_area = 7;
  if (has_stop_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->stop_area_, false, target);
  }

  // optional .pbnavitia.hasEquipments has_equipments = 8;
  if (has_has_equipments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->has_equipments_, false, target);
  }

  // repeated .pbnavitia.Message messages = 9;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->messages(i), false, target);
  }

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  for (unsigned int i = 0, n = this->administrative_regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->administrative_regions(i), false, target);
  }

  // repeated .pbnavitia.Code codes = 12;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->codes(i), false, target);
  }

  // optional .pbnavitia.Address address = 13;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->address_, false, target);
  }

  // optional string platform_code = 14;
  if (has_platform_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_code().data(), this->platform_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.platform_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->platform_code(), target);
  }

  // optional string label = 15;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->label(), target);
  }

  // repeated .pbnavitia.Comment comments = 16;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->comments(i), false, target);
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 17;
  for (unsigned int i = 0, n = this->commercial_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->commercial_modes(i), false, target);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 18;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->physical_modes(i), false, target);
  }

  // optional .pbnavitia.FareZone fare_zone = 19;
  if (has_fare_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->fare_zone_, false, target);
  }

  // repeated .pbnavitia.EquipmentDetails equipment_details = 20;
  for (unsigned int i = 0, n = this->equipment_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->equipment_details(i), false, target);
  }

  // repeated string impact_uris = 22;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopPoint.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->impact_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StopPoint)
  return target;
}

int StopPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StopPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 61u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string uri = 5;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional .pbnavitia.GeographicalCoord coord = 6;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->coord_);
    }

    // optional .pbnavitia.StopArea stop_area = 7;
    if (has_stop_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_area_);
    }

    // optional .pbnavitia.hasEquipments has_equipments = 8;
    if (has_has_equipments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->has_equipments_);
    }

  }
  if (_has_bits_[10 / 32] & 39936u) {
    // optional .pbnavitia.Address address = 13;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->address_);
    }

    // optional string platform_code = 14;
    if (has_platform_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_code());
    }

    // optional string label = 15;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional .pbnavitia.FareZone fare_zone = 19;
    if (has_fare_zone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fare_zone_);
    }

  }
  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  total_size += 1 * this->administrative_regions_size();
  for (int i = 0; i < this->administrative_regions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->administrative_regions(i));
  }

  // repeated .pbnavitia.Message messages = 9;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 22;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  // repeated .pbnavitia.Comment comments = 16;
  total_size += 2 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  // repeated .pbnavitia.Code codes = 12;
  total_size += 1 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 17;
  total_size += 2 * this->commercial_modes_size();
  for (int i = 0; i < this->commercial_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commercial_modes(i));
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 18;
  total_size += 2 * this->physical_modes_size();
  for (int i = 0; i < this->physical_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physical_modes(i));
  }

  // repeated .pbnavitia.EquipmentDetails equipment_details = 20;
  total_size += 2 * this->equipment_details_size();
  for (int i = 0; i < this->equipment_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment_details(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StopPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StopPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StopPoint)
    MergeFrom(*source);
  }
}

void StopPoint::MergeFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StopPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  administrative_regions_.MergeFrom(from.administrative_regions_);
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  comments_.MergeFrom(from.comments_);
  codes_.MergeFrom(from.codes_);
  commercial_modes_.MergeFrom(from.commercial_modes_);
  physical_modes_.MergeFrom(from.physical_modes_);
  equipment_details_.MergeFrom(from.equipment_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_coord()) {
      mutable_coord()->::pbnavitia::GeographicalCoord::MergeFrom(from.coord());
    }
    if (from.has_stop_area()) {
      mutable_stop_area()->::pbnavitia::StopArea::MergeFrom(from.stop_area());
    }
    if (from.has_has_equipments()) {
      mutable_has_equipments()->::pbnavitia::hasEquipments::MergeFrom(from.has_equipments());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_address()) {
      mutable_address()->::pbnavitia::Address::MergeFrom(from.address());
    }
    if (from.has_platform_code()) {
      set_has_platform_code();
      platform_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_code_);
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_fare_zone()) {
      mutable_fare_zone()->::pbnavitia::FareZone::MergeFrom(from.fare_zone());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPoint::CopyFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPoint::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->administrative_regions())) return false;
  if (has_coord()) {
    if (!this->coord_->IsInitialized()) return false;
  }
  if (has_stop_area()) {
    if (!this->stop_area_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->codes())) return false;
  if (has_address()) {
    if (!this->address_->IsInitialized()) return false;
  }
  return true;
}

void StopPoint::Swap(StopPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopPoint::InternalSwap(StopPoint* other) {
  name_.Swap(&other->name_);
  administrative_regions_.UnsafeArenaSwap(&other->administrative_regions_);
  uri_.Swap(&other->uri_);
  std::swap(coord_, other->coord_);
  std::swap(stop_area_, other->stop_area_);
  std::swap(has_equipments_, other->has_equipments_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  comments_.UnsafeArenaSwap(&other->comments_);
  codes_.UnsafeArenaSwap(&other->codes_);
  std::swap(address_, other->address_);
  platform_code_.Swap(&other->platform_code_);
  label_.Swap(&other->label_);
  commercial_modes_.UnsafeArenaSwap(&other->commercial_modes_);
  physical_modes_.UnsafeArenaSwap(&other->physical_modes_);
  std::swap(fare_zone_, other->fare_zone_);
  equipment_details_.UnsafeArenaSwap(&other->equipment_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopPoint_descriptor_;
  metadata.reflection = StopPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopPoint

// optional string name = 3;
bool StopPoint::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopPoint::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void StopPoint::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopPoint::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& StopPoint::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopPoint::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.name)
}
 void StopPoint::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.name)
}
 void StopPoint::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.name)
}
 ::std::string* StopPoint::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopPoint::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopPoint::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.name)
}

// repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
int StopPoint::administrative_regions_size() const {
  return administrative_regions_.size();
}
void StopPoint::clear_administrative_regions() {
  administrative_regions_.Clear();
}
const ::pbnavitia::AdministrativeRegion& StopPoint::administrative_regions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.administrative_regions)
  return administrative_regions_.Get(index);
}
::pbnavitia::AdministrativeRegion* StopPoint::mutable_administrative_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.administrative_regions)
  return administrative_regions_.Mutable(index);
}
::pbnavitia::AdministrativeRegion* StopPoint::add_administrative_regions() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.administrative_regions)
  return administrative_regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
StopPoint::mutable_administrative_regions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.administrative_regions)
  return &administrative_regions_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
StopPoint::administrative_regions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.administrative_regions)
  return administrative_regions_;
}

// optional string uri = 5;
bool StopPoint::has_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StopPoint::set_has_uri() {
  _has_bits_[0] |= 0x00000004u;
}
void StopPoint::clear_has_uri() {
  _has_bits_[0] &= ~0x00000004u;
}
void StopPoint::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& StopPoint::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopPoint::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.uri)
}
 void StopPoint::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.uri)
}
 void StopPoint::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.uri)
}
 ::std::string* StopPoint::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopPoint::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopPoint::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.uri)
}

// optional .pbnavitia.GeographicalCoord coord = 6;
bool StopPoint::has_coord() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StopPoint::set_has_coord() {
  _has_bits_[0] |= 0x00000008u;
}
void StopPoint::clear_has_coord() {
  _has_bits_[0] &= ~0x00000008u;
}
void StopPoint::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
const ::pbnavitia::GeographicalCoord& StopPoint::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
::pbnavitia::GeographicalCoord* StopPoint::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.coord)
  return coord_;
}
::pbnavitia::GeographicalCoord* StopPoint::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
void StopPoint::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.coord)
}

// optional .pbnavitia.StopArea stop_area = 7;
bool StopPoint::has_stop_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StopPoint::set_has_stop_area() {
  _has_bits_[0] |= 0x00000010u;
}
void StopPoint::clear_has_stop_area() {
  _has_bits_[0] &= ~0x00000010u;
}
void StopPoint::clear_stop_area() {
  if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
  clear_has_stop_area();
}
const ::pbnavitia::StopArea& StopPoint::stop_area() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.stop_area)
  return stop_area_ != NULL ? *stop_area_ : *default_instance_->stop_area_;
}
::pbnavitia::StopArea* StopPoint::mutable_stop_area() {
  set_has_stop_area();
  if (stop_area_ == NULL) {
    stop_area_ = new ::pbnavitia::StopArea;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.stop_area)
  return stop_area_;
}
::pbnavitia::StopArea* StopPoint::release_stop_area() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.stop_area)
  clear_has_stop_area();
  ::pbnavitia::StopArea* temp = stop_area_;
  stop_area_ = NULL;
  return temp;
}
void StopPoint::set_allocated_stop_area(::pbnavitia::StopArea* stop_area) {
  delete stop_area_;
  stop_area_ = stop_area;
  if (stop_area) {
    set_has_stop_area();
  } else {
    clear_has_stop_area();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.stop_area)
}

// optional .pbnavitia.hasEquipments has_equipments = 8;
bool StopPoint::has_has_equipments() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StopPoint::set_has_has_equipments() {
  _has_bits_[0] |= 0x00000020u;
}
void StopPoint::clear_has_has_equipments() {
  _has_bits_[0] &= ~0x00000020u;
}
void StopPoint::clear_has_equipments() {
  if (has_equipments_ != NULL) has_equipments_->::pbnavitia::hasEquipments::Clear();
  clear_has_has_equipments();
}
const ::pbnavitia::hasEquipments& StopPoint::has_equipments() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.has_equipments)
  return has_equipments_ != NULL ? *has_equipments_ : *default_instance_->has_equipments_;
}
::pbnavitia::hasEquipments* StopPoint::mutable_has_equipments() {
  set_has_has_equipments();
  if (has_equipments_ == NULL) {
    has_equipments_ = new ::pbnavitia::hasEquipments;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.has_equipments)
  return has_equipments_;
}
::pbnavitia::hasEquipments* StopPoint::release_has_equipments() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.has_equipments)
  clear_has_has_equipments();
  ::pbnavitia::hasEquipments* temp = has_equipments_;
  has_equipments_ = NULL;
  return temp;
}
void StopPoint::set_allocated_has_equipments(::pbnavitia::hasEquipments* has_equipments) {
  delete has_equipments_;
  has_equipments_ = has_equipments;
  if (has_equipments) {
    set_has_has_equipments();
  } else {
    clear_has_has_equipments();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.has_equipments)
}

// repeated .pbnavitia.Message messages = 9;
int StopPoint::messages_size() const {
  return messages_.size();
}
void StopPoint::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& StopPoint::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* StopPoint::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* StopPoint::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
StopPoint::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
StopPoint::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.messages)
  return messages_;
}

// repeated string impact_uris = 22;
int StopPoint::impact_uris_size() const {
  return impact_uris_.size();
}
void StopPoint::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& StopPoint::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* StopPoint::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.impact_uris)
  return impact_uris_.Mutable(index);
}
 void StopPoint::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void StopPoint::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.impact_uris)
}
 void StopPoint::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.impact_uris)
}
 ::std::string* StopPoint::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.StopPoint.impact_uris)
  return impact_uris_.Add();
}
 void StopPoint::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.impact_uris)
}
 void StopPoint::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.StopPoint.impact_uris)
}
 void StopPoint::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.StopPoint.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
StopPoint::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
StopPoint::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Comment comments = 16;
int StopPoint::comments_size() const {
  return comments_.size();
}
void StopPoint::clear_comments() {
  comments_.Clear();
}
const ::pbnavitia::Comment& StopPoint::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.comments)
  return comments_.Get(index);
}
::pbnavitia::Comment* StopPoint::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.comments)
  return comments_.Mutable(index);
}
::pbnavitia::Comment* StopPoint::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.comments)
  return comments_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
StopPoint::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.comments)
  return &comments_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
StopPoint::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.comments)
  return comments_;
}

// repeated .pbnavitia.Code codes = 12;
int StopPoint::codes_size() const {
  return codes_.size();
}
void StopPoint::clear_codes() {
  codes_.Clear();
}
const ::pbnavitia::Code& StopPoint::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.codes)
  return codes_.Get(index);
}
::pbnavitia::Code* StopPoint::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.codes)
  return codes_.Mutable(index);
}
::pbnavitia::Code* StopPoint::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.codes)
  return codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
StopPoint::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.codes)
  return &codes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
StopPoint::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.codes)
  return codes_;
}

// optional .pbnavitia.Address address = 13;
bool StopPoint::has_address() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void StopPoint::set_has_address() {
  _has_bits_[0] |= 0x00000400u;
}
void StopPoint::clear_has_address() {
  _has_bits_[0] &= ~0x00000400u;
}
void StopPoint::clear_address() {
  if (address_ != NULL) address_->::pbnavitia::Address::Clear();
  clear_has_address();
}
const ::pbnavitia::Address& StopPoint::address() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
::pbnavitia::Address* StopPoint::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::pbnavitia::Address;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.address)
  return address_;
}
::pbnavitia::Address* StopPoint::release_address() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.address)
  clear_has_address();
  ::pbnavitia::Address* temp = address_;
  address_ = NULL;
  return temp;
}
void StopPoint::set_allocated_address(::pbnavitia::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.address)
}

// optional string platform_code = 14;
bool StopPoint::has_platform_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void StopPoint::set_has_platform_code() {
  _has_bits_[0] |= 0x00000800u;
}
void StopPoint::clear_has_platform_code() {
  _has_bits_[0] &= ~0x00000800u;
}
void StopPoint::clear_platform_code() {
  platform_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform_code();
}
 const ::std::string& StopPoint::platform_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.platform_code)
  return platform_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopPoint::set_platform_code(const ::std::string& value) {
  set_has_platform_code();
  platform_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.platform_code)
}
 void StopPoint::set_platform_code(const char* value) {
  set_has_platform_code();
  platform_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.platform_code)
}
 void StopPoint::set_platform_code(const char* value, size_t size) {
  set_has_platform_code();
  platform_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.platform_code)
}
 ::std::string* StopPoint::mutable_platform_code() {
  set_has_platform_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.platform_code)
  return platform_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopPoint::release_platform_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.platform_code)
  clear_has_platform_code();
  return platform_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopPoint::set_allocated_platform_code(::std::string* platform_code) {
  if (platform_code != NULL) {
    set_has_platform_code();
  } else {
    clear_has_platform_code();
  }
  platform_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform_code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.platform_code)
}

// optional string label = 15;
bool StopPoint::has_label() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void StopPoint::set_has_label() {
  _has_bits_[0] |= 0x00001000u;
}
void StopPoint::clear_has_label() {
  _has_bits_[0] &= ~0x00001000u;
}
void StopPoint::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& StopPoint::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopPoint::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopPoint.label)
}
 void StopPoint::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopPoint.label)
}
 void StopPoint::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopPoint.label)
}
 ::std::string* StopPoint::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopPoint::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopPoint::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.label)
}

// repeated .pbnavitia.CommercialMode commercial_modes = 17;
int StopPoint::commercial_modes_size() const {
  return commercial_modes_.size();
}
void StopPoint::clear_commercial_modes() {
  commercial_modes_.Clear();
}
const ::pbnavitia::CommercialMode& StopPoint::commercial_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.commercial_modes)
  return commercial_modes_.Get(index);
}
::pbnavitia::CommercialMode* StopPoint::mutable_commercial_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.commercial_modes)
  return commercial_modes_.Mutable(index);
}
::pbnavitia::CommercialMode* StopPoint::add_commercial_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.commercial_modes)
  return commercial_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
StopPoint::mutable_commercial_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.commercial_modes)
  return &commercial_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
StopPoint::commercial_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.commercial_modes)
  return commercial_modes_;
}

// repeated .pbnavitia.PhysicalMode physical_modes = 18;
int StopPoint::physical_modes_size() const {
  return physical_modes_.size();
}
void StopPoint::clear_physical_modes() {
  physical_modes_.Clear();
}
const ::pbnavitia::PhysicalMode& StopPoint::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.physical_modes)
  return physical_modes_.Get(index);
}
::pbnavitia::PhysicalMode* StopPoint::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.physical_modes)
  return physical_modes_.Mutable(index);
}
::pbnavitia::PhysicalMode* StopPoint::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.physical_modes)
  return physical_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
StopPoint::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.physical_modes)
  return &physical_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
StopPoint::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.physical_modes)
  return physical_modes_;
}

// optional .pbnavitia.FareZone fare_zone = 19;
bool StopPoint::has_fare_zone() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void StopPoint::set_has_fare_zone() {
  _has_bits_[0] |= 0x00008000u;
}
void StopPoint::clear_has_fare_zone() {
  _has_bits_[0] &= ~0x00008000u;
}
void StopPoint::clear_fare_zone() {
  if (fare_zone_ != NULL) fare_zone_->::pbnavitia::FareZone::Clear();
  clear_has_fare_zone();
}
const ::pbnavitia::FareZone& StopPoint::fare_zone() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.fare_zone)
  return fare_zone_ != NULL ? *fare_zone_ : *default_instance_->fare_zone_;
}
::pbnavitia::FareZone* StopPoint::mutable_fare_zone() {
  set_has_fare_zone();
  if (fare_zone_ == NULL) {
    fare_zone_ = new ::pbnavitia::FareZone;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.fare_zone)
  return fare_zone_;
}
::pbnavitia::FareZone* StopPoint::release_fare_zone() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopPoint.fare_zone)
  clear_has_fare_zone();
  ::pbnavitia::FareZone* temp = fare_zone_;
  fare_zone_ = NULL;
  return temp;
}
void StopPoint::set_allocated_fare_zone(::pbnavitia::FareZone* fare_zone) {
  delete fare_zone_;
  fare_zone_ = fare_zone;
  if (fare_zone) {
    set_has_fare_zone();
  } else {
    clear_has_fare_zone();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopPoint.fare_zone)
}

// repeated .pbnavitia.EquipmentDetails equipment_details = 20;
int StopPoint::equipment_details_size() const {
  return equipment_details_.size();
}
void StopPoint::clear_equipment_details() {
  equipment_details_.Clear();
}
const ::pbnavitia::EquipmentDetails& StopPoint::equipment_details(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopPoint.equipment_details)
  return equipment_details_.Get(index);
}
::pbnavitia::EquipmentDetails* StopPoint::mutable_equipment_details(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopPoint.equipment_details)
  return equipment_details_.Mutable(index);
}
::pbnavitia::EquipmentDetails* StopPoint::add_equipment_details() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopPoint.equipment_details)
  return equipment_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >*
StopPoint::mutable_equipment_details() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopPoint.equipment_details)
  return &equipment_details_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >&
StopPoint::equipment_details() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopPoint.equipment_details)
  return equipment_details_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineString::kCoordinatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineString::LineString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.LineString)
}

void LineString::InitAsDefaultInstance() {
}

LineString::LineString(const LineString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.LineString)
}

void LineString::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineString::~LineString() {
  // @@protoc_insertion_point(destructor:pbnavitia.LineString)
  SharedDtor();
}

void LineString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineString_descriptor_;
}

const LineString& LineString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

LineString* LineString::default_instance_ = NULL;

LineString* LineString::New(::google::protobuf::Arena* arena) const {
  LineString* n = new LineString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineString::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.LineString)
  coordinates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LineString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.LineString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.GeographicalCoord coordinates = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_coordinates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_coordinates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.LineString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.LineString)
  return false;
#undef DO_
}

void LineString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.LineString)
  // repeated .pbnavitia.GeographicalCoord coordinates = 1;
  for (unsigned int i = 0, n = this->coordinates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coordinates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.LineString)
}

::google::protobuf::uint8* LineString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.LineString)
  // repeated .pbnavitia.GeographicalCoord coordinates = 1;
  for (unsigned int i = 0, n = this->coordinates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->coordinates(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.LineString)
  return target;
}

int LineString::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.LineString)
  int total_size = 0;

  // repeated .pbnavitia.GeographicalCoord coordinates = 1;
  total_size += 1 * this->coordinates_size();
  for (int i = 0; i < this->coordinates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinates(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.LineString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LineString* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LineString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.LineString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.LineString)
    MergeFrom(*source);
  }
}

void LineString::MergeFrom(const LineString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.LineString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  coordinates_.MergeFrom(from.coordinates_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LineString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.LineString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineString::CopyFrom(const LineString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.LineString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineString::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->coordinates())) return false;
  return true;
}

void LineString::Swap(LineString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineString::InternalSwap(LineString* other) {
  coordinates_.UnsafeArenaSwap(&other->coordinates_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineString_descriptor_;
  metadata.reflection = LineString_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineString

// repeated .pbnavitia.GeographicalCoord coordinates = 1;
int LineString::coordinates_size() const {
  return coordinates_.size();
}
void LineString::clear_coordinates() {
  coordinates_.Clear();
}
const ::pbnavitia::GeographicalCoord& LineString::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineString.coordinates)
  return coordinates_.Get(index);
}
::pbnavitia::GeographicalCoord* LineString::mutable_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineString.coordinates)
  return coordinates_.Mutable(index);
}
::pbnavitia::GeographicalCoord* LineString::add_coordinates() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineString.coordinates)
  return coordinates_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
LineString::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineString.coordinates)
  return &coordinates_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
LineString::coordinates() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineString.coordinates)
  return coordinates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiLineString::kLinesFieldNumber;
const int MultiLineString::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiLineString::MultiLineString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.MultiLineString)
}

void MultiLineString::InitAsDefaultInstance() {
}

MultiLineString::MultiLineString(const MultiLineString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.MultiLineString)
}

void MultiLineString::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiLineString::~MultiLineString() {
  // @@protoc_insertion_point(destructor:pbnavitia.MultiLineString)
  SharedDtor();
}

void MultiLineString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiLineString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiLineString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiLineString_descriptor_;
}

const MultiLineString& MultiLineString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

MultiLineString* MultiLineString::default_instance_ = NULL;

MultiLineString* MultiLineString::New(::google::protobuf::Arena* arena) const {
  MultiLineString* n = new MultiLineString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiLineString::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.MultiLineString)
  length_ = 0;
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MultiLineString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.MultiLineString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.LineString lines = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_lines;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(17)) goto parse_length;
        break;
      }

      // optional double length = 2;
      case 2: {
        if (tag == 17) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.MultiLineString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.MultiLineString)
  return false;
#undef DO_
}

void MultiLineString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.MultiLineString)
  // repeated .pbnavitia.LineString lines = 1;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lines(i), output);
  }

  // optional double length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.MultiLineString)
}

::google::protobuf::uint8* MultiLineString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.MultiLineString)
  // repeated .pbnavitia.LineString lines = 1;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lines(i), false, target);
  }

  // optional double length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.MultiLineString)
  return target;
}

int MultiLineString::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.MultiLineString)
  int total_size = 0;

  // optional double length = 2;
  if (has_length()) {
    total_size += 1 + 8;
  }

  // repeated .pbnavitia.LineString lines = 1;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiLineString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.MultiLineString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiLineString* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiLineString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.MultiLineString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.MultiLineString)
    MergeFrom(*source);
  }
}

void MultiLineString::MergeFrom(const MultiLineString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.MultiLineString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MultiLineString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.MultiLineString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiLineString::CopyFrom(const MultiLineString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.MultiLineString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiLineString::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->lines())) return false;
  return true;
}

void MultiLineString::Swap(MultiLineString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiLineString::InternalSwap(MultiLineString* other) {
  lines_.UnsafeArenaSwap(&other->lines_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiLineString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiLineString_descriptor_;
  metadata.reflection = MultiLineString_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiLineString

// repeated .pbnavitia.LineString lines = 1;
int MultiLineString::lines_size() const {
  return lines_.size();
}
void MultiLineString::clear_lines() {
  lines_.Clear();
}
const ::pbnavitia::LineString& MultiLineString::lines(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.MultiLineString.lines)
  return lines_.Get(index);
}
::pbnavitia::LineString* MultiLineString::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.MultiLineString.lines)
  return lines_.Mutable(index);
}
::pbnavitia::LineString* MultiLineString::add_lines() {
  // @@protoc_insertion_point(field_add:pbnavitia.MultiLineString.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LineString >*
MultiLineString::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.MultiLineString.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineString >&
MultiLineString::lines() const {
  // @@protoc_insertion_point(field_list:pbnavitia.MultiLineString.lines)
  return lines_;
}

// optional double length = 2;
bool MultiLineString::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MultiLineString::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void MultiLineString::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void MultiLineString::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double MultiLineString::length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.MultiLineString.length)
  return length_;
}
 void MultiLineString::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.MultiLineString.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kNameFieldNumber;
const int Line::kUriFieldNumber;
const int Line::kCodeFieldNumber;
const int Line::kColorFieldNumber;
const int Line::kRoutesFieldNumber;
const int Line::kCommercialModeFieldNumber;
const int Line::kPhysicalModesFieldNumber;
const int Line::kNetworkFieldNumber;
const int Line::kMessagesFieldNumber;
const int Line::kImpactUrisFieldNumber;
const int Line::kCommentsFieldNumber;
const int Line::kCodesFieldNumber;
const int Line::kGeojsonFieldNumber;
const int Line::kOpeningTimeFieldNumber;
const int Line::kClosingTimeFieldNumber;
const int Line::kPropertiesFieldNumber;
const int Line::kLineGroupsFieldNumber;
const int Line::kTextColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Line)
}

void Line::InitAsDefaultInstance() {
  commercial_mode_ = const_cast< ::pbnavitia::CommercialMode*>(&::pbnavitia::CommercialMode::default_instance());
  network_ = const_cast< ::pbnavitia::Network*>(&::pbnavitia::Network::default_instance());
  geojson_ = const_cast< ::pbnavitia::MultiLineString*>(&::pbnavitia::MultiLineString::default_instance());
}

Line::Line(const Line& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Line)
}

void Line::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commercial_mode_ = NULL;
  network_ = NULL;
  geojson_ = NULL;
  opening_time_ = 0u;
  closing_time_ = 0u;
  text_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:pbnavitia.Line)
  SharedDtor();
}

void Line::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete commercial_mode_;
    delete network_;
    delete geojson_;
  }
}

void Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Line_descriptor_;
}

const Line& Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Line* Line::default_instance_ = NULL;

Line* Line::New(::google::protobuf::Arena* arena) const {
  Line* n = new Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Line)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Line, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Line*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 175u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_code()) {
      code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_color()) {
      color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_commercial_mode()) {
      if (commercial_mode_ != NULL) commercial_mode_->::pbnavitia::CommercialMode::Clear();
    }
    if (has_network()) {
      if (network_ != NULL) network_->::pbnavitia::Network::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 28672u) {
    ZR_(opening_time_, closing_time_);
    if (has_geojson()) {
      if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
    }
  }
  if (has_text_color()) {
    text_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  routes_.Clear();
  physical_modes_.Clear();
  messages_.Clear();
  impact_uris_.Clear();
  comments_.Clear();
  codes_.Clear();
  properties_.Clear();
  line_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Line.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uri;
        break;
      }

      // optional string uri = 4;
      case 4: {
        if (tag == 34) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Line.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_code;
        break;
      }

      // optional string code = 5;
      case 5: {
        if (tag == 42) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Line.code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_color;
        break;
      }

      // optional string color = 9;
      case 9: {
        if (tag == 74) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Line.color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_routes;
        break;
      }

      // repeated .pbnavitia.Route routes = 10;
      case 10: {
        if (tag == 82) {
         parse_routes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_routes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(90)) goto parse_commercial_mode;
        break;
      }

      // optional .pbnavitia.CommercialMode commercial_mode = 11;
      case 11: {
        if (tag == 90) {
         parse_commercial_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commercial_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_physical_modes;
        break;
      }

      // repeated .pbnavitia.PhysicalMode physical_modes = 12;
      case 12: {
        if (tag == 98) {
         parse_physical_modes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_physical_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_physical_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_physical_modes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_network;
        break;
      }

      // optional .pbnavitia.Network network = 13;
      case 13: {
        if (tag == 106) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_messages;
        break;
      }

      // repeated .pbnavitia.Message messages = 14;
      case 14: {
        if (tag == 114) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_messages;
        if (input->ExpectTag(130)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Code codes = 16;
      case 16: {
        if (tag == 130) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(138)) goto parse_geojson;
        break;
      }

      // optional .pbnavitia.MultiLineString geojson = 17;
      case 17: {
        if (tag == 138) {
         parse_geojson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geojson()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_opening_time;
        break;
      }

      // optional uint32 opening_time = 18;
      case 18: {
        if (tag == 144) {
         parse_opening_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opening_time_)));
          set_has_opening_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_closing_time;
        break;
      }

      // optional uint32 closing_time = 19;
      case 19: {
        if (tag == 152) {
         parse_closing_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closing_time_)));
          set_has_closing_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_properties;
        break;
      }

      // repeated .pbnavitia.Property properties = 21;
      case 21: {
        if (tag == 170) {
         parse_properties:
          DO_(input->IncrementRecursionDepth());
         parse_loop_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_loop_properties;
        if (input->ExpectTag(178)) goto parse_loop_comments;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Comment comments = 22;
      case 22: {
        if (tag == 178) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_comments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_comments;
        if (input->ExpectTag(186)) goto parse_loop_line_groups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.LineGroup line_groups = 23;
      case 23: {
        if (tag == 186) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_line_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_line_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_loop_line_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(194)) goto parse_text_color;
        break;
      }

      // optional string text_color = 24;
      case 24: {
        if (tag == 194) {
         parse_text_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_color().data(), this->text_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Line.text_color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 26;
      case 26: {
        if (tag == 210) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Line.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_impact_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Line)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional string code = 5;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  // optional string color = 9;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->color(), output);
  }

  // repeated .pbnavitia.Route routes = 10;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->routes(i), output);
  }

  // optional .pbnavitia.CommercialMode commercial_mode = 11;
  if (has_commercial_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->commercial_mode_, output);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 12;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->physical_modes(i), output);
  }

  // optional .pbnavitia.Network network = 13;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->network_, output);
  }

  // repeated .pbnavitia.Message messages = 14;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->messages(i), output);
  }

  // repeated .pbnavitia.Code codes = 16;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->codes(i), output);
  }

  // optional .pbnavitia.MultiLineString geojson = 17;
  if (has_geojson()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->geojson_, output);
  }

  // optional uint32 opening_time = 18;
  if (has_opening_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->opening_time(), output);
  }

  // optional uint32 closing_time = 19;
  if (has_closing_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->closing_time(), output);
  }

  // repeated .pbnavitia.Property properties = 21;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->properties(i), output);
  }

  // repeated .pbnavitia.Comment comments = 22;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->comments(i), output);
  }

  // repeated .pbnavitia.LineGroup line_groups = 23;
  for (unsigned int i = 0, n = this->line_groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->line_groups(i), output);
  }

  // optional string text_color = 24;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_color().data(), this->text_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.text_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->text_color(), output);
  }

  // repeated string impact_uris = 26;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->impact_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Line)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional string code = 5;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  // optional string color = 9;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->color(), target);
  }

  // repeated .pbnavitia.Route routes = 10;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->routes(i), false, target);
  }

  // optional .pbnavitia.CommercialMode commercial_mode = 11;
  if (has_commercial_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->commercial_mode_, false, target);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 12;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->physical_modes(i), false, target);
  }

  // optional .pbnavitia.Network network = 13;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->network_, false, target);
  }

  // repeated .pbnavitia.Message messages = 14;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->messages(i), false, target);
  }

  // repeated .pbnavitia.Code codes = 16;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->codes(i), false, target);
  }

  // optional .pbnavitia.MultiLineString geojson = 17;
  if (has_geojson()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->geojson_, false, target);
  }

  // optional uint32 opening_time = 18;
  if (has_opening_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->opening_time(), target);
  }

  // optional uint32 closing_time = 19;
  if (has_closing_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->closing_time(), target);
  }

  // repeated .pbnavitia.Property properties = 21;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->properties(i), false, target);
  }

  // repeated .pbnavitia.Comment comments = 22;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->comments(i), false, target);
  }

  // repeated .pbnavitia.LineGroup line_groups = 23;
  for (unsigned int i = 0, n = this->line_groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->line_groups(i), false, target);
  }

  // optional string text_color = 24;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_color().data(), this->text_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.text_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->text_color(), target);
  }

  // repeated string impact_uris = 26;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Line.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(26, this->impact_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Line)
  return target;
}

int Line::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Line)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 175u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string uri = 4;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string code = 5;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string color = 9;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional .pbnavitia.CommercialMode commercial_mode = 11;
    if (has_commercial_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->commercial_mode_);
    }

    // optional .pbnavitia.Network network = 13;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->network_);
    }

  }
  if (_has_bits_[12 / 32] & 28672u) {
    // optional .pbnavitia.MultiLineString geojson = 17;
    if (has_geojson()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geojson_);
    }

    // optional uint32 opening_time = 18;
    if (has_opening_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opening_time());
    }

    // optional uint32 closing_time = 19;
    if (has_closing_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closing_time());
    }

  }
  // optional string text_color = 24;
  if (has_text_color()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text_color());
  }

  // repeated .pbnavitia.Route routes = 10;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 12;
  total_size += 1 * this->physical_modes_size();
  for (int i = 0; i < this->physical_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physical_modes(i));
  }

  // repeated .pbnavitia.Message messages = 14;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 26;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  // repeated .pbnavitia.Comment comments = 22;
  total_size += 2 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  // repeated .pbnavitia.Code codes = 16;
  total_size += 2 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }

  // repeated .pbnavitia.Property properties = 21;
  total_size += 2 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  // repeated .pbnavitia.LineGroup line_groups = 23;
  total_size += 2 * this->line_groups_size();
  for (int i = 0; i < this->line_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line_groups(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Line)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Line* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Line)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  routes_.MergeFrom(from.routes_);
  physical_modes_.MergeFrom(from.physical_modes_);
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  comments_.MergeFrom(from.comments_);
  codes_.MergeFrom(from.codes_);
  properties_.MergeFrom(from.properties_);
  line_groups_.MergeFrom(from.line_groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (from.has_color()) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (from.has_commercial_mode()) {
      mutable_commercial_mode()->::pbnavitia::CommercialMode::MergeFrom(from.commercial_mode());
    }
    if (from.has_network()) {
      mutable_network()->::pbnavitia::Network::MergeFrom(from.network());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_geojson()) {
      mutable_geojson()->::pbnavitia::MultiLineString::MergeFrom(from.geojson());
    }
    if (from.has_opening_time()) {
      set_opening_time(from.opening_time());
    }
    if (from.has_closing_time()) {
      set_closing_time(from.closing_time());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_text_color()) {
      set_has_text_color();
      text_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_color_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->routes())) return false;
  if (has_network()) {
    if (!this->network_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->codes())) return false;
  if (has_geojson()) {
    if (!this->geojson_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->line_groups())) return false;
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  name_.Swap(&other->name_);
  uri_.Swap(&other->uri_);
  code_.Swap(&other->code_);
  color_.Swap(&other->color_);
  routes_.UnsafeArenaSwap(&other->routes_);
  std::swap(commercial_mode_, other->commercial_mode_);
  physical_modes_.UnsafeArenaSwap(&other->physical_modes_);
  std::swap(network_, other->network_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  comments_.UnsafeArenaSwap(&other->comments_);
  codes_.UnsafeArenaSwap(&other->codes_);
  std::swap(geojson_, other->geojson_);
  std::swap(opening_time_, other->opening_time_);
  std::swap(closing_time_, other->closing_time_);
  properties_.UnsafeArenaSwap(&other->properties_);
  line_groups_.UnsafeArenaSwap(&other->line_groups_);
  text_color_.Swap(&other->text_color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Line_descriptor_;
  metadata.reflection = Line_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Line

// optional string name = 3;
bool Line::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Line::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Line::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Line::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Line::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.name)
}
 void Line::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.name)
}
 void Line::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.name)
}
 ::std::string* Line::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Line::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.name)
}

// optional string uri = 4;
bool Line::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Line::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void Line::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void Line::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Line::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.uri)
}
 void Line::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.uri)
}
 void Line::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.uri)
}
 ::std::string* Line::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Line::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.uri)
}

// optional string code = 5;
bool Line::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Line::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
void Line::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void Line::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
 const ::std::string& Line::code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.code)
}
 void Line::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.code)
}
 void Line::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.code)
}
 ::std::string* Line::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Line::release_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.code)
}

// optional string color = 9;
bool Line::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Line::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void Line::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void Line::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
 const ::std::string& Line::color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.color)
}
 void Line::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.color)
}
 void Line::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.color)
}
 ::std::string* Line::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Line::release_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.color)
}

// repeated .pbnavitia.Route routes = 10;
int Line::routes_size() const {
  return routes_.size();
}
void Line::clear_routes() {
  routes_.Clear();
}
const ::pbnavitia::Route& Line::routes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.routes)
  return routes_.Get(index);
}
::pbnavitia::Route* Line::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.routes)
  return routes_.Mutable(index);
}
::pbnavitia::Route* Line::add_routes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
Line::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
Line::routes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.routes)
  return routes_;
}

// optional .pbnavitia.CommercialMode commercial_mode = 11;
bool Line::has_commercial_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Line::set_has_commercial_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void Line::clear_has_commercial_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void Line::clear_commercial_mode() {
  if (commercial_mode_ != NULL) commercial_mode_->::pbnavitia::CommercialMode::Clear();
  clear_has_commercial_mode();
}
const ::pbnavitia::CommercialMode& Line::commercial_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.commercial_mode)
  return commercial_mode_ != NULL ? *commercial_mode_ : *default_instance_->commercial_mode_;
}
::pbnavitia::CommercialMode* Line::mutable_commercial_mode() {
  set_has_commercial_mode();
  if (commercial_mode_ == NULL) {
    commercial_mode_ = new ::pbnavitia::CommercialMode;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.commercial_mode)
  return commercial_mode_;
}
::pbnavitia::CommercialMode* Line::release_commercial_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.commercial_mode)
  clear_has_commercial_mode();
  ::pbnavitia::CommercialMode* temp = commercial_mode_;
  commercial_mode_ = NULL;
  return temp;
}
void Line::set_allocated_commercial_mode(::pbnavitia::CommercialMode* commercial_mode) {
  delete commercial_mode_;
  commercial_mode_ = commercial_mode;
  if (commercial_mode) {
    set_has_commercial_mode();
  } else {
    clear_has_commercial_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.commercial_mode)
}

// repeated .pbnavitia.PhysicalMode physical_modes = 12;
int Line::physical_modes_size() const {
  return physical_modes_.size();
}
void Line::clear_physical_modes() {
  physical_modes_.Clear();
}
const ::pbnavitia::PhysicalMode& Line::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.physical_modes)
  return physical_modes_.Get(index);
}
::pbnavitia::PhysicalMode* Line::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.physical_modes)
  return physical_modes_.Mutable(index);
}
::pbnavitia::PhysicalMode* Line::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.physical_modes)
  return physical_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
Line::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.physical_modes)
  return &physical_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
Line::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.physical_modes)
  return physical_modes_;
}

// optional .pbnavitia.Network network = 13;
bool Line::has_network() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Line::set_has_network() {
  _has_bits_[0] |= 0x00000080u;
}
void Line::clear_has_network() {
  _has_bits_[0] &= ~0x00000080u;
}
void Line::clear_network() {
  if (network_ != NULL) network_->::pbnavitia::Network::Clear();
  clear_has_network();
}
const ::pbnavitia::Network& Line::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.network)
  return network_ != NULL ? *network_ : *default_instance_->network_;
}
::pbnavitia::Network* Line::mutable_network() {
  set_has_network();
  if (network_ == NULL) {
    network_ = new ::pbnavitia::Network;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.network)
  return network_;
}
::pbnavitia::Network* Line::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.network)
  clear_has_network();
  ::pbnavitia::Network* temp = network_;
  network_ = NULL;
  return temp;
}
void Line::set_allocated_network(::pbnavitia::Network* network) {
  delete network_;
  network_ = network;
  if (network) {
    set_has_network();
  } else {
    clear_has_network();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.network)
}

// repeated .pbnavitia.Message messages = 14;
int Line::messages_size() const {
  return messages_.size();
}
void Line::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& Line::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* Line::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* Line::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
Line::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
Line::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.messages)
  return messages_;
}

// repeated string impact_uris = 26;
int Line::impact_uris_size() const {
  return impact_uris_.size();
}
void Line::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& Line::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* Line::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.impact_uris)
  return impact_uris_.Mutable(index);
}
 void Line::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Line.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void Line::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.impact_uris)
}
 void Line::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.impact_uris)
}
 ::std::string* Line::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Line.impact_uris)
  return impact_uris_.Add();
}
 void Line::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Line.impact_uris)
}
 void Line::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Line.impact_uris)
}
 void Line::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Line.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Line::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Line::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Comment comments = 22;
int Line::comments_size() const {
  return comments_.size();
}
void Line::clear_comments() {
  comments_.Clear();
}
const ::pbnavitia::Comment& Line::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.comments)
  return comments_.Get(index);
}
::pbnavitia::Comment* Line::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.comments)
  return comments_.Mutable(index);
}
::pbnavitia::Comment* Line::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.comments)
  return comments_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
Line::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.comments)
  return &comments_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
Line::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.comments)
  return comments_;
}

// repeated .pbnavitia.Code codes = 16;
int Line::codes_size() const {
  return codes_.size();
}
void Line::clear_codes() {
  codes_.Clear();
}
const ::pbnavitia::Code& Line::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.codes)
  return codes_.Get(index);
}
::pbnavitia::Code* Line::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.codes)
  return codes_.Mutable(index);
}
::pbnavitia::Code* Line::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.codes)
  return codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Line::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.codes)
  return &codes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Line::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.codes)
  return codes_;
}

// optional .pbnavitia.MultiLineString geojson = 17;
bool Line::has_geojson() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Line::set_has_geojson() {
  _has_bits_[0] |= 0x00001000u;
}
void Line::clear_has_geojson() {
  _has_bits_[0] &= ~0x00001000u;
}
void Line::clear_geojson() {
  if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
  clear_has_geojson();
}
const ::pbnavitia::MultiLineString& Line::geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.geojson)
  return geojson_ != NULL ? *geojson_ : *default_instance_->geojson_;
}
::pbnavitia::MultiLineString* Line::mutable_geojson() {
  set_has_geojson();
  if (geojson_ == NULL) {
    geojson_ = new ::pbnavitia::MultiLineString;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.geojson)
  return geojson_;
}
::pbnavitia::MultiLineString* Line::release_geojson() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.geojson)
  clear_has_geojson();
  ::pbnavitia::MultiLineString* temp = geojson_;
  geojson_ = NULL;
  return temp;
}
void Line::set_allocated_geojson(::pbnavitia::MultiLineString* geojson) {
  delete geojson_;
  geojson_ = geojson;
  if (geojson) {
    set_has_geojson();
  } else {
    clear_has_geojson();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.geojson)
}

// optional uint32 opening_time = 18;
bool Line::has_opening_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Line::set_has_opening_time() {
  _has_bits_[0] |= 0x00002000u;
}
void Line::clear_has_opening_time() {
  _has_bits_[0] &= ~0x00002000u;
}
void Line::clear_opening_time() {
  opening_time_ = 0u;
  clear_has_opening_time();
}
 ::google::protobuf::uint32 Line::opening_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.opening_time)
  return opening_time_;
}
 void Line::set_opening_time(::google::protobuf::uint32 value) {
  set_has_opening_time();
  opening_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Line.opening_time)
}

// optional uint32 closing_time = 19;
bool Line::has_closing_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Line::set_has_closing_time() {
  _has_bits_[0] |= 0x00004000u;
}
void Line::clear_has_closing_time() {
  _has_bits_[0] &= ~0x00004000u;
}
void Line::clear_closing_time() {
  closing_time_ = 0u;
  clear_has_closing_time();
}
 ::google::protobuf::uint32 Line::closing_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.closing_time)
  return closing_time_;
}
 void Line::set_closing_time(::google::protobuf::uint32 value) {
  set_has_closing_time();
  closing_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Line.closing_time)
}

// repeated .pbnavitia.Property properties = 21;
int Line::properties_size() const {
  return properties_.size();
}
void Line::clear_properties() {
  properties_.Clear();
}
const ::pbnavitia::Property& Line::properties(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.properties)
  return properties_.Get(index);
}
::pbnavitia::Property* Line::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.properties)
  return properties_.Mutable(index);
}
::pbnavitia::Property* Line::add_properties() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Property >*
Line::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Property >&
Line::properties() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.properties)
  return properties_;
}

// repeated .pbnavitia.LineGroup line_groups = 23;
int Line::line_groups_size() const {
  return line_groups_.size();
}
void Line::clear_line_groups() {
  line_groups_.Clear();
}
const ::pbnavitia::LineGroup& Line::line_groups(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.line_groups)
  return line_groups_.Get(index);
}
::pbnavitia::LineGroup* Line::mutable_line_groups(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.line_groups)
  return line_groups_.Mutable(index);
}
::pbnavitia::LineGroup* Line::add_line_groups() {
  // @@protoc_insertion_point(field_add:pbnavitia.Line.line_groups)
  return line_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >*
Line::mutable_line_groups() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Line.line_groups)
  return &line_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >&
Line::line_groups() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Line.line_groups)
  return line_groups_;
}

// optional string text_color = 24;
bool Line::has_text_color() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Line::set_has_text_color() {
  _has_bits_[0] |= 0x00020000u;
}
void Line::clear_has_text_color() {
  _has_bits_[0] &= ~0x00020000u;
}
void Line::clear_text_color() {
  text_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_color();
}
 const ::std::string& Line::text_color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Line.text_color)
  return text_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_text_color(const ::std::string& value) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Line.text_color)
}
 void Line::set_text_color(const char* value) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Line.text_color)
}
 void Line::set_text_color(const char* value, size_t size) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Line.text_color)
}
 ::std::string* Line::mutable_text_color() {
  set_has_text_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Line.text_color)
  return text_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Line::release_text_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.Line.text_color)
  clear_has_text_color();
  return text_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Line::set_allocated_text_color(::std::string* text_color) {
  if (text_color != NULL) {
    set_has_text_color();
  } else {
    clear_has_text_color();
  }
  text_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Line.text_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineGroup::kNameFieldNumber;
const int LineGroup::kUriFieldNumber;
const int LineGroup::kCommentsFieldNumber;
const int LineGroup::kLinesFieldNumber;
const int LineGroup::kMainLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineGroup::LineGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.LineGroup)
}

void LineGroup::InitAsDefaultInstance() {
  main_line_ = const_cast< ::pbnavitia::Line*>(&::pbnavitia::Line::default_instance());
}

LineGroup::LineGroup(const LineGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.LineGroup)
}

void LineGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  main_line_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineGroup::~LineGroup() {
  // @@protoc_insertion_point(destructor:pbnavitia.LineGroup)
  SharedDtor();
}

void LineGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete main_line_;
  }
}

void LineGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineGroup_descriptor_;
}

const LineGroup& LineGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

LineGroup* LineGroup::default_instance_ = NULL;

LineGroup* LineGroup::New(::google::protobuf::Arena* arena) const {
  LineGroup* n = new LineGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.LineGroup)
  if (_has_bits_[0 / 32] & 19u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_main_line()) {
      if (main_line_ != NULL) main_line_->::pbnavitia::Line::Clear();
    }
  }
  comments_.Clear();
  lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LineGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.LineGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LineGroup.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uri;
        break;
      }

      // optional string uri = 2;
      case 2: {
        if (tag == 18) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LineGroup.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_comments;
        break;
      }

      // repeated .pbnavitia.Comment comments = 3;
      case 3: {
        if (tag == 26) {
         parse_comments:
          DO_(input->IncrementRecursionDepth());
         parse_loop_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_comments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_comments;
        if (input->ExpectTag(34)) goto parse_loop_lines;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Line lines = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_lines;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_main_line;
        break;
      }

      // optional .pbnavitia.Line main_line = 5;
      case 5: {
        if (tag == 42) {
         parse_main_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.LineGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.LineGroup)
  return false;
#undef DO_
}

void LineGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.LineGroup)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LineGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LineGroup.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // repeated .pbnavitia.Comment comments = 3;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->comments(i), output);
  }

  // repeated .pbnavitia.Line lines = 4;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lines(i), output);
  }

  // optional .pbnavitia.Line main_line = 5;
  if (has_main_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->main_line_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.LineGroup)
}

::google::protobuf::uint8* LineGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.LineGroup)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LineGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LineGroup.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // repeated .pbnavitia.Comment comments = 3;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->comments(i), false, target);
  }

  // repeated .pbnavitia.Line lines = 4;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->lines(i), false, target);
  }

  // optional .pbnavitia.Line main_line = 5;
  if (has_main_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->main_line_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.LineGroup)
  return target;
}

int LineGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.LineGroup)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 19u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string uri = 2;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional .pbnavitia.Line main_line = 5;
    if (has_main_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->main_line_);
    }

  }
  // repeated .pbnavitia.Comment comments = 3;
  total_size += 1 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  // repeated .pbnavitia.Line lines = 4;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.LineGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LineGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LineGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.LineGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.LineGroup)
    MergeFrom(*source);
  }
}

void LineGroup::MergeFrom(const LineGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.LineGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  comments_.MergeFrom(from.comments_);
  lines_.MergeFrom(from.lines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_main_line()) {
      mutable_main_line()->::pbnavitia::Line::MergeFrom(from.main_line());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LineGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.LineGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineGroup::CopyFrom(const LineGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.LineGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineGroup::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->lines())) return false;
  if (has_main_line()) {
    if (!this->main_line_->IsInitialized()) return false;
  }
  return true;
}

void LineGroup::Swap(LineGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineGroup::InternalSwap(LineGroup* other) {
  name_.Swap(&other->name_);
  uri_.Swap(&other->uri_);
  comments_.UnsafeArenaSwap(&other->comments_);
  lines_.UnsafeArenaSwap(&other->lines_);
  std::swap(main_line_, other->main_line_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineGroup_descriptor_;
  metadata.reflection = LineGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineGroup

// optional string name = 1;
bool LineGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LineGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void LineGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void LineGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& LineGroup::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LineGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LineGroup.name)
}
 void LineGroup::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LineGroup.name)
}
 void LineGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LineGroup.name)
}
 ::std::string* LineGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LineGroup::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LineGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineGroup.name)
}

// optional string uri = 2;
bool LineGroup::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LineGroup::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void LineGroup::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void LineGroup::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& LineGroup::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LineGroup::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LineGroup.uri)
}
 void LineGroup::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LineGroup.uri)
}
 void LineGroup::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LineGroup.uri)
}
 ::std::string* LineGroup::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LineGroup::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineGroup.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LineGroup::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineGroup.uri)
}

// repeated .pbnavitia.Comment comments = 3;
int LineGroup::comments_size() const {
  return comments_.size();
}
void LineGroup::clear_comments() {
  comments_.Clear();
}
const ::pbnavitia::Comment& LineGroup::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.comments)
  return comments_.Get(index);
}
::pbnavitia::Comment* LineGroup::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.comments)
  return comments_.Mutable(index);
}
::pbnavitia::Comment* LineGroup::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineGroup.comments)
  return comments_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
LineGroup::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineGroup.comments)
  return &comments_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
LineGroup::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineGroup.comments)
  return comments_;
}

// repeated .pbnavitia.Line lines = 4;
int LineGroup::lines_size() const {
  return lines_.size();
}
void LineGroup::clear_lines() {
  lines_.Clear();
}
const ::pbnavitia::Line& LineGroup::lines(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.lines)
  return lines_.Get(index);
}
::pbnavitia::Line* LineGroup::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.lines)
  return lines_.Mutable(index);
}
::pbnavitia::Line* LineGroup::add_lines() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineGroup.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
LineGroup::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineGroup.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
LineGroup::lines() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineGroup.lines)
  return lines_;
}

// optional .pbnavitia.Line main_line = 5;
bool LineGroup::has_main_line() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LineGroup::set_has_main_line() {
  _has_bits_[0] |= 0x00000010u;
}
void LineGroup::clear_has_main_line() {
  _has_bits_[0] &= ~0x00000010u;
}
void LineGroup::clear_main_line() {
  if (main_line_ != NULL) main_line_->::pbnavitia::Line::Clear();
  clear_has_main_line();
}
const ::pbnavitia::Line& LineGroup::main_line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineGroup.main_line)
  return main_line_ != NULL ? *main_line_ : *default_instance_->main_line_;
}
::pbnavitia::Line* LineGroup::mutable_main_line() {
  set_has_main_line();
  if (main_line_ == NULL) {
    main_line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineGroup.main_line)
  return main_line_;
}
::pbnavitia::Line* LineGroup::release_main_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineGroup.main_line)
  clear_has_main_line();
  ::pbnavitia::Line* temp = main_line_;
  main_line_ = NULL;
  return temp;
}
void LineGroup::set_allocated_main_line(::pbnavitia::Line* main_line) {
  delete main_line_;
  main_line_ = main_line;
  if (main_line) {
    set_has_main_line();
  } else {
    clear_has_main_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineGroup.main_line)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Route::kNameFieldNumber;
const int Route::kUriFieldNumber;
const int Route::kIsFrequenceFieldNumber;
const int Route::kLineFieldNumber;
const int Route::kJourneyPatternsFieldNumber;
const int Route::kMessagesFieldNumber;
const int Route::kImpactUrisFieldNumber;
const int Route::kCodesFieldNumber;
const int Route::kStopPointsFieldNumber;
const int Route::kDirectionFieldNumber;
const int Route::kGeojsonFieldNumber;
const int Route::kPhysicalModesFieldNumber;
const int Route::kCommentsFieldNumber;
const int Route::kDirectionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Route::Route()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Route)
}

void Route::InitAsDefaultInstance() {
  line_ = const_cast< ::pbnavitia::Line*>(&::pbnavitia::Line::default_instance());
  direction_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  geojson_ = const_cast< ::pbnavitia::MultiLineString*>(&::pbnavitia::MultiLineString::default_instance());
}

Route::Route(const Route& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Route)
}

void Route::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_frequence_ = false;
  line_ = NULL;
  direction_ = NULL;
  geojson_ = NULL;
  direction_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:pbnavitia.Route)
  SharedDtor();
}

void Route::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete line_;
    delete direction_;
    delete geojson_;
  }
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Route::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Route_descriptor_;
}

const Route& Route::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Route* Route::default_instance_ = NULL;

Route* Route::New(::google::protobuf::Arena* arena) const {
  Route* n = new Route;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Route)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_frequence_ = false;
    if (has_line()) {
      if (line_ != NULL) line_->::pbnavitia::Line::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 9728u) {
    if (has_direction()) {
      if (direction_ != NULL) direction_->::pbnavitia::PtObject::Clear();
    }
    if (has_geojson()) {
      if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
    }
    if (has_direction_type()) {
      direction_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  journey_patterns_.Clear();
  messages_.Clear();
  impact_uris_.Clear();
  codes_.Clear();
  stop_points_.Clear();
  physical_modes_.Clear();
  comments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.StopPoint stop_points = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_stop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Route.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uri;
        break;
      }

      // optional string uri = 4;
      case 4: {
        if (tag == 34) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Route.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_frequence;
        break;
      }

      // optional bool is_frequence = 5;
      case 5: {
        if (tag == 40) {
         parse_is_frequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_frequence_)));
          set_has_is_frequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_line;
        break;
      }

      // optional .pbnavitia.Line line = 7;
      case 7: {
        if (tag == 58) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_journey_patterns;
        break;
      }

      // repeated .pbnavitia.JourneyPattern journey_patterns = 8;
      case 8: {
        if (tag == 66) {
         parse_journey_patterns:
          DO_(input->IncrementRecursionDepth());
         parse_loop_journey_patterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_journey_patterns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_journey_patterns;
        if (input->ExpectTag(74)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Message messages = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_messages;
        if (input->ExpectTag(82)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Code codes = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(98)) goto parse_direction;
        break;
      }

      // optional .pbnavitia.PtObject direction = 12;
      case 12: {
        if (tag == 98) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_geojson;
        break;
      }

      // optional .pbnavitia.MultiLineString geojson = 13;
      case 13: {
        if (tag == 106) {
         parse_geojson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geojson()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_physical_modes;
        break;
      }

      // repeated .pbnavitia.PhysicalMode physical_modes = 14;
      case 14: {
        if (tag == 114) {
         parse_physical_modes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_physical_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_physical_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_physical_modes;
        if (input->ExpectTag(122)) goto parse_loop_comments;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Comment comments = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_comments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_comments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(138)) goto parse_direction_type;
        break;
      }

      // optional string direction_type = 17;
      case 17: {
        if (tag == 138) {
         parse_direction_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->direction_type().data(), this->direction_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Route.direction_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 18;
      case 18: {
        if (tag == 146) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Route.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_impact_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Route)
  return false;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Route)
  // repeated .pbnavitia.StopPoint stop_points = 1;
  for (unsigned int i = 0, n = this->stop_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stop_points(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Route.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Route.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional bool is_frequence = 5;
  if (has_is_frequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_frequence(), output);
  }

  // optional .pbnavitia.Line line = 7;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->line_, output);
  }

  // repeated .pbnavitia.JourneyPattern journey_patterns = 8;
  for (unsigned int i = 0, n = this->journey_patterns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->journey_patterns(i), output);
  }

  // repeated .pbnavitia.Message messages = 9;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->messages(i), output);
  }

  // repeated .pbnavitia.Code codes = 10;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->codes(i), output);
  }

  // optional .pbnavitia.PtObject direction = 12;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->direction_, output);
  }

  // optional .pbnavitia.MultiLineString geojson = 13;
  if (has_geojson()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->geojson_, output);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 14;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->physical_modes(i), output);
  }

  // repeated .pbnavitia.Comment comments = 15;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->comments(i), output);
  }

  // optional string direction_type = 17;
  if (has_direction_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->direction_type().data(), this->direction_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Route.direction_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->direction_type(), output);
  }

  // repeated string impact_uris = 18;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Route.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->impact_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Route)
}

::google::protobuf::uint8* Route::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Route)
  // repeated .pbnavitia.StopPoint stop_points = 1;
  for (unsigned int i = 0, n = this->stop_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stop_points(i), false, target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Route.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Route.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional bool is_frequence = 5;
  if (has_is_frequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_frequence(), target);
  }

  // optional .pbnavitia.Line line = 7;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->line_, false, target);
  }

  // repeated .pbnavitia.JourneyPattern journey_patterns = 8;
  for (unsigned int i = 0, n = this->journey_patterns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->journey_patterns(i), false, target);
  }

  // repeated .pbnavitia.Message messages = 9;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->messages(i), false, target);
  }

  // repeated .pbnavitia.Code codes = 10;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->codes(i), false, target);
  }

  // optional .pbnavitia.PtObject direction = 12;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->direction_, false, target);
  }

  // optional .pbnavitia.MultiLineString geojson = 13;
  if (has_geojson()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->geojson_, false, target);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 14;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->physical_modes(i), false, target);
  }

  // repeated .pbnavitia.Comment comments = 15;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->comments(i), false, target);
  }

  // optional string direction_type = 17;
  if (has_direction_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->direction_type().data(), this->direction_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Route.direction_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->direction_type(), target);
  }

  // repeated string impact_uris = 18;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Route.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->impact_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Route)
  return target;
}

int Route::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Route)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string uri = 4;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional bool is_frequence = 5;
    if (has_is_frequence()) {
      total_size += 1 + 1;
    }

    // optional .pbnavitia.Line line = 7;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->line_);
    }

  }
  if (_has_bits_[9 / 32] & 9728u) {
    // optional .pbnavitia.PtObject direction = 12;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_);
    }

    // optional .pbnavitia.MultiLineString geojson = 13;
    if (has_geojson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geojson_);
    }

    // optional string direction_type = 17;
    if (has_direction_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction_type());
    }

  }
  // repeated .pbnavitia.JourneyPattern journey_patterns = 8;
  total_size += 1 * this->journey_patterns_size();
  for (int i = 0; i < this->journey_patterns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->journey_patterns(i));
  }

  // repeated .pbnavitia.Message messages = 9;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 18;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  // repeated .pbnavitia.Code codes = 10;
  total_size += 1 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }

  // repeated .pbnavitia.StopPoint stop_points = 1;
  total_size += 1 * this->stop_points_size();
  for (int i = 0; i < this->stop_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_points(i));
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 14;
  total_size += 1 * this->physical_modes_size();
  for (int i = 0; i < this->physical_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physical_modes(i));
  }

  // repeated .pbnavitia.Comment comments = 15;
  total_size += 1 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Route)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Route* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Route>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Route)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Route)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  journey_patterns_.MergeFrom(from.journey_patterns_);
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  codes_.MergeFrom(from.codes_);
  stop_points_.MergeFrom(from.stop_points_);
  physical_modes_.MergeFrom(from.physical_modes_);
  comments_.MergeFrom(from.comments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_is_frequence()) {
      set_is_frequence(from.is_frequence());
    }
    if (from.has_line()) {
      mutable_line()->::pbnavitia::Line::MergeFrom(from.line());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_direction()) {
      mutable_direction()->::pbnavitia::PtObject::MergeFrom(from.direction());
    }
    if (from.has_geojson()) {
      mutable_geojson()->::pbnavitia::MultiLineString::MergeFrom(from.geojson());
    }
    if (from.has_direction_type()) {
      set_has_direction_type();
      direction_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.direction_type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Route::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {

  if (has_line()) {
    if (!this->line_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->journey_patterns())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->codes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_points())) return false;
  if (has_direction()) {
    if (!this->direction_->IsInitialized()) return false;
  }
  if (has_geojson()) {
    if (!this->geojson_->IsInitialized()) return false;
  }
  return true;
}

void Route::Swap(Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Route::InternalSwap(Route* other) {
  name_.Swap(&other->name_);
  uri_.Swap(&other->uri_);
  std::swap(is_frequence_, other->is_frequence_);
  std::swap(line_, other->line_);
  journey_patterns_.UnsafeArenaSwap(&other->journey_patterns_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  codes_.UnsafeArenaSwap(&other->codes_);
  stop_points_.UnsafeArenaSwap(&other->stop_points_);
  std::swap(direction_, other->direction_);
  std::swap(geojson_, other->geojson_);
  physical_modes_.UnsafeArenaSwap(&other->physical_modes_);
  comments_.UnsafeArenaSwap(&other->comments_);
  direction_type_.Swap(&other->direction_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Route::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Route_descriptor_;
  metadata.reflection = Route_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Route

// optional string name = 3;
bool Route::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Route::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Route::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Route::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Route::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Route::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Route.name)
}
 void Route::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Route.name)
}
 void Route::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Route.name)
}
 ::std::string* Route::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Route::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Route::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.name)
}

// optional string uri = 4;
bool Route::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Route::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void Route::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void Route::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Route::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Route::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Route.uri)
}
 void Route::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Route.uri)
}
 void Route::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Route.uri)
}
 ::std::string* Route::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Route::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Route::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.uri)
}

// optional bool is_frequence = 5;
bool Route::has_is_frequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Route::set_has_is_frequence() {
  _has_bits_[0] |= 0x00000004u;
}
void Route::clear_has_is_frequence() {
  _has_bits_[0] &= ~0x00000004u;
}
void Route::clear_is_frequence() {
  is_frequence_ = false;
  clear_has_is_frequence();
}
 bool Route::is_frequence() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.is_frequence)
  return is_frequence_;
}
 void Route::set_is_frequence(bool value) {
  set_has_is_frequence();
  is_frequence_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Route.is_frequence)
}

// optional .pbnavitia.Line line = 7;
bool Route::has_line() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Route::set_has_line() {
  _has_bits_[0] |= 0x00000008u;
}
void Route::clear_has_line() {
  _has_bits_[0] &= ~0x00000008u;
}
void Route::clear_line() {
  if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  clear_has_line();
}
const ::pbnavitia::Line& Route::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
::pbnavitia::Line* Route::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.line)
  return line_;
}
::pbnavitia::Line* Route::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.line)
  clear_has_line();
  ::pbnavitia::Line* temp = line_;
  line_ = NULL;
  return temp;
}
void Route::set_allocated_line(::pbnavitia::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.line)
}

// repeated .pbnavitia.JourneyPattern journey_patterns = 8;
int Route::journey_patterns_size() const {
  return journey_patterns_.size();
}
void Route::clear_journey_patterns() {
  journey_patterns_.Clear();
}
const ::pbnavitia::JourneyPattern& Route::journey_patterns(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.journey_patterns)
  return journey_patterns_.Get(index);
}
::pbnavitia::JourneyPattern* Route::mutable_journey_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.journey_patterns)
  return journey_patterns_.Mutable(index);
}
::pbnavitia::JourneyPattern* Route::add_journey_patterns() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.journey_patterns)
  return journey_patterns_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >*
Route::mutable_journey_patterns() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.journey_patterns)
  return &journey_patterns_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >&
Route::journey_patterns() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.journey_patterns)
  return journey_patterns_;
}

// repeated .pbnavitia.Message messages = 9;
int Route::messages_size() const {
  return messages_.size();
}
void Route::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& Route::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* Route::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* Route::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
Route::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
Route::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.messages)
  return messages_;
}

// repeated string impact_uris = 18;
int Route::impact_uris_size() const {
  return impact_uris_.size();
}
void Route::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& Route::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* Route::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.impact_uris)
  return impact_uris_.Mutable(index);
}
 void Route::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Route.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void Route::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Route.impact_uris)
}
 void Route::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Route.impact_uris)
}
 ::std::string* Route::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Route.impact_uris)
  return impact_uris_.Add();
}
 void Route::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Route.impact_uris)
}
 void Route::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Route.impact_uris)
}
 void Route::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Route.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Route::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Route::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Code codes = 10;
int Route::codes_size() const {
  return codes_.size();
}
void Route::clear_codes() {
  codes_.Clear();
}
const ::pbnavitia::Code& Route::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.codes)
  return codes_.Get(index);
}
::pbnavitia::Code* Route::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.codes)
  return codes_.Mutable(index);
}
::pbnavitia::Code* Route::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.codes)
  return codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Route::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.codes)
  return &codes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Route::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.codes)
  return codes_;
}

// repeated .pbnavitia.StopPoint stop_points = 1;
int Route::stop_points_size() const {
  return stop_points_.size();
}
void Route::clear_stop_points() {
  stop_points_.Clear();
}
const ::pbnavitia::StopPoint& Route::stop_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.stop_points)
  return stop_points_.Get(index);
}
::pbnavitia::StopPoint* Route::mutable_stop_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.stop_points)
  return stop_points_.Mutable(index);
}
::pbnavitia::StopPoint* Route::add_stop_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.stop_points)
  return stop_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
Route::mutable_stop_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.stop_points)
  return &stop_points_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
Route::stop_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.stop_points)
  return stop_points_;
}

// optional .pbnavitia.PtObject direction = 12;
bool Route::has_direction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Route::set_has_direction() {
  _has_bits_[0] |= 0x00000200u;
}
void Route::clear_has_direction() {
  _has_bits_[0] &= ~0x00000200u;
}
void Route::clear_direction() {
  if (direction_ != NULL) direction_->::pbnavitia::PtObject::Clear();
  clear_has_direction();
}
const ::pbnavitia::PtObject& Route::direction() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
::pbnavitia::PtObject* Route::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.direction)
  return direction_;
}
::pbnavitia::PtObject* Route::release_direction() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.direction)
  clear_has_direction();
  ::pbnavitia::PtObject* temp = direction_;
  direction_ = NULL;
  return temp;
}
void Route::set_allocated_direction(::pbnavitia::PtObject* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.direction)
}

// optional .pbnavitia.MultiLineString geojson = 13;
bool Route::has_geojson() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Route::set_has_geojson() {
  _has_bits_[0] |= 0x00000400u;
}
void Route::clear_has_geojson() {
  _has_bits_[0] &= ~0x00000400u;
}
void Route::clear_geojson() {
  if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
  clear_has_geojson();
}
const ::pbnavitia::MultiLineString& Route::geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.geojson)
  return geojson_ != NULL ? *geojson_ : *default_instance_->geojson_;
}
::pbnavitia::MultiLineString* Route::mutable_geojson() {
  set_has_geojson();
  if (geojson_ == NULL) {
    geojson_ = new ::pbnavitia::MultiLineString;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.geojson)
  return geojson_;
}
::pbnavitia::MultiLineString* Route::release_geojson() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.geojson)
  clear_has_geojson();
  ::pbnavitia::MultiLineString* temp = geojson_;
  geojson_ = NULL;
  return temp;
}
void Route::set_allocated_geojson(::pbnavitia::MultiLineString* geojson) {
  delete geojson_;
  geojson_ = geojson;
  if (geojson) {
    set_has_geojson();
  } else {
    clear_has_geojson();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.geojson)
}

// repeated .pbnavitia.PhysicalMode physical_modes = 14;
int Route::physical_modes_size() const {
  return physical_modes_.size();
}
void Route::clear_physical_modes() {
  physical_modes_.Clear();
}
const ::pbnavitia::PhysicalMode& Route::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.physical_modes)
  return physical_modes_.Get(index);
}
::pbnavitia::PhysicalMode* Route::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.physical_modes)
  return physical_modes_.Mutable(index);
}
::pbnavitia::PhysicalMode* Route::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.physical_modes)
  return physical_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
Route::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.physical_modes)
  return &physical_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
Route::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.physical_modes)
  return physical_modes_;
}

// repeated .pbnavitia.Comment comments = 15;
int Route::comments_size() const {
  return comments_.size();
}
void Route::clear_comments() {
  comments_.Clear();
}
const ::pbnavitia::Comment& Route::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.comments)
  return comments_.Get(index);
}
::pbnavitia::Comment* Route::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.comments)
  return comments_.Mutable(index);
}
::pbnavitia::Comment* Route::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.Route.comments)
  return comments_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
Route::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Route.comments)
  return &comments_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
Route::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Route.comments)
  return comments_;
}

// optional string direction_type = 17;
bool Route::has_direction_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Route::set_has_direction_type() {
  _has_bits_[0] |= 0x00002000u;
}
void Route::clear_has_direction_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void Route::clear_direction_type() {
  direction_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_direction_type();
}
 const ::std::string& Route::direction_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Route.direction_type)
  return direction_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Route::set_direction_type(const ::std::string& value) {
  set_has_direction_type();
  direction_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Route.direction_type)
}
 void Route::set_direction_type(const char* value) {
  set_has_direction_type();
  direction_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Route.direction_type)
}
 void Route::set_direction_type(const char* value, size_t size) {
  set_has_direction_type();
  direction_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Route.direction_type)
}
 ::std::string* Route::mutable_direction_type() {
  set_has_direction_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Route.direction_type)
  return direction_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Route::release_direction_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Route.direction_type)
  clear_has_direction_type();
  return direction_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Route::set_allocated_direction_type(::std::string* direction_type) {
  if (direction_type != NULL) {
    set_has_direction_type();
  } else {
    clear_has_direction_type();
  }
  direction_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction_type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Route.direction_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JourneyPattern::kNameFieldNumber;
const int JourneyPattern::kUriFieldNumber;
const int JourneyPattern::kIsFrequenceFieldNumber;
const int JourneyPattern::kPhysicalModeFieldNumber;
const int JourneyPattern::kRouteFieldNumber;
const int JourneyPattern::kJourneyPatternPointsFieldNumber;
const int JourneyPattern::kMessagesFieldNumber;
const int JourneyPattern::kImpactUrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JourneyPattern::JourneyPattern()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.JourneyPattern)
}

void JourneyPattern::InitAsDefaultInstance() {
  physical_mode_ = const_cast< ::pbnavitia::PhysicalMode*>(&::pbnavitia::PhysicalMode::default_instance());
  route_ = const_cast< ::pbnavitia::Route*>(&::pbnavitia::Route::default_instance());
}

JourneyPattern::JourneyPattern(const JourneyPattern& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.JourneyPattern)
}

void JourneyPattern::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_frequence_ = false;
  physical_mode_ = NULL;
  route_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JourneyPattern::~JourneyPattern() {
  // @@protoc_insertion_point(destructor:pbnavitia.JourneyPattern)
  SharedDtor();
}

void JourneyPattern::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete physical_mode_;
    delete route_;
  }
}

void JourneyPattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JourneyPattern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JourneyPattern_descriptor_;
}

const JourneyPattern& JourneyPattern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

JourneyPattern* JourneyPattern::default_instance_ = NULL;

JourneyPattern* JourneyPattern::New(::google::protobuf::Arena* arena) const {
  JourneyPattern* n = new JourneyPattern;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JourneyPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.JourneyPattern)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_frequence_ = false;
    if (has_physical_mode()) {
      if (physical_mode_ != NULL) physical_mode_->::pbnavitia::PhysicalMode::Clear();
    }
    if (has_route()) {
      if (route_ != NULL) route_->::pbnavitia::Route::Clear();
    }
  }
  journey_pattern_points_.Clear();
  messages_.Clear();
  impact_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool JourneyPattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.JourneyPattern)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.JourneyPattern.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uri;
        break;
      }

      // optional string uri = 4;
      case 4: {
        if (tag == 34) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.JourneyPattern.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_frequence;
        break;
      }

      // optional bool is_frequence = 5;
      case 5: {
        if (tag == 40) {
         parse_is_frequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_frequence_)));
          set_has_is_frequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_physical_mode;
        break;
      }

      // optional .pbnavitia.PhysicalMode physical_mode = 6;
      case 6: {
        if (tag == 50) {
         parse_physical_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_physical_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_route;
        break;
      }

      // optional .pbnavitia.Route route = 7;
      case 7: {
        if (tag == 58) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_journey_pattern_points;
        break;
      }

      // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 8;
      case 8: {
        if (tag == 66) {
         parse_journey_pattern_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_journey_pattern_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_journey_pattern_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_journey_pattern_points;
        if (input->ExpectTag(74)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Message messages = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(178)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 22;
      case 22: {
        if (tag == 178) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.JourneyPattern.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_impact_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.JourneyPattern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.JourneyPattern)
  return false;
#undef DO_
}

void JourneyPattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.JourneyPattern)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPattern.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPattern.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional bool is_frequence = 5;
  if (has_is_frequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_frequence(), output);
  }

  // optional .pbnavitia.PhysicalMode physical_mode = 6;
  if (has_physical_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->physical_mode_, output);
  }

  // optional .pbnavitia.Route route = 7;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->route_, output);
  }

  // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 8;
  for (unsigned int i = 0, n = this->journey_pattern_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->journey_pattern_points(i), output);
  }

  // repeated .pbnavitia.Message messages = 9;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->messages(i), output);
  }

  // repeated string impact_uris = 22;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPattern.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->impact_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.JourneyPattern)
}

::google::protobuf::uint8* JourneyPattern::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.JourneyPattern)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPattern.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPattern.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional bool is_frequence = 5;
  if (has_is_frequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_frequence(), target);
  }

  // optional .pbnavitia.PhysicalMode physical_mode = 6;
  if (has_physical_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->physical_mode_, false, target);
  }

  // optional .pbnavitia.Route route = 7;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->route_, false, target);
  }

  // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 8;
  for (unsigned int i = 0, n = this->journey_pattern_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->journey_pattern_points(i), false, target);
  }

  // repeated .pbnavitia.Message messages = 9;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->messages(i), false, target);
  }

  // repeated string impact_uris = 22;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPattern.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->impact_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.JourneyPattern)
  return target;
}

int JourneyPattern::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.JourneyPattern)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string uri = 4;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional bool is_frequence = 5;
    if (has_is_frequence()) {
      total_size += 1 + 1;
    }

    // optional .pbnavitia.PhysicalMode physical_mode = 6;
    if (has_physical_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->physical_mode_);
    }

    // optional .pbnavitia.Route route = 7;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->route_);
    }

  }
  // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 8;
  total_size += 1 * this->journey_pattern_points_size();
  for (int i = 0; i < this->journey_pattern_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->journey_pattern_points(i));
  }

  // repeated .pbnavitia.Message messages = 9;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 22;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JourneyPattern::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.JourneyPattern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JourneyPattern* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JourneyPattern>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.JourneyPattern)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.JourneyPattern)
    MergeFrom(*source);
  }
}

void JourneyPattern::MergeFrom(const JourneyPattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.JourneyPattern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  journey_pattern_points_.MergeFrom(from.journey_pattern_points_);
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_is_frequence()) {
      set_is_frequence(from.is_frequence());
    }
    if (from.has_physical_mode()) {
      mutable_physical_mode()->::pbnavitia::PhysicalMode::MergeFrom(from.physical_mode());
    }
    if (from.has_route()) {
      mutable_route()->::pbnavitia::Route::MergeFrom(from.route());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void JourneyPattern::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.JourneyPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JourneyPattern::CopyFrom(const JourneyPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.JourneyPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JourneyPattern::IsInitialized() const {

  if (has_route()) {
    if (!this->route_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->journey_pattern_points())) return false;
  return true;
}

void JourneyPattern::Swap(JourneyPattern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JourneyPattern::InternalSwap(JourneyPattern* other) {
  name_.Swap(&other->name_);
  uri_.Swap(&other->uri_);
  std::swap(is_frequence_, other->is_frequence_);
  std::swap(physical_mode_, other->physical_mode_);
  std::swap(route_, other->route_);
  journey_pattern_points_.UnsafeArenaSwap(&other->journey_pattern_points_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JourneyPattern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JourneyPattern_descriptor_;
  metadata.reflection = JourneyPattern_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JourneyPattern

// optional string name = 3;
bool JourneyPattern::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JourneyPattern::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void JourneyPattern::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void JourneyPattern::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& JourneyPattern::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JourneyPattern::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPattern.name)
}
 void JourneyPattern::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPattern.name)
}
 void JourneyPattern::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPattern.name)
}
 ::std::string* JourneyPattern::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JourneyPattern::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPattern.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JourneyPattern::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPattern.name)
}

// optional string uri = 4;
bool JourneyPattern::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JourneyPattern::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void JourneyPattern::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void JourneyPattern::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& JourneyPattern::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JourneyPattern::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPattern.uri)
}
 void JourneyPattern::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPattern.uri)
}
 void JourneyPattern::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPattern.uri)
}
 ::std::string* JourneyPattern::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JourneyPattern::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPattern.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JourneyPattern::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPattern.uri)
}

// optional bool is_frequence = 5;
bool JourneyPattern::has_is_frequence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void JourneyPattern::set_has_is_frequence() {
  _has_bits_[0] |= 0x00000004u;
}
void JourneyPattern::clear_has_is_frequence() {
  _has_bits_[0] &= ~0x00000004u;
}
void JourneyPattern::clear_is_frequence() {
  is_frequence_ = false;
  clear_has_is_frequence();
}
 bool JourneyPattern::is_frequence() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.is_frequence)
  return is_frequence_;
}
 void JourneyPattern::set_is_frequence(bool value) {
  set_has_is_frequence();
  is_frequence_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPattern.is_frequence)
}

// optional .pbnavitia.PhysicalMode physical_mode = 6;
bool JourneyPattern::has_physical_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void JourneyPattern::set_has_physical_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void JourneyPattern::clear_has_physical_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void JourneyPattern::clear_physical_mode() {
  if (physical_mode_ != NULL) physical_mode_->::pbnavitia::PhysicalMode::Clear();
  clear_has_physical_mode();
}
const ::pbnavitia::PhysicalMode& JourneyPattern::physical_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.physical_mode)
  return physical_mode_ != NULL ? *physical_mode_ : *default_instance_->physical_mode_;
}
::pbnavitia::PhysicalMode* JourneyPattern::mutable_physical_mode() {
  set_has_physical_mode();
  if (physical_mode_ == NULL) {
    physical_mode_ = new ::pbnavitia::PhysicalMode;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.physical_mode)
  return physical_mode_;
}
::pbnavitia::PhysicalMode* JourneyPattern::release_physical_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPattern.physical_mode)
  clear_has_physical_mode();
  ::pbnavitia::PhysicalMode* temp = physical_mode_;
  physical_mode_ = NULL;
  return temp;
}
void JourneyPattern::set_allocated_physical_mode(::pbnavitia::PhysicalMode* physical_mode) {
  delete physical_mode_;
  physical_mode_ = physical_mode;
  if (physical_mode) {
    set_has_physical_mode();
  } else {
    clear_has_physical_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPattern.physical_mode)
}

// optional .pbnavitia.Route route = 7;
bool JourneyPattern::has_route() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void JourneyPattern::set_has_route() {
  _has_bits_[0] |= 0x00000010u;
}
void JourneyPattern::clear_has_route() {
  _has_bits_[0] &= ~0x00000010u;
}
void JourneyPattern::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
const ::pbnavitia::Route& JourneyPattern::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
::pbnavitia::Route* JourneyPattern::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.route)
  return route_;
}
::pbnavitia::Route* JourneyPattern::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPattern.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
void JourneyPattern::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPattern.route)
}

// repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 8;
int JourneyPattern::journey_pattern_points_size() const {
  return journey_pattern_points_.size();
}
void JourneyPattern::clear_journey_pattern_points() {
  journey_pattern_points_.Clear();
}
const ::pbnavitia::JourneyPatternPoint& JourneyPattern::journey_pattern_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.journey_pattern_points)
  return journey_pattern_points_.Get(index);
}
::pbnavitia::JourneyPatternPoint* JourneyPattern::mutable_journey_pattern_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.journey_pattern_points)
  return journey_pattern_points_.Mutable(index);
}
::pbnavitia::JourneyPatternPoint* JourneyPattern::add_journey_pattern_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPattern.journey_pattern_points)
  return journey_pattern_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >*
JourneyPattern::mutable_journey_pattern_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPattern.journey_pattern_points)
  return &journey_pattern_points_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >&
JourneyPattern::journey_pattern_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPattern.journey_pattern_points)
  return journey_pattern_points_;
}

// repeated .pbnavitia.Message messages = 9;
int JourneyPattern::messages_size() const {
  return messages_.size();
}
void JourneyPattern::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& JourneyPattern::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* JourneyPattern::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* JourneyPattern::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPattern.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
JourneyPattern::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPattern.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
JourneyPattern::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPattern.messages)
  return messages_;
}

// repeated string impact_uris = 22;
int JourneyPattern::impact_uris_size() const {
  return impact_uris_.size();
}
void JourneyPattern::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& JourneyPattern::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPattern.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* JourneyPattern::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPattern.impact_uris)
  return impact_uris_.Mutable(index);
}
 void JourneyPattern::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPattern.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void JourneyPattern::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPattern.impact_uris)
}
 void JourneyPattern::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPattern.impact_uris)
}
 ::std::string* JourneyPattern::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.JourneyPattern.impact_uris)
  return impact_uris_.Add();
}
 void JourneyPattern::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPattern.impact_uris)
}
 void JourneyPattern::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.JourneyPattern.impact_uris)
}
 void JourneyPattern::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.JourneyPattern.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
JourneyPattern::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPattern.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
JourneyPattern::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPattern.impact_uris)
  return &impact_uris_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Destination::kUriFieldNumber;
const int Destination::kDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Destination::Destination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Destination)
}

void Destination::InitAsDefaultInstance() {
}

Destination::Destination(const Destination& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Destination)
}

void Destination::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Destination::~Destination() {
  // @@protoc_insertion_point(destructor:pbnavitia.Destination)
  SharedDtor();
}

void Destination::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Destination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Destination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Destination_descriptor_;
}

const Destination& Destination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Destination* Destination::default_instance_ = NULL;

Destination* Destination::New(::google::protobuf::Arena* arena) const {
  Destination* n = new Destination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Destination::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Destination)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_destination()) {
      destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Destination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Destination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Destination.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }

      // optional string destination = 2;
      case 2: {
        if (tag == 18) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Destination.destination");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Destination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Destination)
  return false;
#undef DO_
}

void Destination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Destination)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Destination.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string destination = 2;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Destination.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Destination)
}

::google::protobuf::uint8* Destination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Destination)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Destination.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string destination = 2;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Destination.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Destination)
  return target;
}

int Destination::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Destination)
  int total_size = 0;

  // required string uri = 1;
  if (has_uri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }
  // optional string destination = 2;
  if (has_destination()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Destination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Destination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Destination* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Destination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Destination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Destination)
    MergeFrom(*source);
  }
}

void Destination::MergeFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Destination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_destination()) {
      set_has_destination();
      destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Destination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destination::CopyFrom(const Destination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Destination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destination::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Destination::Swap(Destination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Destination::InternalSwap(Destination* other) {
  uri_.Swap(&other->uri_);
  destination_.Swap(&other->destination_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Destination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Destination_descriptor_;
  metadata.reflection = Destination_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Destination

// required string uri = 1;
bool Destination::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Destination::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Destination::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Destination::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Destination::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Destination.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Destination::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Destination.uri)
}
 void Destination::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Destination.uri)
}
 void Destination::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Destination.uri)
}
 ::std::string* Destination::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Destination.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Destination::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Destination.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Destination::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Destination.uri)
}

// optional string destination = 2;
bool Destination::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Destination::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
void Destination::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
void Destination::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination();
}
 const ::std::string& Destination::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Destination.destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Destination::set_destination(const ::std::string& value) {
  set_has_destination();
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Destination.destination)
}
 void Destination::set_destination(const char* value) {
  set_has_destination();
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Destination.destination)
}
 void Destination::set_destination(const char* value, size_t size) {
  set_has_destination();
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Destination.destination)
}
 ::std::string* Destination::mutable_destination() {
  set_has_destination();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Destination.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Destination::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Destination.destination)
  clear_has_destination();
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Destination::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Destination.destination)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Note::kUriFieldNumber;
const int Note::kNoteFieldNumber;
const int Note::kCommentTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Note::Note()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Note)
}

void Note::InitAsDefaultInstance() {
}

Note::Note(const Note& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Note)
}

void Note::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:pbnavitia.Note)
  SharedDtor();
}

void Note::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Note::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Note::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Note_descriptor_;
}

const Note& Note::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Note* Note::default_instance_ = NULL;

Note* Note::New(::google::protobuf::Arena* arena) const {
  Note* n = new Note;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Note)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_note()) {
      note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_comment_type()) {
      comment_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Note)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Note.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_note;
        break;
      }

      // optional string note = 2;
      case 2: {
        if (tag == 18) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Note.note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_comment_type;
        break;
      }

      // optional string comment_type = 3;
      case 3: {
        if (tag == 26) {
         parse_comment_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment_type().data(), this->comment_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Note.comment_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Note)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Note)
  return false;
#undef DO_
}

void Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Note)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Note.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string note = 2;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Note.note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->note(), output);
  }

  // optional string comment_type = 3;
  if (has_comment_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment_type().data(), this->comment_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Note.comment_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Note)
}

::google::protobuf::uint8* Note::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Note)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Note.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string note = 2;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Note.note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->note(), target);
  }

  // optional string comment_type = 3;
  if (has_comment_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment_type().data(), this->comment_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Note.comment_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Note)
  return target;
}

int Note::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Note)
  int total_size = 0;

  // required string uri = 1;
  if (has_uri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string note = 2;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

    // optional string comment_type = 3;
    if (has_comment_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Note::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Note)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Note* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Note>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Note)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Note)
    MergeFrom(*source);
  }
}

void Note::MergeFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Note)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_note()) {
      set_has_note();
      note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.note_);
    }
    if (from.has_comment_type()) {
      set_has_comment_type();
      comment_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Note::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Note::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Note::Swap(Note* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Note::InternalSwap(Note* other) {
  uri_.Swap(&other->uri_);
  note_.Swap(&other->note_);
  comment_type_.Swap(&other->comment_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Note::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Note_descriptor_;
  metadata.reflection = Note_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Note

// required string uri = 1;
bool Note::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Note::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Note::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Note::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Note::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Note.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Note::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Note.uri)
}
 void Note::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Note.uri)
}
 void Note::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Note.uri)
}
 ::std::string* Note::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Note.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Note::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Note.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Note::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Note.uri)
}

// optional string note = 2;
bool Note::has_note() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Note::set_has_note() {
  _has_bits_[0] |= 0x00000002u;
}
void Note::clear_has_note() {
  _has_bits_[0] &= ~0x00000002u;
}
void Note::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_note();
}
 const ::std::string& Note::note() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Note.note)
  return note_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Note::set_note(const ::std::string& value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Note.note)
}
 void Note::set_note(const char* value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Note.note)
}
 void Note::set_note(const char* value, size_t size) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Note.note)
}
 ::std::string* Note::mutable_note() {
  set_has_note();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Note.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Note::release_note() {
  // @@protoc_insertion_point(field_release:pbnavitia.Note.note)
  clear_has_note();
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Note::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    set_has_note();
  } else {
    clear_has_note();
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Note.note)
}

// optional string comment_type = 3;
bool Note::has_comment_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Note::set_has_comment_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Note::clear_has_comment_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Note::clear_comment_type() {
  comment_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment_type();
}
 const ::std::string& Note::comment_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Note.comment_type)
  return comment_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Note::set_comment_type(const ::std::string& value) {
  set_has_comment_type();
  comment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Note.comment_type)
}
 void Note::set_comment_type(const char* value) {
  set_has_comment_type();
  comment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Note.comment_type)
}
 void Note::set_comment_type(const char* value, size_t size) {
  set_has_comment_type();
  comment_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Note.comment_type)
}
 ::std::string* Note::mutable_comment_type() {
  set_has_comment_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Note.comment_type)
  return comment_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Note::release_comment_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Note.comment_type)
  clear_has_comment_type();
  return comment_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Note::set_allocated_comment_type(::std::string* comment_type) {
  if (comment_type != NULL) {
    set_has_comment_type();
  } else {
    clear_has_comment_type();
  }
  comment_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment_type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Note.comment_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Properties_AdditionalInformation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Properties_AdditionalInformation_descriptor_;
}
bool Properties_AdditionalInformation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Properties_AdditionalInformation Properties::pick_up_only;
const Properties_AdditionalInformation Properties::drop_off_only;
const Properties_AdditionalInformation Properties::on_demand_transport;
const Properties_AdditionalInformation Properties::date_time_estimated;
const Properties_AdditionalInformation Properties::AdditionalInformation_MIN;
const Properties_AdditionalInformation Properties::AdditionalInformation_MAX;
const int Properties::AdditionalInformation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Properties::kAdditionalInformationsFieldNumber;
const int Properties::kNotesFieldNumber;
const int Properties::kExceptionsFieldNumber;
const int Properties::kDestinationFieldNumber;
const int Properties::kVehicleJourneyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Properties::Properties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Properties)
}

void Properties::InitAsDefaultInstance() {
  destination_ = const_cast< ::pbnavitia::Destination*>(&::pbnavitia::Destination::default_instance());
}

Properties::Properties(const Properties& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Properties)
}

void Properties::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  destination_ = NULL;
  vehicle_journey_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Properties::~Properties() {
  // @@protoc_insertion_point(destructor:pbnavitia.Properties)
  SharedDtor();
}

void Properties::SharedDtor() {
  vehicle_journey_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete destination_;
  }
}

void Properties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Properties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Properties_descriptor_;
}

const Properties& Properties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Properties* Properties::default_instance_ = NULL;

Properties* Properties::New(::google::protobuf::Arena* arena) const {
  Properties* n = new Properties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Properties::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Properties)
  if (_has_bits_[0 / 32] & 24u) {
    if (has_destination()) {
      if (destination_ != NULL) destination_->::pbnavitia::Destination::Clear();
    }
    if (has_vehicle_journey_id()) {
      vehicle_journey_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  additional_informations_.Clear();
  notes_.Clear();
  exceptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Properties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Properties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.Properties.AdditionalInformation additional_informations = 1;
      case 1: {
        if (tag == 8) {
         parse_additional_informations:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::Properties_AdditionalInformation_IsValid(value)) {
            add_additional_informations(static_cast< ::pbnavitia::Properties_AdditionalInformation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::pbnavitia::Properties_AdditionalInformation_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_additional_informations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_additional_informations;
        if (input->ExpectTag(42)) goto parse_notes;
        break;
      }

      // repeated .pbnavitia.Note notes = 5;
      case 5: {
        if (tag == 42) {
         parse_notes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_notes;
        if (input->ExpectTag(50)) goto parse_loop_exceptions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.CalendarException exceptions = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exceptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exceptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_exceptions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_destination;
        break;
      }

      // optional .pbnavitia.Destination destination = 7;
      case 7: {
        if (tag == 58) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vehicle_journey_id;
        break;
      }

      // optional string vehicle_journey_id = 8;
      case 8: {
        if (tag == 66) {
         parse_vehicle_journey_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_journey_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicle_journey_id().data(), this->vehicle_journey_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Properties.vehicle_journey_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Properties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Properties)
  return false;
#undef DO_
}

void Properties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Properties)
  // repeated .pbnavitia.Properties.AdditionalInformation additional_informations = 1;
  for (int i = 0; i < this->additional_informations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->additional_informations(i), output);
  }

  // repeated .pbnavitia.Note notes = 5;
  for (unsigned int i = 0, n = this->notes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->notes(i), output);
  }

  // repeated .pbnavitia.CalendarException exceptions = 6;
  for (unsigned int i = 0, n = this->exceptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->exceptions(i), output);
  }

  // optional .pbnavitia.Destination destination = 7;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->destination_, output);
  }

  // optional string vehicle_journey_id = 8;
  if (has_vehicle_journey_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_journey_id().data(), this->vehicle_journey_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Properties.vehicle_journey_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->vehicle_journey_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Properties)
}

::google::protobuf::uint8* Properties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Properties)
  // repeated .pbnavitia.Properties.AdditionalInformation additional_informations = 1;
  for (int i = 0; i < this->additional_informations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->additional_informations(i), target);
  }

  // repeated .pbnavitia.Note notes = 5;
  for (unsigned int i = 0, n = this->notes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->notes(i), false, target);
  }

  // repeated .pbnavitia.CalendarException exceptions = 6;
  for (unsigned int i = 0, n = this->exceptions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->exceptions(i), false, target);
  }

  // optional .pbnavitia.Destination destination = 7;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->destination_, false, target);
  }

  // optional string vehicle_journey_id = 8;
  if (has_vehicle_journey_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_journey_id().data(), this->vehicle_journey_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Properties.vehicle_journey_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->vehicle_journey_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Properties)
  return target;
}

int Properties::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Properties)
  int total_size = 0;

  if (_has_bits_[3 / 32] & 24u) {
    // optional .pbnavitia.Destination destination = 7;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

    // optional string vehicle_journey_id = 8;
    if (has_vehicle_journey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicle_journey_id());
    }

  }
  // repeated .pbnavitia.Properties.AdditionalInformation additional_informations = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->additional_informations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->additional_informations(i));
    }
    total_size += 1 * this->additional_informations_size() + data_size;
  }

  // repeated .pbnavitia.Note notes = 5;
  total_size += 1 * this->notes_size();
  for (int i = 0; i < this->notes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notes(i));
  }

  // repeated .pbnavitia.CalendarException exceptions = 6;
  total_size += 1 * this->exceptions_size();
  for (int i = 0; i < this->exceptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exceptions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Properties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Properties)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Properties* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Properties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Properties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Properties)
    MergeFrom(*source);
  }
}

void Properties::MergeFrom(const Properties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Properties)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  additional_informations_.MergeFrom(from.additional_informations_);
  notes_.MergeFrom(from.notes_);
  exceptions_.MergeFrom(from.exceptions_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_destination()) {
      mutable_destination()->::pbnavitia::Destination::MergeFrom(from.destination());
    }
    if (from.has_vehicle_journey_id()) {
      set_has_vehicle_journey_id();
      vehicle_journey_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicle_journey_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Properties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Properties::CopyFrom(const Properties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Properties::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->notes())) return false;
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  return true;
}

void Properties::Swap(Properties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Properties::InternalSwap(Properties* other) {
  additional_informations_.UnsafeArenaSwap(&other->additional_informations_);
  notes_.UnsafeArenaSwap(&other->notes_);
  exceptions_.UnsafeArenaSwap(&other->exceptions_);
  std::swap(destination_, other->destination_);
  vehicle_journey_id_.Swap(&other->vehicle_journey_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Properties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Properties_descriptor_;
  metadata.reflection = Properties_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Properties

// repeated .pbnavitia.Properties.AdditionalInformation additional_informations = 1;
int Properties::additional_informations_size() const {
  return additional_informations_.size();
}
void Properties::clear_additional_informations() {
  additional_informations_.Clear();
}
 ::pbnavitia::Properties_AdditionalInformation Properties::additional_informations(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.additional_informations)
  return static_cast< ::pbnavitia::Properties_AdditionalInformation >(additional_informations_.Get(index));
}
 void Properties::set_additional_informations(int index, ::pbnavitia::Properties_AdditionalInformation value) {
  assert(::pbnavitia::Properties_AdditionalInformation_IsValid(value));
  additional_informations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.Properties.additional_informations)
}
 void Properties::add_additional_informations(::pbnavitia::Properties_AdditionalInformation value) {
  assert(::pbnavitia::Properties_AdditionalInformation_IsValid(value));
  additional_informations_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Properties.additional_informations)
}
 const ::google::protobuf::RepeatedField<int>&
Properties::additional_informations() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Properties.additional_informations)
  return additional_informations_;
}
 ::google::protobuf::RepeatedField<int>*
Properties::mutable_additional_informations() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Properties.additional_informations)
  return &additional_informations_;
}

// repeated .pbnavitia.Note notes = 5;
int Properties::notes_size() const {
  return notes_.size();
}
void Properties::clear_notes() {
  notes_.Clear();
}
const ::pbnavitia::Note& Properties::notes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.notes)
  return notes_.Get(index);
}
::pbnavitia::Note* Properties::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Properties.notes)
  return notes_.Mutable(index);
}
::pbnavitia::Note* Properties::add_notes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Properties.notes)
  return notes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >*
Properties::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Properties.notes)
  return &notes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >&
Properties::notes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Properties.notes)
  return notes_;
}

// repeated .pbnavitia.CalendarException exceptions = 6;
int Properties::exceptions_size() const {
  return exceptions_.size();
}
void Properties::clear_exceptions() {
  exceptions_.Clear();
}
const ::pbnavitia::CalendarException& Properties::exceptions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.exceptions)
  return exceptions_.Get(index);
}
::pbnavitia::CalendarException* Properties::mutable_exceptions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Properties.exceptions)
  return exceptions_.Mutable(index);
}
::pbnavitia::CalendarException* Properties::add_exceptions() {
  // @@protoc_insertion_point(field_add:pbnavitia.Properties.exceptions)
  return exceptions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >*
Properties::mutable_exceptions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Properties.exceptions)
  return &exceptions_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >&
Properties::exceptions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Properties.exceptions)
  return exceptions_;
}

// optional .pbnavitia.Destination destination = 7;
bool Properties::has_destination() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Properties::set_has_destination() {
  _has_bits_[0] |= 0x00000008u;
}
void Properties::clear_has_destination() {
  _has_bits_[0] &= ~0x00000008u;
}
void Properties::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::Destination::Clear();
  clear_has_destination();
}
const ::pbnavitia::Destination& Properties::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::pbnavitia::Destination* Properties::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::Destination;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Properties.destination)
  return destination_;
}
::pbnavitia::Destination* Properties::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Properties.destination)
  clear_has_destination();
  ::pbnavitia::Destination* temp = destination_;
  destination_ = NULL;
  return temp;
}
void Properties::set_allocated_destination(::pbnavitia::Destination* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Properties.destination)
}

// optional string vehicle_journey_id = 8;
bool Properties::has_vehicle_journey_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Properties::set_has_vehicle_journey_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Properties::clear_has_vehicle_journey_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Properties::clear_vehicle_journey_id() {
  vehicle_journey_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicle_journey_id();
}
 const ::std::string& Properties::vehicle_journey_id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Properties.vehicle_journey_id)
  return vehicle_journey_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Properties::set_vehicle_journey_id(const ::std::string& value) {
  set_has_vehicle_journey_id();
  vehicle_journey_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Properties.vehicle_journey_id)
}
 void Properties::set_vehicle_journey_id(const char* value) {
  set_has_vehicle_journey_id();
  vehicle_journey_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Properties.vehicle_journey_id)
}
 void Properties::set_vehicle_journey_id(const char* value, size_t size) {
  set_has_vehicle_journey_id();
  vehicle_journey_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Properties.vehicle_journey_id)
}
 ::std::string* Properties::mutable_vehicle_journey_id() {
  set_has_vehicle_journey_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Properties.vehicle_journey_id)
  return vehicle_journey_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Properties::release_vehicle_journey_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Properties.vehicle_journey_id)
  clear_has_vehicle_journey_id();
  return vehicle_journey_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Properties::set_allocated_vehicle_journey_id(::std::string* vehicle_journey_id) {
  if (vehicle_journey_id != NULL) {
    set_has_vehicle_journey_id();
  } else {
    clear_has_vehicle_journey_id();
  }
  vehicle_journey_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_journey_id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Properties.vehicle_journey_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* hasEquipments_Equipment_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hasEquipments_Equipment_descriptor_;
}
bool hasEquipments_Equipment_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const hasEquipments_Equipment hasEquipments::has_wheelchair_accessibility;
const hasEquipments_Equipment hasEquipments::has_bike_accepted;
const hasEquipments_Equipment hasEquipments::has_air_conditioned;
const hasEquipments_Equipment hasEquipments::has_visual_announcement;
const hasEquipments_Equipment hasEquipments::has_audible_announcement;
const hasEquipments_Equipment hasEquipments::has_appropriate_escort;
const hasEquipments_Equipment hasEquipments::has_appropriate_signage;
const hasEquipments_Equipment hasEquipments::has_school_vehicle;
const hasEquipments_Equipment hasEquipments::has_wheelchair_boarding;
const hasEquipments_Equipment hasEquipments::has_sheltered;
const hasEquipments_Equipment hasEquipments::has_elevator;
const hasEquipments_Equipment hasEquipments::has_escalator;
const hasEquipments_Equipment hasEquipments::has_bike_depot;
const hasEquipments_Equipment hasEquipments::Equipment_MIN;
const hasEquipments_Equipment hasEquipments::Equipment_MAX;
const int hasEquipments::Equipment_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hasEquipments::kHasEquipmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hasEquipments::hasEquipments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.hasEquipments)
}

void hasEquipments::InitAsDefaultInstance() {
}

hasEquipments::hasEquipments(const hasEquipments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.hasEquipments)
}

void hasEquipments::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hasEquipments::~hasEquipments() {
  // @@protoc_insertion_point(destructor:pbnavitia.hasEquipments)
  SharedDtor();
}

void hasEquipments::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hasEquipments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hasEquipments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hasEquipments_descriptor_;
}

const hasEquipments& hasEquipments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

hasEquipments* hasEquipments::default_instance_ = NULL;

hasEquipments* hasEquipments::New(::google::protobuf::Arena* arena) const {
  hasEquipments* n = new hasEquipments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hasEquipments::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.hasEquipments)
  has_equipments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool hasEquipments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.hasEquipments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.hasEquipments.Equipment has_equipments = 1;
      case 1: {
        if (tag == 8) {
         parse_has_equipments:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::hasEquipments_Equipment_IsValid(value)) {
            add_has_equipments(static_cast< ::pbnavitia::hasEquipments_Equipment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::pbnavitia::hasEquipments_Equipment_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_has_equipments())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_has_equipments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.hasEquipments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.hasEquipments)
  return false;
#undef DO_
}

void hasEquipments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.hasEquipments)
  // repeated .pbnavitia.hasEquipments.Equipment has_equipments = 1;
  for (int i = 0; i < this->has_equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->has_equipments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.hasEquipments)
}

::google::protobuf::uint8* hasEquipments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.hasEquipments)
  // repeated .pbnavitia.hasEquipments.Equipment has_equipments = 1;
  for (int i = 0; i < this->has_equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->has_equipments(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.hasEquipments)
  return target;
}

int hasEquipments::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.hasEquipments)
  int total_size = 0;

  // repeated .pbnavitia.hasEquipments.Equipment has_equipments = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->has_equipments_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->has_equipments(i));
    }
    total_size += 1 * this->has_equipments_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hasEquipments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.hasEquipments)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const hasEquipments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const hasEquipments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.hasEquipments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.hasEquipments)
    MergeFrom(*source);
  }
}

void hasEquipments::MergeFrom(const hasEquipments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.hasEquipments)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  has_equipments_.MergeFrom(from.has_equipments_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void hasEquipments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.hasEquipments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hasEquipments::CopyFrom(const hasEquipments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.hasEquipments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hasEquipments::IsInitialized() const {

  return true;
}

void hasEquipments::Swap(hasEquipments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hasEquipments::InternalSwap(hasEquipments* other) {
  has_equipments_.UnsafeArenaSwap(&other->has_equipments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hasEquipments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hasEquipments_descriptor_;
  metadata.reflection = hasEquipments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hasEquipments

// repeated .pbnavitia.hasEquipments.Equipment has_equipments = 1;
int hasEquipments::has_equipments_size() const {
  return has_equipments_.size();
}
void hasEquipments::clear_has_equipments() {
  has_equipments_.Clear();
}
 ::pbnavitia::hasEquipments_Equipment hasEquipments::has_equipments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.hasEquipments.has_equipments)
  return static_cast< ::pbnavitia::hasEquipments_Equipment >(has_equipments_.Get(index));
}
 void hasEquipments::set_has_equipments(int index, ::pbnavitia::hasEquipments_Equipment value) {
  assert(::pbnavitia::hasEquipments_Equipment_IsValid(value));
  has_equipments_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.hasEquipments.has_equipments)
}
 void hasEquipments::add_has_equipments(::pbnavitia::hasEquipments_Equipment value) {
  assert(::pbnavitia::hasEquipments_Equipment_IsValid(value));
  has_equipments_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.hasEquipments.has_equipments)
}
 const ::google::protobuf::RepeatedField<int>&
hasEquipments::has_equipments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.hasEquipments.has_equipments)
  return has_equipments_;
}
 ::google::protobuf::RepeatedField<int>*
hasEquipments::mutable_has_equipments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.hasEquipments.has_equipments)
  return &has_equipments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopDateTime::kArrivalDateTimeFieldNumber;
const int StopDateTime::kDepartureDateTimeFieldNumber;
const int StopDateTime::kBaseArrivalDateTimeFieldNumber;
const int StopDateTime::kBaseDepartureDateTimeFieldNumber;
const int StopDateTime::kStopPointFieldNumber;
const int StopDateTime::kPropertiesFieldNumber;
const int StopDateTime::kDataFreshnessFieldNumber;
const int StopDateTime::kDepartureStatusFieldNumber;
const int StopDateTime::kArrivalStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopDateTime::StopDateTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StopDateTime)
}

void StopDateTime::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
  properties_ = const_cast< ::pbnavitia::Properties*>(&::pbnavitia::Properties::default_instance());
}

StopDateTime::StopDateTime(const StopDateTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StopDateTime)
}

void StopDateTime::SharedCtor() {
  _cached_size_ = 0;
  arrival_date_time_ = GOOGLE_ULONGLONG(0);
  departure_date_time_ = GOOGLE_ULONGLONG(0);
  base_arrival_date_time_ = GOOGLE_ULONGLONG(0);
  base_departure_date_time_ = GOOGLE_ULONGLONG(0);
  stop_point_ = NULL;
  properties_ = NULL;
  data_freshness_ = 1;
  departure_status_ = 0;
  arrival_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopDateTime::~StopDateTime() {
  // @@protoc_insertion_point(destructor:pbnavitia.StopDateTime)
  SharedDtor();
}

void StopDateTime::SharedDtor() {
  if (this != default_instance_) {
    delete stop_point_;
    delete properties_;
  }
}

void StopDateTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopDateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopDateTime_descriptor_;
}

const StopDateTime& StopDateTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

StopDateTime* StopDateTime::default_instance_ = NULL;

StopDateTime* StopDateTime::New(::google::protobuf::Arena* arena) const {
  StopDateTime* n = new StopDateTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StopDateTime)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StopDateTime, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StopDateTime*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(arrival_date_time_, base_departure_date_time_);
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
    if (has_properties()) {
      if (properties_ != NULL) properties_->::pbnavitia::Properties::Clear();
    }
    data_freshness_ = 1;
    departure_status_ = 0;
  }
  arrival_status_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopDateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StopDateTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 arrival_date_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arrival_date_time_)));
          set_has_arrival_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_departure_date_time;
        break;
      }

      // optional uint64 departure_date_time = 2;
      case 2: {
        if (tag == 16) {
         parse_departure_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &departure_date_time_)));
          set_has_departure_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stop_point;
        break;
      }

      // optional .pbnavitia.StopPoint stop_point = 3;
      case 3: {
        if (tag == 26) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_properties;
        break;
      }

      // optional .pbnavitia.Properties properties = 4;
      case 4: {
        if (tag == 34) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_base_arrival_date_time;
        break;
      }

      // optional uint64 base_arrival_date_time = 5;
      case 5: {
        if (tag == 40) {
         parse_base_arrival_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_arrival_date_time_)));
          set_has_base_arrival_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_base_departure_date_time;
        break;
      }

      // optional uint64 base_departure_date_time = 6;
      case 6: {
        if (tag == 48) {
         parse_base_departure_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_departure_date_time_)));
          set_has_base_departure_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_data_freshness;
        break;
      }

      // optional .pbnavitia.RTLevel data_freshness = 7;
      case 7: {
        if (tag == 56) {
         parse_data_freshness:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::RTLevel_IsValid(value)) {
            set_data_freshness(static_cast< ::pbnavitia::RTLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_departure_status;
        break;
      }

      // optional .pbnavitia.MessageStatus departure_status = 8;
      case 8: {
        if (tag == 64) {
         parse_departure_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::MessageStatus_IsValid(value)) {
            set_departure_status(static_cast< ::pbnavitia::MessageStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_arrival_status;
        break;
      }

      // optional .pbnavitia.MessageStatus arrival_status = 9;
      case 9: {
        if (tag == 72) {
         parse_arrival_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::MessageStatus_IsValid(value)) {
            set_arrival_status(static_cast< ::pbnavitia::MessageStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StopDateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StopDateTime)
  return false;
#undef DO_
}

void StopDateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StopDateTime)
  // optional uint64 arrival_date_time = 1;
  if (has_arrival_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->arrival_date_time(), output);
  }

  // optional uint64 departure_date_time = 2;
  if (has_departure_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->departure_date_time(), output);
  }

  // optional .pbnavitia.StopPoint stop_point = 3;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // optional .pbnavitia.Properties properties = 4;
  if (has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->properties_, output);
  }

  // optional uint64 base_arrival_date_time = 5;
  if (has_base_arrival_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->base_arrival_date_time(), output);
  }

  // optional uint64 base_departure_date_time = 6;
  if (has_base_departure_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->base_departure_date_time(), output);
  }

  // optional .pbnavitia.RTLevel data_freshness = 7;
  if (has_data_freshness()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->data_freshness(), output);
  }

  // optional .pbnavitia.MessageStatus departure_status = 8;
  if (has_departure_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->departure_status(), output);
  }

  // optional .pbnavitia.MessageStatus arrival_status = 9;
  if (has_arrival_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->arrival_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StopDateTime)
}

::google::protobuf::uint8* StopDateTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StopDateTime)
  // optional uint64 arrival_date_time = 1;
  if (has_arrival_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->arrival_date_time(), target);
  }

  // optional uint64 departure_date_time = 2;
  if (has_departure_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->departure_date_time(), target);
  }

  // optional .pbnavitia.StopPoint stop_point = 3;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stop_point_, false, target);
  }

  // optional .pbnavitia.Properties properties = 4;
  if (has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->properties_, false, target);
  }

  // optional uint64 base_arrival_date_time = 5;
  if (has_base_arrival_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->base_arrival_date_time(), target);
  }

  // optional uint64 base_departure_date_time = 6;
  if (has_base_departure_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->base_departure_date_time(), target);
  }

  // optional .pbnavitia.RTLevel data_freshness = 7;
  if (has_data_freshness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->data_freshness(), target);
  }

  // optional .pbnavitia.MessageStatus departure_status = 8;
  if (has_departure_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->departure_status(), target);
  }

  // optional .pbnavitia.MessageStatus arrival_status = 9;
  if (has_arrival_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->arrival_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StopDateTime)
  return target;
}

int StopDateTime::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StopDateTime)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 arrival_date_time = 1;
    if (has_arrival_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arrival_date_time());
    }

    // optional uint64 departure_date_time = 2;
    if (has_departure_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->departure_date_time());
    }

    // optional uint64 base_arrival_date_time = 5;
    if (has_base_arrival_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_arrival_date_time());
    }

    // optional uint64 base_departure_date_time = 6;
    if (has_base_departure_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_departure_date_time());
    }

    // optional .pbnavitia.StopPoint stop_point = 3;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional .pbnavitia.Properties properties = 4;
    if (has_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->properties_);
    }

    // optional .pbnavitia.RTLevel data_freshness = 7;
    if (has_data_freshness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_freshness());
    }

    // optional .pbnavitia.MessageStatus departure_status = 8;
    if (has_departure_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->departure_status());
    }

  }
  // optional .pbnavitia.MessageStatus arrival_status = 9;
  if (has_arrival_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->arrival_status());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopDateTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StopDateTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopDateTime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopDateTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StopDateTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StopDateTime)
    MergeFrom(*source);
  }
}

void StopDateTime::MergeFrom(const StopDateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StopDateTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arrival_date_time()) {
      set_arrival_date_time(from.arrival_date_time());
    }
    if (from.has_departure_date_time()) {
      set_departure_date_time(from.departure_date_time());
    }
    if (from.has_base_arrival_date_time()) {
      set_base_arrival_date_time(from.base_arrival_date_time());
    }
    if (from.has_base_departure_date_time()) {
      set_base_departure_date_time(from.base_departure_date_time());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_properties()) {
      mutable_properties()->::pbnavitia::Properties::MergeFrom(from.properties());
    }
    if (from.has_data_freshness()) {
      set_data_freshness(from.data_freshness());
    }
    if (from.has_departure_status()) {
      set_departure_status(from.departure_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arrival_status()) {
      set_arrival_status(from.arrival_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopDateTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StopDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopDateTime::CopyFrom(const StopDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StopDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDateTime::IsInitialized() const {

  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  if (has_properties()) {
    if (!this->properties_->IsInitialized()) return false;
  }
  return true;
}

void StopDateTime::Swap(StopDateTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopDateTime::InternalSwap(StopDateTime* other) {
  std::swap(arrival_date_time_, other->arrival_date_time_);
  std::swap(departure_date_time_, other->departure_date_time_);
  std::swap(base_arrival_date_time_, other->base_arrival_date_time_);
  std::swap(base_departure_date_time_, other->base_departure_date_time_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(properties_, other->properties_);
  std::swap(data_freshness_, other->data_freshness_);
  std::swap(departure_status_, other->departure_status_);
  std::swap(arrival_status_, other->arrival_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopDateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopDateTime_descriptor_;
  metadata.reflection = StopDateTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopDateTime

// optional uint64 arrival_date_time = 1;
bool StopDateTime::has_arrival_date_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopDateTime::set_has_arrival_date_time() {
  _has_bits_[0] |= 0x00000001u;
}
void StopDateTime::clear_has_arrival_date_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopDateTime::clear_arrival_date_time() {
  arrival_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_arrival_date_time();
}
 ::google::protobuf::uint64 StopDateTime::arrival_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.arrival_date_time)
  return arrival_date_time_;
}
 void StopDateTime::set_arrival_date_time(::google::protobuf::uint64 value) {
  set_has_arrival_date_time();
  arrival_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.arrival_date_time)
}

// optional uint64 departure_date_time = 2;
bool StopDateTime::has_departure_date_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopDateTime::set_has_departure_date_time() {
  _has_bits_[0] |= 0x00000002u;
}
void StopDateTime::clear_has_departure_date_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopDateTime::clear_departure_date_time() {
  departure_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_departure_date_time();
}
 ::google::protobuf::uint64 StopDateTime::departure_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.departure_date_time)
  return departure_date_time_;
}
 void StopDateTime::set_departure_date_time(::google::protobuf::uint64 value) {
  set_has_departure_date_time();
  departure_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.departure_date_time)
}

// optional uint64 base_arrival_date_time = 5;
bool StopDateTime::has_base_arrival_date_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StopDateTime::set_has_base_arrival_date_time() {
  _has_bits_[0] |= 0x00000004u;
}
void StopDateTime::clear_has_base_arrival_date_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void StopDateTime::clear_base_arrival_date_time() {
  base_arrival_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_arrival_date_time();
}
 ::google::protobuf::uint64 StopDateTime::base_arrival_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.base_arrival_date_time)
  return base_arrival_date_time_;
}
 void StopDateTime::set_base_arrival_date_time(::google::protobuf::uint64 value) {
  set_has_base_arrival_date_time();
  base_arrival_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.base_arrival_date_time)
}

// optional uint64 base_departure_date_time = 6;
bool StopDateTime::has_base_departure_date_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StopDateTime::set_has_base_departure_date_time() {
  _has_bits_[0] |= 0x00000008u;
}
void StopDateTime::clear_has_base_departure_date_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void StopDateTime::clear_base_departure_date_time() {
  base_departure_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_departure_date_time();
}
 ::google::protobuf::uint64 StopDateTime::base_departure_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.base_departure_date_time)
  return base_departure_date_time_;
}
 void StopDateTime::set_base_departure_date_time(::google::protobuf::uint64 value) {
  set_has_base_departure_date_time();
  base_departure_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.base_departure_date_time)
}

// optional .pbnavitia.StopPoint stop_point = 3;
bool StopDateTime::has_stop_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StopDateTime::set_has_stop_point() {
  _has_bits_[0] |= 0x00000010u;
}
void StopDateTime::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000010u;
}
void StopDateTime::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& StopDateTime::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* StopDateTime::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopDateTime.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* StopDateTime::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopDateTime.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void StopDateTime::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopDateTime.stop_point)
}

// optional .pbnavitia.Properties properties = 4;
bool StopDateTime::has_properties() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StopDateTime::set_has_properties() {
  _has_bits_[0] |= 0x00000020u;
}
void StopDateTime::clear_has_properties() {
  _has_bits_[0] &= ~0x00000020u;
}
void StopDateTime::clear_properties() {
  if (properties_ != NULL) properties_->::pbnavitia::Properties::Clear();
  clear_has_properties();
}
const ::pbnavitia::Properties& StopDateTime::properties() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.properties)
  return properties_ != NULL ? *properties_ : *default_instance_->properties_;
}
::pbnavitia::Properties* StopDateTime::mutable_properties() {
  set_has_properties();
  if (properties_ == NULL) {
    properties_ = new ::pbnavitia::Properties;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopDateTime.properties)
  return properties_;
}
::pbnavitia::Properties* StopDateTime::release_properties() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopDateTime.properties)
  clear_has_properties();
  ::pbnavitia::Properties* temp = properties_;
  properties_ = NULL;
  return temp;
}
void StopDateTime::set_allocated_properties(::pbnavitia::Properties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    set_has_properties();
  } else {
    clear_has_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopDateTime.properties)
}

// optional .pbnavitia.RTLevel data_freshness = 7;
bool StopDateTime::has_data_freshness() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StopDateTime::set_has_data_freshness() {
  _has_bits_[0] |= 0x00000040u;
}
void StopDateTime::clear_has_data_freshness() {
  _has_bits_[0] &= ~0x00000040u;
}
void StopDateTime::clear_data_freshness() {
  data_freshness_ = 1;
  clear_has_data_freshness();
}
 ::pbnavitia::RTLevel StopDateTime::data_freshness() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.data_freshness)
  return static_cast< ::pbnavitia::RTLevel >(data_freshness_);
}
 void StopDateTime::set_data_freshness(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_data_freshness();
  data_freshness_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.data_freshness)
}

// optional .pbnavitia.MessageStatus departure_status = 8;
bool StopDateTime::has_departure_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StopDateTime::set_has_departure_status() {
  _has_bits_[0] |= 0x00000080u;
}
void StopDateTime::clear_has_departure_status() {
  _has_bits_[0] &= ~0x00000080u;
}
void StopDateTime::clear_departure_status() {
  departure_status_ = 0;
  clear_has_departure_status();
}
 ::pbnavitia::MessageStatus StopDateTime::departure_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.departure_status)
  return static_cast< ::pbnavitia::MessageStatus >(departure_status_);
}
 void StopDateTime::set_departure_status(::pbnavitia::MessageStatus value) {
  assert(::pbnavitia::MessageStatus_IsValid(value));
  set_has_departure_status();
  departure_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.departure_status)
}

// optional .pbnavitia.MessageStatus arrival_status = 9;
bool StopDateTime::has_arrival_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StopDateTime::set_has_arrival_status() {
  _has_bits_[0] |= 0x00000100u;
}
void StopDateTime::clear_has_arrival_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void StopDateTime::clear_arrival_status() {
  arrival_status_ = 0;
  clear_has_arrival_status();
}
 ::pbnavitia::MessageStatus StopDateTime::arrival_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopDateTime.arrival_status)
  return static_cast< ::pbnavitia::MessageStatus >(arrival_status_);
}
 void StopDateTime::set_arrival_status(::pbnavitia::MessageStatus value) {
  assert(::pbnavitia::MessageStatus_IsValid(value));
  set_has_arrival_status();
  arrival_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopDateTime.arrival_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopTime::kArrivalTimeFieldNumber;
const int StopTime::kUtcArrivalTimeFieldNumber;
const int StopTime::kDepartureTimeFieldNumber;
const int StopTime::kUtcDepartureTimeFieldNumber;
const int StopTime::kVehicleJourneyFieldNumber;
const int StopTime::kJourneyPatternPointFieldNumber;
const int StopTime::kPickupAllowedFieldNumber;
const int StopTime::kDropOffAllowedFieldNumber;
const int StopTime::kHeadsignFieldNumber;
const int StopTime::kStopPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopTime::StopTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StopTime)
}

void StopTime::InitAsDefaultInstance() {
  vehicle_journey_ = const_cast< ::pbnavitia::VehicleJourney*>(&::pbnavitia::VehicleJourney::default_instance());
  journey_pattern_point_ = const_cast< ::pbnavitia::JourneyPatternPoint*>(&::pbnavitia::JourneyPatternPoint::default_instance());
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
}

StopTime::StopTime(const StopTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StopTime)
}

void StopTime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  arrival_time_ = GOOGLE_ULONGLONG(0);
  utc_arrival_time_ = GOOGLE_ULONGLONG(0);
  departure_time_ = GOOGLE_ULONGLONG(0);
  utc_departure_time_ = GOOGLE_ULONGLONG(0);
  vehicle_journey_ = NULL;
  journey_pattern_point_ = NULL;
  pickup_allowed_ = false;
  drop_off_allowed_ = false;
  headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopTime::~StopTime() {
  // @@protoc_insertion_point(destructor:pbnavitia.StopTime)
  SharedDtor();
}

void StopTime::SharedDtor() {
  headsign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete vehicle_journey_;
    delete journey_pattern_point_;
    delete stop_point_;
  }
}

void StopTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopTime_descriptor_;
}

const StopTime& StopTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

StopTime* StopTime::default_instance_ = NULL;

StopTime* StopTime::New(::google::protobuf::Arena* arena) const {
  StopTime* n = new StopTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopTime::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StopTime)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StopTime, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StopTime*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(arrival_time_, utc_departure_time_);
    ZR_(pickup_allowed_, drop_off_allowed_);
    if (has_vehicle_journey()) {
      if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
    }
    if (has_journey_pattern_point()) {
      if (journey_pattern_point_ != NULL) journey_pattern_point_->::pbnavitia::JourneyPatternPoint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_headsign()) {
      headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StopTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 arrival_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arrival_time_)));
          set_has_arrival_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_departure_time;
        break;
      }

      // optional uint64 departure_time = 3;
      case 3: {
        if (tag == 24) {
         parse_departure_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &departure_time_)));
          set_has_departure_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vehicle_journey;
        break;
      }

      // optional .pbnavitia.VehicleJourney vehicle_journey = 4;
      case 4: {
        if (tag == 34) {
         parse_vehicle_journey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_journey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_journey_pattern_point;
        break;
      }

      // optional .pbnavitia.JourneyPatternPoint journey_pattern_point = 5;
      case 5: {
        if (tag == 42) {
         parse_journey_pattern_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_journey_pattern_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pickup_allowed;
        break;
      }

      // optional bool pickup_allowed = 6;
      case 6: {
        if (tag == 48) {
         parse_pickup_allowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_allowed_)));
          set_has_pickup_allowed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_drop_off_allowed;
        break;
      }

      // optional bool drop_off_allowed = 7;
      case 7: {
        if (tag == 56) {
         parse_drop_off_allowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_off_allowed_)));
          set_has_drop_off_allowed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_headsign;
        break;
      }

      // optional string headsign = 8;
      case 8: {
        if (tag == 66) {
         parse_headsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headsign().data(), this->headsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.StopTime.headsign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_stop_point;
        break;
      }

      // optional .pbnavitia.StopPoint stop_point = 9;
      case 9: {
        if (tag == 74) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_utc_arrival_time;
        break;
      }

      // optional uint64 utc_arrival_time = 10;
      case 10: {
        if (tag == 80) {
         parse_utc_arrival_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_arrival_time_)));
          set_has_utc_arrival_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_utc_departure_time;
        break;
      }

      // optional uint64 utc_departure_time = 11;
      case 11: {
        if (tag == 88) {
         parse_utc_departure_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_departure_time_)));
          set_has_utc_departure_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StopTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StopTime)
  return false;
#undef DO_
}

void StopTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StopTime)
  // optional uint64 arrival_time = 1;
  if (has_arrival_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->arrival_time(), output);
  }

  // optional uint64 departure_time = 3;
  if (has_departure_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->departure_time(), output);
  }

  // optional .pbnavitia.VehicleJourney vehicle_journey = 4;
  if (has_vehicle_journey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->vehicle_journey_, output);
  }

  // optional .pbnavitia.JourneyPatternPoint journey_pattern_point = 5;
  if (has_journey_pattern_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->journey_pattern_point_, output);
  }

  // optional bool pickup_allowed = 6;
  if (has_pickup_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pickup_allowed(), output);
  }

  // optional bool drop_off_allowed = 7;
  if (has_drop_off_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->drop_off_allowed(), output);
  }

  // optional string headsign = 8;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopTime.headsign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->headsign(), output);
  }

  // optional .pbnavitia.StopPoint stop_point = 9;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->stop_point_, output);
  }

  // optional uint64 utc_arrival_time = 10;
  if (has_utc_arrival_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->utc_arrival_time(), output);
  }

  // optional uint64 utc_departure_time = 11;
  if (has_utc_departure_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->utc_departure_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StopTime)
}

::google::protobuf::uint8* StopTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StopTime)
  // optional uint64 arrival_time = 1;
  if (has_arrival_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->arrival_time(), target);
  }

  // optional uint64 departure_time = 3;
  if (has_departure_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->departure_time(), target);
  }

  // optional .pbnavitia.VehicleJourney vehicle_journey = 4;
  if (has_vehicle_journey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->vehicle_journey_, false, target);
  }

  // optional .pbnavitia.JourneyPatternPoint journey_pattern_point = 5;
  if (has_journey_pattern_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->journey_pattern_point_, false, target);
  }

  // optional bool pickup_allowed = 6;
  if (has_pickup_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->pickup_allowed(), target);
  }

  // optional bool drop_off_allowed = 7;
  if (has_drop_off_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->drop_off_allowed(), target);
  }

  // optional string headsign = 8;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.StopTime.headsign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->headsign(), target);
  }

  // optional .pbnavitia.StopPoint stop_point = 9;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->stop_point_, false, target);
  }

  // optional uint64 utc_arrival_time = 10;
  if (has_utc_arrival_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->utc_arrival_time(), target);
  }

  // optional uint64 utc_departure_time = 11;
  if (has_utc_departure_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->utc_departure_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StopTime)
  return target;
}

int StopTime::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StopTime)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 arrival_time = 1;
    if (has_arrival_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arrival_time());
    }

    // optional uint64 utc_arrival_time = 10;
    if (has_utc_arrival_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc_arrival_time());
    }

    // optional uint64 departure_time = 3;
    if (has_departure_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->departure_time());
    }

    // optional uint64 utc_departure_time = 11;
    if (has_utc_departure_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc_departure_time());
    }

    // optional .pbnavitia.VehicleJourney vehicle_journey = 4;
    if (has_vehicle_journey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_journey_);
    }

    // optional .pbnavitia.JourneyPatternPoint journey_pattern_point = 5;
    if (has_journey_pattern_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->journey_pattern_point_);
    }

    // optional bool pickup_allowed = 6;
    if (has_pickup_allowed()) {
      total_size += 1 + 1;
    }

    // optional bool drop_off_allowed = 7;
    if (has_drop_off_allowed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string headsign = 8;
    if (has_headsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headsign());
    }

    // optional .pbnavitia.StopPoint stop_point = 9;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StopTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopTime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StopTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StopTime)
    MergeFrom(*source);
  }
}

void StopTime::MergeFrom(const StopTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StopTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arrival_time()) {
      set_arrival_time(from.arrival_time());
    }
    if (from.has_utc_arrival_time()) {
      set_utc_arrival_time(from.utc_arrival_time());
    }
    if (from.has_departure_time()) {
      set_departure_time(from.departure_time());
    }
    if (from.has_utc_departure_time()) {
      set_utc_departure_time(from.utc_departure_time());
    }
    if (from.has_vehicle_journey()) {
      mutable_vehicle_journey()->::pbnavitia::VehicleJourney::MergeFrom(from.vehicle_journey());
    }
    if (from.has_journey_pattern_point()) {
      mutable_journey_pattern_point()->::pbnavitia::JourneyPatternPoint::MergeFrom(from.journey_pattern_point());
    }
    if (from.has_pickup_allowed()) {
      set_pickup_allowed(from.pickup_allowed());
    }
    if (from.has_drop_off_allowed()) {
      set_drop_off_allowed(from.drop_off_allowed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headsign()) {
      set_has_headsign();
      headsign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headsign_);
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopTime::CopyFrom(const StopTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTime::IsInitialized() const {

  if (has_vehicle_journey()) {
    if (!this->vehicle_journey_->IsInitialized()) return false;
  }
  if (has_journey_pattern_point()) {
    if (!this->journey_pattern_point_->IsInitialized()) return false;
  }
  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  return true;
}

void StopTime::Swap(StopTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopTime::InternalSwap(StopTime* other) {
  std::swap(arrival_time_, other->arrival_time_);
  std::swap(utc_arrival_time_, other->utc_arrival_time_);
  std::swap(departure_time_, other->departure_time_);
  std::swap(utc_departure_time_, other->utc_departure_time_);
  std::swap(vehicle_journey_, other->vehicle_journey_);
  std::swap(journey_pattern_point_, other->journey_pattern_point_);
  std::swap(pickup_allowed_, other->pickup_allowed_);
  std::swap(drop_off_allowed_, other->drop_off_allowed_);
  headsign_.Swap(&other->headsign_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopTime_descriptor_;
  metadata.reflection = StopTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopTime

// optional uint64 arrival_time = 1;
bool StopTime::has_arrival_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopTime::set_has_arrival_time() {
  _has_bits_[0] |= 0x00000001u;
}
void StopTime::clear_has_arrival_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopTime::clear_arrival_time() {
  arrival_time_ = GOOGLE_ULONGLONG(0);
  clear_has_arrival_time();
}
 ::google::protobuf::uint64 StopTime::arrival_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.arrival_time)
  return arrival_time_;
}
 void StopTime::set_arrival_time(::google::protobuf::uint64 value) {
  set_has_arrival_time();
  arrival_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.arrival_time)
}

// optional uint64 utc_arrival_time = 10;
bool StopTime::has_utc_arrival_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopTime::set_has_utc_arrival_time() {
  _has_bits_[0] |= 0x00000002u;
}
void StopTime::clear_has_utc_arrival_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopTime::clear_utc_arrival_time() {
  utc_arrival_time_ = GOOGLE_ULONGLONG(0);
  clear_has_utc_arrival_time();
}
 ::google::protobuf::uint64 StopTime::utc_arrival_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.utc_arrival_time)
  return utc_arrival_time_;
}
 void StopTime::set_utc_arrival_time(::google::protobuf::uint64 value) {
  set_has_utc_arrival_time();
  utc_arrival_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.utc_arrival_time)
}

// optional uint64 departure_time = 3;
bool StopTime::has_departure_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StopTime::set_has_departure_time() {
  _has_bits_[0] |= 0x00000004u;
}
void StopTime::clear_has_departure_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void StopTime::clear_departure_time() {
  departure_time_ = GOOGLE_ULONGLONG(0);
  clear_has_departure_time();
}
 ::google::protobuf::uint64 StopTime::departure_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.departure_time)
  return departure_time_;
}
 void StopTime::set_departure_time(::google::protobuf::uint64 value) {
  set_has_departure_time();
  departure_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.departure_time)
}

// optional uint64 utc_departure_time = 11;
bool StopTime::has_utc_departure_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StopTime::set_has_utc_departure_time() {
  _has_bits_[0] |= 0x00000008u;
}
void StopTime::clear_has_utc_departure_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void StopTime::clear_utc_departure_time() {
  utc_departure_time_ = GOOGLE_ULONGLONG(0);
  clear_has_utc_departure_time();
}
 ::google::protobuf::uint64 StopTime::utc_departure_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.utc_departure_time)
  return utc_departure_time_;
}
 void StopTime::set_utc_departure_time(::google::protobuf::uint64 value) {
  set_has_utc_departure_time();
  utc_departure_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.utc_departure_time)
}

// optional .pbnavitia.VehicleJourney vehicle_journey = 4;
bool StopTime::has_vehicle_journey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StopTime::set_has_vehicle_journey() {
  _has_bits_[0] |= 0x00000010u;
}
void StopTime::clear_has_vehicle_journey() {
  _has_bits_[0] &= ~0x00000010u;
}
void StopTime::clear_vehicle_journey() {
  if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
  clear_has_vehicle_journey();
}
const ::pbnavitia::VehicleJourney& StopTime::vehicle_journey() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.vehicle_journey)
  return vehicle_journey_ != NULL ? *vehicle_journey_ : *default_instance_->vehicle_journey_;
}
::pbnavitia::VehicleJourney* StopTime::mutable_vehicle_journey() {
  set_has_vehicle_journey();
  if (vehicle_journey_ == NULL) {
    vehicle_journey_ = new ::pbnavitia::VehicleJourney;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTime.vehicle_journey)
  return vehicle_journey_;
}
::pbnavitia::VehicleJourney* StopTime::release_vehicle_journey() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTime.vehicle_journey)
  clear_has_vehicle_journey();
  ::pbnavitia::VehicleJourney* temp = vehicle_journey_;
  vehicle_journey_ = NULL;
  return temp;
}
void StopTime::set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey) {
  delete vehicle_journey_;
  vehicle_journey_ = vehicle_journey;
  if (vehicle_journey) {
    set_has_vehicle_journey();
  } else {
    clear_has_vehicle_journey();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTime.vehicle_journey)
}

// optional .pbnavitia.JourneyPatternPoint journey_pattern_point = 5;
bool StopTime::has_journey_pattern_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StopTime::set_has_journey_pattern_point() {
  _has_bits_[0] |= 0x00000020u;
}
void StopTime::clear_has_journey_pattern_point() {
  _has_bits_[0] &= ~0x00000020u;
}
void StopTime::clear_journey_pattern_point() {
  if (journey_pattern_point_ != NULL) journey_pattern_point_->::pbnavitia::JourneyPatternPoint::Clear();
  clear_has_journey_pattern_point();
}
const ::pbnavitia::JourneyPatternPoint& StopTime::journey_pattern_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.journey_pattern_point)
  return journey_pattern_point_ != NULL ? *journey_pattern_point_ : *default_instance_->journey_pattern_point_;
}
::pbnavitia::JourneyPatternPoint* StopTime::mutable_journey_pattern_point() {
  set_has_journey_pattern_point();
  if (journey_pattern_point_ == NULL) {
    journey_pattern_point_ = new ::pbnavitia::JourneyPatternPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTime.journey_pattern_point)
  return journey_pattern_point_;
}
::pbnavitia::JourneyPatternPoint* StopTime::release_journey_pattern_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTime.journey_pattern_point)
  clear_has_journey_pattern_point();
  ::pbnavitia::JourneyPatternPoint* temp = journey_pattern_point_;
  journey_pattern_point_ = NULL;
  return temp;
}
void StopTime::set_allocated_journey_pattern_point(::pbnavitia::JourneyPatternPoint* journey_pattern_point) {
  delete journey_pattern_point_;
  journey_pattern_point_ = journey_pattern_point;
  if (journey_pattern_point) {
    set_has_journey_pattern_point();
  } else {
    clear_has_journey_pattern_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTime.journey_pattern_point)
}

// optional bool pickup_allowed = 6;
bool StopTime::has_pickup_allowed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StopTime::set_has_pickup_allowed() {
  _has_bits_[0] |= 0x00000040u;
}
void StopTime::clear_has_pickup_allowed() {
  _has_bits_[0] &= ~0x00000040u;
}
void StopTime::clear_pickup_allowed() {
  pickup_allowed_ = false;
  clear_has_pickup_allowed();
}
 bool StopTime::pickup_allowed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.pickup_allowed)
  return pickup_allowed_;
}
 void StopTime::set_pickup_allowed(bool value) {
  set_has_pickup_allowed();
  pickup_allowed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.pickup_allowed)
}

// optional bool drop_off_allowed = 7;
bool StopTime::has_drop_off_allowed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StopTime::set_has_drop_off_allowed() {
  _has_bits_[0] |= 0x00000080u;
}
void StopTime::clear_has_drop_off_allowed() {
  _has_bits_[0] &= ~0x00000080u;
}
void StopTime::clear_drop_off_allowed() {
  drop_off_allowed_ = false;
  clear_has_drop_off_allowed();
}
 bool StopTime::drop_off_allowed() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.drop_off_allowed)
  return drop_off_allowed_;
}
 void StopTime::set_drop_off_allowed(bool value) {
  set_has_drop_off_allowed();
  drop_off_allowed_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.drop_off_allowed)
}

// optional string headsign = 8;
bool StopTime::has_headsign() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StopTime::set_has_headsign() {
  _has_bits_[0] |= 0x00000100u;
}
void StopTime::clear_has_headsign() {
  _has_bits_[0] &= ~0x00000100u;
}
void StopTime::clear_headsign() {
  headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headsign();
}
 const ::std::string& StopTime::headsign() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.headsign)
  return headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopTime::set_headsign(const ::std::string& value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.StopTime.headsign)
}
 void StopTime::set_headsign(const char* value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.StopTime.headsign)
}
 void StopTime::set_headsign(const char* value, size_t size) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.StopTime.headsign)
}
 ::std::string* StopTime::mutable_headsign() {
  set_has_headsign();
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTime.headsign)
  return headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StopTime::release_headsign() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTime.headsign)
  clear_has_headsign();
  return headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StopTime::set_allocated_headsign(::std::string* headsign) {
  if (headsign != NULL) {
    set_has_headsign();
  } else {
    clear_has_headsign();
  }
  headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headsign);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTime.headsign)
}

// optional .pbnavitia.StopPoint stop_point = 9;
bool StopTime::has_stop_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StopTime::set_has_stop_point() {
  _has_bits_[0] |= 0x00000200u;
}
void StopTime::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000200u;
}
void StopTime::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& StopTime::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopTime.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* StopTime::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopTime.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* StopTime::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopTime.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void StopTime::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopTime.stop_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleJourney::kNameFieldNumber;
const int VehicleJourney::kUriFieldNumber;
const int VehicleJourney::kStopTimesFieldNumber;
const int VehicleJourney::kRouteFieldNumber;
const int VehicleJourney::kJourneyPatternFieldNumber;
const int VehicleJourney::kTripFieldNumber;
const int VehicleJourney::kMessagesFieldNumber;
const int VehicleJourney::kImpactUrisFieldNumber;
const int VehicleJourney::kIsAdaptedFieldNumber;
const int VehicleJourney::kValidityPatternFieldNumber;
const int VehicleJourney::kAdaptedValidityPatternFieldNumber;
const int VehicleJourney::kOdtMessageFieldNumber;
const int VehicleJourney::kWheelchairAccessibleFieldNumber;
const int VehicleJourney::kBikeAcceptedFieldNumber;
const int VehicleJourney::kAirConditionedFieldNumber;
const int VehicleJourney::kVisualAnnouncementFieldNumber;
const int VehicleJourney::kAudibleAnnouncementFieldNumber;
const int VehicleJourney::kAppropriateEscortFieldNumber;
const int VehicleJourney::kAppropriateSignageFieldNumber;
const int VehicleJourney::kSchoolVehicleFieldNumber;
const int VehicleJourney::kCommentsFieldNumber;
const int VehicleJourney::kCodesFieldNumber;
const int VehicleJourney::kCalendarsFieldNumber;
const int VehicleJourney::kStartTimeFieldNumber;
const int VehicleJourney::kEndTimeFieldNumber;
const int VehicleJourney::kHeadwaySecsFieldNumber;
const int VehicleJourney::kHeadsignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleJourney::VehicleJourney()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.VehicleJourney)
}

void VehicleJourney::InitAsDefaultInstance() {
  route_ = const_cast< ::pbnavitia::Route*>(&::pbnavitia::Route::default_instance());
  journey_pattern_ = const_cast< ::pbnavitia::JourneyPattern*>(&::pbnavitia::JourneyPattern::default_instance());
  trip_ = const_cast< ::pbnavitia::Trip*>(&::pbnavitia::Trip::default_instance());
  validity_pattern_ = const_cast< ::pbnavitia::ValidityPattern*>(&::pbnavitia::ValidityPattern::default_instance());
  adapted_validity_pattern_ = const_cast< ::pbnavitia::ValidityPattern*>(&::pbnavitia::ValidityPattern::default_instance());
}

VehicleJourney::VehicleJourney(const VehicleJourney& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.VehicleJourney)
}

void VehicleJourney::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_ = NULL;
  journey_pattern_ = NULL;
  trip_ = NULL;
  is_adapted_ = false;
  validity_pattern_ = NULL;
  adapted_validity_pattern_ = NULL;
  odt_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wheelchair_accessible_ = false;
  bike_accepted_ = false;
  air_conditioned_ = false;
  visual_announcement_ = false;
  audible_announcement_ = false;
  appropriate_escort_ = false;
  appropriate_signage_ = false;
  school_vehicle_ = false;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  headway_secs_ = GOOGLE_ULONGLONG(0);
  headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleJourney::~VehicleJourney() {
  // @@protoc_insertion_point(destructor:pbnavitia.VehicleJourney)
  SharedDtor();
}

void VehicleJourney::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  odt_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headsign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete route_;
    delete journey_pattern_;
    delete trip_;
    delete validity_pattern_;
    delete adapted_validity_pattern_;
  }
}

void VehicleJourney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleJourney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleJourney_descriptor_;
}

const VehicleJourney& VehicleJourney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

VehicleJourney* VehicleJourney::default_instance_ = NULL;

VehicleJourney* VehicleJourney::New(::google::protobuf::Arena* arena) const {
  VehicleJourney* n = new VehicleJourney;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleJourney::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.VehicleJourney)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VehicleJourney, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VehicleJourney*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 59u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_route()) {
      if (route_ != NULL) route_->::pbnavitia::Route::Clear();
    }
    if (has_journey_pattern()) {
      if (journey_pattern_ != NULL) journey_pattern_->::pbnavitia::JourneyPattern::Clear();
    }
    if (has_trip()) {
      if (trip_ != NULL) trip_->::pbnavitia::Trip::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(is_adapted_, visual_announcement_);
    if (has_validity_pattern()) {
      if (validity_pattern_ != NULL) validity_pattern_->::pbnavitia::ValidityPattern::Clear();
    }
    if (has_adapted_validity_pattern()) {
      if (adapted_validity_pattern_ != NULL) adapted_validity_pattern_->::pbnavitia::ValidityPattern::Clear();
    }
    if (has_odt_message()) {
      odt_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 9371648u) {
    ZR_(audible_announcement_, appropriate_signage_);
    school_vehicle_ = false;
    start_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    ZR_(end_time_, headway_secs_);
    if (has_headsign()) {
      headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  stop_times_.Clear();
  messages_.Clear();
  impact_uris_.Clear();
  comments_.Clear();
  codes_.Clear();
  calendars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VehicleJourney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.VehicleJourney)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.VehicleJourney.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uri;
        break;
      }

      // optional string uri = 4;
      case 4: {
        if (tag == 34) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.VehicleJourney.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stop_times;
        break;
      }

      // repeated .pbnavitia.StopTime stop_times = 6;
      case 6: {
        if (tag == 50) {
         parse_stop_times:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_times()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_stop_times;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_route;
        break;
      }

      // optional .pbnavitia.Route route = 7;
      case 7: {
        if (tag == 58) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_journey_pattern;
        break;
      }

      // optional .pbnavitia.JourneyPattern journey_pattern = 8;
      case 8: {
        if (tag == 66) {
         parse_journey_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_journey_pattern()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_trip;
        break;
      }

      // optional .pbnavitia.Trip trip = 9;
      case 9: {
        if (tag == 74) {
         parse_trip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_messages;
        break;
      }

      // repeated .pbnavitia.Message messages = 10;
      case 10: {
        if (tag == 82) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_is_adapted;
        break;
      }

      // optional bool is_adapted = 11;
      case 11: {
        if (tag == 88) {
         parse_is_adapted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_adapted_)));
          set_has_is_adapted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_validity_pattern;
        break;
      }

      // optional .pbnavitia.ValidityPattern validity_pattern = 12;
      case 12: {
        if (tag == 98) {
         parse_validity_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validity_pattern()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_adapted_validity_pattern;
        break;
      }

      // optional .pbnavitia.ValidityPattern adapted_validity_pattern = 13;
      case 13: {
        if (tag == 106) {
         parse_adapted_validity_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adapted_validity_pattern()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_odt_message;
        break;
      }

      // optional string odt_message = 14;
      case 14: {
        if (tag == 114) {
         parse_odt_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odt_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->odt_message().data(), this->odt_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.VehicleJourney.odt_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_wheelchair_accessible;
        break;
      }

      // optional bool wheelchair_accessible = 16;
      case 16: {
        if (tag == 128) {
         parse_wheelchair_accessible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheelchair_accessible_)));
          set_has_wheelchair_accessible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_bike_accepted;
        break;
      }

      // optional bool bike_accepted = 17;
      case 17: {
        if (tag == 136) {
         parse_bike_accepted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bike_accepted_)));
          set_has_bike_accepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_air_conditioned;
        break;
      }

      // optional bool air_conditioned = 18;
      case 18: {
        if (tag == 144) {
         parse_air_conditioned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &air_conditioned_)));
          set_has_air_conditioned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_visual_announcement;
        break;
      }

      // optional bool visual_announcement = 19;
      case 19: {
        if (tag == 152) {
         parse_visual_announcement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visual_announcement_)));
          set_has_visual_announcement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_audible_announcement;
        break;
      }

      // optional bool audible_announcement = 20;
      case 20: {
        if (tag == 160) {
         parse_audible_announcement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audible_announcement_)));
          set_has_audible_announcement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_appropriate_escort;
        break;
      }

      // optional bool appropriate_escort = 21;
      case 21: {
        if (tag == 168) {
         parse_appropriate_escort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &appropriate_escort_)));
          set_has_appropriate_escort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_appropriate_signage;
        break;
      }

      // optional bool appropriate_signage = 22;
      case 22: {
        if (tag == 176) {
         parse_appropriate_signage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &appropriate_signage_)));
          set_has_appropriate_signage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_school_vehicle;
        break;
      }

      // optional bool school_vehicle = 23;
      case 23: {
        if (tag == 184) {
         parse_school_vehicle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &school_vehicle_)));
          set_has_school_vehicle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_codes;
        break;
      }

      // repeated .pbnavitia.Code codes = 25;
      case 25: {
        if (tag == 202) {
         parse_codes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_loop_codes;
        if (input->ExpectTag(210)) goto parse_loop_calendars;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Calendar calendars = 26;
      case 26: {
        if (tag == 210) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_calendars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_calendars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_loop_calendars;
        if (input->ExpectTag(218)) goto parse_loop_comments;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Comment comments = 27;
      case 27: {
        if (tag == 218) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_comments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_loop_comments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(224)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 28;
      case 28: {
        if (tag == 224) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 29;
      case 29: {
        if (tag == 232) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_headway_secs;
        break;
      }

      // optional uint64 headway_secs = 30;
      case 30: {
        if (tag == 240) {
         parse_headway_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &headway_secs_)));
          set_has_headway_secs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 32;
      case 32: {
        if (tag == 258) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.VehicleJourney.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_impact_uris;
        if (input->ExpectTag(266)) goto parse_headsign;
        break;
      }

      // optional string headsign = 33;
      case 33: {
        if (tag == 266) {
         parse_headsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headsign().data(), this->headsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.VehicleJourney.headsign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.VehicleJourney)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.VehicleJourney)
  return false;
#undef DO_
}

void VehicleJourney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.VehicleJourney)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // repeated .pbnavitia.StopTime stop_times = 6;
  for (unsigned int i = 0, n = this->stop_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stop_times(i), output);
  }

  // optional .pbnavitia.Route route = 7;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->route_, output);
  }

  // optional .pbnavitia.JourneyPattern journey_pattern = 8;
  if (has_journey_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->journey_pattern_, output);
  }

  // optional .pbnavitia.Trip trip = 9;
  if (has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->trip_, output);
  }

  // repeated .pbnavitia.Message messages = 10;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->messages(i), output);
  }

  // optional bool is_adapted = 11;
  if (has_is_adapted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_adapted(), output);
  }

  // optional .pbnavitia.ValidityPattern validity_pattern = 12;
  if (has_validity_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->validity_pattern_, output);
  }

  // optional .pbnavitia.ValidityPattern adapted_validity_pattern = 13;
  if (has_adapted_validity_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->adapted_validity_pattern_, output);
  }

  // optional string odt_message = 14;
  if (has_odt_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odt_message().data(), this->odt_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.odt_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->odt_message(), output);
  }

  // optional bool wheelchair_accessible = 16;
  if (has_wheelchair_accessible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->wheelchair_accessible(), output);
  }

  // optional bool bike_accepted = 17;
  if (has_bike_accepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->bike_accepted(), output);
  }

  // optional bool air_conditioned = 18;
  if (has_air_conditioned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->air_conditioned(), output);
  }

  // optional bool visual_announcement = 19;
  if (has_visual_announcement()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->visual_announcement(), output);
  }

  // optional bool audible_announcement = 20;
  if (has_audible_announcement()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->audible_announcement(), output);
  }

  // optional bool appropriate_escort = 21;
  if (has_appropriate_escort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->appropriate_escort(), output);
  }

  // optional bool appropriate_signage = 22;
  if (has_appropriate_signage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->appropriate_signage(), output);
  }

  // optional bool school_vehicle = 23;
  if (has_school_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->school_vehicle(), output);
  }

  // repeated .pbnavitia.Code codes = 25;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->codes(i), output);
  }

  // repeated .pbnavitia.Calendar calendars = 26;
  for (unsigned int i = 0, n = this->calendars_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->calendars(i), output);
  }

  // repeated .pbnavitia.Comment comments = 27;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->comments(i), output);
  }

  // optional uint64 start_time = 28;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->start_time(), output);
  }

  // optional uint64 end_time = 29;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->end_time(), output);
  }

  // optional uint64 headway_secs = 30;
  if (has_headway_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->headway_secs(), output);
  }

  // repeated string impact_uris = 32;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->impact_uris(i), output);
  }

  // optional string headsign = 33;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.headsign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->headsign(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.VehicleJourney)
}

::google::protobuf::uint8* VehicleJourney::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.VehicleJourney)
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // repeated .pbnavitia.StopTime stop_times = 6;
  for (unsigned int i = 0, n = this->stop_times_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->stop_times(i), false, target);
  }

  // optional .pbnavitia.Route route = 7;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->route_, false, target);
  }

  // optional .pbnavitia.JourneyPattern journey_pattern = 8;
  if (has_journey_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->journey_pattern_, false, target);
  }

  // optional .pbnavitia.Trip trip = 9;
  if (has_trip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->trip_, false, target);
  }

  // repeated .pbnavitia.Message messages = 10;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->messages(i), false, target);
  }

  // optional bool is_adapted = 11;
  if (has_is_adapted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_adapted(), target);
  }

  // optional .pbnavitia.ValidityPattern validity_pattern = 12;
  if (has_validity_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->validity_pattern_, false, target);
  }

  // optional .pbnavitia.ValidityPattern adapted_validity_pattern = 13;
  if (has_adapted_validity_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->adapted_validity_pattern_, false, target);
  }

  // optional string odt_message = 14;
  if (has_odt_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odt_message().data(), this->odt_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.odt_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->odt_message(), target);
  }

  // optional bool wheelchair_accessible = 16;
  if (has_wheelchair_accessible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->wheelchair_accessible(), target);
  }

  // optional bool bike_accepted = 17;
  if (has_bike_accepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->bike_accepted(), target);
  }

  // optional bool air_conditioned = 18;
  if (has_air_conditioned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->air_conditioned(), target);
  }

  // optional bool visual_announcement = 19;
  if (has_visual_announcement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->visual_announcement(), target);
  }

  // optional bool audible_announcement = 20;
  if (has_audible_announcement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->audible_announcement(), target);
  }

  // optional bool appropriate_escort = 21;
  if (has_appropriate_escort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->appropriate_escort(), target);
  }

  // optional bool appropriate_signage = 22;
  if (has_appropriate_signage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->appropriate_signage(), target);
  }

  // optional bool school_vehicle = 23;
  if (has_school_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->school_vehicle(), target);
  }

  // repeated .pbnavitia.Code codes = 25;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, this->codes(i), false, target);
  }

  // repeated .pbnavitia.Calendar calendars = 26;
  for (unsigned int i = 0, n = this->calendars_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->calendars(i), false, target);
  }

  // repeated .pbnavitia.Comment comments = 27;
  for (unsigned int i = 0, n = this->comments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->comments(i), false, target);
  }

  // optional uint64 start_time = 28;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->start_time(), target);
  }

  // optional uint64 end_time = 29;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->end_time(), target);
  }

  // optional uint64 headway_secs = 30;
  if (has_headway_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->headway_secs(), target);
  }

  // repeated string impact_uris = 32;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(32, this->impact_uris(i), target);
  }

  // optional string headsign = 33;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.VehicleJourney.headsign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->headsign(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.VehicleJourney)
  return target;
}

int VehicleJourney::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.VehicleJourney)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 59u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string uri = 4;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional .pbnavitia.Route route = 7;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->route_);
    }

    // optional .pbnavitia.JourneyPattern journey_pattern = 8;
    if (has_journey_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->journey_pattern_);
    }

    // optional .pbnavitia.Trip trip = 9;
    if (has_trip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trip_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_adapted = 11;
    if (has_is_adapted()) {
      total_size += 1 + 1;
    }

    // optional .pbnavitia.ValidityPattern validity_pattern = 12;
    if (has_validity_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->validity_pattern_);
    }

    // optional .pbnavitia.ValidityPattern adapted_validity_pattern = 13;
    if (has_adapted_validity_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->adapted_validity_pattern_);
    }

    // optional string odt_message = 14;
    if (has_odt_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odt_message());
    }

    // optional bool wheelchair_accessible = 16;
    if (has_wheelchair_accessible()) {
      total_size += 2 + 1;
    }

    // optional bool bike_accepted = 17;
    if (has_bike_accepted()) {
      total_size += 2 + 1;
    }

    // optional bool air_conditioned = 18;
    if (has_air_conditioned()) {
      total_size += 2 + 1;
    }

    // optional bool visual_announcement = 19;
    if (has_visual_announcement()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 9371648u) {
    // optional bool audible_announcement = 20;
    if (has_audible_announcement()) {
      total_size += 2 + 1;
    }

    // optional bool appropriate_escort = 21;
    if (has_appropriate_escort()) {
      total_size += 2 + 1;
    }

    // optional bool appropriate_signage = 22;
    if (has_appropriate_signage()) {
      total_size += 2 + 1;
    }

    // optional bool school_vehicle = 23;
    if (has_school_vehicle()) {
      total_size += 2 + 1;
    }

    // optional uint64 start_time = 28;
    if (has_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional uint64 end_time = 29;
    if (has_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 headway_secs = 30;
    if (has_headway_secs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->headway_secs());
    }

    // optional string headsign = 33;
    if (has_headsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headsign());
    }

  }
  // repeated .pbnavitia.StopTime stop_times = 6;
  total_size += 1 * this->stop_times_size();
  for (int i = 0; i < this->stop_times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_times(i));
  }

  // repeated .pbnavitia.Message messages = 10;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 32;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  // repeated .pbnavitia.Comment comments = 27;
  total_size += 2 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  // repeated .pbnavitia.Code codes = 25;
  total_size += 2 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }

  // repeated .pbnavitia.Calendar calendars = 26;
  total_size += 2 * this->calendars_size();
  for (int i = 0; i < this->calendars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calendars(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleJourney::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.VehicleJourney)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VehicleJourney* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleJourney>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.VehicleJourney)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.VehicleJourney)
    MergeFrom(*source);
  }
}

void VehicleJourney::MergeFrom(const VehicleJourney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.VehicleJourney)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stop_times_.MergeFrom(from.stop_times_);
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  comments_.MergeFrom(from.comments_);
  codes_.MergeFrom(from.codes_);
  calendars_.MergeFrom(from.calendars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_route()) {
      mutable_route()->::pbnavitia::Route::MergeFrom(from.route());
    }
    if (from.has_journey_pattern()) {
      mutable_journey_pattern()->::pbnavitia::JourneyPattern::MergeFrom(from.journey_pattern());
    }
    if (from.has_trip()) {
      mutable_trip()->::pbnavitia::Trip::MergeFrom(from.trip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_adapted()) {
      set_is_adapted(from.is_adapted());
    }
    if (from.has_validity_pattern()) {
      mutable_validity_pattern()->::pbnavitia::ValidityPattern::MergeFrom(from.validity_pattern());
    }
    if (from.has_adapted_validity_pattern()) {
      mutable_adapted_validity_pattern()->::pbnavitia::ValidityPattern::MergeFrom(from.adapted_validity_pattern());
    }
    if (from.has_odt_message()) {
      set_has_odt_message();
      odt_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.odt_message_);
    }
    if (from.has_wheelchair_accessible()) {
      set_wheelchair_accessible(from.wheelchair_accessible());
    }
    if (from.has_bike_accepted()) {
      set_bike_accepted(from.bike_accepted());
    }
    if (from.has_air_conditioned()) {
      set_air_conditioned(from.air_conditioned());
    }
    if (from.has_visual_announcement()) {
      set_visual_announcement(from.visual_announcement());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_audible_announcement()) {
      set_audible_announcement(from.audible_announcement());
    }
    if (from.has_appropriate_escort()) {
      set_appropriate_escort(from.appropriate_escort());
    }
    if (from.has_appropriate_signage()) {
      set_appropriate_signage(from.appropriate_signage());
    }
    if (from.has_school_vehicle()) {
      set_school_vehicle(from.school_vehicle());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_headway_secs()) {
      set_headway_secs(from.headway_secs());
    }
    if (from.has_headsign()) {
      set_has_headsign();
      headsign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headsign_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VehicleJourney::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.VehicleJourney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleJourney::CopyFrom(const VehicleJourney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.VehicleJourney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleJourney::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->stop_times())) return false;
  if (has_route()) {
    if (!this->route_->IsInitialized()) return false;
  }
  if (has_journey_pattern()) {
    if (!this->journey_pattern_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->codes())) return false;
  return true;
}

void VehicleJourney::Swap(VehicleJourney* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleJourney::InternalSwap(VehicleJourney* other) {
  name_.Swap(&other->name_);
  uri_.Swap(&other->uri_);
  stop_times_.UnsafeArenaSwap(&other->stop_times_);
  std::swap(route_, other->route_);
  std::swap(journey_pattern_, other->journey_pattern_);
  std::swap(trip_, other->trip_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  std::swap(is_adapted_, other->is_adapted_);
  std::swap(validity_pattern_, other->validity_pattern_);
  std::swap(adapted_validity_pattern_, other->adapted_validity_pattern_);
  odt_message_.Swap(&other->odt_message_);
  std::swap(wheelchair_accessible_, other->wheelchair_accessible_);
  std::swap(bike_accepted_, other->bike_accepted_);
  std::swap(air_conditioned_, other->air_conditioned_);
  std::swap(visual_announcement_, other->visual_announcement_);
  std::swap(audible_announcement_, other->audible_announcement_);
  std::swap(appropriate_escort_, other->appropriate_escort_);
  std::swap(appropriate_signage_, other->appropriate_signage_);
  std::swap(school_vehicle_, other->school_vehicle_);
  comments_.UnsafeArenaSwap(&other->comments_);
  codes_.UnsafeArenaSwap(&other->codes_);
  calendars_.UnsafeArenaSwap(&other->calendars_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(headway_secs_, other->headway_secs_);
  headsign_.Swap(&other->headsign_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleJourney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleJourney_descriptor_;
  metadata.reflection = VehicleJourney_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleJourney

// optional string name = 3;
bool VehicleJourney::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleJourney::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleJourney::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleJourney::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& VehicleJourney::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleJourney::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.name)
}
 void VehicleJourney::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.name)
}
 void VehicleJourney::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.name)
}
 ::std::string* VehicleJourney::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleJourney::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleJourney::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.name)
}

// optional string uri = 4;
bool VehicleJourney::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleJourney::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleJourney::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleJourney::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& VehicleJourney::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleJourney::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.uri)
}
 void VehicleJourney::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.uri)
}
 void VehicleJourney::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.uri)
}
 ::std::string* VehicleJourney::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleJourney::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleJourney::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.uri)
}

// repeated .pbnavitia.StopTime stop_times = 6;
int VehicleJourney::stop_times_size() const {
  return stop_times_.size();
}
void VehicleJourney::clear_stop_times() {
  stop_times_.Clear();
}
const ::pbnavitia::StopTime& VehicleJourney::stop_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.stop_times)
  return stop_times_.Get(index);
}
::pbnavitia::StopTime* VehicleJourney::mutable_stop_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.stop_times)
  return stop_times_.Mutable(index);
}
::pbnavitia::StopTime* VehicleJourney::add_stop_times() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.stop_times)
  return stop_times_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTime >*
VehicleJourney::mutable_stop_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.stop_times)
  return &stop_times_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopTime >&
VehicleJourney::stop_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.stop_times)
  return stop_times_;
}

// optional .pbnavitia.Route route = 7;
bool VehicleJourney::has_route() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleJourney::set_has_route() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleJourney::clear_has_route() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleJourney::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
const ::pbnavitia::Route& VehicleJourney::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
::pbnavitia::Route* VehicleJourney::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.route)
  return route_;
}
::pbnavitia::Route* VehicleJourney::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
void VehicleJourney::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.route)
}

// optional .pbnavitia.JourneyPattern journey_pattern = 8;
bool VehicleJourney::has_journey_pattern() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleJourney::set_has_journey_pattern() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleJourney::clear_has_journey_pattern() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleJourney::clear_journey_pattern() {
  if (journey_pattern_ != NULL) journey_pattern_->::pbnavitia::JourneyPattern::Clear();
  clear_has_journey_pattern();
}
const ::pbnavitia::JourneyPattern& VehicleJourney::journey_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.journey_pattern)
  return journey_pattern_ != NULL ? *journey_pattern_ : *default_instance_->journey_pattern_;
}
::pbnavitia::JourneyPattern* VehicleJourney::mutable_journey_pattern() {
  set_has_journey_pattern();
  if (journey_pattern_ == NULL) {
    journey_pattern_ = new ::pbnavitia::JourneyPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.journey_pattern)
  return journey_pattern_;
}
::pbnavitia::JourneyPattern* VehicleJourney::release_journey_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.journey_pattern)
  clear_has_journey_pattern();
  ::pbnavitia::JourneyPattern* temp = journey_pattern_;
  journey_pattern_ = NULL;
  return temp;
}
void VehicleJourney::set_allocated_journey_pattern(::pbnavitia::JourneyPattern* journey_pattern) {
  delete journey_pattern_;
  journey_pattern_ = journey_pattern;
  if (journey_pattern) {
    set_has_journey_pattern();
  } else {
    clear_has_journey_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.journey_pattern)
}

// optional .pbnavitia.Trip trip = 9;
bool VehicleJourney::has_trip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VehicleJourney::set_has_trip() {
  _has_bits_[0] |= 0x00000020u;
}
void VehicleJourney::clear_has_trip() {
  _has_bits_[0] &= ~0x00000020u;
}
void VehicleJourney::clear_trip() {
  if (trip_ != NULL) trip_->::pbnavitia::Trip::Clear();
  clear_has_trip();
}
const ::pbnavitia::Trip& VehicleJourney::trip() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.trip)
  return trip_ != NULL ? *trip_ : *default_instance_->trip_;
}
::pbnavitia::Trip* VehicleJourney::mutable_trip() {
  set_has_trip();
  if (trip_ == NULL) {
    trip_ = new ::pbnavitia::Trip;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.trip)
  return trip_;
}
::pbnavitia::Trip* VehicleJourney::release_trip() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.trip)
  clear_has_trip();
  ::pbnavitia::Trip* temp = trip_;
  trip_ = NULL;
  return temp;
}
void VehicleJourney::set_allocated_trip(::pbnavitia::Trip* trip) {
  delete trip_;
  trip_ = trip;
  if (trip) {
    set_has_trip();
  } else {
    clear_has_trip();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.trip)
}

// repeated .pbnavitia.Message messages = 10;
int VehicleJourney::messages_size() const {
  return messages_.size();
}
void VehicleJourney::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& VehicleJourney::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* VehicleJourney::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* VehicleJourney::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
VehicleJourney::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
VehicleJourney::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.messages)
  return messages_;
}

// repeated string impact_uris = 32;
int VehicleJourney::impact_uris_size() const {
  return impact_uris_.size();
}
void VehicleJourney::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& VehicleJourney::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* VehicleJourney::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.impact_uris)
  return impact_uris_.Mutable(index);
}
 void VehicleJourney::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void VehicleJourney::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.impact_uris)
}
 void VehicleJourney::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.impact_uris)
}
 ::std::string* VehicleJourney::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.VehicleJourney.impact_uris)
  return impact_uris_.Add();
}
 void VehicleJourney::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.impact_uris)
}
 void VehicleJourney::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.VehicleJourney.impact_uris)
}
 void VehicleJourney::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.VehicleJourney.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
VehicleJourney::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
VehicleJourney::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.impact_uris)
  return &impact_uris_;
}

// optional bool is_adapted = 11;
bool VehicleJourney::has_is_adapted() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VehicleJourney::set_has_is_adapted() {
  _has_bits_[0] |= 0x00000100u;
}
void VehicleJourney::clear_has_is_adapted() {
  _has_bits_[0] &= ~0x00000100u;
}
void VehicleJourney::clear_is_adapted() {
  is_adapted_ = false;
  clear_has_is_adapted();
}
 bool VehicleJourney::is_adapted() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.is_adapted)
  return is_adapted_;
}
 void VehicleJourney::set_is_adapted(bool value) {
  set_has_is_adapted();
  is_adapted_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.is_adapted)
}

// optional .pbnavitia.ValidityPattern validity_pattern = 12;
bool VehicleJourney::has_validity_pattern() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VehicleJourney::set_has_validity_pattern() {
  _has_bits_[0] |= 0x00000200u;
}
void VehicleJourney::clear_has_validity_pattern() {
  _has_bits_[0] &= ~0x00000200u;
}
void VehicleJourney::clear_validity_pattern() {
  if (validity_pattern_ != NULL) validity_pattern_->::pbnavitia::ValidityPattern::Clear();
  clear_has_validity_pattern();
}
const ::pbnavitia::ValidityPattern& VehicleJourney::validity_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.validity_pattern)
  return validity_pattern_ != NULL ? *validity_pattern_ : *default_instance_->validity_pattern_;
}
::pbnavitia::ValidityPattern* VehicleJourney::mutable_validity_pattern() {
  set_has_validity_pattern();
  if (validity_pattern_ == NULL) {
    validity_pattern_ = new ::pbnavitia::ValidityPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.validity_pattern)
  return validity_pattern_;
}
::pbnavitia::ValidityPattern* VehicleJourney::release_validity_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.validity_pattern)
  clear_has_validity_pattern();
  ::pbnavitia::ValidityPattern* temp = validity_pattern_;
  validity_pattern_ = NULL;
  return temp;
}
void VehicleJourney::set_allocated_validity_pattern(::pbnavitia::ValidityPattern* validity_pattern) {
  delete validity_pattern_;
  validity_pattern_ = validity_pattern;
  if (validity_pattern) {
    set_has_validity_pattern();
  } else {
    clear_has_validity_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.validity_pattern)
}

// optional .pbnavitia.ValidityPattern adapted_validity_pattern = 13;
bool VehicleJourney::has_adapted_validity_pattern() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VehicleJourney::set_has_adapted_validity_pattern() {
  _has_bits_[0] |= 0x00000400u;
}
void VehicleJourney::clear_has_adapted_validity_pattern() {
  _has_bits_[0] &= ~0x00000400u;
}
void VehicleJourney::clear_adapted_validity_pattern() {
  if (adapted_validity_pattern_ != NULL) adapted_validity_pattern_->::pbnavitia::ValidityPattern::Clear();
  clear_has_adapted_validity_pattern();
}
const ::pbnavitia::ValidityPattern& VehicleJourney::adapted_validity_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.adapted_validity_pattern)
  return adapted_validity_pattern_ != NULL ? *adapted_validity_pattern_ : *default_instance_->adapted_validity_pattern_;
}
::pbnavitia::ValidityPattern* VehicleJourney::mutable_adapted_validity_pattern() {
  set_has_adapted_validity_pattern();
  if (adapted_validity_pattern_ == NULL) {
    adapted_validity_pattern_ = new ::pbnavitia::ValidityPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.adapted_validity_pattern)
  return adapted_validity_pattern_;
}
::pbnavitia::ValidityPattern* VehicleJourney::release_adapted_validity_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.adapted_validity_pattern)
  clear_has_adapted_validity_pattern();
  ::pbnavitia::ValidityPattern* temp = adapted_validity_pattern_;
  adapted_validity_pattern_ = NULL;
  return temp;
}
void VehicleJourney::set_allocated_adapted_validity_pattern(::pbnavitia::ValidityPattern* adapted_validity_pattern) {
  delete adapted_validity_pattern_;
  adapted_validity_pattern_ = adapted_validity_pattern;
  if (adapted_validity_pattern) {
    set_has_adapted_validity_pattern();
  } else {
    clear_has_adapted_validity_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.adapted_validity_pattern)
}

// optional string odt_message = 14;
bool VehicleJourney::has_odt_message() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void VehicleJourney::set_has_odt_message() {
  _has_bits_[0] |= 0x00000800u;
}
void VehicleJourney::clear_has_odt_message() {
  _has_bits_[0] &= ~0x00000800u;
}
void VehicleJourney::clear_odt_message() {
  odt_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_odt_message();
}
 const ::std::string& VehicleJourney::odt_message() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.odt_message)
  return odt_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleJourney::set_odt_message(const ::std::string& value) {
  set_has_odt_message();
  odt_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.odt_message)
}
 void VehicleJourney::set_odt_message(const char* value) {
  set_has_odt_message();
  odt_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.odt_message)
}
 void VehicleJourney::set_odt_message(const char* value, size_t size) {
  set_has_odt_message();
  odt_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.odt_message)
}
 ::std::string* VehicleJourney::mutable_odt_message() {
  set_has_odt_message();
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.odt_message)
  return odt_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleJourney::release_odt_message() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.odt_message)
  clear_has_odt_message();
  return odt_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleJourney::set_allocated_odt_message(::std::string* odt_message) {
  if (odt_message != NULL) {
    set_has_odt_message();
  } else {
    clear_has_odt_message();
  }
  odt_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), odt_message);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.odt_message)
}

// optional bool wheelchair_accessible = 16;
bool VehicleJourney::has_wheelchair_accessible() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void VehicleJourney::set_has_wheelchair_accessible() {
  _has_bits_[0] |= 0x00001000u;
}
void VehicleJourney::clear_has_wheelchair_accessible() {
  _has_bits_[0] &= ~0x00001000u;
}
void VehicleJourney::clear_wheelchair_accessible() {
  wheelchair_accessible_ = false;
  clear_has_wheelchair_accessible();
}
 bool VehicleJourney::wheelchair_accessible() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.wheelchair_accessible)
  return wheelchair_accessible_;
}
 void VehicleJourney::set_wheelchair_accessible(bool value) {
  set_has_wheelchair_accessible();
  wheelchair_accessible_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.wheelchair_accessible)
}

// optional bool bike_accepted = 17;
bool VehicleJourney::has_bike_accepted() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void VehicleJourney::set_has_bike_accepted() {
  _has_bits_[0] |= 0x00002000u;
}
void VehicleJourney::clear_has_bike_accepted() {
  _has_bits_[0] &= ~0x00002000u;
}
void VehicleJourney::clear_bike_accepted() {
  bike_accepted_ = false;
  clear_has_bike_accepted();
}
 bool VehicleJourney::bike_accepted() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.bike_accepted)
  return bike_accepted_;
}
 void VehicleJourney::set_bike_accepted(bool value) {
  set_has_bike_accepted();
  bike_accepted_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.bike_accepted)
}

// optional bool air_conditioned = 18;
bool VehicleJourney::has_air_conditioned() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void VehicleJourney::set_has_air_conditioned() {
  _has_bits_[0] |= 0x00004000u;
}
void VehicleJourney::clear_has_air_conditioned() {
  _has_bits_[0] &= ~0x00004000u;
}
void VehicleJourney::clear_air_conditioned() {
  air_conditioned_ = false;
  clear_has_air_conditioned();
}
 bool VehicleJourney::air_conditioned() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.air_conditioned)
  return air_conditioned_;
}
 void VehicleJourney::set_air_conditioned(bool value) {
  set_has_air_conditioned();
  air_conditioned_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.air_conditioned)
}

// optional bool visual_announcement = 19;
bool VehicleJourney::has_visual_announcement() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void VehicleJourney::set_has_visual_announcement() {
  _has_bits_[0] |= 0x00008000u;
}
void VehicleJourney::clear_has_visual_announcement() {
  _has_bits_[0] &= ~0x00008000u;
}
void VehicleJourney::clear_visual_announcement() {
  visual_announcement_ = false;
  clear_has_visual_announcement();
}
 bool VehicleJourney::visual_announcement() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.visual_announcement)
  return visual_announcement_;
}
 void VehicleJourney::set_visual_announcement(bool value) {
  set_has_visual_announcement();
  visual_announcement_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.visual_announcement)
}

// optional bool audible_announcement = 20;
bool VehicleJourney::has_audible_announcement() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void VehicleJourney::set_has_audible_announcement() {
  _has_bits_[0] |= 0x00010000u;
}
void VehicleJourney::clear_has_audible_announcement() {
  _has_bits_[0] &= ~0x00010000u;
}
void VehicleJourney::clear_audible_announcement() {
  audible_announcement_ = false;
  clear_has_audible_announcement();
}
 bool VehicleJourney::audible_announcement() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.audible_announcement)
  return audible_announcement_;
}
 void VehicleJourney::set_audible_announcement(bool value) {
  set_has_audible_announcement();
  audible_announcement_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.audible_announcement)
}

// optional bool appropriate_escort = 21;
bool VehicleJourney::has_appropriate_escort() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void VehicleJourney::set_has_appropriate_escort() {
  _has_bits_[0] |= 0x00020000u;
}
void VehicleJourney::clear_has_appropriate_escort() {
  _has_bits_[0] &= ~0x00020000u;
}
void VehicleJourney::clear_appropriate_escort() {
  appropriate_escort_ = false;
  clear_has_appropriate_escort();
}
 bool VehicleJourney::appropriate_escort() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.appropriate_escort)
  return appropriate_escort_;
}
 void VehicleJourney::set_appropriate_escort(bool value) {
  set_has_appropriate_escort();
  appropriate_escort_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.appropriate_escort)
}

// optional bool appropriate_signage = 22;
bool VehicleJourney::has_appropriate_signage() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void VehicleJourney::set_has_appropriate_signage() {
  _has_bits_[0] |= 0x00040000u;
}
void VehicleJourney::clear_has_appropriate_signage() {
  _has_bits_[0] &= ~0x00040000u;
}
void VehicleJourney::clear_appropriate_signage() {
  appropriate_signage_ = false;
  clear_has_appropriate_signage();
}
 bool VehicleJourney::appropriate_signage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.appropriate_signage)
  return appropriate_signage_;
}
 void VehicleJourney::set_appropriate_signage(bool value) {
  set_has_appropriate_signage();
  appropriate_signage_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.appropriate_signage)
}

// optional bool school_vehicle = 23;
bool VehicleJourney::has_school_vehicle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void VehicleJourney::set_has_school_vehicle() {
  _has_bits_[0] |= 0x00080000u;
}
void VehicleJourney::clear_has_school_vehicle() {
  _has_bits_[0] &= ~0x00080000u;
}
void VehicleJourney::clear_school_vehicle() {
  school_vehicle_ = false;
  clear_has_school_vehicle();
}
 bool VehicleJourney::school_vehicle() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.school_vehicle)
  return school_vehicle_;
}
 void VehicleJourney::set_school_vehicle(bool value) {
  set_has_school_vehicle();
  school_vehicle_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.school_vehicle)
}

// repeated .pbnavitia.Comment comments = 27;
int VehicleJourney::comments_size() const {
  return comments_.size();
}
void VehicleJourney::clear_comments() {
  comments_.Clear();
}
const ::pbnavitia::Comment& VehicleJourney::comments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.comments)
  return comments_.Get(index);
}
::pbnavitia::Comment* VehicleJourney::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.comments)
  return comments_.Mutable(index);
}
::pbnavitia::Comment* VehicleJourney::add_comments() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.comments)
  return comments_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >*
VehicleJourney::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.comments)
  return &comments_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Comment >&
VehicleJourney::comments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.comments)
  return comments_;
}

// repeated .pbnavitia.Code codes = 25;
int VehicleJourney::codes_size() const {
  return codes_.size();
}
void VehicleJourney::clear_codes() {
  codes_.Clear();
}
const ::pbnavitia::Code& VehicleJourney::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.codes)
  return codes_.Get(index);
}
::pbnavitia::Code* VehicleJourney::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.codes)
  return codes_.Mutable(index);
}
::pbnavitia::Code* VehicleJourney::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.codes)
  return codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
VehicleJourney::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.codes)
  return &codes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
VehicleJourney::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.codes)
  return codes_;
}

// repeated .pbnavitia.Calendar calendars = 26;
int VehicleJourney::calendars_size() const {
  return calendars_.size();
}
void VehicleJourney::clear_calendars() {
  calendars_.Clear();
}
const ::pbnavitia::Calendar& VehicleJourney::calendars(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.calendars)
  return calendars_.Get(index);
}
::pbnavitia::Calendar* VehicleJourney::mutable_calendars(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.calendars)
  return calendars_.Mutable(index);
}
::pbnavitia::Calendar* VehicleJourney::add_calendars() {
  // @@protoc_insertion_point(field_add:pbnavitia.VehicleJourney.calendars)
  return calendars_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
VehicleJourney::mutable_calendars() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.VehicleJourney.calendars)
  return &calendars_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
VehicleJourney::calendars() const {
  // @@protoc_insertion_point(field_list:pbnavitia.VehicleJourney.calendars)
  return calendars_;
}

// optional uint64 start_time = 28;
bool VehicleJourney::has_start_time() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void VehicleJourney::set_has_start_time() {
  _has_bits_[0] |= 0x00800000u;
}
void VehicleJourney::clear_has_start_time() {
  _has_bits_[0] &= ~0x00800000u;
}
void VehicleJourney::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
 ::google::protobuf::uint64 VehicleJourney::start_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.start_time)
  return start_time_;
}
 void VehicleJourney::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.start_time)
}

// optional uint64 end_time = 29;
bool VehicleJourney::has_end_time() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void VehicleJourney::set_has_end_time() {
  _has_bits_[0] |= 0x01000000u;
}
void VehicleJourney::clear_has_end_time() {
  _has_bits_[0] &= ~0x01000000u;
}
void VehicleJourney::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
 ::google::protobuf::uint64 VehicleJourney::end_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.end_time)
  return end_time_;
}
 void VehicleJourney::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.end_time)
}

// optional uint64 headway_secs = 30;
bool VehicleJourney::has_headway_secs() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void VehicleJourney::set_has_headway_secs() {
  _has_bits_[0] |= 0x02000000u;
}
void VehicleJourney::clear_has_headway_secs() {
  _has_bits_[0] &= ~0x02000000u;
}
void VehicleJourney::clear_headway_secs() {
  headway_secs_ = GOOGLE_ULONGLONG(0);
  clear_has_headway_secs();
}
 ::google::protobuf::uint64 VehicleJourney::headway_secs() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.headway_secs)
  return headway_secs_;
}
 void VehicleJourney::set_headway_secs(::google::protobuf::uint64 value) {
  set_has_headway_secs();
  headway_secs_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.headway_secs)
}

// optional string headsign = 33;
bool VehicleJourney::has_headsign() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void VehicleJourney::set_has_headsign() {
  _has_bits_[0] |= 0x04000000u;
}
void VehicleJourney::clear_has_headsign() {
  _has_bits_[0] &= ~0x04000000u;
}
void VehicleJourney::clear_headsign() {
  headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headsign();
}
 const ::std::string& VehicleJourney::headsign() const {
  // @@protoc_insertion_point(field_get:pbnavitia.VehicleJourney.headsign)
  return headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleJourney::set_headsign(const ::std::string& value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.VehicleJourney.headsign)
}
 void VehicleJourney::set_headsign(const char* value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.VehicleJourney.headsign)
}
 void VehicleJourney::set_headsign(const char* value, size_t size) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.VehicleJourney.headsign)
}
 ::std::string* VehicleJourney::mutable_headsign() {
  set_has_headsign();
  // @@protoc_insertion_point(field_mutable:pbnavitia.VehicleJourney.headsign)
  return headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VehicleJourney::release_headsign() {
  // @@protoc_insertion_point(field_release:pbnavitia.VehicleJourney.headsign)
  clear_has_headsign();
  return headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VehicleJourney::set_allocated_headsign(::std::string* headsign) {
  if (headsign != NULL) {
    set_has_headsign();
  } else {
    clear_has_headsign();
  }
  headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headsign);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.VehicleJourney.headsign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trip::kUriFieldNumber;
const int Trip::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trip::Trip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Trip)
}

void Trip::InitAsDefaultInstance() {
}

Trip::Trip(const Trip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Trip)
}

void Trip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trip::~Trip() {
  // @@protoc_insertion_point(destructor:pbnavitia.Trip)
  SharedDtor();
}

void Trip::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Trip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trip_descriptor_;
}

const Trip& Trip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Trip* Trip::default_instance_ = NULL;

Trip* Trip::New(::google::protobuf::Arena* arena) const {
  Trip* n = new Trip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trip::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Trip)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Trip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Trip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Trip.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Trip.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Trip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Trip)
  return false;
#undef DO_
}

void Trip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Trip)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Trip.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Trip.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Trip)
}

::google::protobuf::uint8* Trip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Trip)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Trip.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Trip.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Trip)
  return target;
}

int Trip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Trip)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Trip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Trip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Trip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Trip)
    MergeFrom(*source);
  }
}

void Trip::MergeFrom(const Trip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Trip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Trip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Trip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trip::CopyFrom(const Trip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Trip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trip::IsInitialized() const {

  return true;
}

void Trip::Swap(Trip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trip::InternalSwap(Trip* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trip_descriptor_;
  metadata.reflection = Trip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trip

// optional string uri = 1;
bool Trip::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Trip::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Trip::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Trip::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Trip::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Trip.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Trip::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Trip.uri)
}
 void Trip::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Trip.uri)
}
 void Trip::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Trip.uri)
}
 ::std::string* Trip::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Trip.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Trip::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Trip.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Trip::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Trip.uri)
}

// optional string name = 2;
bool Trip::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Trip::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Trip::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Trip::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Trip::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Trip.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Trip::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Trip.name)
}
 void Trip::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Trip.name)
}
 void Trip::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Trip.name)
}
 ::std::string* Trip::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Trip.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Trip::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Trip.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Trip::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Trip.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JourneyPatternPoint::kUriFieldNumber;
const int JourneyPatternPoint::kOrderFieldNumber;
const int JourneyPatternPoint::kStopPointFieldNumber;
const int JourneyPatternPoint::kJourneyPatternFieldNumber;
const int JourneyPatternPoint::kMessagesFieldNumber;
const int JourneyPatternPoint::kImpactUrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JourneyPatternPoint::JourneyPatternPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.JourneyPatternPoint)
}

void JourneyPatternPoint::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
  journey_pattern_ = const_cast< ::pbnavitia::JourneyPattern*>(&::pbnavitia::JourneyPattern::default_instance());
}

JourneyPatternPoint::JourneyPatternPoint(const JourneyPatternPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.JourneyPatternPoint)
}

void JourneyPatternPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
  stop_point_ = NULL;
  journey_pattern_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JourneyPatternPoint::~JourneyPatternPoint() {
  // @@protoc_insertion_point(destructor:pbnavitia.JourneyPatternPoint)
  SharedDtor();
}

void JourneyPatternPoint::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stop_point_;
    delete journey_pattern_;
  }
}

void JourneyPatternPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JourneyPatternPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JourneyPatternPoint_descriptor_;
}

const JourneyPatternPoint& JourneyPatternPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

JourneyPatternPoint* JourneyPatternPoint::default_instance_ = NULL;

JourneyPatternPoint* JourneyPatternPoint::New(::google::protobuf::Arena* arena) const {
  JourneyPatternPoint* n = new JourneyPatternPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JourneyPatternPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.JourneyPatternPoint)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    order_ = 0;
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
    if (has_journey_pattern()) {
      if (journey_pattern_ != NULL) journey_pattern_->::pbnavitia::JourneyPattern::Clear();
    }
  }
  messages_.Clear();
  impact_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool JourneyPatternPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.JourneyPatternPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.JourneyPatternPoint.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order;
        break;
      }

      // optional int32 order = 4;
      case 4: {
        if (tag == 32) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stop_point;
        break;
      }

      // optional .pbnavitia.StopPoint stop_point = 5;
      case 5: {
        if (tag == 42) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_journey_pattern;
        break;
      }

      // optional .pbnavitia.JourneyPattern journey_pattern = 6;
      case 6: {
        if (tag == 50) {
         parse_journey_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_journey_pattern()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_messages;
        break;
      }

      // repeated .pbnavitia.Message messages = 7;
      case 7: {
        if (tag == 58) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_messages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(178)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 22;
      case 22: {
        if (tag == 178) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.JourneyPatternPoint.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_impact_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.JourneyPatternPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.JourneyPatternPoint)
  return false;
#undef DO_
}

void JourneyPatternPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.JourneyPatternPoint)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPatternPoint.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // optional int32 order = 4;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->order(), output);
  }

  // optional .pbnavitia.StopPoint stop_point = 5;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stop_point_, output);
  }

  // optional .pbnavitia.JourneyPattern journey_pattern = 6;
  if (has_journey_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->journey_pattern_, output);
  }

  // repeated .pbnavitia.Message messages = 7;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->messages(i), output);
  }

  // repeated string impact_uris = 22;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPatternPoint.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->impact_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.JourneyPatternPoint)
}

::google::protobuf::uint8* JourneyPatternPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.JourneyPatternPoint)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPatternPoint.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // optional int32 order = 4;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->order(), target);
  }

  // optional .pbnavitia.StopPoint stop_point = 5;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stop_point_, false, target);
  }

  // optional .pbnavitia.JourneyPattern journey_pattern = 6;
  if (has_journey_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->journey_pattern_, false, target);
  }

  // repeated .pbnavitia.Message messages = 7;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->messages(i), false, target);
  }

  // repeated string impact_uris = 22;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.JourneyPatternPoint.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->impact_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.JourneyPatternPoint)
  return target;
}

int JourneyPatternPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.JourneyPatternPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string uri = 3;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional int32 order = 4;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional .pbnavitia.StopPoint stop_point = 5;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional .pbnavitia.JourneyPattern journey_pattern = 6;
    if (has_journey_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->journey_pattern_);
    }

  }
  // repeated .pbnavitia.Message messages = 7;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 22;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JourneyPatternPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.JourneyPatternPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const JourneyPatternPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JourneyPatternPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.JourneyPatternPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.JourneyPatternPoint)
    MergeFrom(*source);
  }
}

void JourneyPatternPoint::MergeFrom(const JourneyPatternPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.JourneyPatternPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_journey_pattern()) {
      mutable_journey_pattern()->::pbnavitia::JourneyPattern::MergeFrom(from.journey_pattern());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void JourneyPatternPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.JourneyPatternPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JourneyPatternPoint::CopyFrom(const JourneyPatternPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.JourneyPatternPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JourneyPatternPoint::IsInitialized() const {

  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  if (has_journey_pattern()) {
    if (!this->journey_pattern_->IsInitialized()) return false;
  }
  return true;
}

void JourneyPatternPoint::Swap(JourneyPatternPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JourneyPatternPoint::InternalSwap(JourneyPatternPoint* other) {
  uri_.Swap(&other->uri_);
  std::swap(order_, other->order_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(journey_pattern_, other->journey_pattern_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JourneyPatternPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JourneyPatternPoint_descriptor_;
  metadata.reflection = JourneyPatternPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JourneyPatternPoint

// optional string uri = 3;
bool JourneyPatternPoint::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JourneyPatternPoint::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void JourneyPatternPoint::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void JourneyPatternPoint::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& JourneyPatternPoint::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JourneyPatternPoint::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPatternPoint.uri)
}
 void JourneyPatternPoint::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPatternPoint.uri)
}
 void JourneyPatternPoint::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPatternPoint.uri)
}
 ::std::string* JourneyPatternPoint::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JourneyPatternPoint::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPatternPoint.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JourneyPatternPoint::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPatternPoint.uri)
}

// optional int32 order = 4;
bool JourneyPatternPoint::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JourneyPatternPoint::set_has_order() {
  _has_bits_[0] |= 0x00000002u;
}
void JourneyPatternPoint::clear_has_order() {
  _has_bits_[0] &= ~0x00000002u;
}
void JourneyPatternPoint::clear_order() {
  order_ = 0;
  clear_has_order();
}
 ::google::protobuf::int32 JourneyPatternPoint::order() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.order)
  return order_;
}
 void JourneyPatternPoint::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPatternPoint.order)
}

// optional .pbnavitia.StopPoint stop_point = 5;
bool JourneyPatternPoint::has_stop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void JourneyPatternPoint::set_has_stop_point() {
  _has_bits_[0] |= 0x00000004u;
}
void JourneyPatternPoint::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void JourneyPatternPoint::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& JourneyPatternPoint::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* JourneyPatternPoint::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* JourneyPatternPoint::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPatternPoint.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void JourneyPatternPoint::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPatternPoint.stop_point)
}

// optional .pbnavitia.JourneyPattern journey_pattern = 6;
bool JourneyPatternPoint::has_journey_pattern() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void JourneyPatternPoint::set_has_journey_pattern() {
  _has_bits_[0] |= 0x00000008u;
}
void JourneyPatternPoint::clear_has_journey_pattern() {
  _has_bits_[0] &= ~0x00000008u;
}
void JourneyPatternPoint::clear_journey_pattern() {
  if (journey_pattern_ != NULL) journey_pattern_->::pbnavitia::JourneyPattern::Clear();
  clear_has_journey_pattern();
}
const ::pbnavitia::JourneyPattern& JourneyPatternPoint::journey_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.journey_pattern)
  return journey_pattern_ != NULL ? *journey_pattern_ : *default_instance_->journey_pattern_;
}
::pbnavitia::JourneyPattern* JourneyPatternPoint::mutable_journey_pattern() {
  set_has_journey_pattern();
  if (journey_pattern_ == NULL) {
    journey_pattern_ = new ::pbnavitia::JourneyPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.journey_pattern)
  return journey_pattern_;
}
::pbnavitia::JourneyPattern* JourneyPatternPoint::release_journey_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.JourneyPatternPoint.journey_pattern)
  clear_has_journey_pattern();
  ::pbnavitia::JourneyPattern* temp = journey_pattern_;
  journey_pattern_ = NULL;
  return temp;
}
void JourneyPatternPoint::set_allocated_journey_pattern(::pbnavitia::JourneyPattern* journey_pattern) {
  delete journey_pattern_;
  journey_pattern_ = journey_pattern;
  if (journey_pattern) {
    set_has_journey_pattern();
  } else {
    clear_has_journey_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.JourneyPatternPoint.journey_pattern)
}

// repeated .pbnavitia.Message messages = 7;
int JourneyPatternPoint::messages_size() const {
  return messages_.size();
}
void JourneyPatternPoint::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& JourneyPatternPoint::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* JourneyPatternPoint::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* JourneyPatternPoint::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPatternPoint.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
JourneyPatternPoint::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPatternPoint.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
JourneyPatternPoint::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPatternPoint.messages)
  return messages_;
}

// repeated string impact_uris = 22;
int JourneyPatternPoint::impact_uris_size() const {
  return impact_uris_.size();
}
void JourneyPatternPoint::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& JourneyPatternPoint::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.JourneyPatternPoint.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* JourneyPatternPoint::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.JourneyPatternPoint.impact_uris)
  return impact_uris_.Mutable(index);
}
 void JourneyPatternPoint::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.JourneyPatternPoint.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void JourneyPatternPoint::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.JourneyPatternPoint.impact_uris)
}
 void JourneyPatternPoint::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.JourneyPatternPoint.impact_uris)
}
 ::std::string* JourneyPatternPoint::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.JourneyPatternPoint.impact_uris)
  return impact_uris_.Add();
}
 void JourneyPatternPoint::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.JourneyPatternPoint.impact_uris)
}
 void JourneyPatternPoint::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.JourneyPatternPoint.impact_uris)
}
 void JourneyPatternPoint::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.JourneyPatternPoint.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
JourneyPatternPoint::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.JourneyPatternPoint.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
JourneyPatternPoint::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.JourneyPatternPoint.impact_uris)
  return &impact_uris_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Contributor::kUriFieldNumber;
const int Contributor::kNameFieldNumber;
const int Contributor::kWebsiteFieldNumber;
const int Contributor::kLicenseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Contributor::Contributor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Contributor)
}

void Contributor::InitAsDefaultInstance() {
}

Contributor::Contributor(const Contributor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Contributor)
}

void Contributor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  website_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contributor::~Contributor() {
  // @@protoc_insertion_point(destructor:pbnavitia.Contributor)
  SharedDtor();
}

void Contributor::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  website_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Contributor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contributor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contributor_descriptor_;
}

const Contributor& Contributor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Contributor* Contributor::default_instance_ = NULL;

Contributor* Contributor::New(::google::protobuf::Arena* arena) const {
  Contributor* n = new Contributor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Contributor::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Contributor)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_website()) {
      website_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_license()) {
      license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Contributor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Contributor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Contributor.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Contributor.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_website;
        break;
      }

      // optional string website = 3;
      case 3: {
        if (tag == 26) {
         parse_website:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_website()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->website().data(), this->website().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Contributor.website");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_license;
        break;
      }

      // optional string license = 4;
      case 4: {
        if (tag == 34) {
         parse_license:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license().data(), this->license().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Contributor.license");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Contributor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Contributor)
  return false;
#undef DO_
}

void Contributor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Contributor)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Contributor.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Contributor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string website = 3;
  if (has_website()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->website().data(), this->website().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Contributor.website");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->website(), output);
  }

  // optional string license = 4;
  if (has_license()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license().data(), this->license().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Contributor.license");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->license(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Contributor)
}

::google::protobuf::uint8* Contributor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Contributor)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Contributor.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Contributor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string website = 3;
  if (has_website()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->website().data(), this->website().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Contributor.website");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->website(), target);
  }

  // optional string license = 4;
  if (has_license()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license().data(), this->license().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Contributor.license");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->license(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Contributor)
  return target;
}

int Contributor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Contributor)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string website = 3;
    if (has_website()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->website());
    }

    // optional string license = 4;
    if (has_license()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contributor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Contributor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Contributor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Contributor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Contributor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Contributor)
    MergeFrom(*source);
  }
}

void Contributor::MergeFrom(const Contributor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Contributor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_website()) {
      set_has_website();
      website_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.website_);
    }
    if (from.has_license()) {
      set_has_license();
      license_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Contributor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Contributor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contributor::CopyFrom(const Contributor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Contributor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contributor::IsInitialized() const {

  return true;
}

void Contributor::Swap(Contributor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Contributor::InternalSwap(Contributor* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  website_.Swap(&other->website_);
  license_.Swap(&other->license_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Contributor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contributor_descriptor_;
  metadata.reflection = Contributor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Contributor

// optional string uri = 1;
bool Contributor::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Contributor::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Contributor::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Contributor::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Contributor::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Contributor.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contributor::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Contributor.uri)
}
 void Contributor::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Contributor.uri)
}
 void Contributor::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Contributor.uri)
}
 ::std::string* Contributor::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Contributor.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contributor::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Contributor.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contributor::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Contributor.uri)
}

// optional string name = 2;
bool Contributor::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Contributor::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Contributor::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Contributor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Contributor::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Contributor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contributor::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Contributor.name)
}
 void Contributor::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Contributor.name)
}
 void Contributor::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Contributor.name)
}
 ::std::string* Contributor::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Contributor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contributor::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Contributor.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contributor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Contributor.name)
}

// optional string website = 3;
bool Contributor::has_website() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Contributor::set_has_website() {
  _has_bits_[0] |= 0x00000004u;
}
void Contributor::clear_has_website() {
  _has_bits_[0] &= ~0x00000004u;
}
void Contributor::clear_website() {
  website_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_website();
}
 const ::std::string& Contributor::website() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Contributor.website)
  return website_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contributor::set_website(const ::std::string& value) {
  set_has_website();
  website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Contributor.website)
}
 void Contributor::set_website(const char* value) {
  set_has_website();
  website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Contributor.website)
}
 void Contributor::set_website(const char* value, size_t size) {
  set_has_website();
  website_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Contributor.website)
}
 ::std::string* Contributor::mutable_website() {
  set_has_website();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Contributor.website)
  return website_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contributor::release_website() {
  // @@protoc_insertion_point(field_release:pbnavitia.Contributor.website)
  clear_has_website();
  return website_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contributor::set_allocated_website(::std::string* website) {
  if (website != NULL) {
    set_has_website();
  } else {
    clear_has_website();
  }
  website_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), website);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Contributor.website)
}

// optional string license = 4;
bool Contributor::has_license() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Contributor::set_has_license() {
  _has_bits_[0] |= 0x00000008u;
}
void Contributor::clear_has_license() {
  _has_bits_[0] &= ~0x00000008u;
}
void Contributor::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_license();
}
 const ::std::string& Contributor::license() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Contributor.license)
  return license_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contributor::set_license(const ::std::string& value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Contributor.license)
}
 void Contributor::set_license(const char* value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Contributor.license)
}
 void Contributor::set_license(const char* value, size_t size) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Contributor.license)
}
 ::std::string* Contributor::mutable_license() {
  set_has_license();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Contributor.license)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Contributor::release_license() {
  // @@protoc_insertion_point(field_release:pbnavitia.Contributor.license)
  clear_has_license();
  return license_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Contributor::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    set_has_license();
  } else {
    clear_has_license();
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Contributor.license)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dataset::kUriFieldNumber;
const int Dataset::kContributorFieldNumber;
const int Dataset::kStartValidationDateFieldNumber;
const int Dataset::kEndValidationDateFieldNumber;
const int Dataset::kRealtimeLevelFieldNumber;
const int Dataset::kDescFieldNumber;
const int Dataset::kSystemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dataset::Dataset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Dataset)
}

void Dataset::InitAsDefaultInstance() {
  contributor_ = const_cast< ::pbnavitia::Contributor*>(&::pbnavitia::Contributor::default_instance());
}

Dataset::Dataset(const Dataset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Dataset)
}

void Dataset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contributor_ = NULL;
  start_validation_date_ = GOOGLE_ULONGLONG(0);
  end_validation_date_ = GOOGLE_ULONGLONG(0);
  realtime_level_ = 1;
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:pbnavitia.Dataset)
  SharedDtor();
}

void Dataset::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete contributor_;
  }
}

void Dataset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dataset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dataset_descriptor_;
}

const Dataset& Dataset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Dataset* Dataset::default_instance_ = NULL;

Dataset* Dataset::New(::google::protobuf::Arena* arena) const {
  Dataset* n = new Dataset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Dataset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Dataset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Dataset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(start_validation_date_, end_validation_date_);
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contributor()) {
      if (contributor_ != NULL) contributor_->::pbnavitia::Contributor::Clear();
    }
    realtime_level_ = 1;
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_system()) {
      system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Dataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Dataset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Dataset.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contributor;
        break;
      }

      // required .pbnavitia.Contributor contributor = 2;
      case 2: {
        if (tag == 18) {
         parse_contributor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contributor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_validation_date;
        break;
      }

      // required uint64 start_validation_date = 3;
      case 3: {
        if (tag == 24) {
         parse_start_validation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_validation_date_)));
          set_has_start_validation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_validation_date;
        break;
      }

      // required uint64 end_validation_date = 4;
      case 4: {
        if (tag == 32) {
         parse_end_validation_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_validation_date_)));
          set_has_end_validation_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_realtime_level;
        break;
      }

      // required .pbnavitia.RTLevel realtime_level = 5;
      case 5: {
        if (tag == 40) {
         parse_realtime_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::RTLevel_IsValid(value)) {
            set_realtime_level(static_cast< ::pbnavitia::RTLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // optional string desc = 6;
      case 6: {
        if (tag == 50) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Dataset.desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_system;
        break;
      }

      // optional string system = 7;
      case 7: {
        if (tag == 58) {
         parse_system:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system().data(), this->system().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Dataset.system");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Dataset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Dataset)
  return false;
#undef DO_
}

void Dataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Dataset)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Dataset.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // required .pbnavitia.Contributor contributor = 2;
  if (has_contributor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->contributor_, output);
  }

  // required uint64 start_validation_date = 3;
  if (has_start_validation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start_validation_date(), output);
  }

  // required uint64 end_validation_date = 4;
  if (has_end_validation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_validation_date(), output);
  }

  // required .pbnavitia.RTLevel realtime_level = 5;
  if (has_realtime_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->realtime_level(), output);
  }

  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Dataset.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->desc(), output);
  }

  // optional string system = 7;
  if (has_system()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system().data(), this->system().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Dataset.system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->system(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Dataset)
}

::google::protobuf::uint8* Dataset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Dataset)
  // required string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Dataset.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // required .pbnavitia.Contributor contributor = 2;
  if (has_contributor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->contributor_, false, target);
  }

  // required uint64 start_validation_date = 3;
  if (has_start_validation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start_validation_date(), target);
  }

  // required uint64 end_validation_date = 4;
  if (has_end_validation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_validation_date(), target);
  }

  // required .pbnavitia.RTLevel realtime_level = 5;
  if (has_realtime_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->realtime_level(), target);
  }

  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Dataset.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }

  // optional string system = 7;
  if (has_system()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system().data(), this->system().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Dataset.system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->system(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Dataset)
  return target;
}

int Dataset::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.Dataset)
  int total_size = 0;

  if (has_uri()) {
    // required string uri = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  if (has_contributor()) {
    // required .pbnavitia.Contributor contributor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contributor_);
  }

  if (has_start_validation_date()) {
    // required uint64 start_validation_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_validation_date());
  }

  if (has_end_validation_date()) {
    // required uint64 end_validation_date = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_validation_date());
  }

  if (has_realtime_level()) {
    // required .pbnavitia.RTLevel realtime_level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->realtime_level());
  }

  return total_size;
}
int Dataset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Dataset)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string uri = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());

    // required .pbnavitia.Contributor contributor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contributor_);

    // required uint64 start_validation_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_validation_date());

    // required uint64 end_validation_date = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_validation_date());

    // required .pbnavitia.RTLevel realtime_level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->realtime_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96u) {
    // optional string desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string system = 7;
    if (has_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dataset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Dataset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Dataset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Dataset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Dataset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Dataset)
    MergeFrom(*source);
  }
}

void Dataset::MergeFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Dataset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_contributor()) {
      mutable_contributor()->::pbnavitia::Contributor::MergeFrom(from.contributor());
    }
    if (from.has_start_validation_date()) {
      set_start_validation_date(from.start_validation_date());
    }
    if (from.has_end_validation_date()) {
      set_end_validation_date(from.end_validation_date());
    }
    if (from.has_realtime_level()) {
      set_realtime_level(from.realtime_level());
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (from.has_system()) {
      set_has_system();
      system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Dataset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataset::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Dataset::Swap(Dataset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dataset::InternalSwap(Dataset* other) {
  uri_.Swap(&other->uri_);
  std::swap(contributor_, other->contributor_);
  std::swap(start_validation_date_, other->start_validation_date_);
  std::swap(end_validation_date_, other->end_validation_date_);
  std::swap(realtime_level_, other->realtime_level_);
  desc_.Swap(&other->desc_);
  system_.Swap(&other->system_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dataset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dataset_descriptor_;
  metadata.reflection = Dataset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dataset

// required string uri = 1;
bool Dataset::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dataset::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Dataset::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dataset::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Dataset::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Dataset::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.uri)
}
 void Dataset::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Dataset.uri)
}
 void Dataset::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Dataset.uri)
}
 ::std::string* Dataset::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Dataset.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Dataset::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Dataset.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Dataset::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Dataset.uri)
}

// required .pbnavitia.Contributor contributor = 2;
bool Dataset::has_contributor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dataset::set_has_contributor() {
  _has_bits_[0] |= 0x00000002u;
}
void Dataset::clear_has_contributor() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dataset::clear_contributor() {
  if (contributor_ != NULL) contributor_->::pbnavitia::Contributor::Clear();
  clear_has_contributor();
}
const ::pbnavitia::Contributor& Dataset::contributor() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.contributor)
  return contributor_ != NULL ? *contributor_ : *default_instance_->contributor_;
}
::pbnavitia::Contributor* Dataset::mutable_contributor() {
  set_has_contributor();
  if (contributor_ == NULL) {
    contributor_ = new ::pbnavitia::Contributor;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Dataset.contributor)
  return contributor_;
}
::pbnavitia::Contributor* Dataset::release_contributor() {
  // @@protoc_insertion_point(field_release:pbnavitia.Dataset.contributor)
  clear_has_contributor();
  ::pbnavitia::Contributor* temp = contributor_;
  contributor_ = NULL;
  return temp;
}
void Dataset::set_allocated_contributor(::pbnavitia::Contributor* contributor) {
  delete contributor_;
  contributor_ = contributor;
  if (contributor) {
    set_has_contributor();
  } else {
    clear_has_contributor();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Dataset.contributor)
}

// required uint64 start_validation_date = 3;
bool Dataset::has_start_validation_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dataset::set_has_start_validation_date() {
  _has_bits_[0] |= 0x00000004u;
}
void Dataset::clear_has_start_validation_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dataset::clear_start_validation_date() {
  start_validation_date_ = GOOGLE_ULONGLONG(0);
  clear_has_start_validation_date();
}
 ::google::protobuf::uint64 Dataset::start_validation_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.start_validation_date)
  return start_validation_date_;
}
 void Dataset::set_start_validation_date(::google::protobuf::uint64 value) {
  set_has_start_validation_date();
  start_validation_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.start_validation_date)
}

// required uint64 end_validation_date = 4;
bool Dataset::has_end_validation_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dataset::set_has_end_validation_date() {
  _has_bits_[0] |= 0x00000008u;
}
void Dataset::clear_has_end_validation_date() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dataset::clear_end_validation_date() {
  end_validation_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_validation_date();
}
 ::google::protobuf::uint64 Dataset::end_validation_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.end_validation_date)
  return end_validation_date_;
}
 void Dataset::set_end_validation_date(::google::protobuf::uint64 value) {
  set_has_end_validation_date();
  end_validation_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.end_validation_date)
}

// required .pbnavitia.RTLevel realtime_level = 5;
bool Dataset::has_realtime_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dataset::set_has_realtime_level() {
  _has_bits_[0] |= 0x00000010u;
}
void Dataset::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dataset::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
 ::pbnavitia::RTLevel Dataset::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
 void Dataset::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.realtime_level)
}

// optional string desc = 6;
bool Dataset::has_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dataset::set_has_desc() {
  _has_bits_[0] |= 0x00000020u;
}
void Dataset::clear_has_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dataset::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
 const ::std::string& Dataset::desc() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Dataset::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.desc)
}
 void Dataset::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Dataset.desc)
}
 void Dataset::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Dataset.desc)
}
 ::std::string* Dataset::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Dataset.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Dataset::release_desc() {
  // @@protoc_insertion_point(field_release:pbnavitia.Dataset.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Dataset::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Dataset.desc)
}

// optional string system = 7;
bool Dataset::has_system() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dataset::set_has_system() {
  _has_bits_[0] |= 0x00000040u;
}
void Dataset::clear_has_system() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dataset::clear_system() {
  system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system();
}
 const ::std::string& Dataset::system() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Dataset.system)
  return system_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Dataset::set_system(const ::std::string& value) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Dataset.system)
}
 void Dataset::set_system(const char* value) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Dataset.system)
}
 void Dataset::set_system(const char* value, size_t size) {
  set_has_system();
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Dataset.system)
}
 ::std::string* Dataset::mutable_system() {
  set_has_system();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Dataset.system)
  return system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Dataset::release_system() {
  // @@protoc_insertion_point(field_release:pbnavitia.Dataset.system)
  clear_has_system();
  return system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Dataset::set_allocated_system(::std::string* system) {
  if (system != NULL) {
    set_has_system();
  } else {
    clear_has_system();
  }
  system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Dataset.system)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoiType::kUriFieldNumber;
const int PoiType::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoiType::PoiType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PoiType)
}

void PoiType::InitAsDefaultInstance() {
}

PoiType::PoiType(const PoiType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PoiType)
}

void PoiType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoiType::~PoiType() {
  // @@protoc_insertion_point(destructor:pbnavitia.PoiType)
  SharedDtor();
}

void PoiType::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PoiType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoiType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoiType_descriptor_;
}

const PoiType& PoiType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

PoiType* PoiType::default_instance_ = NULL;

PoiType* PoiType::New(::google::protobuf::Arena* arena) const {
  PoiType* n = new PoiType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoiType::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PoiType)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PoiType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PoiType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PoiType.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PoiType.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PoiType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PoiType)
  return false;
#undef DO_
}

void PoiType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PoiType)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PoiType.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PoiType.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PoiType)
}

::google::protobuf::uint8* PoiType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PoiType)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PoiType.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PoiType.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PoiType)
  return target;
}

int PoiType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PoiType)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoiType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PoiType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PoiType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PoiType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PoiType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PoiType)
    MergeFrom(*source);
  }
}

void PoiType::MergeFrom(const PoiType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PoiType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PoiType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PoiType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoiType::CopyFrom(const PoiType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PoiType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoiType::IsInitialized() const {

  return true;
}

void PoiType::Swap(PoiType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoiType::InternalSwap(PoiType* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoiType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoiType_descriptor_;
  metadata.reflection = PoiType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoiType

// optional string uri = 1;
bool PoiType::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PoiType::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void PoiType::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void PoiType::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& PoiType::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PoiType.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PoiType::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PoiType.uri)
}
 void PoiType::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PoiType.uri)
}
 void PoiType::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PoiType.uri)
}
 ::std::string* PoiType::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PoiType.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PoiType::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PoiType.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PoiType::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PoiType.uri)
}

// optional string name = 2;
bool PoiType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PoiType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void PoiType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void PoiType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PoiType::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PoiType.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PoiType::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PoiType.name)
}
 void PoiType::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PoiType.name)
}
 void PoiType::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PoiType.name)
}
 ::std::string* PoiType::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PoiType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PoiType::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PoiType.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PoiType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PoiType.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Poi::kUriFieldNumber;
const int Poi::kNameFieldNumber;
const int Poi::kCoordFieldNumber;
const int Poi::kPoiTypeFieldNumber;
const int Poi::kAdministrativeRegionsFieldNumber;
const int Poi::kAddressFieldNumber;
const int Poi::kPropertiesFieldNumber;
const int Poi::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Poi::Poi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Poi)
}

void Poi::InitAsDefaultInstance() {
  coord_ = const_cast< ::pbnavitia::GeographicalCoord*>(&::pbnavitia::GeographicalCoord::default_instance());
  poi_type_ = const_cast< ::pbnavitia::PoiType*>(&::pbnavitia::PoiType::default_instance());
  address_ = const_cast< ::pbnavitia::Address*>(&::pbnavitia::Address::default_instance());
}

Poi::Poi(const Poi& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Poi)
}

void Poi::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coord_ = NULL;
  poi_type_ = NULL;
  address_ = NULL;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Poi::~Poi() {
  // @@protoc_insertion_point(destructor:pbnavitia.Poi)
  SharedDtor();
}

void Poi::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete coord_;
    delete poi_type_;
    delete address_;
  }
}

void Poi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Poi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Poi_descriptor_;
}

const Poi& Poi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Poi* Poi::default_instance_ = NULL;

Poi* Poi::New(::google::protobuf::Arena* arena) const {
  Poi* n = new Poi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Poi::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Poi)
  if (_has_bits_[0 / 32] & 175u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_coord()) {
      if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
    }
    if (has_poi_type()) {
      if (poi_type_ != NULL) poi_type_->::pbnavitia::PoiType::Clear();
    }
    if (has_address()) {
      if (address_ != NULL) address_->::pbnavitia::Address::Clear();
    }
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  administrative_regions_.Clear();
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Poi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Poi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Poi.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Poi.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_coord;
        break;
      }

      // optional .pbnavitia.GeographicalCoord coord = 6;
      case 6: {
        if (tag == 50) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_poi_type;
        break;
      }

      // optional .pbnavitia.PoiType poi_type = 7;
      case 7: {
        if (tag == 58) {
         parse_poi_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poi_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_administrative_regions;
        break;
      }

      // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
      case 10: {
        if (tag == 82) {
         parse_administrative_regions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_administrative_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_administrative_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_administrative_regions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(90)) goto parse_address;
        break;
      }

      // optional .pbnavitia.Address address = 11;
      case 11: {
        if (tag == 90) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_properties;
        break;
      }

      // repeated .pbnavitia.Code properties = 12;
      case 12: {
        if (tag == 98) {
         parse_properties:
          DO_(input->IncrementRecursionDepth());
         parse_loop_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_properties;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_label;
        break;
      }

      // optional string label = 13;
      case 13: {
        if (tag == 106) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Poi.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Poi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Poi)
  return false;
#undef DO_
}

void Poi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Poi)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Poi.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Poi.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional .pbnavitia.GeographicalCoord coord = 6;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->coord_, output);
  }

  // optional .pbnavitia.PoiType poi_type = 7;
  if (has_poi_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->poi_type_, output);
  }

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  for (unsigned int i = 0, n = this->administrative_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->administrative_regions(i), output);
  }

  // optional .pbnavitia.Address address = 11;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->address_, output);
  }

  // repeated .pbnavitia.Code properties = 12;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->properties(i), output);
  }

  // optional string label = 13;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Poi.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Poi)
}

::google::protobuf::uint8* Poi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Poi)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Poi.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Poi.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional .pbnavitia.GeographicalCoord coord = 6;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->coord_, false, target);
  }

  // optional .pbnavitia.PoiType poi_type = 7;
  if (has_poi_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->poi_type_, false, target);
  }

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  for (unsigned int i = 0, n = this->administrative_regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->administrative_regions(i), false, target);
  }

  // optional .pbnavitia.Address address = 11;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->address_, false, target);
  }

  // repeated .pbnavitia.Code properties = 12;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->properties(i), false, target);
  }

  // optional string label = 13;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Poi.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Poi)
  return target;
}

int Poi::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Poi)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 175u) {
    // optional string uri = 3;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .pbnavitia.GeographicalCoord coord = 6;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->coord_);
    }

    // optional .pbnavitia.PoiType poi_type = 7;
    if (has_poi_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->poi_type_);
    }

    // optional .pbnavitia.Address address = 11;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->address_);
    }

    // optional string label = 13;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  total_size += 1 * this->administrative_regions_size();
  for (int i = 0; i < this->administrative_regions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->administrative_regions(i));
  }

  // repeated .pbnavitia.Code properties = 12;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Poi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Poi)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Poi* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Poi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Poi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Poi)
    MergeFrom(*source);
  }
}

void Poi::MergeFrom(const Poi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Poi)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  administrative_regions_.MergeFrom(from.administrative_regions_);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_coord()) {
      mutable_coord()->::pbnavitia::GeographicalCoord::MergeFrom(from.coord());
    }
    if (from.has_poi_type()) {
      mutable_poi_type()->::pbnavitia::PoiType::MergeFrom(from.poi_type());
    }
    if (from.has_address()) {
      mutable_address()->::pbnavitia::Address::MergeFrom(from.address());
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Poi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Poi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Poi::CopyFrom(const Poi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Poi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Poi::IsInitialized() const {

  if (has_coord()) {
    if (!this->coord_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->administrative_regions())) return false;
  if (has_address()) {
    if (!this->address_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  return true;
}

void Poi::Swap(Poi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Poi::InternalSwap(Poi* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  std::swap(coord_, other->coord_);
  std::swap(poi_type_, other->poi_type_);
  administrative_regions_.UnsafeArenaSwap(&other->administrative_regions_);
  std::swap(address_, other->address_);
  properties_.UnsafeArenaSwap(&other->properties_);
  label_.Swap(&other->label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Poi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Poi_descriptor_;
  metadata.reflection = Poi_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Poi

// optional string uri = 3;
bool Poi::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Poi::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Poi::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Poi::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Poi::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poi::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Poi.uri)
}
 void Poi::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Poi.uri)
}
 void Poi::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Poi.uri)
}
 ::std::string* Poi::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Poi::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poi::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.uri)
}

// optional string name = 4;
bool Poi::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Poi::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Poi::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Poi::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Poi::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poi::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Poi.name)
}
 void Poi::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Poi.name)
}
 void Poi::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Poi.name)
}
 ::std::string* Poi::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Poi::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poi::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.name)
}

// optional .pbnavitia.GeographicalCoord coord = 6;
bool Poi::has_coord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Poi::set_has_coord() {
  _has_bits_[0] |= 0x00000004u;
}
void Poi::clear_has_coord() {
  _has_bits_[0] &= ~0x00000004u;
}
void Poi::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
const ::pbnavitia::GeographicalCoord& Poi::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
::pbnavitia::GeographicalCoord* Poi::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.coord)
  return coord_;
}
::pbnavitia::GeographicalCoord* Poi::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
void Poi::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.coord)
}

// optional .pbnavitia.PoiType poi_type = 7;
bool Poi::has_poi_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Poi::set_has_poi_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Poi::clear_has_poi_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Poi::clear_poi_type() {
  if (poi_type_ != NULL) poi_type_->::pbnavitia::PoiType::Clear();
  clear_has_poi_type();
}
const ::pbnavitia::PoiType& Poi::poi_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.poi_type)
  return poi_type_ != NULL ? *poi_type_ : *default_instance_->poi_type_;
}
::pbnavitia::PoiType* Poi::mutable_poi_type() {
  set_has_poi_type();
  if (poi_type_ == NULL) {
    poi_type_ = new ::pbnavitia::PoiType;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.poi_type)
  return poi_type_;
}
::pbnavitia::PoiType* Poi::release_poi_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.poi_type)
  clear_has_poi_type();
  ::pbnavitia::PoiType* temp = poi_type_;
  poi_type_ = NULL;
  return temp;
}
void Poi::set_allocated_poi_type(::pbnavitia::PoiType* poi_type) {
  delete poi_type_;
  poi_type_ = poi_type;
  if (poi_type) {
    set_has_poi_type();
  } else {
    clear_has_poi_type();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.poi_type)
}

// repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
int Poi::administrative_regions_size() const {
  return administrative_regions_.size();
}
void Poi::clear_administrative_regions() {
  administrative_regions_.Clear();
}
const ::pbnavitia::AdministrativeRegion& Poi::administrative_regions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.administrative_regions)
  return administrative_regions_.Get(index);
}
::pbnavitia::AdministrativeRegion* Poi::mutable_administrative_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.administrative_regions)
  return administrative_regions_.Mutable(index);
}
::pbnavitia::AdministrativeRegion* Poi::add_administrative_regions() {
  // @@protoc_insertion_point(field_add:pbnavitia.Poi.administrative_regions)
  return administrative_regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
Poi::mutable_administrative_regions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Poi.administrative_regions)
  return &administrative_regions_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
Poi::administrative_regions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Poi.administrative_regions)
  return administrative_regions_;
}

// optional .pbnavitia.Address address = 11;
bool Poi::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Poi::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
void Poi::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
void Poi::clear_address() {
  if (address_ != NULL) address_->::pbnavitia::Address::Clear();
  clear_has_address();
}
const ::pbnavitia::Address& Poi::address() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
::pbnavitia::Address* Poi::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::pbnavitia::Address;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.address)
  return address_;
}
::pbnavitia::Address* Poi::release_address() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.address)
  clear_has_address();
  ::pbnavitia::Address* temp = address_;
  address_ = NULL;
  return temp;
}
void Poi::set_allocated_address(::pbnavitia::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.address)
}

// repeated .pbnavitia.Code properties = 12;
int Poi::properties_size() const {
  return properties_.size();
}
void Poi::clear_properties() {
  properties_.Clear();
}
const ::pbnavitia::Code& Poi::properties(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.properties)
  return properties_.Get(index);
}
::pbnavitia::Code* Poi::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.properties)
  return properties_.Mutable(index);
}
::pbnavitia::Code* Poi::add_properties() {
  // @@protoc_insertion_point(field_add:pbnavitia.Poi.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Poi::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Poi.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Poi::properties() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Poi.properties)
  return properties_;
}

// optional string label = 13;
bool Poi::has_label() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Poi::set_has_label() {
  _has_bits_[0] |= 0x00000080u;
}
void Poi::clear_has_label() {
  _has_bits_[0] &= ~0x00000080u;
}
void Poi::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& Poi::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Poi.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poi::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Poi.label)
}
 void Poi::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Poi.label)
}
 void Poi::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Poi.label)
}
 ::std::string* Poi::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Poi.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Poi::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.Poi.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poi::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Poi.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Network::kUriFieldNumber;
const int Network::kNameFieldNumber;
const int Network::kMessagesFieldNumber;
const int Network::kImpactUrisFieldNumber;
const int Network::kCodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Network::Network()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Network)
}

void Network::InitAsDefaultInstance() {
}

Network::Network(const Network& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Network)
}

void Network::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:pbnavitia.Network)
  SharedDtor();
}

void Network::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Network::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_descriptor_;
}

const Network& Network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Network* Network::default_instance_ = NULL;

Network* Network::New(::google::protobuf::Arena* arena) const {
  Network* n = new Network;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Network::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Network)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  messages_.Clear();
  impact_uris_.Clear();
  codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Network)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Network.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Network.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_messages;
        break;
      }

      // repeated .pbnavitia.Message messages = 6;
      case 6: {
        if (tag == 50) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_messages;
        if (input->ExpectTag(58)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Code codes = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(178)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 22;
      case 22: {
        if (tag == 178) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Network.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_impact_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Network)
  return false;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Network)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Network.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Network.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated .pbnavitia.Message messages = 6;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->messages(i), output);
  }

  // repeated .pbnavitia.Code codes = 7;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->codes(i), output);
  }

  // repeated string impact_uris = 22;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Network.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->impact_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Network)
}

::google::protobuf::uint8* Network::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Network)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Network.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Network.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated .pbnavitia.Message messages = 6;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->messages(i), false, target);
  }

  // repeated .pbnavitia.Code codes = 7;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->codes(i), false, target);
  }

  // repeated string impact_uris = 22;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Network.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(22, this->impact_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Network)
  return target;
}

int Network::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Network)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string uri = 3;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .pbnavitia.Message messages = 6;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 22;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  // repeated .pbnavitia.Code codes = 7;
  total_size += 1 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Network)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Network* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Network>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Network)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Network)
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Network)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  codes_.MergeFrom(from.codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Network::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->codes())) return false;
  return true;
}

void Network::Swap(Network* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Network::InternalSwap(Network* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  codes_.UnsafeArenaSwap(&other->codes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Network::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Network_descriptor_;
  metadata.reflection = Network_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Network

// optional string uri = 3;
bool Network::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Network::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Network::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Network::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Network::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Network.uri)
}
 void Network::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Network.uri)
}
 void Network::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Network.uri)
}
 ::std::string* Network::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Network::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Network.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Network.uri)
}

// optional string name = 4;
bool Network::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Network::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Network::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Network::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Network::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Network.name)
}
 void Network::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Network.name)
}
 void Network::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Network.name)
}
 ::std::string* Network::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Network::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Network.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Network::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Network.name)
}

// repeated .pbnavitia.Message messages = 6;
int Network::messages_size() const {
  return messages_.size();
}
void Network::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& Network::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* Network::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* Network::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.Network.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
Network::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Network.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
Network::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Network.messages)
  return messages_;
}

// repeated string impact_uris = 22;
int Network::impact_uris_size() const {
  return impact_uris_.size();
}
void Network::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& Network::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* Network::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.impact_uris)
  return impact_uris_.Mutable(index);
}
 void Network::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Network.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void Network::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Network.impact_uris)
}
 void Network::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Network.impact_uris)
}
 ::std::string* Network::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Network.impact_uris)
  return impact_uris_.Add();
}
 void Network::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Network.impact_uris)
}
 void Network::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Network.impact_uris)
}
 void Network::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Network.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Network::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Network.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Network::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Network.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Code codes = 7;
int Network::codes_size() const {
  return codes_.size();
}
void Network::clear_codes() {
  codes_.Clear();
}
const ::pbnavitia::Code& Network::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Network.codes)
  return codes_.Get(index);
}
::pbnavitia::Code* Network::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Network.codes)
  return codes_.Mutable(index);
}
::pbnavitia::Code* Network::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Network.codes)
  return codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Network::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Network.codes)
  return &codes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Network::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Network.codes)
  return codes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhysicalMode::kUriFieldNumber;
const int PhysicalMode::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhysicalMode::PhysicalMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PhysicalMode)
}

void PhysicalMode::InitAsDefaultInstance() {
}

PhysicalMode::PhysicalMode(const PhysicalMode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PhysicalMode)
}

void PhysicalMode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhysicalMode::~PhysicalMode() {
  // @@protoc_insertion_point(destructor:pbnavitia.PhysicalMode)
  SharedDtor();
}

void PhysicalMode::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PhysicalMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhysicalMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhysicalMode_descriptor_;
}

const PhysicalMode& PhysicalMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

PhysicalMode* PhysicalMode::default_instance_ = NULL;

PhysicalMode* PhysicalMode::New(::google::protobuf::Arena* arena) const {
  PhysicalMode* n = new PhysicalMode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhysicalMode::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PhysicalMode)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PhysicalMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PhysicalMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PhysicalMode.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PhysicalMode.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PhysicalMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PhysicalMode)
  return false;
#undef DO_
}

void PhysicalMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PhysicalMode)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PhysicalMode.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PhysicalMode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PhysicalMode)
}

::google::protobuf::uint8* PhysicalMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PhysicalMode)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PhysicalMode.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PhysicalMode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PhysicalMode)
  return target;
}

int PhysicalMode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PhysicalMode)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string uri = 3;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysicalMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PhysicalMode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PhysicalMode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PhysicalMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PhysicalMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PhysicalMode)
    MergeFrom(*source);
  }
}

void PhysicalMode::MergeFrom(const PhysicalMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PhysicalMode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PhysicalMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PhysicalMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalMode::CopyFrom(const PhysicalMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PhysicalMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalMode::IsInitialized() const {

  return true;
}

void PhysicalMode::Swap(PhysicalMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhysicalMode::InternalSwap(PhysicalMode* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhysicalMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhysicalMode_descriptor_;
  metadata.reflection = PhysicalMode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhysicalMode

// optional string uri = 3;
bool PhysicalMode::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PhysicalMode::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void PhysicalMode::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void PhysicalMode::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& PhysicalMode::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PhysicalMode.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PhysicalMode::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PhysicalMode.uri)
}
 void PhysicalMode::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PhysicalMode.uri)
}
 void PhysicalMode::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PhysicalMode.uri)
}
 ::std::string* PhysicalMode::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PhysicalMode.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PhysicalMode::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PhysicalMode.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PhysicalMode::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PhysicalMode.uri)
}

// optional string name = 4;
bool PhysicalMode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PhysicalMode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void PhysicalMode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void PhysicalMode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PhysicalMode::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PhysicalMode.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PhysicalMode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PhysicalMode.name)
}
 void PhysicalMode::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PhysicalMode.name)
}
 void PhysicalMode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PhysicalMode.name)
}
 ::std::string* PhysicalMode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PhysicalMode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PhysicalMode::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PhysicalMode.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PhysicalMode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PhysicalMode.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommercialMode::kUriFieldNumber;
const int CommercialMode::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommercialMode::CommercialMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.CommercialMode)
}

void CommercialMode::InitAsDefaultInstance() {
}

CommercialMode::CommercialMode(const CommercialMode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.CommercialMode)
}

void CommercialMode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommercialMode::~CommercialMode() {
  // @@protoc_insertion_point(destructor:pbnavitia.CommercialMode)
  SharedDtor();
}

void CommercialMode::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CommercialMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommercialMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommercialMode_descriptor_;
}

const CommercialMode& CommercialMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

CommercialMode* CommercialMode::default_instance_ = NULL;

CommercialMode* CommercialMode::New(::google::protobuf::Arena* arena) const {
  CommercialMode* n = new CommercialMode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommercialMode::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.CommercialMode)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommercialMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.CommercialMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CommercialMode.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CommercialMode.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.CommercialMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.CommercialMode)
  return false;
#undef DO_
}

void CommercialMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.CommercialMode)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CommercialMode.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CommercialMode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.CommercialMode)
}

::google::protobuf::uint8* CommercialMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.CommercialMode)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CommercialMode.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CommercialMode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.CommercialMode)
  return target;
}

int CommercialMode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.CommercialMode)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string uri = 3;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommercialMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.CommercialMode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommercialMode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommercialMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.CommercialMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.CommercialMode)
    MergeFrom(*source);
  }
}

void CommercialMode::MergeFrom(const CommercialMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.CommercialMode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommercialMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.CommercialMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommercialMode::CopyFrom(const CommercialMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.CommercialMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommercialMode::IsInitialized() const {

  return true;
}

void CommercialMode::Swap(CommercialMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommercialMode::InternalSwap(CommercialMode* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommercialMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommercialMode_descriptor_;
  metadata.reflection = CommercialMode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommercialMode

// optional string uri = 3;
bool CommercialMode::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommercialMode::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void CommercialMode::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommercialMode::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& CommercialMode::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CommercialMode.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommercialMode::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CommercialMode.uri)
}
 void CommercialMode::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CommercialMode.uri)
}
 void CommercialMode::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CommercialMode.uri)
}
 ::std::string* CommercialMode::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CommercialMode.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommercialMode::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.CommercialMode.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommercialMode::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CommercialMode.uri)
}

// optional string name = 4;
bool CommercialMode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommercialMode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CommercialMode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommercialMode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& CommercialMode::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CommercialMode.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommercialMode::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CommercialMode.name)
}
 void CommercialMode::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CommercialMode.name)
}
 void CommercialMode::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CommercialMode.name)
}
 ::std::string* CommercialMode::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CommercialMode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommercialMode::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.CommercialMode.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommercialMode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CommercialMode.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connection::kOriginFieldNumber;
const int Connection::kDestinationFieldNumber;
const int Connection::kDurationFieldNumber;
const int Connection::kDisplayDurationFieldNumber;
const int Connection::kMaxDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connection::Connection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Connection)
}

void Connection::InitAsDefaultInstance() {
  origin_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
  destination_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
}

Connection::Connection(const Connection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Connection)
}

void Connection::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  destination_ = NULL;
  duration_ = 0;
  display_duration_ = 0;
  max_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connection::~Connection() {
  // @@protoc_insertion_point(destructor:pbnavitia.Connection)
  SharedDtor();
}

void Connection::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete destination_;
  }
}

void Connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connection_descriptor_;
}

const Connection& Connection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Connection* Connection::default_instance_ = NULL;

Connection* Connection::New(::google::protobuf::Arena* arena) const {
  Connection* n = new Connection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connection::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Connection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Connection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Connection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(duration_, max_duration_);
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pbnavitia::StopPoint::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::pbnavitia::StopPoint::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Connection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.StopPoint origin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }

      // optional .pbnavitia.StopPoint destination = 2;
      case 2: {
        if (tag == 18) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // optional int32 duration = 3;
      case 3: {
        if (tag == 24) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_display_duration;
        break;
      }

      // optional int32 display_duration = 4;
      case 4: {
        if (tag == 32) {
         parse_display_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_duration_)));
          set_has_display_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_duration;
        break;
      }

      // optional int32 max_duration = 5;
      case 5: {
        if (tag == 40) {
         parse_max_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_duration_)));
          set_has_max_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Connection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Connection)
  return false;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Connection)
  // optional .pbnavitia.StopPoint origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .pbnavitia.StopPoint destination = 2;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->destination_, output);
  }

  // optional int32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // optional int32 display_duration = 4;
  if (has_display_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->display_duration(), output);
  }

  // optional int32 max_duration = 5;
  if (has_max_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Connection)
}

::google::protobuf::uint8* Connection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Connection)
  // optional .pbnavitia.StopPoint origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, false, target);
  }

  // optional .pbnavitia.StopPoint destination = 2;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->destination_, false, target);
  }

  // optional int32 duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration(), target);
  }

  // optional int32 display_duration = 4;
  if (has_display_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->display_duration(), target);
  }

  // optional int32 max_duration = 5;
  if (has_max_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Connection)
  return target;
}

int Connection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Connection)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .pbnavitia.StopPoint origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .pbnavitia.StopPoint destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

    // optional int32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 display_duration = 4;
    if (has_display_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_duration());
    }

    // optional int32 max_duration = 5;
    if (has_max_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_duration());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Connection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Connection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Connection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Connection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Connection)
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Connection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::pbnavitia::StopPoint::MergeFrom(from.origin());
    }
    if (from.has_destination()) {
      mutable_destination()->::pbnavitia::StopPoint::MergeFrom(from.destination());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_display_duration()) {
      set_display_duration(from.display_duration());
    }
    if (from.has_max_duration()) {
      set_max_duration(from.max_duration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Connection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {

  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  return true;
}

void Connection::Swap(Connection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connection::InternalSwap(Connection* other) {
  std::swap(origin_, other->origin_);
  std::swap(destination_, other->destination_);
  std::swap(duration_, other->duration_);
  std::swap(display_duration_, other->display_duration_);
  std::swap(max_duration_, other->max_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connection_descriptor_;
  metadata.reflection = Connection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Connection

// optional .pbnavitia.StopPoint origin = 1;
bool Connection::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Connection::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void Connection::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void Connection::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::StopPoint::Clear();
  clear_has_origin();
}
const ::pbnavitia::StopPoint& Connection::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::pbnavitia::StopPoint* Connection::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Connection.origin)
  return origin_;
}
::pbnavitia::StopPoint* Connection::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.Connection.origin)
  clear_has_origin();
  ::pbnavitia::StopPoint* temp = origin_;
  origin_ = NULL;
  return temp;
}
void Connection::set_allocated_origin(::pbnavitia::StopPoint* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Connection.origin)
}

// optional .pbnavitia.StopPoint destination = 2;
bool Connection::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Connection::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
void Connection::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
void Connection::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::StopPoint::Clear();
  clear_has_destination();
}
const ::pbnavitia::StopPoint& Connection::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::pbnavitia::StopPoint* Connection::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Connection.destination)
  return destination_;
}
::pbnavitia::StopPoint* Connection::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Connection.destination)
  clear_has_destination();
  ::pbnavitia::StopPoint* temp = destination_;
  destination_ = NULL;
  return temp;
}
void Connection::set_allocated_destination(::pbnavitia::StopPoint* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Connection.destination)
}

// optional int32 duration = 3;
bool Connection::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Connection::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void Connection::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void Connection::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
 ::google::protobuf::int32 Connection::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.duration)
  return duration_;
}
 void Connection::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Connection.duration)
}

// optional int32 display_duration = 4;
bool Connection::has_display_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Connection::set_has_display_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void Connection::clear_has_display_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void Connection::clear_display_duration() {
  display_duration_ = 0;
  clear_has_display_duration();
}
 ::google::protobuf::int32 Connection::display_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.display_duration)
  return display_duration_;
}
 void Connection::set_display_duration(::google::protobuf::int32 value) {
  set_has_display_duration();
  display_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Connection.display_duration)
}

// optional int32 max_duration = 5;
bool Connection::has_max_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Connection::set_has_max_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void Connection::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void Connection::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
 ::google::protobuf::int32 Connection::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Connection.max_duration)
  return max_duration_;
}
 void Connection::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Connection.max_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Company::kUriFieldNumber;
const int Company::kNameFieldNumber;
const int Company::kCodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Company::Company()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Company)
}

void Company::InitAsDefaultInstance() {
}

Company::Company(const Company& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Company)
}

void Company::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Company::~Company() {
  // @@protoc_insertion_point(destructor:pbnavitia.Company)
  SharedDtor();
}

void Company::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Company::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Company::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Company_descriptor_;
}

const Company& Company::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Company* Company::default_instance_ = NULL;

Company* Company::New(::google::protobuf::Arena* arena) const {
  Company* n = new Company;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Company::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Company)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Company::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Company)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Company.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Company.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_codes;
        break;
      }

      // repeated .pbnavitia.Code codes = 8;
      case 8: {
        if (tag == 66) {
         parse_codes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_codes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_codes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Company)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Company)
  return false;
#undef DO_
}

void Company::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Company)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Company.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Company.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated .pbnavitia.Code codes = 8;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->codes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Company)
}

::google::protobuf::uint8* Company::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Company)
  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Company.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Company.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated .pbnavitia.Code codes = 8;
  for (unsigned int i = 0, n = this->codes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->codes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Company)
  return target;
}

int Company::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Company)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string uri = 3;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .pbnavitia.Code codes = 8;
  total_size += 1 * this->codes_size();
  for (int i = 0; i < this->codes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Company::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Company)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Company* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Company>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Company)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Company)
    MergeFrom(*source);
  }
}

void Company::MergeFrom(const Company& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Company)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  codes_.MergeFrom(from.codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Company::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Company::CopyFrom(const Company& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Company::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->codes())) return false;
  return true;
}

void Company::Swap(Company* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Company::InternalSwap(Company* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  codes_.UnsafeArenaSwap(&other->codes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Company::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Company_descriptor_;
  metadata.reflection = Company_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Company

// optional string uri = 3;
bool Company::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Company::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Company::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Company::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Company::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Company.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Company::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Company.uri)
}
 void Company::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Company.uri)
}
 void Company::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Company.uri)
}
 ::std::string* Company::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Company.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Company::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Company.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Company::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Company.uri)
}

// optional string name = 4;
bool Company::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Company::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Company::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Company::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Company::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Company.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Company::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Company.name)
}
 void Company::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Company.name)
}
 void Company::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Company.name)
}
 ::std::string* Company::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Company.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Company::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Company.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Company::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Company.name)
}

// repeated .pbnavitia.Code codes = 8;
int Company::codes_size() const {
  return codes_.size();
}
void Company::clear_codes() {
  codes_.Clear();
}
const ::pbnavitia::Code& Company::codes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Company.codes)
  return codes_.Get(index);
}
::pbnavitia::Code* Company::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Company.codes)
  return codes_.Mutable(index);
}
::pbnavitia::Code* Company::add_codes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Company.codes)
  return codes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >*
Company::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Company.codes)
  return &codes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Code >&
Company::codes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Company.codes)
  return codes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kUriFieldNumber;
const int Address::kNameFieldNumber;
const int Address::kCoordFieldNumber;
const int Address::kAdministrativeRegionsFieldNumber;
const int Address::kHouseNumberFieldNumber;
const int Address::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Address)
}

void Address::InitAsDefaultInstance() {
  coord_ = const_cast< ::pbnavitia::GeographicalCoord*>(&::pbnavitia::GeographicalCoord::default_instance());
}

Address::Address(const Address& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Address)
}

void Address::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coord_ = NULL;
  house_number_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:pbnavitia.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete coord_;
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New(::google::protobuf::Arena* arena) const {
  Address* n = new Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Address)
  if (_has_bits_[0 / 32] & 55u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_coord()) {
      if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
    }
    house_number_ = 0;
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  administrative_regions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 house_number = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &house_number_)));
          set_has_house_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uri;
        break;
      }

      // optional string uri = 3;
      case 3: {
        if (tag == 26) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Address.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Address.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_coord;
        break;
      }

      // optional .pbnavitia.GeographicalCoord coord = 6;
      case 6: {
        if (tag == 50) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_administrative_regions;
        break;
      }

      // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
      case 10: {
        if (tag == 82) {
         parse_administrative_regions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_administrative_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_administrative_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_administrative_regions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(130)) goto parse_label;
        break;
      }

      // optional string label = 16;
      case 16: {
        if (tag == 130) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Address.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Address)
  // optional int32 house_number = 2;
  if (has_house_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->house_number(), output);
  }

  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Address.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uri(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Address.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional .pbnavitia.GeographicalCoord coord = 6;
  if (has_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->coord_, output);
  }

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  for (unsigned int i = 0, n = this->administrative_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->administrative_regions(i), output);
  }

  // optional string label = 16;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Address.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Address)
  // optional int32 house_number = 2;
  if (has_house_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->house_number(), target);
  }

  // optional string uri = 3;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Address.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uri(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Address.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional .pbnavitia.GeographicalCoord coord = 6;
  if (has_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->coord_, false, target);
  }

  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  for (unsigned int i = 0, n = this->administrative_regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->administrative_regions(i), false, target);
  }

  // optional string label = 16;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Address.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Address)
  return target;
}

int Address::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Address)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 55u) {
    // optional string uri = 3;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .pbnavitia.GeographicalCoord coord = 6;
    if (has_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->coord_);
    }

    // optional int32 house_number = 2;
    if (has_house_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->house_number());
    }

    // optional string label = 16;
    if (has_label()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  // repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
  total_size += 1 * this->administrative_regions_size();
  for (int i = 0; i < this->administrative_regions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->administrative_regions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Address* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  administrative_regions_.MergeFrom(from.administrative_regions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_coord()) {
      mutable_coord()->::pbnavitia::GeographicalCoord::MergeFrom(from.coord());
    }
    if (from.has_house_number()) {
      set_house_number(from.house_number());
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {

  if (has_coord()) {
    if (!this->coord_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->administrative_regions())) return false;
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  std::swap(coord_, other->coord_);
  administrative_regions_.UnsafeArenaSwap(&other->administrative_regions_);
  std::swap(house_number_, other->house_number_);
  label_.Swap(&other->label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// optional string uri = 3;
bool Address::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Address::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Address::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Address::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Address::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Address::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Address.uri)
}
 void Address::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Address.uri)
}
 void Address::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Address.uri)
}
 ::std::string* Address::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Address::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Address.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Address::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Address.uri)
}

// optional string name = 4;
bool Address::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Address::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Address::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Address::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Address::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Address::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Address.name)
}
 void Address::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Address.name)
}
 void Address::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Address.name)
}
 ::std::string* Address::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Address::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Address.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Address::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Address.name)
}

// optional .pbnavitia.GeographicalCoord coord = 6;
bool Address::has_coord() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Address::set_has_coord() {
  _has_bits_[0] |= 0x00000004u;
}
void Address::clear_has_coord() {
  _has_bits_[0] &= ~0x00000004u;
}
void Address::clear_coord() {
  if (coord_ != NULL) coord_->::pbnavitia::GeographicalCoord::Clear();
  clear_has_coord();
}
const ::pbnavitia::GeographicalCoord& Address::coord() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.coord)
  return coord_ != NULL ? *coord_ : *default_instance_->coord_;
}
::pbnavitia::GeographicalCoord* Address::mutable_coord() {
  set_has_coord();
  if (coord_ == NULL) {
    coord_ = new ::pbnavitia::GeographicalCoord;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.coord)
  return coord_;
}
::pbnavitia::GeographicalCoord* Address::release_coord() {
  // @@protoc_insertion_point(field_release:pbnavitia.Address.coord)
  clear_has_coord();
  ::pbnavitia::GeographicalCoord* temp = coord_;
  coord_ = NULL;
  return temp;
}
void Address::set_allocated_coord(::pbnavitia::GeographicalCoord* coord) {
  delete coord_;
  coord_ = coord;
  if (coord) {
    set_has_coord();
  } else {
    clear_has_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Address.coord)
}

// repeated .pbnavitia.AdministrativeRegion administrative_regions = 10;
int Address::administrative_regions_size() const {
  return administrative_regions_.size();
}
void Address::clear_administrative_regions() {
  administrative_regions_.Clear();
}
const ::pbnavitia::AdministrativeRegion& Address::administrative_regions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.administrative_regions)
  return administrative_regions_.Get(index);
}
::pbnavitia::AdministrativeRegion* Address::mutable_administrative_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.administrative_regions)
  return administrative_regions_.Mutable(index);
}
::pbnavitia::AdministrativeRegion* Address::add_administrative_regions() {
  // @@protoc_insertion_point(field_add:pbnavitia.Address.administrative_regions)
  return administrative_regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >*
Address::mutable_administrative_regions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Address.administrative_regions)
  return &administrative_regions_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::AdministrativeRegion >&
Address::administrative_regions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Address.administrative_regions)
  return administrative_regions_;
}

// optional int32 house_number = 2;
bool Address::has_house_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Address::set_has_house_number() {
  _has_bits_[0] |= 0x00000010u;
}
void Address::clear_has_house_number() {
  _has_bits_[0] &= ~0x00000010u;
}
void Address::clear_house_number() {
  house_number_ = 0;
  clear_has_house_number();
}
 ::google::protobuf::int32 Address::house_number() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.house_number)
  return house_number_;
}
 void Address::set_house_number(::google::protobuf::int32 value) {
  set_has_house_number();
  house_number_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Address.house_number)
}

// optional string label = 16;
bool Address::has_label() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Address::set_has_label() {
  _has_bits_[0] |= 0x00000020u;
}
void Address::clear_has_label() {
  _has_bits_[0] &= ~0x00000020u;
}
void Address::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& Address::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Address.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Address::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Address.label)
}
 void Address::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Address.label)
}
 void Address::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Address.label)
}
 ::std::string* Address::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Address.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Address::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.Address.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Address::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Address.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalendarException::kUriFieldNumber;
const int CalendarException::kDateFieldNumber;
const int CalendarException::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalendarException::CalendarException()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.CalendarException)
}

void CalendarException::InitAsDefaultInstance() {
}

CalendarException::CalendarException(const CalendarException& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.CalendarException)
}

void CalendarException::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalendarException::~CalendarException() {
  // @@protoc_insertion_point(destructor:pbnavitia.CalendarException)
  SharedDtor();
}

void CalendarException::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CalendarException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalendarException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalendarException_descriptor_;
}

const CalendarException& CalendarException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

CalendarException* CalendarException::default_instance_ = NULL;

CalendarException* CalendarException::New(::google::protobuf::Arena* arena) const {
  CalendarException* n = new CalendarException;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalendarException::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.CalendarException)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_date()) {
      date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CalendarException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.CalendarException)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CalendarException.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // optional string date = 2;
      case 2: {
        if (tag == 18) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CalendarException.date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .pbnavitia.ExceptionType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::ExceptionType_IsValid(value)) {
            set_type(static_cast< ::pbnavitia::ExceptionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.CalendarException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.CalendarException)
  return false;
#undef DO_
}

void CalendarException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.CalendarException)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarException.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarException.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // optional .pbnavitia.ExceptionType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.CalendarException)
}

::google::protobuf::uint8* CalendarException::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.CalendarException)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarException.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarException.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional .pbnavitia.ExceptionType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.CalendarException)
  return target;
}

int CalendarException::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.CalendarException)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // optional .pbnavitia.ExceptionType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalendarException::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.CalendarException)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CalendarException* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CalendarException>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.CalendarException)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.CalendarException)
    MergeFrom(*source);
  }
}

void CalendarException::MergeFrom(const CalendarException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.CalendarException)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CalendarException::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.CalendarException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarException::CopyFrom(const CalendarException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.CalendarException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarException::IsInitialized() const {

  return true;
}

void CalendarException::Swap(CalendarException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarException::InternalSwap(CalendarException* other) {
  uri_.Swap(&other->uri_);
  date_.Swap(&other->date_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalendarException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalendarException_descriptor_;
  metadata.reflection = CalendarException_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalendarException

// optional string uri = 1;
bool CalendarException::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CalendarException::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void CalendarException::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void CalendarException::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& CalendarException::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarException.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarException::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarException.uri)
}
 void CalendarException::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarException.uri)
}
 void CalendarException::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarException.uri)
}
 ::std::string* CalendarException::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarException.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarException::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarException.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarException::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarException.uri)
}

// optional string date = 2;
bool CalendarException::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CalendarException::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
void CalendarException::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void CalendarException::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
 const ::std::string& CalendarException::date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarException.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarException::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarException.date)
}
 void CalendarException::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarException.date)
}
 void CalendarException::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarException.date)
}
 ::std::string* CalendarException::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarException.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarException::release_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarException.date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarException::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarException.date)
}

// optional .pbnavitia.ExceptionType type = 3;
bool CalendarException::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CalendarException::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CalendarException::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CalendarException::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::pbnavitia::ExceptionType CalendarException::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarException.type)
  return static_cast< ::pbnavitia::ExceptionType >(type_);
}
 void CalendarException::set_type(::pbnavitia::ExceptionType value) {
  assert(::pbnavitia::ExceptionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarException.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalendarPeriod::kBeginFieldNumber;
const int CalendarPeriod::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalendarPeriod::CalendarPeriod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.CalendarPeriod)
}

void CalendarPeriod::InitAsDefaultInstance() {
}

CalendarPeriod::CalendarPeriod(const CalendarPeriod& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.CalendarPeriod)
}

void CalendarPeriod::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  begin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalendarPeriod::~CalendarPeriod() {
  // @@protoc_insertion_point(destructor:pbnavitia.CalendarPeriod)
  SharedDtor();
}

void CalendarPeriod::SharedDtor() {
  begin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CalendarPeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalendarPeriod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalendarPeriod_descriptor_;
}

const CalendarPeriod& CalendarPeriod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

CalendarPeriod* CalendarPeriod::default_instance_ = NULL;

CalendarPeriod* CalendarPeriod::New(::google::protobuf::Arena* arena) const {
  CalendarPeriod* n = new CalendarPeriod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalendarPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.CalendarPeriod)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_begin()) {
      begin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end()) {
      end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CalendarPeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.CalendarPeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string begin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->begin().data(), this->begin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CalendarPeriod.begin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional string end = 2;
      case 2: {
        if (tag == 18) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end().data(), this->end().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CalendarPeriod.end");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.CalendarPeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.CalendarPeriod)
  return false;
#undef DO_
}

void CalendarPeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.CalendarPeriod)
  // optional string begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begin().data(), this->begin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarPeriod.begin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->begin(), output);
  }

  // optional string end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end().data(), this->end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarPeriod.end");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.CalendarPeriod)
}

::google::protobuf::uint8* CalendarPeriod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.CalendarPeriod)
  // optional string begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->begin().data(), this->begin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarPeriod.begin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->begin(), target);
  }

  // optional string end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end().data(), this->end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CalendarPeriod.end");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.CalendarPeriod)
  return target;
}

int CalendarPeriod::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.CalendarPeriod)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begin());
    }

    // optional string end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalendarPeriod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.CalendarPeriod)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CalendarPeriod* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CalendarPeriod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.CalendarPeriod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.CalendarPeriod)
    MergeFrom(*source);
  }
}

void CalendarPeriod::MergeFrom(const CalendarPeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.CalendarPeriod)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_has_begin();
      begin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.begin_);
    }
    if (from.has_end()) {
      set_has_end();
      end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CalendarPeriod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.CalendarPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarPeriod::CopyFrom(const CalendarPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.CalendarPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarPeriod::IsInitialized() const {

  return true;
}

void CalendarPeriod::Swap(CalendarPeriod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarPeriod::InternalSwap(CalendarPeriod* other) {
  begin_.Swap(&other->begin_);
  end_.Swap(&other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalendarPeriod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalendarPeriod_descriptor_;
  metadata.reflection = CalendarPeriod_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalendarPeriod

// optional string begin = 1;
bool CalendarPeriod::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CalendarPeriod::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
void CalendarPeriod::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CalendarPeriod::clear_begin() {
  begin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_begin();
}
 const ::std::string& CalendarPeriod::begin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarPeriod.begin)
  return begin_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarPeriod::set_begin(const ::std::string& value) {
  set_has_begin();
  begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarPeriod.begin)
}
 void CalendarPeriod::set_begin(const char* value) {
  set_has_begin();
  begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarPeriod.begin)
}
 void CalendarPeriod::set_begin(const char* value, size_t size) {
  set_has_begin();
  begin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarPeriod.begin)
}
 ::std::string* CalendarPeriod::mutable_begin() {
  set_has_begin();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarPeriod.begin)
  return begin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarPeriod::release_begin() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarPeriod.begin)
  clear_has_begin();
  return begin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarPeriod::set_allocated_begin(::std::string* begin) {
  if (begin != NULL) {
    set_has_begin();
  } else {
    clear_has_begin();
  }
  begin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), begin);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarPeriod.begin)
}

// optional string end = 2;
bool CalendarPeriod::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CalendarPeriod::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void CalendarPeriod::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void CalendarPeriod::clear_end() {
  end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end();
}
 const ::std::string& CalendarPeriod::end() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CalendarPeriod.end)
  return end_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarPeriod::set_end(const ::std::string& value) {
  set_has_end();
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CalendarPeriod.end)
}
 void CalendarPeriod::set_end(const char* value) {
  set_has_end();
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CalendarPeriod.end)
}
 void CalendarPeriod::set_end(const char* value, size_t size) {
  set_has_end();
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CalendarPeriod.end)
}
 ::std::string* CalendarPeriod::mutable_end() {
  set_has_end();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CalendarPeriod.end)
  return end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CalendarPeriod::release_end() {
  // @@protoc_insertion_point(field_release:pbnavitia.CalendarPeriod.end)
  clear_has_end();
  return end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CalendarPeriod::set_allocated_end(::std::string* end) {
  if (end != NULL) {
    set_has_end();
  } else {
    clear_has_end();
  }
  end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CalendarPeriod.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeekPattern::kMondayFieldNumber;
const int WeekPattern::kTuesdayFieldNumber;
const int WeekPattern::kWednesdayFieldNumber;
const int WeekPattern::kThursdayFieldNumber;
const int WeekPattern::kFridayFieldNumber;
const int WeekPattern::kSaturdayFieldNumber;
const int WeekPattern::kSundayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeekPattern::WeekPattern()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.WeekPattern)
}

void WeekPattern::InitAsDefaultInstance() {
}

WeekPattern::WeekPattern(const WeekPattern& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.WeekPattern)
}

void WeekPattern::SharedCtor() {
  _cached_size_ = 0;
  monday_ = false;
  tuesday_ = false;
  wednesday_ = false;
  thursday_ = false;
  friday_ = false;
  saturday_ = false;
  sunday_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekPattern::~WeekPattern() {
  // @@protoc_insertion_point(destructor:pbnavitia.WeekPattern)
  SharedDtor();
}

void WeekPattern::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeekPattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekPattern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekPattern_descriptor_;
}

const WeekPattern& WeekPattern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

WeekPattern* WeekPattern::default_instance_ = NULL;

WeekPattern* WeekPattern::New(::google::protobuf::Arena* arena) const {
  WeekPattern* n = new WeekPattern;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeekPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.WeekPattern)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WeekPattern, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WeekPattern*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(monday_, sunday_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WeekPattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.WeekPattern)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool monday = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &monday_)));
          set_has_monday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tuesday;
        break;
      }

      // optional bool tuesday = 2;
      case 2: {
        if (tag == 16) {
         parse_tuesday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tuesday_)));
          set_has_tuesday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wednesday;
        break;
      }

      // optional bool wednesday = 3;
      case 3: {
        if (tag == 24) {
         parse_wednesday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wednesday_)));
          set_has_wednesday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_thursday;
        break;
      }

      // optional bool thursday = 4;
      case 4: {
        if (tag == 32) {
         parse_thursday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &thursday_)));
          set_has_thursday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_friday;
        break;
      }

      // optional bool friday = 5;
      case 5: {
        if (tag == 40) {
         parse_friday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friday_)));
          set_has_friday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_saturday;
        break;
      }

      // optional bool saturday = 6;
      case 6: {
        if (tag == 48) {
         parse_saturday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &saturday_)));
          set_has_saturday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sunday;
        break;
      }

      // optional bool sunday = 7;
      case 7: {
        if (tag == 56) {
         parse_sunday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sunday_)));
          set_has_sunday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.WeekPattern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.WeekPattern)
  return false;
#undef DO_
}

void WeekPattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.WeekPattern)
  // optional bool monday = 1;
  if (has_monday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->monday(), output);
  }

  // optional bool tuesday = 2;
  if (has_tuesday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tuesday(), output);
  }

  // optional bool wednesday = 3;
  if (has_wednesday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wednesday(), output);
  }

  // optional bool thursday = 4;
  if (has_thursday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->thursday(), output);
  }

  // optional bool friday = 5;
  if (has_friday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->friday(), output);
  }

  // optional bool saturday = 6;
  if (has_saturday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->saturday(), output);
  }

  // optional bool sunday = 7;
  if (has_sunday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sunday(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.WeekPattern)
}

::google::protobuf::uint8* WeekPattern::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.WeekPattern)
  // optional bool monday = 1;
  if (has_monday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->monday(), target);
  }

  // optional bool tuesday = 2;
  if (has_tuesday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tuesday(), target);
  }

  // optional bool wednesday = 3;
  if (has_wednesday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wednesday(), target);
  }

  // optional bool thursday = 4;
  if (has_thursday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->thursday(), target);
  }

  // optional bool friday = 5;
  if (has_friday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->friday(), target);
  }

  // optional bool saturday = 6;
  if (has_saturday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->saturday(), target);
  }

  // optional bool sunday = 7;
  if (has_sunday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sunday(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.WeekPattern)
  return target;
}

int WeekPattern::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.WeekPattern)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional bool monday = 1;
    if (has_monday()) {
      total_size += 1 + 1;
    }

    // optional bool tuesday = 2;
    if (has_tuesday()) {
      total_size += 1 + 1;
    }

    // optional bool wednesday = 3;
    if (has_wednesday()) {
      total_size += 1 + 1;
    }

    // optional bool thursday = 4;
    if (has_thursday()) {
      total_size += 1 + 1;
    }

    // optional bool friday = 5;
    if (has_friday()) {
      total_size += 1 + 1;
    }

    // optional bool saturday = 6;
    if (has_saturday()) {
      total_size += 1 + 1;
    }

    // optional bool sunday = 7;
    if (has_sunday()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekPattern::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.WeekPattern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WeekPattern* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WeekPattern>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.WeekPattern)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.WeekPattern)
    MergeFrom(*source);
  }
}

void WeekPattern::MergeFrom(const WeekPattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.WeekPattern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monday()) {
      set_monday(from.monday());
    }
    if (from.has_tuesday()) {
      set_tuesday(from.tuesday());
    }
    if (from.has_wednesday()) {
      set_wednesday(from.wednesday());
    }
    if (from.has_thursday()) {
      set_thursday(from.thursday());
    }
    if (from.has_friday()) {
      set_friday(from.friday());
    }
    if (from.has_saturday()) {
      set_saturday(from.saturday());
    }
    if (from.has_sunday()) {
      set_sunday(from.sunday());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WeekPattern::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.WeekPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekPattern::CopyFrom(const WeekPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.WeekPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekPattern::IsInitialized() const {

  return true;
}

void WeekPattern::Swap(WeekPattern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeekPattern::InternalSwap(WeekPattern* other) {
  std::swap(monday_, other->monday_);
  std::swap(tuesday_, other->tuesday_);
  std::swap(wednesday_, other->wednesday_);
  std::swap(thursday_, other->thursday_);
  std::swap(friday_, other->friday_);
  std::swap(saturday_, other->saturday_);
  std::swap(sunday_, other->sunday_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeekPattern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekPattern_descriptor_;
  metadata.reflection = WeekPattern_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeekPattern

// optional bool monday = 1;
bool WeekPattern::has_monday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeekPattern::set_has_monday() {
  _has_bits_[0] |= 0x00000001u;
}
void WeekPattern::clear_has_monday() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeekPattern::clear_monday() {
  monday_ = false;
  clear_has_monday();
}
 bool WeekPattern::monday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.monday)
  return monday_;
}
 void WeekPattern::set_monday(bool value) {
  set_has_monday();
  monday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.monday)
}

// optional bool tuesday = 2;
bool WeekPattern::has_tuesday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeekPattern::set_has_tuesday() {
  _has_bits_[0] |= 0x00000002u;
}
void WeekPattern::clear_has_tuesday() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeekPattern::clear_tuesday() {
  tuesday_ = false;
  clear_has_tuesday();
}
 bool WeekPattern::tuesday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.tuesday)
  return tuesday_;
}
 void WeekPattern::set_tuesday(bool value) {
  set_has_tuesday();
  tuesday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.tuesday)
}

// optional bool wednesday = 3;
bool WeekPattern::has_wednesday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WeekPattern::set_has_wednesday() {
  _has_bits_[0] |= 0x00000004u;
}
void WeekPattern::clear_has_wednesday() {
  _has_bits_[0] &= ~0x00000004u;
}
void WeekPattern::clear_wednesday() {
  wednesday_ = false;
  clear_has_wednesday();
}
 bool WeekPattern::wednesday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.wednesday)
  return wednesday_;
}
 void WeekPattern::set_wednesday(bool value) {
  set_has_wednesday();
  wednesday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.wednesday)
}

// optional bool thursday = 4;
bool WeekPattern::has_thursday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WeekPattern::set_has_thursday() {
  _has_bits_[0] |= 0x00000008u;
}
void WeekPattern::clear_has_thursday() {
  _has_bits_[0] &= ~0x00000008u;
}
void WeekPattern::clear_thursday() {
  thursday_ = false;
  clear_has_thursday();
}
 bool WeekPattern::thursday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.thursday)
  return thursday_;
}
 void WeekPattern::set_thursday(bool value) {
  set_has_thursday();
  thursday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.thursday)
}

// optional bool friday = 5;
bool WeekPattern::has_friday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WeekPattern::set_has_friday() {
  _has_bits_[0] |= 0x00000010u;
}
void WeekPattern::clear_has_friday() {
  _has_bits_[0] &= ~0x00000010u;
}
void WeekPattern::clear_friday() {
  friday_ = false;
  clear_has_friday();
}
 bool WeekPattern::friday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.friday)
  return friday_;
}
 void WeekPattern::set_friday(bool value) {
  set_has_friday();
  friday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.friday)
}

// optional bool saturday = 6;
bool WeekPattern::has_saturday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WeekPattern::set_has_saturday() {
  _has_bits_[0] |= 0x00000020u;
}
void WeekPattern::clear_has_saturday() {
  _has_bits_[0] &= ~0x00000020u;
}
void WeekPattern::clear_saturday() {
  saturday_ = false;
  clear_has_saturday();
}
 bool WeekPattern::saturday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.saturday)
  return saturday_;
}
 void WeekPattern::set_saturday(bool value) {
  set_has_saturday();
  saturday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.saturday)
}

// optional bool sunday = 7;
bool WeekPattern::has_sunday() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WeekPattern::set_has_sunday() {
  _has_bits_[0] |= 0x00000040u;
}
void WeekPattern::clear_has_sunday() {
  _has_bits_[0] &= ~0x00000040u;
}
void WeekPattern::clear_sunday() {
  sunday_ = false;
  clear_has_sunday();
}
 bool WeekPattern::sunday() const {
  // @@protoc_insertion_point(field_get:pbnavitia.WeekPattern.sunday)
  return sunday_;
}
 void WeekPattern::set_sunday(bool value) {
  set_has_sunday();
  sunday_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.WeekPattern.sunday)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Calendar::kUriFieldNumber;
const int Calendar::kNameFieldNumber;
const int Calendar::kWeekPatternFieldNumber;
const int Calendar::kActivePeriodsFieldNumber;
const int Calendar::kExceptionsFieldNumber;
const int Calendar::kValidityPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Calendar::Calendar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Calendar)
}

void Calendar::InitAsDefaultInstance() {
  week_pattern_ = const_cast< ::pbnavitia::WeekPattern*>(&::pbnavitia::WeekPattern::default_instance());
  validity_pattern_ = const_cast< ::pbnavitia::ValidityPattern*>(&::pbnavitia::ValidityPattern::default_instance());
}

Calendar::Calendar(const Calendar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Calendar)
}

void Calendar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  week_pattern_ = NULL;
  validity_pattern_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Calendar::~Calendar() {
  // @@protoc_insertion_point(destructor:pbnavitia.Calendar)
  SharedDtor();
}

void Calendar::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete week_pattern_;
    delete validity_pattern_;
  }
}

void Calendar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Calendar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Calendar_descriptor_;
}

const Calendar& Calendar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

Calendar* Calendar::default_instance_ = NULL;

Calendar* Calendar::New(::google::protobuf::Arena* arena) const {
  Calendar* n = new Calendar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Calendar::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Calendar)
  if (_has_bits_[0 / 32] & 39u) {
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_week_pattern()) {
      if (week_pattern_ != NULL) week_pattern_->::pbnavitia::WeekPattern::Clear();
    }
    if (has_validity_pattern()) {
      if (validity_pattern_ != NULL) validity_pattern_->::pbnavitia::ValidityPattern::Clear();
    }
  }
  active_periods_.Clear();
  exceptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Calendar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Calendar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Calendar.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Calendar.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_week_pattern;
        break;
      }

      // optional .pbnavitia.WeekPattern week_pattern = 3;
      case 3: {
        if (tag == 26) {
         parse_week_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_week_pattern()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_active_periods;
        break;
      }

      // repeated .pbnavitia.CalendarPeriod active_periods = 4;
      case 4: {
        if (tag == 34) {
         parse_active_periods:
          DO_(input->IncrementRecursionDepth());
         parse_loop_active_periods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_active_periods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_active_periods;
        if (input->ExpectTag(42)) goto parse_loop_exceptions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.CalendarException exceptions = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_exceptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_exceptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_exceptions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_validity_pattern;
        break;
      }

      // optional .pbnavitia.ValidityPattern validity_pattern = 6;
      case 6: {
        if (tag == 50) {
         parse_validity_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validity_pattern()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Calendar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Calendar)
  return false;
#undef DO_
}

void Calendar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Calendar)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Calendar.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Calendar.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .pbnavitia.WeekPattern week_pattern = 3;
  if (has_week_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->week_pattern_, output);
  }

  // repeated .pbnavitia.CalendarPeriod active_periods = 4;
  for (unsigned int i = 0, n = this->active_periods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->active_periods(i), output);
  }

  // repeated .pbnavitia.CalendarException exceptions = 5;
  for (unsigned int i = 0, n = this->exceptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->exceptions(i), output);
  }

  // optional .pbnavitia.ValidityPattern validity_pattern = 6;
  if (has_validity_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->validity_pattern_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Calendar)
}

::google::protobuf::uint8* Calendar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Calendar)
  // optional string uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Calendar.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Calendar.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .pbnavitia.WeekPattern week_pattern = 3;
  if (has_week_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->week_pattern_, false, target);
  }

  // repeated .pbnavitia.CalendarPeriod active_periods = 4;
  for (unsigned int i = 0, n = this->active_periods_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->active_periods(i), false, target);
  }

  // repeated .pbnavitia.CalendarException exceptions = 5;
  for (unsigned int i = 0, n = this->exceptions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->exceptions(i), false, target);
  }

  // optional .pbnavitia.ValidityPattern validity_pattern = 6;
  if (has_validity_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->validity_pattern_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Calendar)
  return target;
}

int Calendar::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Calendar)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 39u) {
    // optional string uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .pbnavitia.WeekPattern week_pattern = 3;
    if (has_week_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->week_pattern_);
    }

    // optional .pbnavitia.ValidityPattern validity_pattern = 6;
    if (has_validity_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->validity_pattern_);
    }

  }
  // repeated .pbnavitia.CalendarPeriod active_periods = 4;
  total_size += 1 * this->active_periods_size();
  for (int i = 0; i < this->active_periods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active_periods(i));
  }

  // repeated .pbnavitia.CalendarException exceptions = 5;
  total_size += 1 * this->exceptions_size();
  for (int i = 0; i < this->exceptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exceptions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Calendar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Calendar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Calendar* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Calendar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Calendar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Calendar)
    MergeFrom(*source);
  }
}

void Calendar::MergeFrom(const Calendar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Calendar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  active_periods_.MergeFrom(from.active_periods_);
  exceptions_.MergeFrom(from.exceptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_week_pattern()) {
      mutable_week_pattern()->::pbnavitia::WeekPattern::MergeFrom(from.week_pattern());
    }
    if (from.has_validity_pattern()) {
      mutable_validity_pattern()->::pbnavitia::ValidityPattern::MergeFrom(from.validity_pattern());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Calendar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Calendar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Calendar::CopyFrom(const Calendar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Calendar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Calendar::IsInitialized() const {

  return true;
}

void Calendar::Swap(Calendar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Calendar::InternalSwap(Calendar* other) {
  uri_.Swap(&other->uri_);
  name_.Swap(&other->name_);
  std::swap(week_pattern_, other->week_pattern_);
  active_periods_.UnsafeArenaSwap(&other->active_periods_);
  exceptions_.UnsafeArenaSwap(&other->exceptions_);
  std::swap(validity_pattern_, other->validity_pattern_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Calendar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Calendar_descriptor_;
  metadata.reflection = Calendar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Calendar

// optional string uri = 1;
bool Calendar::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Calendar::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void Calendar::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Calendar::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& Calendar::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Calendar::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Calendar.uri)
}
 void Calendar::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Calendar.uri)
}
 void Calendar::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Calendar.uri)
}
 ::std::string* Calendar::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Calendar::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.Calendar.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Calendar::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Calendar.uri)
}

// optional string name = 2;
bool Calendar::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Calendar::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Calendar::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Calendar::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Calendar::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Calendar::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Calendar.name)
}
 void Calendar::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Calendar.name)
}
 void Calendar::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Calendar.name)
}
 ::std::string* Calendar::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Calendar::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Calendar.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Calendar::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Calendar.name)
}

// optional .pbnavitia.WeekPattern week_pattern = 3;
bool Calendar::has_week_pattern() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Calendar::set_has_week_pattern() {
  _has_bits_[0] |= 0x00000004u;
}
void Calendar::clear_has_week_pattern() {
  _has_bits_[0] &= ~0x00000004u;
}
void Calendar::clear_week_pattern() {
  if (week_pattern_ != NULL) week_pattern_->::pbnavitia::WeekPattern::Clear();
  clear_has_week_pattern();
}
const ::pbnavitia::WeekPattern& Calendar::week_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.week_pattern)
  return week_pattern_ != NULL ? *week_pattern_ : *default_instance_->week_pattern_;
}
::pbnavitia::WeekPattern* Calendar::mutable_week_pattern() {
  set_has_week_pattern();
  if (week_pattern_ == NULL) {
    week_pattern_ = new ::pbnavitia::WeekPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.week_pattern)
  return week_pattern_;
}
::pbnavitia::WeekPattern* Calendar::release_week_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.Calendar.week_pattern)
  clear_has_week_pattern();
  ::pbnavitia::WeekPattern* temp = week_pattern_;
  week_pattern_ = NULL;
  return temp;
}
void Calendar::set_allocated_week_pattern(::pbnavitia::WeekPattern* week_pattern) {
  delete week_pattern_;
  week_pattern_ = week_pattern;
  if (week_pattern) {
    set_has_week_pattern();
  } else {
    clear_has_week_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Calendar.week_pattern)
}

// repeated .pbnavitia.CalendarPeriod active_periods = 4;
int Calendar::active_periods_size() const {
  return active_periods_.size();
}
void Calendar::clear_active_periods() {
  active_periods_.Clear();
}
const ::pbnavitia::CalendarPeriod& Calendar::active_periods(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.active_periods)
  return active_periods_.Get(index);
}
::pbnavitia::CalendarPeriod* Calendar::mutable_active_periods(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.active_periods)
  return active_periods_.Mutable(index);
}
::pbnavitia::CalendarPeriod* Calendar::add_active_periods() {
  // @@protoc_insertion_point(field_add:pbnavitia.Calendar.active_periods)
  return active_periods_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarPeriod >*
Calendar::mutable_active_periods() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Calendar.active_periods)
  return &active_periods_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarPeriod >&
Calendar::active_periods() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Calendar.active_periods)
  return active_periods_;
}

// repeated .pbnavitia.CalendarException exceptions = 5;
int Calendar::exceptions_size() const {
  return exceptions_.size();
}
void Calendar::clear_exceptions() {
  exceptions_.Clear();
}
const ::pbnavitia::CalendarException& Calendar::exceptions(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.exceptions)
  return exceptions_.Get(index);
}
::pbnavitia::CalendarException* Calendar::mutable_exceptions(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.exceptions)
  return exceptions_.Mutable(index);
}
::pbnavitia::CalendarException* Calendar::add_exceptions() {
  // @@protoc_insertion_point(field_add:pbnavitia.Calendar.exceptions)
  return exceptions_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >*
Calendar::mutable_exceptions() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Calendar.exceptions)
  return &exceptions_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CalendarException >&
Calendar::exceptions() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Calendar.exceptions)
  return exceptions_;
}

// optional .pbnavitia.ValidityPattern validity_pattern = 6;
bool Calendar::has_validity_pattern() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Calendar::set_has_validity_pattern() {
  _has_bits_[0] |= 0x00000020u;
}
void Calendar::clear_has_validity_pattern() {
  _has_bits_[0] &= ~0x00000020u;
}
void Calendar::clear_validity_pattern() {
  if (validity_pattern_ != NULL) validity_pattern_->::pbnavitia::ValidityPattern::Clear();
  clear_has_validity_pattern();
}
const ::pbnavitia::ValidityPattern& Calendar::validity_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Calendar.validity_pattern)
  return validity_pattern_ != NULL ? *validity_pattern_ : *default_instance_->validity_pattern_;
}
::pbnavitia::ValidityPattern* Calendar::mutable_validity_pattern() {
  set_has_validity_pattern();
  if (validity_pattern_ == NULL) {
    validity_pattern_ = new ::pbnavitia::ValidityPattern;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Calendar.validity_pattern)
  return validity_pattern_;
}
::pbnavitia::ValidityPattern* Calendar::release_validity_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.Calendar.validity_pattern)
  clear_has_validity_pattern();
  ::pbnavitia::ValidityPattern* temp = validity_pattern_;
  validity_pattern_ = NULL;
  return temp;
}
void Calendar::set_allocated_validity_pattern(::pbnavitia::ValidityPattern* validity_pattern) {
  delete validity_pattern_;
  validity_pattern_ = validity_pattern;
  if (validity_pattern) {
    set_has_validity_pattern();
  } else {
    clear_has_validity_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Calendar.validity_pattern)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidityPattern::kBeginningDateFieldNumber;
const int ValidityPattern::kDaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidityPattern::ValidityPattern()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.ValidityPattern)
}

void ValidityPattern::InitAsDefaultInstance() {
}

ValidityPattern::ValidityPattern(const ValidityPattern& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.ValidityPattern)
}

void ValidityPattern::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  beginning_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  days_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValidityPattern::~ValidityPattern() {
  // @@protoc_insertion_point(destructor:pbnavitia.ValidityPattern)
  SharedDtor();
}

void ValidityPattern::SharedDtor() {
  beginning_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  days_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ValidityPattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValidityPattern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValidityPattern_descriptor_;
}

const ValidityPattern& ValidityPattern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

ValidityPattern* ValidityPattern::default_instance_ = NULL;

ValidityPattern* ValidityPattern::New(::google::protobuf::Arena* arena) const {
  ValidityPattern* n = new ValidityPattern;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ValidityPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.ValidityPattern)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_beginning_date()) {
      beginning_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_days()) {
      days_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ValidityPattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.ValidityPattern)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string beginning_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beginning_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->beginning_date().data(), this->beginning_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.ValidityPattern.beginning_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_days;
        break;
      }

      // optional string days = 2;
      case 2: {
        if (tag == 18) {
         parse_days:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_days()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->days().data(), this->days().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.ValidityPattern.days");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.ValidityPattern)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.ValidityPattern)
  return false;
#undef DO_
}

void ValidityPattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.ValidityPattern)
  // optional string beginning_date = 1;
  if (has_beginning_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->beginning_date().data(), this->beginning_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ValidityPattern.beginning_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->beginning_date(), output);
  }

  // optional string days = 2;
  if (has_days()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->days().data(), this->days().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ValidityPattern.days");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->days(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.ValidityPattern)
}

::google::protobuf::uint8* ValidityPattern::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.ValidityPattern)
  // optional string beginning_date = 1;
  if (has_beginning_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->beginning_date().data(), this->beginning_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ValidityPattern.beginning_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->beginning_date(), target);
  }

  // optional string days = 2;
  if (has_days()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->days().data(), this->days().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ValidityPattern.days");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->days(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.ValidityPattern)
  return target;
}

int ValidityPattern::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.ValidityPattern)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string beginning_date = 1;
    if (has_beginning_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beginning_date());
    }

    // optional string days = 2;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->days());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValidityPattern::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.ValidityPattern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ValidityPattern* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ValidityPattern>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.ValidityPattern)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.ValidityPattern)
    MergeFrom(*source);
  }
}

void ValidityPattern::MergeFrom(const ValidityPattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.ValidityPattern)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginning_date()) {
      set_has_beginning_date();
      beginning_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.beginning_date_);
    }
    if (from.has_days()) {
      set_has_days();
      days_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.days_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ValidityPattern::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.ValidityPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityPattern::CopyFrom(const ValidityPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.ValidityPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidityPattern::IsInitialized() const {

  return true;
}

void ValidityPattern::Swap(ValidityPattern* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidityPattern::InternalSwap(ValidityPattern* other) {
  beginning_date_.Swap(&other->beginning_date_);
  days_.Swap(&other->days_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ValidityPattern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValidityPattern_descriptor_;
  metadata.reflection = ValidityPattern_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ValidityPattern

// optional string beginning_date = 1;
bool ValidityPattern::has_beginning_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ValidityPattern::set_has_beginning_date() {
  _has_bits_[0] |= 0x00000001u;
}
void ValidityPattern::clear_has_beginning_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void ValidityPattern::clear_beginning_date() {
  beginning_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beginning_date();
}
 const ::std::string& ValidityPattern::beginning_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ValidityPattern.beginning_date)
  return beginning_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ValidityPattern::set_beginning_date(const ::std::string& value) {
  set_has_beginning_date();
  beginning_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.ValidityPattern.beginning_date)
}
 void ValidityPattern::set_beginning_date(const char* value) {
  set_has_beginning_date();
  beginning_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.ValidityPattern.beginning_date)
}
 void ValidityPattern::set_beginning_date(const char* value, size_t size) {
  set_has_beginning_date();
  beginning_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ValidityPattern.beginning_date)
}
 ::std::string* ValidityPattern::mutable_beginning_date() {
  set_has_beginning_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.ValidityPattern.beginning_date)
  return beginning_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ValidityPattern::release_beginning_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.ValidityPattern.beginning_date)
  clear_has_beginning_date();
  return beginning_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ValidityPattern::set_allocated_beginning_date(::std::string* beginning_date) {
  if (beginning_date != NULL) {
    set_has_beginning_date();
  } else {
    clear_has_beginning_date();
  }
  beginning_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beginning_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ValidityPattern.beginning_date)
}

// optional string days = 2;
bool ValidityPattern::has_days() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ValidityPattern::set_has_days() {
  _has_bits_[0] |= 0x00000002u;
}
void ValidityPattern::clear_has_days() {
  _has_bits_[0] &= ~0x00000002u;
}
void ValidityPattern::clear_days() {
  days_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_days();
}
 const ::std::string& ValidityPattern::days() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ValidityPattern.days)
  return days_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ValidityPattern::set_days(const ::std::string& value) {
  set_has_days();
  days_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.ValidityPattern.days)
}
 void ValidityPattern::set_days(const char* value) {
  set_has_days();
  days_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.ValidityPattern.days)
}
 void ValidityPattern::set_days(const char* value, size_t size) {
  set_has_days();
  days_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ValidityPattern.days)
}
 ::std::string* ValidityPattern::mutable_days() {
  set_has_days();
  // @@protoc_insertion_point(field_mutable:pbnavitia.ValidityPattern.days)
  return days_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ValidityPattern::release_days() {
  // @@protoc_insertion_point(field_release:pbnavitia.ValidityPattern.days)
  clear_has_days();
  return days_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ValidityPattern::set_allocated_days(::std::string* days) {
  if (days != NULL) {
    set_has_days();
  } else {
    clear_has_days();
  }
  days_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), days);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ValidityPattern.days)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationContext::kPlaceFieldNumber;
const int LocationContext::kAccessDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationContext::LocationContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.LocationContext)
}

void LocationContext::InitAsDefaultInstance() {
}

LocationContext::LocationContext(const LocationContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.LocationContext)
}

void LocationContext::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  place_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationContext::~LocationContext() {
  // @@protoc_insertion_point(destructor:pbnavitia.LocationContext)
  SharedDtor();
}

void LocationContext::SharedDtor() {
  place_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LocationContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationContext_descriptor_;
}

const LocationContext& LocationContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

LocationContext* LocationContext::default_instance_ = NULL;

LocationContext* LocationContext::New(::google::protobuf::Arena* arena) const {
  LocationContext* n = new LocationContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocationContext::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.LocationContext)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_place()) {
      place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    access_duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LocationContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.LocationContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string place = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->place().data(), this->place().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LocationContext.place");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_duration;
        break;
      }

      // required int32 access_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_access_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_duration_)));
          set_has_access_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.LocationContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.LocationContext)
  return false;
#undef DO_
}

void LocationContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.LocationContext)
  // required string place = 1;
  if (has_place()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->place().data(), this->place().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LocationContext.place");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->place(), output);
  }

  // required int32 access_duration = 2;
  if (has_access_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->access_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.LocationContext)
}

::google::protobuf::uint8* LocationContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.LocationContext)
  // required string place = 1;
  if (has_place()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->place().data(), this->place().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LocationContext.place");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->place(), target);
  }

  // required int32 access_duration = 2;
  if (has_access_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->access_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.LocationContext)
  return target;
}

int LocationContext::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.LocationContext)
  int total_size = 0;

  if (has_place()) {
    // required string place = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->place());
  }

  if (has_access_duration()) {
    // required int32 access_duration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->access_duration());
  }

  return total_size;
}
int LocationContext::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.LocationContext)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string place = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->place());

    // required int32 access_duration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->access_duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.LocationContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocationContext* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.LocationContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.LocationContext)
    MergeFrom(*source);
  }
}

void LocationContext::MergeFrom(const LocationContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.LocationContext)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_place()) {
      set_has_place();
      place_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.place_);
    }
    if (from.has_access_duration()) {
      set_access_duration(from.access_duration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LocationContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.LocationContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationContext::CopyFrom(const LocationContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.LocationContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LocationContext::Swap(LocationContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationContext::InternalSwap(LocationContext* other) {
  place_.Swap(&other->place_);
  std::swap(access_duration_, other->access_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocationContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationContext_descriptor_;
  metadata.reflection = LocationContext_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocationContext

// required string place = 1;
bool LocationContext::has_place() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocationContext::set_has_place() {
  _has_bits_[0] |= 0x00000001u;
}
void LocationContext::clear_has_place() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocationContext::clear_place() {
  place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_place();
}
 const ::std::string& LocationContext::place() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LocationContext.place)
  return place_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LocationContext::set_place(const ::std::string& value) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LocationContext.place)
}
 void LocationContext::set_place(const char* value) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LocationContext.place)
}
 void LocationContext::set_place(const char* value, size_t size) {
  set_has_place();
  place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LocationContext.place)
}
 ::std::string* LocationContext::mutable_place() {
  set_has_place();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LocationContext.place)
  return place_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LocationContext::release_place() {
  // @@protoc_insertion_point(field_release:pbnavitia.LocationContext.place)
  clear_has_place();
  return place_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LocationContext::set_allocated_place(::std::string* place) {
  if (place != NULL) {
    set_has_place();
  } else {
    clear_has_place();
  }
  place_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LocationContext.place)
}

// required int32 access_duration = 2;
bool LocationContext::has_access_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocationContext::set_has_access_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void LocationContext::clear_has_access_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocationContext::clear_access_duration() {
  access_duration_ = 0;
  clear_has_access_duration();
}
 ::google::protobuf::int32 LocationContext::access_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LocationContext.access_duration)
  return access_duration_;
}
 void LocationContext::set_access_duration(::google::protobuf::int32 value) {
  set_has_access_duration();
  access_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.LocationContext.access_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PtObject::kNameFieldNumber;
const int PtObject::kUriFieldNumber;
const int PtObject::kEmbeddedTypeFieldNumber;
const int PtObject::kStopAreaFieldNumber;
const int PtObject::kPoiFieldNumber;
const int PtObject::kStopPointFieldNumber;
const int PtObject::kAddressFieldNumber;
const int PtObject::kLineFieldNumber;
const int PtObject::kNetworkFieldNumber;
const int PtObject::kCommercialModeFieldNumber;
const int PtObject::kRouteFieldNumber;
const int PtObject::kAdministrativeRegionFieldNumber;
const int PtObject::kDistanceFieldNumber;
const int PtObject::kQualityFieldNumber;
const int PtObject::kCompanyFieldNumber;
const int PtObject::kVehicleJourneyFieldNumber;
const int PtObject::kCalendarFieldNumber;
const int PtObject::kScoreFieldNumber;
const int PtObject::kTripFieldNumber;
const int PtObject::kScoresFieldNumber;
const int PtObject::kStopPointsNearbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PtObject::PtObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PtObject)
}

void PtObject::InitAsDefaultInstance() {
  stop_area_ = const_cast< ::pbnavitia::StopArea*>(&::pbnavitia::StopArea::default_instance());
  poi_ = const_cast< ::pbnavitia::Poi*>(&::pbnavitia::Poi::default_instance());
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
  address_ = const_cast< ::pbnavitia::Address*>(&::pbnavitia::Address::default_instance());
  line_ = const_cast< ::pbnavitia::Line*>(&::pbnavitia::Line::default_instance());
  network_ = const_cast< ::pbnavitia::Network*>(&::pbnavitia::Network::default_instance());
  commercial_mode_ = const_cast< ::pbnavitia::CommercialMode*>(&::pbnavitia::CommercialMode::default_instance());
  route_ = const_cast< ::pbnavitia::Route*>(&::pbnavitia::Route::default_instance());
  administrative_region_ = const_cast< ::pbnavitia::AdministrativeRegion*>(&::pbnavitia::AdministrativeRegion::default_instance());
  company_ = const_cast< ::pbnavitia::Company*>(&::pbnavitia::Company::default_instance());
  vehicle_journey_ = const_cast< ::pbnavitia::VehicleJourney*>(&::pbnavitia::VehicleJourney::default_instance());
  calendar_ = const_cast< ::pbnavitia::Calendar*>(&::pbnavitia::Calendar::default_instance());
  trip_ = const_cast< ::pbnavitia::Trip*>(&::pbnavitia::Trip::default_instance());
}

PtObject::PtObject(const PtObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PtObject)
}

void PtObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  embedded_type_ = 1;
  stop_area_ = NULL;
  poi_ = NULL;
  stop_point_ = NULL;
  address_ = NULL;
  line_ = NULL;
  network_ = NULL;
  commercial_mode_ = NULL;
  route_ = NULL;
  administrative_region_ = NULL;
  distance_ = 0;
  quality_ = 0;
  company_ = NULL;
  vehicle_journey_ = NULL;
  calendar_ = NULL;
  score_ = 0;
  trip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PtObject::~PtObject() {
  // @@protoc_insertion_point(destructor:pbnavitia.PtObject)
  SharedDtor();
}

void PtObject::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stop_area_;
    delete poi_;
    delete stop_point_;
    delete address_;
    delete line_;
    delete network_;
    delete commercial_mode_;
    delete route_;
    delete administrative_region_;
    delete company_;
    delete vehicle_journey_;
    delete calendar_;
    delete trip_;
  }
}

void PtObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PtObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PtObject_descriptor_;
}

const PtObject& PtObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

PtObject* PtObject::default_instance_ = NULL;

PtObject* PtObject::New(::google::protobuf::Arena* arena) const {
  PtObject* n = new PtObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PtObject::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PtObject)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    embedded_type_ = 1;
    if (has_stop_area()) {
      if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
    }
    if (has_poi()) {
      if (poi_ != NULL) poi_->::pbnavitia::Poi::Clear();
    }
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
    if (has_address()) {
      if (address_ != NULL) address_->::pbnavitia::Address::Clear();
    }
    if (has_line()) {
      if (line_ != NULL) line_->::pbnavitia::Line::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_network()) {
      if (network_ != NULL) network_->::pbnavitia::Network::Clear();
    }
    if (has_commercial_mode()) {
      if (commercial_mode_ != NULL) commercial_mode_->::pbnavitia::CommercialMode::Clear();
    }
    if (has_route()) {
      if (route_ != NULL) route_->::pbnavitia::Route::Clear();
    }
    if (has_administrative_region()) {
      if (administrative_region_ != NULL) administrative_region_->::pbnavitia::AdministrativeRegion::Clear();
    }
    distance_ = 0;
    quality_ = 0;
    if (has_company()) {
      if (company_ != NULL) company_->::pbnavitia::Company::Clear();
    }
    if (has_vehicle_journey()) {
      if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    if (has_calendar()) {
      if (calendar_ != NULL) calendar_->::pbnavitia::Calendar::Clear();
    }
    score_ = 0;
    if (has_trip()) {
      if (trip_ != NULL) trip_->::pbnavitia::Trip::Clear();
    }
  }
  scores_.Clear();
  stop_points_nearby_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PtObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PtObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtObject.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uri;
        break;
      }

      // required string uri = 2;
      case 2: {
        if (tag == 18) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtObject.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_embedded_type;
        break;
      }

      // optional .pbnavitia.NavitiaType embedded_type = 3;
      case 3: {
        if (tag == 24) {
         parse_embedded_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::NavitiaType_IsValid(value)) {
            set_embedded_type(static_cast< ::pbnavitia::NavitiaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stop_area;
        break;
      }

      // optional .pbnavitia.StopArea stop_area = 4;
      case 4: {
        if (tag == 34) {
         parse_stop_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_poi;
        break;
      }

      // optional .pbnavitia.Poi poi = 5;
      case 5: {
        if (tag == 42) {
         parse_poi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stop_point;
        break;
      }

      // optional .pbnavitia.StopPoint stop_point = 6;
      case 6: {
        if (tag == 50) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_address;
        break;
      }

      // optional .pbnavitia.Address address = 7;
      case 7: {
        if (tag == 58) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_line;
        break;
      }

      // optional .pbnavitia.Line line = 9;
      case 9: {
        if (tag == 74) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_network;
        break;
      }

      // optional .pbnavitia.Network network = 10;
      case 10: {
        if (tag == 82) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_commercial_mode;
        break;
      }

      // optional .pbnavitia.CommercialMode commercial_mode = 11;
      case 11: {
        if (tag == 90) {
         parse_commercial_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commercial_mode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_route;
        break;
      }

      // optional .pbnavitia.Route route = 12;
      case 12: {
        if (tag == 98) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_administrative_region;
        break;
      }

      // optional .pbnavitia.AdministrativeRegion administrative_region = 13;
      case 13: {
        if (tag == 106) {
         parse_administrative_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_administrative_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_distance;
        break;
      }

      // optional int32 distance = 14;
      case 14: {
        if (tag == 112) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_quality;
        break;
      }

      // optional int32 quality = 15;
      case 15: {
        if (tag == 120) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_company;
        break;
      }

      // optional .pbnavitia.Company company = 16;
      case 16: {
        if (tag == 130) {
         parse_company:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_company()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_vehicle_journey;
        break;
      }

      // optional .pbnavitia.VehicleJourney vehicle_journey = 17;
      case 17: {
        if (tag == 138) {
         parse_vehicle_journey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_journey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_calendar;
        break;
      }

      // optional .pbnavitia.Calendar calendar = 18;
      case 18: {
        if (tag == 146) {
         parse_calendar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calendar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_score;
        break;
      }

      // optional int32 score = 19;
      case 19: {
        if (tag == 152) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_trip;
        break;
      }

      // optional .pbnavitia.Trip trip = 20;
      case 20: {
        if (tag == 162) {
         parse_trip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_scores;
        break;
      }

      // repeated int32 scores = 21;
      case 21: {
        if (tag == 168) {
         parse_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_scores())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scores())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_scores;
        if (input->ExpectTag(178)) goto parse_stop_points_nearby;
        break;
      }

      // repeated .pbnavitia.PtObject stop_points_nearby = 22;
      case 22: {
        if (tag == 178) {
         parse_stop_points_nearby:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_points_nearby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_points_nearby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_stop_points_nearby;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PtObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PtObject)
  return false;
#undef DO_
}

void PtObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PtObject)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtObject.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtObject.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // optional .pbnavitia.NavitiaType embedded_type = 3;
  if (has_embedded_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->embedded_type(), output);
  }

  // optional .pbnavitia.StopArea stop_area = 4;
  if (has_stop_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stop_area_, output);
  }

  // optional .pbnavitia.Poi poi = 5;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->poi_, output);
  }

  // optional .pbnavitia.StopPoint stop_point = 6;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stop_point_, output);
  }

  // optional .pbnavitia.Address address = 7;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->address_, output);
  }

  // optional .pbnavitia.Line line = 9;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->line_, output);
  }

  // optional .pbnavitia.Network network = 10;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->network_, output);
  }

  // optional .pbnavitia.CommercialMode commercial_mode = 11;
  if (has_commercial_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->commercial_mode_, output);
  }

  // optional .pbnavitia.Route route = 12;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->route_, output);
  }

  // optional .pbnavitia.AdministrativeRegion administrative_region = 13;
  if (has_administrative_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->administrative_region_, output);
  }

  // optional int32 distance = 14;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->distance(), output);
  }

  // optional int32 quality = 15;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->quality(), output);
  }

  // optional .pbnavitia.Company company = 16;
  if (has_company()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->company_, output);
  }

  // optional .pbnavitia.VehicleJourney vehicle_journey = 17;
  if (has_vehicle_journey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->vehicle_journey_, output);
  }

  // optional .pbnavitia.Calendar calendar = 18;
  if (has_calendar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->calendar_, output);
  }

  // optional int32 score = 19;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->score(), output);
  }

  // optional .pbnavitia.Trip trip = 20;
  if (has_trip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->trip_, output);
  }

  // repeated int32 scores = 21;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->scores(i), output);
  }

  // repeated .pbnavitia.PtObject stop_points_nearby = 22;
  for (unsigned int i = 0, n = this->stop_points_nearby_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->stop_points_nearby(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PtObject)
}

::google::protobuf::uint8* PtObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PtObject)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtObject.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtObject.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // optional .pbnavitia.NavitiaType embedded_type = 3;
  if (has_embedded_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->embedded_type(), target);
  }

  // optional .pbnavitia.StopArea stop_area = 4;
  if (has_stop_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->stop_area_, false, target);
  }

  // optional .pbnavitia.Poi poi = 5;
  if (has_poi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->poi_, false, target);
  }

  // optional .pbnavitia.StopPoint stop_point = 6;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stop_point_, false, target);
  }

  // optional .pbnavitia.Address address = 7;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->address_, false, target);
  }

  // optional .pbnavitia.Line line = 9;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->line_, false, target);
  }

  // optional .pbnavitia.Network network = 10;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->network_, false, target);
  }

  // optional .pbnavitia.CommercialMode commercial_mode = 11;
  if (has_commercial_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->commercial_mode_, false, target);
  }

  // optional .pbnavitia.Route route = 12;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->route_, false, target);
  }

  // optional .pbnavitia.AdministrativeRegion administrative_region = 13;
  if (has_administrative_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->administrative_region_, false, target);
  }

  // optional int32 distance = 14;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->distance(), target);
  }

  // optional int32 quality = 15;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->quality(), target);
  }

  // optional .pbnavitia.Company company = 16;
  if (has_company()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->company_, false, target);
  }

  // optional .pbnavitia.VehicleJourney vehicle_journey = 17;
  if (has_vehicle_journey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->vehicle_journey_, false, target);
  }

  // optional .pbnavitia.Calendar calendar = 18;
  if (has_calendar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->calendar_, false, target);
  }

  // optional int32 score = 19;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->score(), target);
  }

  // optional .pbnavitia.Trip trip = 20;
  if (has_trip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->trip_, false, target);
  }

  // repeated int32 scores = 21;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->scores(i), target);
  }

  // repeated .pbnavitia.PtObject stop_points_nearby = 22;
  for (unsigned int i = 0, n = this->stop_points_nearby_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->stop_points_nearby(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PtObject)
  return target;
}

int PtObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.PtObject)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_uri()) {
    // required string uri = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  return total_size;
}
int PtObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PtObject)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string uri = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional .pbnavitia.NavitiaType embedded_type = 3;
    if (has_embedded_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->embedded_type());
    }

    // optional .pbnavitia.StopArea stop_area = 4;
    if (has_stop_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_area_);
    }

    // optional .pbnavitia.Poi poi = 5;
    if (has_poi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->poi_);
    }

    // optional .pbnavitia.StopPoint stop_point = 6;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional .pbnavitia.Address address = 7;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->address_);
    }

    // optional .pbnavitia.Line line = 9;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->line_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .pbnavitia.Network network = 10;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->network_);
    }

    // optional .pbnavitia.CommercialMode commercial_mode = 11;
    if (has_commercial_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->commercial_mode_);
    }

    // optional .pbnavitia.Route route = 12;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->route_);
    }

    // optional .pbnavitia.AdministrativeRegion administrative_region = 13;
    if (has_administrative_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->administrative_region_);
    }

    // optional int32 distance = 14;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // optional int32 quality = 15;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional .pbnavitia.Company company = 16;
    if (has_company()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->company_);
    }

    // optional .pbnavitia.VehicleJourney vehicle_journey = 17;
    if (has_vehicle_journey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_journey_);
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional .pbnavitia.Calendar calendar = 18;
    if (has_calendar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->calendar_);
    }

    // optional int32 score = 19;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional .pbnavitia.Trip trip = 20;
    if (has_trip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trip_);
    }

  }
  // repeated int32 scores = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->scores_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scores(i));
    }
    total_size += 2 * this->scores_size() + data_size;
  }

  // repeated .pbnavitia.PtObject stop_points_nearby = 22;
  total_size += 2 * this->stop_points_nearby_size();
  for (int i = 0; i < this->stop_points_nearby_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_points_nearby(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PtObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PtObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PtObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PtObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PtObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PtObject)
    MergeFrom(*source);
  }
}

void PtObject::MergeFrom(const PtObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PtObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  scores_.MergeFrom(from.scores_);
  stop_points_nearby_.MergeFrom(from.stop_points_nearby_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_embedded_type()) {
      set_embedded_type(from.embedded_type());
    }
    if (from.has_stop_area()) {
      mutable_stop_area()->::pbnavitia::StopArea::MergeFrom(from.stop_area());
    }
    if (from.has_poi()) {
      mutable_poi()->::pbnavitia::Poi::MergeFrom(from.poi());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_address()) {
      mutable_address()->::pbnavitia::Address::MergeFrom(from.address());
    }
    if (from.has_line()) {
      mutable_line()->::pbnavitia::Line::MergeFrom(from.line());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_network()) {
      mutable_network()->::pbnavitia::Network::MergeFrom(from.network());
    }
    if (from.has_commercial_mode()) {
      mutable_commercial_mode()->::pbnavitia::CommercialMode::MergeFrom(from.commercial_mode());
    }
    if (from.has_route()) {
      mutable_route()->::pbnavitia::Route::MergeFrom(from.route());
    }
    if (from.has_administrative_region()) {
      mutable_administrative_region()->::pbnavitia::AdministrativeRegion::MergeFrom(from.administrative_region());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_company()) {
      mutable_company()->::pbnavitia::Company::MergeFrom(from.company());
    }
    if (from.has_vehicle_journey()) {
      mutable_vehicle_journey()->::pbnavitia::VehicleJourney::MergeFrom(from.vehicle_journey());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_calendar()) {
      mutable_calendar()->::pbnavitia::Calendar::MergeFrom(from.calendar());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_trip()) {
      mutable_trip()->::pbnavitia::Trip::MergeFrom(from.trip());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PtObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PtObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtObject::CopyFrom(const PtObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PtObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stop_area()) {
    if (!this->stop_area_->IsInitialized()) return false;
  }
  if (has_poi()) {
    if (!this->poi_->IsInitialized()) return false;
  }
  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  if (has_address()) {
    if (!this->address_->IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line_->IsInitialized()) return false;
  }
  if (has_network()) {
    if (!this->network_->IsInitialized()) return false;
  }
  if (has_route()) {
    if (!this->route_->IsInitialized()) return false;
  }
  if (has_administrative_region()) {
    if (!this->administrative_region_->IsInitialized()) return false;
  }
  if (has_company()) {
    if (!this->company_->IsInitialized()) return false;
  }
  if (has_vehicle_journey()) {
    if (!this->vehicle_journey_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_points_nearby())) return false;
  return true;
}

void PtObject::Swap(PtObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PtObject::InternalSwap(PtObject* other) {
  name_.Swap(&other->name_);
  uri_.Swap(&other->uri_);
  std::swap(embedded_type_, other->embedded_type_);
  std::swap(stop_area_, other->stop_area_);
  std::swap(poi_, other->poi_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(address_, other->address_);
  std::swap(line_, other->line_);
  std::swap(network_, other->network_);
  std::swap(commercial_mode_, other->commercial_mode_);
  std::swap(route_, other->route_);
  std::swap(administrative_region_, other->administrative_region_);
  std::swap(distance_, other->distance_);
  std::swap(quality_, other->quality_);
  std::swap(company_, other->company_);
  std::swap(vehicle_journey_, other->vehicle_journey_);
  std::swap(calendar_, other->calendar_);
  std::swap(score_, other->score_);
  std::swap(trip_, other->trip_);
  scores_.UnsafeArenaSwap(&other->scores_);
  stop_points_nearby_.UnsafeArenaSwap(&other->stop_points_nearby_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PtObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PtObject_descriptor_;
  metadata.reflection = PtObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PtObject

// required string name = 1;
bool PtObject::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PtObject::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PtObject::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PtObject::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PtObject::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtObject::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.name)
}
 void PtObject::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtObject.name)
}
 void PtObject::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtObject.name)
}
 ::std::string* PtObject::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtObject::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtObject::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.name)
}

// required string uri = 2;
bool PtObject::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PtObject::set_has_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void PtObject::clear_has_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void PtObject::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
 const ::std::string& PtObject::uri() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtObject::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.uri)
}
 void PtObject::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtObject.uri)
}
 void PtObject::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtObject.uri)
}
 ::std::string* PtObject::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtObject::release_uri() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtObject::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.uri)
}

// optional .pbnavitia.NavitiaType embedded_type = 3;
bool PtObject::has_embedded_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PtObject::set_has_embedded_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PtObject::clear_has_embedded_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PtObject::clear_embedded_type() {
  embedded_type_ = 1;
  clear_has_embedded_type();
}
 ::pbnavitia::NavitiaType PtObject::embedded_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.embedded_type)
  return static_cast< ::pbnavitia::NavitiaType >(embedded_type_);
}
 void PtObject::set_embedded_type(::pbnavitia::NavitiaType value) {
  assert(::pbnavitia::NavitiaType_IsValid(value));
  set_has_embedded_type();
  embedded_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.embedded_type)
}

// optional .pbnavitia.StopArea stop_area = 4;
bool PtObject::has_stop_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PtObject::set_has_stop_area() {
  _has_bits_[0] |= 0x00000008u;
}
void PtObject::clear_has_stop_area() {
  _has_bits_[0] &= ~0x00000008u;
}
void PtObject::clear_stop_area() {
  if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
  clear_has_stop_area();
}
const ::pbnavitia::StopArea& PtObject::stop_area() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.stop_area)
  return stop_area_ != NULL ? *stop_area_ : *default_instance_->stop_area_;
}
::pbnavitia::StopArea* PtObject::mutable_stop_area() {
  set_has_stop_area();
  if (stop_area_ == NULL) {
    stop_area_ = new ::pbnavitia::StopArea;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.stop_area)
  return stop_area_;
}
::pbnavitia::StopArea* PtObject::release_stop_area() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.stop_area)
  clear_has_stop_area();
  ::pbnavitia::StopArea* temp = stop_area_;
  stop_area_ = NULL;
  return temp;
}
void PtObject::set_allocated_stop_area(::pbnavitia::StopArea* stop_area) {
  delete stop_area_;
  stop_area_ = stop_area;
  if (stop_area) {
    set_has_stop_area();
  } else {
    clear_has_stop_area();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.stop_area)
}

// optional .pbnavitia.Poi poi = 5;
bool PtObject::has_poi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PtObject::set_has_poi() {
  _has_bits_[0] |= 0x00000010u;
}
void PtObject::clear_has_poi() {
  _has_bits_[0] &= ~0x00000010u;
}
void PtObject::clear_poi() {
  if (poi_ != NULL) poi_->::pbnavitia::Poi::Clear();
  clear_has_poi();
}
const ::pbnavitia::Poi& PtObject::poi() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.poi)
  return poi_ != NULL ? *poi_ : *default_instance_->poi_;
}
::pbnavitia::Poi* PtObject::mutable_poi() {
  set_has_poi();
  if (poi_ == NULL) {
    poi_ = new ::pbnavitia::Poi;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.poi)
  return poi_;
}
::pbnavitia::Poi* PtObject::release_poi() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.poi)
  clear_has_poi();
  ::pbnavitia::Poi* temp = poi_;
  poi_ = NULL;
  return temp;
}
void PtObject::set_allocated_poi(::pbnavitia::Poi* poi) {
  delete poi_;
  poi_ = poi;
  if (poi) {
    set_has_poi();
  } else {
    clear_has_poi();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.poi)
}

// optional .pbnavitia.StopPoint stop_point = 6;
bool PtObject::has_stop_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PtObject::set_has_stop_point() {
  _has_bits_[0] |= 0x00000020u;
}
void PtObject::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000020u;
}
void PtObject::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& PtObject::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* PtObject::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* PtObject::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void PtObject::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.stop_point)
}

// optional .pbnavitia.Address address = 7;
bool PtObject::has_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PtObject::set_has_address() {
  _has_bits_[0] |= 0x00000040u;
}
void PtObject::clear_has_address() {
  _has_bits_[0] &= ~0x00000040u;
}
void PtObject::clear_address() {
  if (address_ != NULL) address_->::pbnavitia::Address::Clear();
  clear_has_address();
}
const ::pbnavitia::Address& PtObject::address() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
::pbnavitia::Address* PtObject::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::pbnavitia::Address;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.address)
  return address_;
}
::pbnavitia::Address* PtObject::release_address() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.address)
  clear_has_address();
  ::pbnavitia::Address* temp = address_;
  address_ = NULL;
  return temp;
}
void PtObject::set_allocated_address(::pbnavitia::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.address)
}

// optional .pbnavitia.Line line = 9;
bool PtObject::has_line() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PtObject::set_has_line() {
  _has_bits_[0] |= 0x00000080u;
}
void PtObject::clear_has_line() {
  _has_bits_[0] &= ~0x00000080u;
}
void PtObject::clear_line() {
  if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  clear_has_line();
}
const ::pbnavitia::Line& PtObject::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
::pbnavitia::Line* PtObject::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.line)
  return line_;
}
::pbnavitia::Line* PtObject::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.line)
  clear_has_line();
  ::pbnavitia::Line* temp = line_;
  line_ = NULL;
  return temp;
}
void PtObject::set_allocated_line(::pbnavitia::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.line)
}

// optional .pbnavitia.Network network = 10;
bool PtObject::has_network() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PtObject::set_has_network() {
  _has_bits_[0] |= 0x00000100u;
}
void PtObject::clear_has_network() {
  _has_bits_[0] &= ~0x00000100u;
}
void PtObject::clear_network() {
  if (network_ != NULL) network_->::pbnavitia::Network::Clear();
  clear_has_network();
}
const ::pbnavitia::Network& PtObject::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.network)
  return network_ != NULL ? *network_ : *default_instance_->network_;
}
::pbnavitia::Network* PtObject::mutable_network() {
  set_has_network();
  if (network_ == NULL) {
    network_ = new ::pbnavitia::Network;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.network)
  return network_;
}
::pbnavitia::Network* PtObject::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.network)
  clear_has_network();
  ::pbnavitia::Network* temp = network_;
  network_ = NULL;
  return temp;
}
void PtObject::set_allocated_network(::pbnavitia::Network* network) {
  delete network_;
  network_ = network;
  if (network) {
    set_has_network();
  } else {
    clear_has_network();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.network)
}

// optional .pbnavitia.CommercialMode commercial_mode = 11;
bool PtObject::has_commercial_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PtObject::set_has_commercial_mode() {
  _has_bits_[0] |= 0x00000200u;
}
void PtObject::clear_has_commercial_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
void PtObject::clear_commercial_mode() {
  if (commercial_mode_ != NULL) commercial_mode_->::pbnavitia::CommercialMode::Clear();
  clear_has_commercial_mode();
}
const ::pbnavitia::CommercialMode& PtObject::commercial_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.commercial_mode)
  return commercial_mode_ != NULL ? *commercial_mode_ : *default_instance_->commercial_mode_;
}
::pbnavitia::CommercialMode* PtObject::mutable_commercial_mode() {
  set_has_commercial_mode();
  if (commercial_mode_ == NULL) {
    commercial_mode_ = new ::pbnavitia::CommercialMode;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.commercial_mode)
  return commercial_mode_;
}
::pbnavitia::CommercialMode* PtObject::release_commercial_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.commercial_mode)
  clear_has_commercial_mode();
  ::pbnavitia::CommercialMode* temp = commercial_mode_;
  commercial_mode_ = NULL;
  return temp;
}
void PtObject::set_allocated_commercial_mode(::pbnavitia::CommercialMode* commercial_mode) {
  delete commercial_mode_;
  commercial_mode_ = commercial_mode;
  if (commercial_mode) {
    set_has_commercial_mode();
  } else {
    clear_has_commercial_mode();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.commercial_mode)
}

// optional .pbnavitia.Route route = 12;
bool PtObject::has_route() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PtObject::set_has_route() {
  _has_bits_[0] |= 0x00000400u;
}
void PtObject::clear_has_route() {
  _has_bits_[0] &= ~0x00000400u;
}
void PtObject::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
const ::pbnavitia::Route& PtObject::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
::pbnavitia::Route* PtObject::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.route)
  return route_;
}
::pbnavitia::Route* PtObject::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
void PtObject::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.route)
}

// optional .pbnavitia.AdministrativeRegion administrative_region = 13;
bool PtObject::has_administrative_region() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PtObject::set_has_administrative_region() {
  _has_bits_[0] |= 0x00000800u;
}
void PtObject::clear_has_administrative_region() {
  _has_bits_[0] &= ~0x00000800u;
}
void PtObject::clear_administrative_region() {
  if (administrative_region_ != NULL) administrative_region_->::pbnavitia::AdministrativeRegion::Clear();
  clear_has_administrative_region();
}
const ::pbnavitia::AdministrativeRegion& PtObject::administrative_region() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.administrative_region)
  return administrative_region_ != NULL ? *administrative_region_ : *default_instance_->administrative_region_;
}
::pbnavitia::AdministrativeRegion* PtObject::mutable_administrative_region() {
  set_has_administrative_region();
  if (administrative_region_ == NULL) {
    administrative_region_ = new ::pbnavitia::AdministrativeRegion;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.administrative_region)
  return administrative_region_;
}
::pbnavitia::AdministrativeRegion* PtObject::release_administrative_region() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.administrative_region)
  clear_has_administrative_region();
  ::pbnavitia::AdministrativeRegion* temp = administrative_region_;
  administrative_region_ = NULL;
  return temp;
}
void PtObject::set_allocated_administrative_region(::pbnavitia::AdministrativeRegion* administrative_region) {
  delete administrative_region_;
  administrative_region_ = administrative_region;
  if (administrative_region) {
    set_has_administrative_region();
  } else {
    clear_has_administrative_region();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.administrative_region)
}

// optional int32 distance = 14;
bool PtObject::has_distance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PtObject::set_has_distance() {
  _has_bits_[0] |= 0x00001000u;
}
void PtObject::clear_has_distance() {
  _has_bits_[0] &= ~0x00001000u;
}
void PtObject::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
 ::google::protobuf::int32 PtObject::distance() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.distance)
  return distance_;
}
 void PtObject::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.distance)
}

// optional int32 quality = 15;
bool PtObject::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PtObject::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
void PtObject::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
void PtObject::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
 ::google::protobuf::int32 PtObject::quality() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.quality)
  return quality_;
}
 void PtObject::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.quality)
}

// optional .pbnavitia.Company company = 16;
bool PtObject::has_company() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PtObject::set_has_company() {
  _has_bits_[0] |= 0x00004000u;
}
void PtObject::clear_has_company() {
  _has_bits_[0] &= ~0x00004000u;
}
void PtObject::clear_company() {
  if (company_ != NULL) company_->::pbnavitia::Company::Clear();
  clear_has_company();
}
const ::pbnavitia::Company& PtObject::company() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.company)
  return company_ != NULL ? *company_ : *default_instance_->company_;
}
::pbnavitia::Company* PtObject::mutable_company() {
  set_has_company();
  if (company_ == NULL) {
    company_ = new ::pbnavitia::Company;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.company)
  return company_;
}
::pbnavitia::Company* PtObject::release_company() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.company)
  clear_has_company();
  ::pbnavitia::Company* temp = company_;
  company_ = NULL;
  return temp;
}
void PtObject::set_allocated_company(::pbnavitia::Company* company) {
  delete company_;
  company_ = company;
  if (company) {
    set_has_company();
  } else {
    clear_has_company();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.company)
}

// optional .pbnavitia.VehicleJourney vehicle_journey = 17;
bool PtObject::has_vehicle_journey() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PtObject::set_has_vehicle_journey() {
  _has_bits_[0] |= 0x00008000u;
}
void PtObject::clear_has_vehicle_journey() {
  _has_bits_[0] &= ~0x00008000u;
}
void PtObject::clear_vehicle_journey() {
  if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
  clear_has_vehicle_journey();
}
const ::pbnavitia::VehicleJourney& PtObject::vehicle_journey() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.vehicle_journey)
  return vehicle_journey_ != NULL ? *vehicle_journey_ : *default_instance_->vehicle_journey_;
}
::pbnavitia::VehicleJourney* PtObject::mutable_vehicle_journey() {
  set_has_vehicle_journey();
  if (vehicle_journey_ == NULL) {
    vehicle_journey_ = new ::pbnavitia::VehicleJourney;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.vehicle_journey)
  return vehicle_journey_;
}
::pbnavitia::VehicleJourney* PtObject::release_vehicle_journey() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.vehicle_journey)
  clear_has_vehicle_journey();
  ::pbnavitia::VehicleJourney* temp = vehicle_journey_;
  vehicle_journey_ = NULL;
  return temp;
}
void PtObject::set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey) {
  delete vehicle_journey_;
  vehicle_journey_ = vehicle_journey;
  if (vehicle_journey) {
    set_has_vehicle_journey();
  } else {
    clear_has_vehicle_journey();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.vehicle_journey)
}

// optional .pbnavitia.Calendar calendar = 18;
bool PtObject::has_calendar() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PtObject::set_has_calendar() {
  _has_bits_[0] |= 0x00010000u;
}
void PtObject::clear_has_calendar() {
  _has_bits_[0] &= ~0x00010000u;
}
void PtObject::clear_calendar() {
  if (calendar_ != NULL) calendar_->::pbnavitia::Calendar::Clear();
  clear_has_calendar();
}
const ::pbnavitia::Calendar& PtObject::calendar() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.calendar)
  return calendar_ != NULL ? *calendar_ : *default_instance_->calendar_;
}
::pbnavitia::Calendar* PtObject::mutable_calendar() {
  set_has_calendar();
  if (calendar_ == NULL) {
    calendar_ = new ::pbnavitia::Calendar;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.calendar)
  return calendar_;
}
::pbnavitia::Calendar* PtObject::release_calendar() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.calendar)
  clear_has_calendar();
  ::pbnavitia::Calendar* temp = calendar_;
  calendar_ = NULL;
  return temp;
}
void PtObject::set_allocated_calendar(::pbnavitia::Calendar* calendar) {
  delete calendar_;
  calendar_ = calendar;
  if (calendar) {
    set_has_calendar();
  } else {
    clear_has_calendar();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.calendar)
}

// optional int32 score = 19;
bool PtObject::has_score() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PtObject::set_has_score() {
  _has_bits_[0] |= 0x00020000u;
}
void PtObject::clear_has_score() {
  _has_bits_[0] &= ~0x00020000u;
}
void PtObject::clear_score() {
  score_ = 0;
  clear_has_score();
}
 ::google::protobuf::int32 PtObject::score() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.score)
  return score_;
}
 void PtObject::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.score)
}

// optional .pbnavitia.Trip trip = 20;
bool PtObject::has_trip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PtObject::set_has_trip() {
  _has_bits_[0] |= 0x00040000u;
}
void PtObject::clear_has_trip() {
  _has_bits_[0] &= ~0x00040000u;
}
void PtObject::clear_trip() {
  if (trip_ != NULL) trip_->::pbnavitia::Trip::Clear();
  clear_has_trip();
}
const ::pbnavitia::Trip& PtObject::trip() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.trip)
  return trip_ != NULL ? *trip_ : *default_instance_->trip_;
}
::pbnavitia::Trip* PtObject::mutable_trip() {
  set_has_trip();
  if (trip_ == NULL) {
    trip_ = new ::pbnavitia::Trip;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.trip)
  return trip_;
}
::pbnavitia::Trip* PtObject::release_trip() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtObject.trip)
  clear_has_trip();
  ::pbnavitia::Trip* temp = trip_;
  trip_ = NULL;
  return temp;
}
void PtObject::set_allocated_trip(::pbnavitia::Trip* trip) {
  delete trip_;
  trip_ = trip;
  if (trip) {
    set_has_trip();
  } else {
    clear_has_trip();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtObject.trip)
}

// repeated int32 scores = 21;
int PtObject::scores_size() const {
  return scores_.size();
}
void PtObject::clear_scores() {
  scores_.Clear();
}
 ::google::protobuf::int32 PtObject::scores(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.scores)
  return scores_.Get(index);
}
 void PtObject::set_scores(int index, ::google::protobuf::int32 value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtObject.scores)
}
 void PtObject::add_scores(::google::protobuf::int32 value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtObject.scores)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PtObject::scores() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtObject.scores)
  return scores_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PtObject::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtObject.scores)
  return &scores_;
}

// repeated .pbnavitia.PtObject stop_points_nearby = 22;
int PtObject::stop_points_nearby_size() const {
  return stop_points_nearby_.size();
}
void PtObject::clear_stop_points_nearby() {
  stop_points_nearby_.Clear();
}
const ::pbnavitia::PtObject& PtObject::stop_points_nearby(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtObject.stop_points_nearby)
  return stop_points_nearby_.Get(index);
}
::pbnavitia::PtObject* PtObject::mutable_stop_points_nearby(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtObject.stop_points_nearby)
  return stop_points_nearby_.Mutable(index);
}
::pbnavitia::PtObject* PtObject::add_stop_points_nearby() {
  // @@protoc_insertion_point(field_add:pbnavitia.PtObject.stop_points_nearby)
  return stop_points_nearby_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
PtObject::mutable_stop_points_nearby() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtObject.stop_points_nearby)
  return &stop_points_nearby_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
PtObject::stop_points_nearby() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtObject.stop_points_nearby)
  return stop_points_nearby_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FareZone::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FareZone::FareZone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.FareZone)
}

void FareZone::InitAsDefaultInstance() {
}

FareZone::FareZone(const FareZone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.FareZone)
}

void FareZone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FareZone::~FareZone() {
  // @@protoc_insertion_point(destructor:pbnavitia.FareZone)
  SharedDtor();
}

void FareZone::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FareZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FareZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FareZone_descriptor_;
}

const FareZone& FareZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

FareZone* FareZone::default_instance_ = NULL;

FareZone* FareZone::New(::google::protobuf::Arena* arena) const {
  FareZone* n = new FareZone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FareZone::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.FareZone)
  if (has_name()) {
    name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FareZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.FareZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.FareZone.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.FareZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.FareZone)
  return false;
#undef DO_
}

void FareZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.FareZone)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FareZone.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.FareZone)
}

::google::protobuf::uint8* FareZone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.FareZone)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FareZone.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.FareZone)
  return target;
}

int FareZone::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.FareZone)
  int total_size = 0;

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FareZone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.FareZone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FareZone* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FareZone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.FareZone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.FareZone)
    MergeFrom(*source);
  }
}

void FareZone::MergeFrom(const FareZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.FareZone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FareZone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.FareZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FareZone::CopyFrom(const FareZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.FareZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FareZone::IsInitialized() const {

  return true;
}

void FareZone::Swap(FareZone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FareZone::InternalSwap(FareZone* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FareZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FareZone_descriptor_;
  metadata.reflection = FareZone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FareZone

// optional string name = 1;
bool FareZone::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FareZone::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FareZone::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FareZone::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& FareZone::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FareZone.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FareZone::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FareZone.name)
}
 void FareZone::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FareZone.name)
}
 void FareZone::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FareZone.name)
}
 ::std::string* FareZone::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FareZone.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FareZone::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.FareZone.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FareZone::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FareZone.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EquipmentDetails_EquipmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentDetails_EquipmentType_descriptor_;
}
bool EquipmentDetails_EquipmentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EquipmentDetails_EquipmentType EquipmentDetails::escalator;
const EquipmentDetails_EquipmentType EquipmentDetails::elevator;
const EquipmentDetails_EquipmentType EquipmentDetails::EquipmentType_MIN;
const EquipmentDetails_EquipmentType EquipmentDetails::EquipmentType_MAX;
const int EquipmentDetails::EquipmentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipmentDetails::kIdFieldNumber;
const int EquipmentDetails::kNameFieldNumber;
const int EquipmentDetails::kEmbeddedTypeFieldNumber;
const int EquipmentDetails::kCurrentAvailabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipmentDetails::EquipmentDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.EquipmentDetails)
}

void EquipmentDetails::InitAsDefaultInstance() {
  current_availability_ = const_cast< ::pbnavitia::CurrentAvailability*>(&::pbnavitia::CurrentAvailability::default_instance());
}

EquipmentDetails::EquipmentDetails(const EquipmentDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.EquipmentDetails)
}

void EquipmentDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  embedded_type_ = 1;
  current_availability_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentDetails::~EquipmentDetails() {
  // @@protoc_insertion_point(destructor:pbnavitia.EquipmentDetails)
  SharedDtor();
}

void EquipmentDetails::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete current_availability_;
  }
}

void EquipmentDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentDetails_descriptor_;
}

const EquipmentDetails& EquipmentDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

EquipmentDetails* EquipmentDetails::default_instance_ = NULL;

EquipmentDetails* EquipmentDetails::New(::google::protobuf::Arena* arena) const {
  EquipmentDetails* n = new EquipmentDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipmentDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.EquipmentDetails)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    embedded_type_ = 1;
    if (has_current_availability()) {
      if (current_availability_ != NULL) current_availability_->::pbnavitia::CurrentAvailability::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EquipmentDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.EquipmentDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.EquipmentDetails.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.EquipmentDetails.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_embedded_type;
        break;
      }

      // optional .pbnavitia.EquipmentDetails.EquipmentType embedded_type = 3;
      case 3: {
        if (tag == 24) {
         parse_embedded_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::EquipmentDetails_EquipmentType_IsValid(value)) {
            set_embedded_type(static_cast< ::pbnavitia::EquipmentDetails_EquipmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_current_availability;
        break;
      }

      // optional .pbnavitia.CurrentAvailability current_availability = 4;
      case 4: {
        if (tag == 34) {
         parse_current_availability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_availability()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.EquipmentDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.EquipmentDetails)
  return false;
#undef DO_
}

void EquipmentDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.EquipmentDetails)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentDetails.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .pbnavitia.EquipmentDetails.EquipmentType embedded_type = 3;
  if (has_embedded_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->embedded_type(), output);
  }

  // optional .pbnavitia.CurrentAvailability current_availability = 4;
  if (has_current_availability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->current_availability_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.EquipmentDetails)
}

::google::protobuf::uint8* EquipmentDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.EquipmentDetails)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentDetails.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .pbnavitia.EquipmentDetails.EquipmentType embedded_type = 3;
  if (has_embedded_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->embedded_type(), target);
  }

  // optional .pbnavitia.CurrentAvailability current_availability = 4;
  if (has_current_availability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->current_availability_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.EquipmentDetails)
  return target;
}

int EquipmentDetails::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.EquipmentDetails)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .pbnavitia.EquipmentDetails.EquipmentType embedded_type = 3;
    if (has_embedded_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->embedded_type());
    }

    // optional .pbnavitia.CurrentAvailability current_availability = 4;
    if (has_current_availability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->current_availability_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.EquipmentDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EquipmentDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipmentDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.EquipmentDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.EquipmentDetails)
    MergeFrom(*source);
  }
}

void EquipmentDetails::MergeFrom(const EquipmentDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.EquipmentDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_embedded_type()) {
      set_embedded_type(from.embedded_type());
    }
    if (from.has_current_availability()) {
      mutable_current_availability()->::pbnavitia::CurrentAvailability::MergeFrom(from.current_availability());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EquipmentDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.EquipmentDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentDetails::CopyFrom(const EquipmentDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.EquipmentDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentDetails::IsInitialized() const {

  return true;
}

void EquipmentDetails::Swap(EquipmentDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipmentDetails::InternalSwap(EquipmentDetails* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(embedded_type_, other->embedded_type_);
  std::swap(current_availability_, other->current_availability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipmentDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentDetails_descriptor_;
  metadata.reflection = EquipmentDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipmentDetails

// optional string id = 1;
bool EquipmentDetails::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EquipmentDetails::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EquipmentDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EquipmentDetails::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& EquipmentDetails::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentDetails.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentDetails::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentDetails.id)
}
 void EquipmentDetails::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentDetails.id)
}
 void EquipmentDetails::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentDetails.id)
}
 ::std::string* EquipmentDetails::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentDetails.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EquipmentDetails::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentDetails.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentDetails::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentDetails.id)
}

// optional string name = 2;
bool EquipmentDetails::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EquipmentDetails::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void EquipmentDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void EquipmentDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& EquipmentDetails::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentDetails.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentDetails.name)
}
 void EquipmentDetails::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentDetails.name)
}
 void EquipmentDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentDetails.name)
}
 ::std::string* EquipmentDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EquipmentDetails::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentDetails.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentDetails.name)
}

// optional .pbnavitia.EquipmentDetails.EquipmentType embedded_type = 3;
bool EquipmentDetails::has_embedded_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EquipmentDetails::set_has_embedded_type() {
  _has_bits_[0] |= 0x00000004u;
}
void EquipmentDetails::clear_has_embedded_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void EquipmentDetails::clear_embedded_type() {
  embedded_type_ = 1;
  clear_has_embedded_type();
}
 ::pbnavitia::EquipmentDetails_EquipmentType EquipmentDetails::embedded_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentDetails.embedded_type)
  return static_cast< ::pbnavitia::EquipmentDetails_EquipmentType >(embedded_type_);
}
 void EquipmentDetails::set_embedded_type(::pbnavitia::EquipmentDetails_EquipmentType value) {
  assert(::pbnavitia::EquipmentDetails_EquipmentType_IsValid(value));
  set_has_embedded_type();
  embedded_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentDetails.embedded_type)
}

// optional .pbnavitia.CurrentAvailability current_availability = 4;
bool EquipmentDetails::has_current_availability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EquipmentDetails::set_has_current_availability() {
  _has_bits_[0] |= 0x00000008u;
}
void EquipmentDetails::clear_has_current_availability() {
  _has_bits_[0] &= ~0x00000008u;
}
void EquipmentDetails::clear_current_availability() {
  if (current_availability_ != NULL) current_availability_->::pbnavitia::CurrentAvailability::Clear();
  clear_has_current_availability();
}
const ::pbnavitia::CurrentAvailability& EquipmentDetails::current_availability() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentDetails.current_availability)
  return current_availability_ != NULL ? *current_availability_ : *default_instance_->current_availability_;
}
::pbnavitia::CurrentAvailability* EquipmentDetails::mutable_current_availability() {
  set_has_current_availability();
  if (current_availability_ == NULL) {
    current_availability_ = new ::pbnavitia::CurrentAvailability;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentDetails.current_availability)
  return current_availability_;
}
::pbnavitia::CurrentAvailability* EquipmentDetails::release_current_availability() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentDetails.current_availability)
  clear_has_current_availability();
  ::pbnavitia::CurrentAvailability* temp = current_availability_;
  current_availability_ = NULL;
  return temp;
}
void EquipmentDetails::set_allocated_current_availability(::pbnavitia::CurrentAvailability* current_availability) {
  delete current_availability_;
  current_availability_ = current_availability;
  if (current_availability) {
    set_has_current_availability();
  } else {
    clear_has_current_availability();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentDetails.current_availability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CurrentAvailability_EquipmentStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentAvailability_EquipmentStatus_descriptor_;
}
bool CurrentAvailability_EquipmentStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CurrentAvailability_EquipmentStatus CurrentAvailability::unknown;
const CurrentAvailability_EquipmentStatus CurrentAvailability::available;
const CurrentAvailability_EquipmentStatus CurrentAvailability::unavailable;
const CurrentAvailability_EquipmentStatus CurrentAvailability::EquipmentStatus_MIN;
const CurrentAvailability_EquipmentStatus CurrentAvailability::EquipmentStatus_MAX;
const int CurrentAvailability::EquipmentStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentAvailability::kStatusFieldNumber;
const int CurrentAvailability::kPeriodsFieldNumber;
const int CurrentAvailability::kUpdatedAtFieldNumber;
const int CurrentAvailability::kCauseFieldNumber;
const int CurrentAvailability::kEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentAvailability::CurrentAvailability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.CurrentAvailability)
}

void CurrentAvailability::InitAsDefaultInstance() {
  cause_ = const_cast< ::pbnavitia::EquipmentCause*>(&::pbnavitia::EquipmentCause::default_instance());
  effect_ = const_cast< ::pbnavitia::EquipmentEffect*>(&::pbnavitia::EquipmentEffect::default_instance());
}

CurrentAvailability::CurrentAvailability(const CurrentAvailability& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.CurrentAvailability)
}

void CurrentAvailability::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  updated_at_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cause_ = NULL;
  effect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentAvailability::~CurrentAvailability() {
  // @@protoc_insertion_point(destructor:pbnavitia.CurrentAvailability)
  SharedDtor();
}

void CurrentAvailability::SharedDtor() {
  updated_at_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cause_;
    delete effect_;
  }
}

void CurrentAvailability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentAvailability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentAvailability_descriptor_;
}

const CurrentAvailability& CurrentAvailability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

CurrentAvailability* CurrentAvailability::default_instance_ = NULL;

CurrentAvailability* CurrentAvailability::New(::google::protobuf::Arena* arena) const {
  CurrentAvailability* n = new CurrentAvailability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrentAvailability::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.CurrentAvailability)
  if (_has_bits_[0 / 32] & 29u) {
    status_ = 0;
    if (has_updated_at()) {
      updated_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cause()) {
      if (cause_ != NULL) cause_->::pbnavitia::EquipmentCause::Clear();
    }
    if (has_effect()) {
      if (effect_ != NULL) effect_->::pbnavitia::EquipmentEffect::Clear();
    }
  }
  periods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CurrentAvailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.CurrentAvailability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.CurrentAvailability.EquipmentStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::CurrentAvailability_EquipmentStatus_IsValid(value)) {
            set_status(static_cast< ::pbnavitia::CurrentAvailability_EquipmentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_periods;
        break;
      }

      // repeated .pbnavitia.Period periods = 2;
      case 2: {
        if (tag == 18) {
         parse_periods:
          DO_(input->IncrementRecursionDepth());
         parse_loop_periods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_periods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_periods;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_updated_at;
        break;
      }

      // optional string updated_at = 3;
      case 3: {
        if (tag == 26) {
         parse_updated_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updated_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->updated_at().data(), this->updated_at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.CurrentAvailability.updated_at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cause;
        break;
      }

      // optional .pbnavitia.EquipmentCause cause = 4;
      case 4: {
        if (tag == 34) {
         parse_cause:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cause()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_effect;
        break;
      }

      // optional .pbnavitia.EquipmentEffect effect = 5;
      case 5: {
        if (tag == 42) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.CurrentAvailability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.CurrentAvailability)
  return false;
#undef DO_
}

void CurrentAvailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.CurrentAvailability)
  // optional .pbnavitia.CurrentAvailability.EquipmentStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .pbnavitia.Period periods = 2;
  for (unsigned int i = 0, n = this->periods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->periods(i), output);
  }

  // optional string updated_at = 3;
  if (has_updated_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updated_at().data(), this->updated_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CurrentAvailability.updated_at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->updated_at(), output);
  }

  // optional .pbnavitia.EquipmentCause cause = 4;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cause_, output);
  }

  // optional .pbnavitia.EquipmentEffect effect = 5;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->effect_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.CurrentAvailability)
}

::google::protobuf::uint8* CurrentAvailability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.CurrentAvailability)
  // optional .pbnavitia.CurrentAvailability.EquipmentStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .pbnavitia.Period periods = 2;
  for (unsigned int i = 0, n = this->periods_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->periods(i), false, target);
  }

  // optional string updated_at = 3;
  if (has_updated_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updated_at().data(), this->updated_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.CurrentAvailability.updated_at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->updated_at(), target);
  }

  // optional .pbnavitia.EquipmentCause cause = 4;
  if (has_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cause_, false, target);
  }

  // optional .pbnavitia.EquipmentEffect effect = 5;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->effect_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.CurrentAvailability)
  return target;
}

int CurrentAvailability::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.CurrentAvailability)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 29u) {
    // optional .pbnavitia.CurrentAvailability.EquipmentStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string updated_at = 3;
    if (has_updated_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updated_at());
    }

    // optional .pbnavitia.EquipmentCause cause = 4;
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cause_);
    }

    // optional .pbnavitia.EquipmentEffect effect = 5;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->effect_);
    }

  }
  // repeated .pbnavitia.Period periods = 2;
  total_size += 1 * this->periods_size();
  for (int i = 0; i < this->periods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->periods(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentAvailability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.CurrentAvailability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CurrentAvailability* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentAvailability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.CurrentAvailability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.CurrentAvailability)
    MergeFrom(*source);
  }
}

void CurrentAvailability::MergeFrom(const CurrentAvailability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.CurrentAvailability)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  periods_.MergeFrom(from.periods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_updated_at()) {
      set_has_updated_at();
      updated_at_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updated_at_);
    }
    if (from.has_cause()) {
      mutable_cause()->::pbnavitia::EquipmentCause::MergeFrom(from.cause());
    }
    if (from.has_effect()) {
      mutable_effect()->::pbnavitia::EquipmentEffect::MergeFrom(from.effect());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CurrentAvailability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.CurrentAvailability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentAvailability::CopyFrom(const CurrentAvailability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.CurrentAvailability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentAvailability::IsInitialized() const {

  return true;
}

void CurrentAvailability::Swap(CurrentAvailability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentAvailability::InternalSwap(CurrentAvailability* other) {
  std::swap(status_, other->status_);
  periods_.UnsafeArenaSwap(&other->periods_);
  updated_at_.Swap(&other->updated_at_);
  std::swap(cause_, other->cause_);
  std::swap(effect_, other->effect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrentAvailability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentAvailability_descriptor_;
  metadata.reflection = CurrentAvailability_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrentAvailability

// optional .pbnavitia.CurrentAvailability.EquipmentStatus status = 1;
bool CurrentAvailability::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurrentAvailability::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void CurrentAvailability::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurrentAvailability::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::pbnavitia::CurrentAvailability_EquipmentStatus CurrentAvailability::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.status)
  return static_cast< ::pbnavitia::CurrentAvailability_EquipmentStatus >(status_);
}
 void CurrentAvailability::set_status(::pbnavitia::CurrentAvailability_EquipmentStatus value) {
  assert(::pbnavitia::CurrentAvailability_EquipmentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.CurrentAvailability.status)
}

// repeated .pbnavitia.Period periods = 2;
int CurrentAvailability::periods_size() const {
  return periods_.size();
}
void CurrentAvailability::clear_periods() {
  periods_.Clear();
}
const ::pbnavitia::Period& CurrentAvailability::periods(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.periods)
  return periods_.Get(index);
}
::pbnavitia::Period* CurrentAvailability::mutable_periods(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.CurrentAvailability.periods)
  return periods_.Mutable(index);
}
::pbnavitia::Period* CurrentAvailability::add_periods() {
  // @@protoc_insertion_point(field_add:pbnavitia.CurrentAvailability.periods)
  return periods_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >*
CurrentAvailability::mutable_periods() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.CurrentAvailability.periods)
  return &periods_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Period >&
CurrentAvailability::periods() const {
  // @@protoc_insertion_point(field_list:pbnavitia.CurrentAvailability.periods)
  return periods_;
}

// optional string updated_at = 3;
bool CurrentAvailability::has_updated_at() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CurrentAvailability::set_has_updated_at() {
  _has_bits_[0] |= 0x00000004u;
}
void CurrentAvailability::clear_has_updated_at() {
  _has_bits_[0] &= ~0x00000004u;
}
void CurrentAvailability::clear_updated_at() {
  updated_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updated_at();
}
 const ::std::string& CurrentAvailability::updated_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.updated_at)
  return updated_at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CurrentAvailability::set_updated_at(const ::std::string& value) {
  set_has_updated_at();
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.CurrentAvailability.updated_at)
}
 void CurrentAvailability::set_updated_at(const char* value) {
  set_has_updated_at();
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.CurrentAvailability.updated_at)
}
 void CurrentAvailability::set_updated_at(const char* value, size_t size) {
  set_has_updated_at();
  updated_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.CurrentAvailability.updated_at)
}
 ::std::string* CurrentAvailability::mutable_updated_at() {
  set_has_updated_at();
  // @@protoc_insertion_point(field_mutable:pbnavitia.CurrentAvailability.updated_at)
  return updated_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CurrentAvailability::release_updated_at() {
  // @@protoc_insertion_point(field_release:pbnavitia.CurrentAvailability.updated_at)
  clear_has_updated_at();
  return updated_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CurrentAvailability::set_allocated_updated_at(::std::string* updated_at) {
  if (updated_at != NULL) {
    set_has_updated_at();
  } else {
    clear_has_updated_at();
  }
  updated_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updated_at);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CurrentAvailability.updated_at)
}

// optional .pbnavitia.EquipmentCause cause = 4;
bool CurrentAvailability::has_cause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CurrentAvailability::set_has_cause() {
  _has_bits_[0] |= 0x00000008u;
}
void CurrentAvailability::clear_has_cause() {
  _has_bits_[0] &= ~0x00000008u;
}
void CurrentAvailability::clear_cause() {
  if (cause_ != NULL) cause_->::pbnavitia::EquipmentCause::Clear();
  clear_has_cause();
}
const ::pbnavitia::EquipmentCause& CurrentAvailability::cause() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.cause)
  return cause_ != NULL ? *cause_ : *default_instance_->cause_;
}
::pbnavitia::EquipmentCause* CurrentAvailability::mutable_cause() {
  set_has_cause();
  if (cause_ == NULL) {
    cause_ = new ::pbnavitia::EquipmentCause;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.CurrentAvailability.cause)
  return cause_;
}
::pbnavitia::EquipmentCause* CurrentAvailability::release_cause() {
  // @@protoc_insertion_point(field_release:pbnavitia.CurrentAvailability.cause)
  clear_has_cause();
  ::pbnavitia::EquipmentCause* temp = cause_;
  cause_ = NULL;
  return temp;
}
void CurrentAvailability::set_allocated_cause(::pbnavitia::EquipmentCause* cause) {
  delete cause_;
  cause_ = cause;
  if (cause) {
    set_has_cause();
  } else {
    clear_has_cause();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CurrentAvailability.cause)
}

// optional .pbnavitia.EquipmentEffect effect = 5;
bool CurrentAvailability::has_effect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CurrentAvailability::set_has_effect() {
  _has_bits_[0] |= 0x00000010u;
}
void CurrentAvailability::clear_has_effect() {
  _has_bits_[0] &= ~0x00000010u;
}
void CurrentAvailability::clear_effect() {
  if (effect_ != NULL) effect_->::pbnavitia::EquipmentEffect::Clear();
  clear_has_effect();
}
const ::pbnavitia::EquipmentEffect& CurrentAvailability::effect() const {
  // @@protoc_insertion_point(field_get:pbnavitia.CurrentAvailability.effect)
  return effect_ != NULL ? *effect_ : *default_instance_->effect_;
}
::pbnavitia::EquipmentEffect* CurrentAvailability::mutable_effect() {
  set_has_effect();
  if (effect_ == NULL) {
    effect_ = new ::pbnavitia::EquipmentEffect;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.CurrentAvailability.effect)
  return effect_;
}
::pbnavitia::EquipmentEffect* CurrentAvailability::release_effect() {
  // @@protoc_insertion_point(field_release:pbnavitia.CurrentAvailability.effect)
  clear_has_effect();
  ::pbnavitia::EquipmentEffect* temp = effect_;
  effect_ = NULL;
  return temp;
}
void CurrentAvailability::set_allocated_effect(::pbnavitia::EquipmentEffect* effect) {
  delete effect_;
  effect_ = effect;
  if (effect) {
    set_has_effect();
  } else {
    clear_has_effect();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.CurrentAvailability.effect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipmentCause::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipmentCause::EquipmentCause()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.EquipmentCause)
}

void EquipmentCause::InitAsDefaultInstance() {
}

EquipmentCause::EquipmentCause(const EquipmentCause& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.EquipmentCause)
}

void EquipmentCause::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCause::~EquipmentCause() {
  // @@protoc_insertion_point(destructor:pbnavitia.EquipmentCause)
  SharedDtor();
}

void EquipmentCause::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EquipmentCause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentCause::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentCause_descriptor_;
}

const EquipmentCause& EquipmentCause::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

EquipmentCause* EquipmentCause::default_instance_ = NULL;

EquipmentCause* EquipmentCause::New(::google::protobuf::Arena* arena) const {
  EquipmentCause* n = new EquipmentCause;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipmentCause::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.EquipmentCause)
  if (has_label()) {
    label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EquipmentCause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.EquipmentCause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.EquipmentCause.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.EquipmentCause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.EquipmentCause)
  return false;
#undef DO_
}

void EquipmentCause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.EquipmentCause)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentCause.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.EquipmentCause)
}

::google::protobuf::uint8* EquipmentCause::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.EquipmentCause)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentCause.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.EquipmentCause)
  return target;
}

int EquipmentCause::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.EquipmentCause)
  int total_size = 0;

  // optional string label = 1;
  if (has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCause::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.EquipmentCause)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EquipmentCause* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipmentCause>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.EquipmentCause)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.EquipmentCause)
    MergeFrom(*source);
  }
}

void EquipmentCause::MergeFrom(const EquipmentCause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.EquipmentCause)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EquipmentCause::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.EquipmentCause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentCause::CopyFrom(const EquipmentCause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.EquipmentCause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCause::IsInitialized() const {

  return true;
}

void EquipmentCause::Swap(EquipmentCause* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipmentCause::InternalSwap(EquipmentCause* other) {
  label_.Swap(&other->label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipmentCause::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentCause_descriptor_;
  metadata.reflection = EquipmentCause_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipmentCause

// optional string label = 1;
bool EquipmentCause::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EquipmentCause::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void EquipmentCause::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void EquipmentCause::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& EquipmentCause::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentCause.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentCause::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentCause.label)
}
 void EquipmentCause::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentCause.label)
}
 void EquipmentCause::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentCause.label)
}
 ::std::string* EquipmentCause::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentCause.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EquipmentCause::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentCause.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentCause::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentCause.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipmentEffect::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipmentEffect::EquipmentEffect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.EquipmentEffect)
}

void EquipmentEffect::InitAsDefaultInstance() {
}

EquipmentEffect::EquipmentEffect(const EquipmentEffect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.EquipmentEffect)
}

void EquipmentEffect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentEffect::~EquipmentEffect() {
  // @@protoc_insertion_point(destructor:pbnavitia.EquipmentEffect)
  SharedDtor();
}

void EquipmentEffect::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EquipmentEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentEffect_descriptor_;
}

const EquipmentEffect& EquipmentEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

EquipmentEffect* EquipmentEffect::default_instance_ = NULL;

EquipmentEffect* EquipmentEffect::New(::google::protobuf::Arena* arena) const {
  EquipmentEffect* n = new EquipmentEffect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipmentEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.EquipmentEffect)
  if (has_label()) {
    label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EquipmentEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.EquipmentEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.EquipmentEffect.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.EquipmentEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.EquipmentEffect)
  return false;
#undef DO_
}

void EquipmentEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.EquipmentEffect)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentEffect.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.EquipmentEffect)
}

::google::protobuf::uint8* EquipmentEffect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.EquipmentEffect)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.EquipmentEffect.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.EquipmentEffect)
  return target;
}

int EquipmentEffect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.EquipmentEffect)
  int total_size = 0;

  // optional string label = 1;
  if (has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentEffect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.EquipmentEffect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EquipmentEffect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipmentEffect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.EquipmentEffect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.EquipmentEffect)
    MergeFrom(*source);
  }
}

void EquipmentEffect::MergeFrom(const EquipmentEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.EquipmentEffect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EquipmentEffect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.EquipmentEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentEffect::CopyFrom(const EquipmentEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.EquipmentEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentEffect::IsInitialized() const {

  return true;
}

void EquipmentEffect::Swap(EquipmentEffect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipmentEffect::InternalSwap(EquipmentEffect* other) {
  label_.Swap(&other->label_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipmentEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentEffect_descriptor_;
  metadata.reflection = EquipmentEffect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipmentEffect

// optional string label = 1;
bool EquipmentEffect::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EquipmentEffect::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void EquipmentEffect::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void EquipmentEffect::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& EquipmentEffect::label() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentEffect.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentEffect::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.EquipmentEffect.label)
}
 void EquipmentEffect::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.EquipmentEffect.label)
}
 void EquipmentEffect::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.EquipmentEffect.label)
}
 ::std::string* EquipmentEffect::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentEffect.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EquipmentEffect::release_label() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentEffect.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EquipmentEffect::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentEffect.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopAreaEquipment::kStopAreaFieldNumber;
const int StopAreaEquipment::kEquipmentDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopAreaEquipment::StopAreaEquipment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StopAreaEquipment)
}

void StopAreaEquipment::InitAsDefaultInstance() {
  stop_area_ = const_cast< ::pbnavitia::StopArea*>(&::pbnavitia::StopArea::default_instance());
}

StopAreaEquipment::StopAreaEquipment(const StopAreaEquipment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StopAreaEquipment)
}

void StopAreaEquipment::SharedCtor() {
  _cached_size_ = 0;
  stop_area_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopAreaEquipment::~StopAreaEquipment() {
  // @@protoc_insertion_point(destructor:pbnavitia.StopAreaEquipment)
  SharedDtor();
}

void StopAreaEquipment::SharedDtor() {
  if (this != default_instance_) {
    delete stop_area_;
  }
}

void StopAreaEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopAreaEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopAreaEquipment_descriptor_;
}

const StopAreaEquipment& StopAreaEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_type_2eproto();
  return *default_instance_;
}

StopAreaEquipment* StopAreaEquipment::default_instance_ = NULL;

StopAreaEquipment* StopAreaEquipment::New(::google::protobuf::Arena* arena) const {
  StopAreaEquipment* n = new StopAreaEquipment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopAreaEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StopAreaEquipment)
  if (has_stop_area()) {
    if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
  }
  equipment_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopAreaEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StopAreaEquipment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.StopArea stop_area = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipment_details;
        break;
      }

      // repeated .pbnavitia.EquipmentDetails equipment_details = 2;
      case 2: {
        if (tag == 18) {
         parse_equipment_details:
          DO_(input->IncrementRecursionDepth());
         parse_loop_equipment_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_equipment_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_equipment_details;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StopAreaEquipment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StopAreaEquipment)
  return false;
#undef DO_
}

void StopAreaEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StopAreaEquipment)
  // optional .pbnavitia.StopArea stop_area = 1;
  if (has_stop_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_area_, output);
  }

  // repeated .pbnavitia.EquipmentDetails equipment_details = 2;
  for (unsigned int i = 0, n = this->equipment_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipment_details(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StopAreaEquipment)
}

::google::protobuf::uint8* StopAreaEquipment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StopAreaEquipment)
  // optional .pbnavitia.StopArea stop_area = 1;
  if (has_stop_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_area_, false, target);
  }

  // repeated .pbnavitia.EquipmentDetails equipment_details = 2;
  for (unsigned int i = 0, n = this->equipment_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->equipment_details(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StopAreaEquipment)
  return target;
}

int StopAreaEquipment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StopAreaEquipment)
  int total_size = 0;

  // optional .pbnavitia.StopArea stop_area = 1;
  if (has_stop_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_area_);
  }

  // repeated .pbnavitia.EquipmentDetails equipment_details = 2;
  total_size += 1 * this->equipment_details_size();
  for (int i = 0; i < this->equipment_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment_details(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopAreaEquipment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StopAreaEquipment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopAreaEquipment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopAreaEquipment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StopAreaEquipment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StopAreaEquipment)
    MergeFrom(*source);
  }
}

void StopAreaEquipment::MergeFrom(const StopAreaEquipment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StopAreaEquipment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  equipment_details_.MergeFrom(from.equipment_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_area()) {
      mutable_stop_area()->::pbnavitia::StopArea::MergeFrom(from.stop_area());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopAreaEquipment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StopAreaEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAreaEquipment::CopyFrom(const StopAreaEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StopAreaEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAreaEquipment::IsInitialized() const {

  if (has_stop_area()) {
    if (!this->stop_area_->IsInitialized()) return false;
  }
  return true;
}

void StopAreaEquipment::Swap(StopAreaEquipment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopAreaEquipment::InternalSwap(StopAreaEquipment* other) {
  std::swap(stop_area_, other->stop_area_);
  equipment_details_.UnsafeArenaSwap(&other->equipment_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopAreaEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopAreaEquipment_descriptor_;
  metadata.reflection = StopAreaEquipment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopAreaEquipment

// optional .pbnavitia.StopArea stop_area = 1;
bool StopAreaEquipment::has_stop_area() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopAreaEquipment::set_has_stop_area() {
  _has_bits_[0] |= 0x00000001u;
}
void StopAreaEquipment::clear_has_stop_area() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopAreaEquipment::clear_stop_area() {
  if (stop_area_ != NULL) stop_area_->::pbnavitia::StopArea::Clear();
  clear_has_stop_area();
}
const ::pbnavitia::StopArea& StopAreaEquipment::stop_area() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopAreaEquipment.stop_area)
  return stop_area_ != NULL ? *stop_area_ : *default_instance_->stop_area_;
}
::pbnavitia::StopArea* StopAreaEquipment::mutable_stop_area() {
  set_has_stop_area();
  if (stop_area_ == NULL) {
    stop_area_ = new ::pbnavitia::StopArea;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopAreaEquipment.stop_area)
  return stop_area_;
}
::pbnavitia::StopArea* StopAreaEquipment::release_stop_area() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopAreaEquipment.stop_area)
  clear_has_stop_area();
  ::pbnavitia::StopArea* temp = stop_area_;
  stop_area_ = NULL;
  return temp;
}
void StopAreaEquipment::set_allocated_stop_area(::pbnavitia::StopArea* stop_area) {
  delete stop_area_;
  stop_area_ = stop_area;
  if (stop_area) {
    set_has_stop_area();
  } else {
    clear_has_stop_area();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopAreaEquipment.stop_area)
}

// repeated .pbnavitia.EquipmentDetails equipment_details = 2;
int StopAreaEquipment::equipment_details_size() const {
  return equipment_details_.size();
}
void StopAreaEquipment::clear_equipment_details() {
  equipment_details_.Clear();
}
const ::pbnavitia::EquipmentDetails& StopAreaEquipment::equipment_details(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopAreaEquipment.equipment_details)
  return equipment_details_.Get(index);
}
::pbnavitia::EquipmentDetails* StopAreaEquipment::mutable_equipment_details(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopAreaEquipment.equipment_details)
  return equipment_details_.Mutable(index);
}
::pbnavitia::EquipmentDetails* StopAreaEquipment::add_equipment_details() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopAreaEquipment.equipment_details)
  return equipment_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >*
StopAreaEquipment::mutable_equipment_details() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopAreaEquipment.equipment_details)
  return &equipment_details_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentDetails >&
StopAreaEquipment::equipment_details() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopAreaEquipment.equipment_details)
  return equipment_details_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnavitia

// @@protoc_insertion_point(global_scope)
