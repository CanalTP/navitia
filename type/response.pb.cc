// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbnavitia {

namespace {

const ::google::protobuf::Descriptor* PathItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreetNetwork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreetNetwork_reflection_ = NULL;
const ::google::protobuf::Descriptor* PtDisplayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PtDisplayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Uris_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uris_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cost_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ticket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ticket_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fare_reflection_ = NULL;
const ::google::protobuf::Descriptor* Co2Emission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Co2Emission_reflection_ = NULL;
const ::google::protobuf::Descriptor* Durations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Durations_reflection_ = NULL;
const ::google::protobuf::Descriptor* Distances_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Distances_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndividualRating_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndividualRating_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndividualInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndividualInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatsDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatsDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* RidesharingInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RidesharingInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedPublisher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedPublisher_reflection_ = NULL;
const ::google::protobuf::Descriptor* Section_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Section_reflection_ = NULL;
const ::google::protobuf::Descriptor* Journey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Journey_reflection_ = NULL;
const ::google::protobuf::Descriptor* Planner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Planner_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeoStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScheduleStopTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScheduleStopTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteScheduleRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteScheduleRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Passage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Passage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepartureBoard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepartureBoard_reflection_ = NULL;
const ::google::protobuf::Descriptor* Load_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Load_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pagination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pagination_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_error_id_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TrafficReports_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficReports_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* GraphicalIsochrone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphicalIsochrone_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeatMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeatMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutingElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutingElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreetNetworkRoutingRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreetNetworkRoutingRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreetNetworkRoutingMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreetNetworkRoutingMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* NearestStopPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NearestStopPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CyclePathType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StreetNetworkMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransferType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SectionAdditionalInformationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GenderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoutingStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_response_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_response_2eproto() {
  protobuf_AddDesc_response_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "response.proto");
  GOOGLE_CHECK(file != NULL);
  PathItem_descriptor_ = file->message_type(0);
  static const int PathItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathItem, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathItem, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathItem, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathItem, cycle_path_type_),
  };
  PathItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathItem_descriptor_,
      PathItem::default_instance_,
      PathItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(PathItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathItem, _internal_metadata_),
      -1);
  StreetNetwork_descriptor_ = file->message_type(1);
  static const int StreetNetwork_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetwork, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetwork, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetwork, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetwork, path_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetwork, coordinates_),
  };
  StreetNetwork_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreetNetwork_descriptor_,
      StreetNetwork::default_instance_,
      StreetNetwork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetwork, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreetNetwork),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetwork, _internal_metadata_),
      -1);
  PtDisplayInfo_descriptor_ = file->message_type(2);
  static const int PtDisplayInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, headsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, commercial_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, physical_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, has_equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, impact_uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, headsigns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, text_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, trip_short_name_),
  };
  PtDisplayInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PtDisplayInfo_descriptor_,
      PtDisplayInfo::default_instance_,
      PtDisplayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PtDisplayInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtDisplayInfo, _internal_metadata_),
      -1);
  Uris_descriptor_ = file->message_type(3);
  static const int Uris_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, company_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, vehicle_journey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, commercial_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, physical_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, journey_pattern_),
  };
  Uris_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Uris_descriptor_,
      Uris::default_instance_,
      Uris_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, _has_bits_[0]),
      -1,
      -1,
      sizeof(Uris),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uris, _internal_metadata_),
      -1);
  Cost_descriptor_ = file->message_type(4);
  static const int Cost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cost, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cost, currency_),
  };
  Cost_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cost_descriptor_,
      Cost::default_instance_,
      Cost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cost, _has_bits_[0]),
      -1,
      -1,
      sizeof(Cost),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cost, _internal_metadata_),
      -1);
  Ticket_descriptor_ = file->message_type(5);
  static const int Ticket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, section_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, source_id_),
  };
  Ticket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ticket_descriptor_,
      Ticket::default_instance_,
      Ticket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ticket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, _internal_metadata_),
      -1);
  Fare_descriptor_ = file->message_type(6);
  static const int Fare_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fare, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fare, ticket_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fare, found_),
  };
  Fare_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Fare_descriptor_,
      Fare::default_instance_,
      Fare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fare, _has_bits_[0]),
      -1,
      -1,
      sizeof(Fare),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fare, _internal_metadata_),
      -1);
  Co2Emission_descriptor_ = file->message_type(7);
  static const int Co2Emission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Co2Emission, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Co2Emission, unit_),
  };
  Co2Emission_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Co2Emission_descriptor_,
      Co2Emission::default_instance_,
      Co2Emission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Co2Emission, _has_bits_[0]),
      -1,
      -1,
      sizeof(Co2Emission),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Co2Emission, _internal_metadata_),
      -1);
  Durations_descriptor_ = file->message_type(8);
  static const int Durations_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Durations, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Durations, walking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Durations, bike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Durations, car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Durations, ridesharing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Durations, taxi_),
  };
  Durations_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Durations_descriptor_,
      Durations::default_instance_,
      Durations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Durations, _has_bits_[0]),
      -1,
      -1,
      sizeof(Durations),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Durations, _internal_metadata_),
      -1);
  Distances_descriptor_ = file->message_type(9);
  static const int Distances_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distances, walking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distances, bike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distances, car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distances, ridesharing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distances, taxi_),
  };
  Distances_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Distances_descriptor_,
      Distances::default_instance_,
      Distances_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distances, _has_bits_[0]),
      -1,
      -1,
      sizeof(Distances),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distances, _internal_metadata_),
      -1);
  IndividualRating_descriptor_ = file->message_type(10);
  static const int IndividualRating_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualRating, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualRating, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualRating, scale_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualRating, scale_max_),
  };
  IndividualRating_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndividualRating_descriptor_,
      IndividualRating::default_instance_,
      IndividualRating_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualRating, _has_bits_[0]),
      -1,
      -1,
      sizeof(IndividualRating),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualRating, _internal_metadata_),
      -1);
  IndividualInformation_descriptor_ = file->message_type(11);
  static const int IndividualInformation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualInformation, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualInformation, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualInformation, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualInformation, rating_),
  };
  IndividualInformation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IndividualInformation_descriptor_,
      IndividualInformation::default_instance_,
      IndividualInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualInformation, _has_bits_[0]),
      -1,
      -1,
      sizeof(IndividualInformation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualInformation, _internal_metadata_),
      -1);
  SeatsDescription_descriptor_ = file->message_type(12);
  static const int SeatsDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatsDescription, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatsDescription, available_),
  };
  SeatsDescription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeatsDescription_descriptor_,
      SeatsDescription::default_instance_,
      SeatsDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatsDescription, _has_bits_[0]),
      -1,
      -1,
      sizeof(SeatsDescription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatsDescription, _internal_metadata_),
      -1);
  ExternalLink_descriptor_ = file->message_type(13);
  static const int ExternalLink_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalLink, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalLink, href_),
  };
  ExternalLink_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternalLink_descriptor_,
      ExternalLink::default_instance_,
      ExternalLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalLink, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExternalLink),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalLink, _internal_metadata_),
      -1);
  RidesharingInformation_descriptor_ = file->message_type(14);
  static const int RidesharingInformation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesharingInformation, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesharingInformation, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesharingInformation, driver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesharingInformation, seats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesharingInformation, links_),
  };
  RidesharingInformation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RidesharingInformation_descriptor_,
      RidesharingInformation::default_instance_,
      RidesharingInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesharingInformation, _has_bits_[0]),
      -1,
      -1,
      sizeof(RidesharingInformation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidesharingInformation, _internal_metadata_),
      -1);
  FeedPublisher_descriptor_ = file->message_type(15);
  static const int FeedPublisher_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPublisher, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPublisher, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPublisher, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPublisher, license_),
  };
  FeedPublisher_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeedPublisher_descriptor_,
      FeedPublisher::default_instance_,
      FeedPublisher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPublisher, _has_bits_[0]),
      -1,
      -1,
      sizeof(FeedPublisher),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPublisher, _internal_metadata_),
      -1);
  Section_descriptor_ = file->message_type(16);
  static const int Section_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, pt_display_informations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, vehicle_journey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, stop_date_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, street_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, cycle_lane_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, transfer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, ridesharing_journeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, ridesharing_information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, begin_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, end_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, base_begin_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, base_end_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, realtime_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, co2_emission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, additional_informations_),
  };
  Section_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Section_descriptor_,
      Section::default_instance_,
      Section_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, _has_bits_[0]),
      -1,
      -1,
      sizeof(Section),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Section, _internal_metadata_),
      -1);
  Journey_descriptor_ = file->message_type(17);
  static const int Journey_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, nb_transfers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, departure_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, arrival_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, requested_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, sections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, fare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, calendars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, co2_emission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, most_serious_disruption_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, internal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, sn_dur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, transfer_dur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, min_waiting_dur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, nb_vj_extentions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, nb_sections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, durations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, distances_),
  };
  Journey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Journey_descriptor_,
      Journey::default_instance_,
      Journey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, _has_bits_[0]),
      -1,
      -1,
      sizeof(Journey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journey, _internal_metadata_),
      -1);
  Planner_descriptor_ = file->message_type(18);
  static const int Planner_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Planner, journeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Planner, response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Planner, before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Planner, after_),
  };
  Planner_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Planner_descriptor_,
      Planner::default_instance_,
      Planner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Planner, _has_bits_[0]),
      -1,
      -1,
      sizeof(Planner),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Planner, _internal_metadata_),
      -1);
  GeoStatus_descriptor_ = file->message_type(19);
  static const int GeoStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, street_network_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, nb_admins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, nb_admins_from_cities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, nb_ways_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, nb_addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, nb_poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, poi_source_),
  };
  GeoStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeoStatus_descriptor_,
      GeoStatus::default_instance_,
      GeoStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(GeoStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoStatus, _internal_metadata_),
      -1);
  Status_descriptor_ = file->message_type(20);
  static const int Status_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, publication_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, start_production_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, end_production_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, data_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, navitia_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, data_sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, last_load_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, last_load_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, loaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, nb_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, is_connected_to_rabbitmq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, last_rt_data_loaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, is_realtime_loaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, dataset_created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, rt_contributors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, disruption_error_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      -1);
  ScheduleStopTime_descriptor_ = file->message_type(21);
  static const int ScheduleStopTime_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, dt_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, realtime_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, base_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, impact_uris_),
  };
  ScheduleStopTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScheduleStopTime_descriptor_,
      ScheduleStopTime::default_instance_,
      ScheduleStopTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScheduleStopTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleStopTime, _internal_metadata_),
      -1);
  RouteScheduleRow_descriptor_ = file->message_type(22);
  static const int RouteScheduleRow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteScheduleRow, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteScheduleRow, date_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteScheduleRow, stop_times_),
  };
  RouteScheduleRow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteScheduleRow_descriptor_,
      RouteScheduleRow::default_instance_,
      RouteScheduleRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteScheduleRow, _has_bits_[0]),
      -1,
      -1,
      sizeof(RouteScheduleRow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteScheduleRow, _internal_metadata_),
      -1);
  Header_descriptor_ = file->message_type(23);
  static const int Header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, pt_display_informations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, additional_informations_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      -1);
  Table_descriptor_ = file->message_type(24);
  static const int Table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, headers_),
  };
  Table_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_descriptor_,
      Table::default_instance_,
      Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _has_bits_[0]),
      -1,
      -1,
      sizeof(Table),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _internal_metadata_),
      -1);
  RouteSchedule_descriptor_ = file->message_type(25);
  static const int RouteSchedule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteSchedule, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteSchedule, pt_display_informations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteSchedule, geojson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteSchedule, response_status_),
  };
  RouteSchedule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteSchedule_descriptor_,
      RouteSchedule::default_instance_,
      RouteSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteSchedule, _has_bits_[0]),
      -1,
      -1,
      sizeof(RouteSchedule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteSchedule, _internal_metadata_),
      -1);
  Passage_descriptor_ = file->message_type(26);
  static const int Passage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, stop_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, pt_display_informations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, route_),
  };
  Passage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Passage_descriptor_,
      Passage::default_instance_,
      Passage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, _has_bits_[0]),
      -1,
      -1,
      sizeof(Passage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, _internal_metadata_),
      -1);
  RoutePoint_descriptor_ = file->message_type(27);
  static const int RoutePoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, pt_display_informations_),
  };
  RoutePoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoutePoint_descriptor_,
      RoutePoint::default_instance_,
      RoutePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoutePoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePoint, _internal_metadata_),
      -1);
  BoardItem_descriptor_ = file->message_type(28);
  static const int BoardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardItem, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardItem, minutes_),
  };
  BoardItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoardItem_descriptor_,
      BoardItem::default_instance_,
      BoardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(BoardItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardItem, _internal_metadata_),
      -1);
  DepartureBoard_descriptor_ = file->message_type(29);
  static const int DepartureBoard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartureBoard, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartureBoard, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartureBoard, board_items_),
  };
  DepartureBoard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DepartureBoard_descriptor_,
      DepartureBoard::default_instance_,
      DepartureBoard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartureBoard, _has_bits_[0]),
      -1,
      -1,
      sizeof(DepartureBoard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartureBoard, _internal_metadata_),
      -1);
  Load_descriptor_ = file->message_type(30);
  static const int Load_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Load, ok_),
  };
  Load_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Load_descriptor_,
      Load::default_instance_,
      Load_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Load, _has_bits_[0]),
      -1,
      -1,
      sizeof(Load),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Load, _internal_metadata_),
      -1);
  Metadatas_descriptor_ = file->message_type(31);
  static const int Metadatas_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, start_production_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, end_production_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, contributors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, last_load_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, dataset_created_at_),
  };
  Metadatas_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Metadatas_descriptor_,
      Metadatas::default_instance_,
      Metadatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, _has_bits_[0]),
      -1,
      -1,
      sizeof(Metadatas),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatas, _internal_metadata_),
      -1);
  Pagination_descriptor_ = file->message_type(32);
  static const int Pagination_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pagination, totalresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pagination, startpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pagination, itemsperpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pagination, itemsonpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pagination, nextpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pagination, previouspage_),
  };
  Pagination_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pagination_descriptor_,
      Pagination::default_instance_,
      Pagination_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pagination, _has_bits_[0]),
      -1,
      -1,
      sizeof(Pagination),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pagination, _internal_metadata_),
      -1);
  StopSchedule_descriptor_ = file->message_type(33);
  static const int StopSchedule_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, pt_display_informations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, date_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, response_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, first_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, last_datetime_),
  };
  StopSchedule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StopSchedule_descriptor_,
      StopSchedule::default_instance_,
      StopSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, _has_bits_[0]),
      -1,
      -1,
      sizeof(StopSchedule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopSchedule, _internal_metadata_),
      -1);
  Error_descriptor_ = file->message_type(34);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
      -1);
  Error_error_id_descriptor_ = Error_descriptor_->enum_type(0);
  TrafficReports_descriptor_ = file->message_type(35);
  static const int TrafficReports_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReports, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReports, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReports, stop_areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReports, vehicle_journeys_),
  };
  TrafficReports_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficReports_descriptor_,
      TrafficReports::default_instance_,
      TrafficReports_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReports, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrafficReports),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficReports, _internal_metadata_),
      -1);
  LineReport_descriptor_ = file->message_type(36);
  static const int LineReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReport, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReport, pt_objects_),
  };
  LineReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LineReport_descriptor_,
      LineReport::default_instance_,
      LineReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(LineReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineReport, _internal_metadata_),
      -1);
  LinkArgs_descriptor_ = file->message_type(37);
  static const int LinkArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkArgs, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkArgs, values_),
  };
  LinkArgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LinkArgs_descriptor_,
      LinkArgs::default_instance_,
      LinkArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkArgs, _has_bits_[0]),
      -1,
      -1,
      sizeof(LinkArgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkArgs, _internal_metadata_),
      -1);
  Link_descriptor_ = file->message_type(38);
  static const int Link_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, rel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, is_templated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, kwargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, ressource_name_),
  };
  Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _has_bits_[0]),
      -1,
      -1,
      sizeof(Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _internal_metadata_),
      -1);
  GraphicalIsochrone_descriptor_ = file->message_type(39);
  static const int GraphicalIsochrone_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, geojson_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, max_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, min_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, requested_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, min_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, max_date_time_),
  };
  GraphicalIsochrone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GraphicalIsochrone_descriptor_,
      GraphicalIsochrone::default_instance_,
      GraphicalIsochrone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, _has_bits_[0]),
      -1,
      -1,
      sizeof(GraphicalIsochrone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphicalIsochrone, _internal_metadata_),
      -1);
  HeatMap_descriptor_ = file->message_type(40);
  static const int HeatMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMap, heat_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMap, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMap, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMap, requested_date_time_),
  };
  HeatMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeatMap_descriptor_,
      HeatMap::default_instance_,
      HeatMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeatMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeatMap, _internal_metadata_),
      -1);
  RoutingElement_descriptor_ = file->message_type(41);
  static const int RoutingElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingElement, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingElement, routing_status_),
  };
  RoutingElement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoutingElement_descriptor_,
      RoutingElement::default_instance_,
      RoutingElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingElement, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoutingElement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingElement, _internal_metadata_),
      -1);
  StreetNetworkRoutingRow_descriptor_ = file->message_type(42);
  static const int StreetNetworkRoutingRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingRow, routing_response_),
  };
  StreetNetworkRoutingRow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreetNetworkRoutingRow_descriptor_,
      StreetNetworkRoutingRow::default_instance_,
      StreetNetworkRoutingRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingRow, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreetNetworkRoutingRow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingRow, _internal_metadata_),
      -1);
  StreetNetworkRoutingMatrix_descriptor_ = file->message_type(43);
  static const int StreetNetworkRoutingMatrix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrix, rows_),
  };
  StreetNetworkRoutingMatrix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreetNetworkRoutingMatrix_descriptor_,
      StreetNetworkRoutingMatrix::default_instance_,
      StreetNetworkRoutingMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrix, _has_bits_[0]),
      -1,
      -1,
      sizeof(StreetNetworkRoutingMatrix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNetworkRoutingMatrix, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(44);
  static const int Response_offsets_[58] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, publication_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, ignored_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, bad_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, places_nearby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, validity_patterns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, journey_patterns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, vehicle_journeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, stop_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, stop_areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, networks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, physical_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, commercial_modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, journey_pattern_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, companies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, pois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, poi_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, calendars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, line_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, trips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, contributors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, datasets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, route_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, impacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, journeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, next_request_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, route_schedules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, departure_boards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, next_departures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, next_arrivals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, stop_schedules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, metadatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, pagination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, traffic_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, line_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, tickets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, pt_objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, feed_publishers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, nearest_stop_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, graphical_isochrones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, heat_maps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, geo_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, car_co2_emission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sn_routing_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, equipment_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, terminus_schedules_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
  NearestStopPoint_descriptor_ = file->message_type(45);
  static const int NearestStopPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPoint, stop_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPoint, access_duration_),
  };
  NearestStopPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NearestStopPoint_descriptor_,
      NearestStopPoint::default_instance_,
      NearestStopPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(NearestStopPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestStopPoint, _internal_metadata_),
      -1);
  EquipmentReport_descriptor_ = file->message_type(46);
  static const int EquipmentReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReport, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReport, stop_area_equipments_),
  };
  EquipmentReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EquipmentReport_descriptor_,
      EquipmentReport::default_instance_,
      EquipmentReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(EquipmentReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentReport, _internal_metadata_),
      -1);
  CyclePathType_descriptor_ = file->enum_type(0);
  StreetNetworkMode_descriptor_ = file->enum_type(1);
  SectionType_descriptor_ = file->enum_type(2);
  TransferType_descriptor_ = file->enum_type(3);
  SectionAdditionalInformationType_descriptor_ = file->enum_type(4);
  GenderType_descriptor_ = file->enum_type(5);
  ResponseType_descriptor_ = file->enum_type(6);
  RoutingStatus_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_response_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathItem_descriptor_, &PathItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreetNetwork_descriptor_, &StreetNetwork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PtDisplayInfo_descriptor_, &PtDisplayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Uris_descriptor_, &Uris::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cost_descriptor_, &Cost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ticket_descriptor_, &Ticket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Fare_descriptor_, &Fare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Co2Emission_descriptor_, &Co2Emission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Durations_descriptor_, &Durations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Distances_descriptor_, &Distances::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndividualRating_descriptor_, &IndividualRating::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IndividualInformation_descriptor_, &IndividualInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeatsDescription_descriptor_, &SeatsDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternalLink_descriptor_, &ExternalLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RidesharingInformation_descriptor_, &RidesharingInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeedPublisher_descriptor_, &FeedPublisher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Section_descriptor_, &Section::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Journey_descriptor_, &Journey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Planner_descriptor_, &Planner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeoStatus_descriptor_, &GeoStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScheduleStopTime_descriptor_, &ScheduleStopTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteScheduleRow_descriptor_, &RouteScheduleRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_descriptor_, &Table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteSchedule_descriptor_, &RouteSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Passage_descriptor_, &Passage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoutePoint_descriptor_, &RoutePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoardItem_descriptor_, &BoardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DepartureBoard_descriptor_, &DepartureBoard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Load_descriptor_, &Load::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Metadatas_descriptor_, &Metadatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pagination_descriptor_, &Pagination::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StopSchedule_descriptor_, &StopSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficReports_descriptor_, &TrafficReports::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LineReport_descriptor_, &LineReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LinkArgs_descriptor_, &LinkArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Link_descriptor_, &Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GraphicalIsochrone_descriptor_, &GraphicalIsochrone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeatMap_descriptor_, &HeatMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoutingElement_descriptor_, &RoutingElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreetNetworkRoutingRow_descriptor_, &StreetNetworkRoutingRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreetNetworkRoutingMatrix_descriptor_, &StreetNetworkRoutingMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NearestStopPoint_descriptor_, &NearestStopPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EquipmentReport_descriptor_, &EquipmentReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_response_2eproto() {
  delete PathItem::default_instance_;
  delete PathItem_reflection_;
  delete StreetNetwork::default_instance_;
  delete StreetNetwork_reflection_;
  delete PtDisplayInfo::default_instance_;
  delete PtDisplayInfo_reflection_;
  delete Uris::default_instance_;
  delete Uris_reflection_;
  delete Cost::default_instance_;
  delete Cost_reflection_;
  delete Ticket::default_instance_;
  delete Ticket_reflection_;
  delete Fare::default_instance_;
  delete Fare_reflection_;
  delete Co2Emission::default_instance_;
  delete Co2Emission_reflection_;
  delete Durations::default_instance_;
  delete Durations_reflection_;
  delete Distances::default_instance_;
  delete Distances_reflection_;
  delete IndividualRating::default_instance_;
  delete IndividualRating_reflection_;
  delete IndividualInformation::default_instance_;
  delete IndividualInformation_reflection_;
  delete SeatsDescription::default_instance_;
  delete SeatsDescription_reflection_;
  delete ExternalLink::default_instance_;
  delete ExternalLink_reflection_;
  delete RidesharingInformation::default_instance_;
  delete RidesharingInformation_reflection_;
  delete FeedPublisher::default_instance_;
  delete FeedPublisher_reflection_;
  delete Section::default_instance_;
  delete Section_reflection_;
  delete Journey::default_instance_;
  delete Journey_reflection_;
  delete Planner::default_instance_;
  delete Planner_reflection_;
  delete GeoStatus::default_instance_;
  delete GeoStatus_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete ScheduleStopTime::default_instance_;
  delete ScheduleStopTime_reflection_;
  delete RouteScheduleRow::default_instance_;
  delete RouteScheduleRow_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Table::default_instance_;
  delete Table_reflection_;
  delete RouteSchedule::default_instance_;
  delete RouteSchedule_reflection_;
  delete Passage::default_instance_;
  delete Passage_reflection_;
  delete RoutePoint::default_instance_;
  delete RoutePoint_reflection_;
  delete BoardItem::default_instance_;
  delete BoardItem_reflection_;
  delete DepartureBoard::default_instance_;
  delete DepartureBoard_reflection_;
  delete Load::default_instance_;
  delete Load_reflection_;
  delete Metadatas::default_instance_;
  delete Metadatas_reflection_;
  delete Pagination::default_instance_;
  delete Pagination_reflection_;
  delete StopSchedule::default_instance_;
  delete StopSchedule_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete TrafficReports::default_instance_;
  delete TrafficReports_reflection_;
  delete LineReport::default_instance_;
  delete LineReport_reflection_;
  delete LinkArgs::default_instance_;
  delete LinkArgs_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
  delete GraphicalIsochrone::default_instance_;
  delete GraphicalIsochrone_reflection_;
  delete HeatMap::default_instance_;
  delete HeatMap_reflection_;
  delete RoutingElement::default_instance_;
  delete RoutingElement_reflection_;
  delete StreetNetworkRoutingRow::default_instance_;
  delete StreetNetworkRoutingRow_reflection_;
  delete StreetNetworkRoutingMatrix::default_instance_;
  delete StreetNetworkRoutingMatrix_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete NearestStopPoint::default_instance_;
  delete NearestStopPoint_reflection_;
  delete EquipmentReport::default_instance_;
  delete EquipmentReport_reflection_;
}

void protobuf_AddDesc_response_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_response_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pbnavitia::protobuf_AddDesc_type_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016response.proto\022\tpbnavitia\032\ntype.proto\""
    "\200\001\n\010PathItem\022\014\n\004name\030\001 \001(\t\022\016\n\006length\030\002 \001"
    "(\001\022\021\n\tdirection\030\003 \001(\005\022\020\n\010duration\030\004 \001(\001\022"
    "1\n\017cycle_path_type\030\005 \001(\0162\030.pbnavitia.Cyc"
    "lePathType\"\271\001\n\rStreetNetwork\022\016\n\006length\030\001"
    " \001(\001\022\020\n\010duration\030\002 \001(\001\022*\n\004mode\030\003 \001(\0162\034.p"
    "bnavitia.StreetNetworkMode\022\'\n\npath_items"
    "\030\004 \003(\0132\023.pbnavitia.PathItem\0221\n\013coordinat"
    "es\030\005 \003(\0132\034.pbnavitia.GeographicalCoord\"\241"
    "\003\n\rPtDisplayInfo\022\017\n\007network\030\001 \001(\t\022\014\n\004cod"
    "e\030\002 \001(\t\022\020\n\010headsign\030\003 \001(\t\022\021\n\tdirection\030\004"
    " \001(\t\022\r\n\005color\030\005 \001(\t\022\027\n\017commercial_mode\030\006"
    " \001(\t\022\025\n\rphysical_mode\030\007 \001(\t\022\023\n\013descripti"
    "on\030\010 \001(\t\022\035\n\004uris\030\t \001(\0132\017.pbnavitia.Uris\022"
    "0\n\016has_equipments\030\013 \001(\0132\030.pbnavitia.hasE"
    "quipments\022\014\n\004name\030\014 \001(\t\022$\n\010messages\030\r \003("
    "\0132\022.pbnavitia.Message\022\023\n\013impact_uris\030\022 \003"
    "(\t\022\036\n\005notes\030\017 \003(\0132\017.pbnavitia.Note\022\021\n\the"
    "adsigns\030\020 \003(\t\022\022\n\ntext_color\030\021 \001(\t\022\027\n\017tri"
    "p_short_name\030\023 \001(\t\"\265\001\n\004Uris\022\017\n\007company\030\001"
    " \001(\t\022\027\n\017vehicle_journey\030\002 \001(\t\022\014\n\004line\030\003 "
    "\001(\t\022\r\n\005route\030\004 \001(\t\022\027\n\017commercial_mode\030\005 "
    "\001(\t\022\025\n\rphysical_mode\030\006 \001(\t\022\017\n\007network\030\007 "
    "\001(\t\022\014\n\004note\030\010 \001(\t\022\027\n\017journey_pattern\030\t \001"
    "(\t\"\'\n\004Cost\022\r\n\005value\030\001 \001(\001\022\020\n\010currency\030\002 "
    "\001(\t\"\210\001\n\006Ticket\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t"
    "\022\035\n\004cost\030\003 \001(\0132\017.pbnavitia.Cost\022\022\n\nsecti"
    "on_id\030\004 \003(\t\022\r\n\005found\030\005 \001(\010\022\017\n\007comment\030\006 "
    "\001(\t\022\021\n\tsource_id\030\007 \001(\t\"H\n\004Fare\022\036\n\005total\030"
    "\001 \001(\0132\017.pbnavitia.Cost\022\021\n\tticket_id\030\002 \003("
    "\t\022\r\n\005found\030\003 \001(\010\"*\n\013Co2Emission\022\r\n\005value"
    "\030\001 \001(\001\022\014\n\004unit\030\002 \001(\t\"i\n\tDurations\022\r\n\005tot"
    "al\030\001 \001(\005\022\017\n\007walking\030\002 \001(\005\022\014\n\004bike\030\003 \001(\005\022"
    "\013\n\003car\030\004 \001(\005\022\023\n\013ridesharing\030\005 \001(\005\022\014\n\004tax"
    "i\030\006 \001(\005\"Z\n\tDistances\022\017\n\007walking\030\001 \001(\005\022\014\n"
    "\004bike\030\002 \001(\005\022\013\n\003car\030\003 \001(\005\022\023\n\013ridesharing\030"
    "\004 \001(\005\022\014\n\004taxi\030\005 \001(\005\"V\n\020IndividualRating\022"
    "\r\n\005value\030\001 \001(\001\022\r\n\005count\030\002 \001(\r\022\021\n\tscale_m"
    "in\030\003 \001(\001\022\021\n\tscale_max\030\004 \001(\001\"\211\001\n\025Individu"
    "alInformation\022\r\n\005alias\030\001 \001(\t\022\r\n\005image\030\002 "
    "\001(\t\022%\n\006gender\030\003 \001(\0162\025.pbnavitia.GenderTy"
    "pe\022+\n\006rating\030\004 \001(\0132\033.pbnavitia.Individua"
    "lRating\"4\n\020SeatsDescription\022\r\n\005total\030\001 \001"
    "(\r\022\021\n\tavailable\030\002 \001(\r\")\n\014ExternalLink\022\013\n"
    "\003key\030\001 \001(\t\022\014\n\004href\030\002 \001(\t\"\301\001\n\026Ridesharing"
    "Information\022\020\n\010operator\030\001 \001(\t\022\017\n\007network"
    "\030\002 \001(\t\0220\n\006driver\030\003 \001(\0132 .pbnavitia.Indiv"
    "idualInformation\022*\n\005seats\030\004 \001(\0132\033.pbnavi"
    "tia.SeatsDescription\022&\n\005links\030\005 \003(\0132\027.pb"
    "navitia.ExternalLink\"G\n\rFeedPublisher\022\n\n"
    "\002id\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\017\n\007"
    "license\030\004 \001(\t\"\236\007\n\007Section\022$\n\004type\030\001 \001(\0162"
    "\026.pbnavitia.SectionType\022#\n\006origin\030\002 \001(\0132"
    "\023.pbnavitia.PtObject\022(\n\013destination\030\003 \001("
    "\0132\023.pbnavitia.PtObject\0229\n\027pt_display_inf"
    "ormations\030\004 \001(\0132\030.pbnavitia.PtDisplayInf"
    "o\022\035\n\004uris\030\005 \001(\0132\017.pbnavitia.Uris\0222\n\017vehi"
    "cle_journey\030\t \001(\0132\031.pbnavitia.VehicleJou"
    "rney\0220\n\017stop_date_times\030\n \003(\0132\027.pbnaviti"
    "a.StopDateTime\0220\n\016street_network\030\014 \001(\0132\030"
    ".pbnavitia.StreetNetwork\022\031\n\021cycle_lane_l"
    "ength\030\036 \001(\005\022.\n\rtransfer_type\030\r \001(\0162\027.pbn"
    "avitia.TransferType\0220\n\024ridesharing_journ"
    "eys\030\034 \003(\0132\022.pbnavitia.Journey\022B\n\027ridesha"
    "ring_information\030\035 \001(\0132!.pbnavitia.Rides"
    "haringInformation\022+\n\005shape\030\030 \003(\0132\034.pbnav"
    "itia.GeographicalCoord\022\020\n\010duration\030\017 \001(\005"
    "\022\027\n\017begin_date_time\030\020 \001(\004\022\025\n\rend_date_ti"
    "me\030\021 \001(\004\022\034\n\024base_begin_date_time\030\031 \001(\004\022\032"
    "\n\022base_end_date_time\030\032 \001(\004\022*\n\016realtime_l"
    "evel\030\033 \001(\0162\022.pbnavitia.RTLevel\022\016\n\006length"
    "\030\023 \001(\005\022\n\n\002id\030\024 \001(\t\022,\n\014co2_emission\030\025 \001(\013"
    "2\026.pbnavitia.Co2Emission\022L\n\027additional_i"
    "nformations\030\026 \003(\0162+.pbnavitia.SectionAdd"
    "itionalInformationType\"\211\005\n\007Journey\022\020\n\010du"
    "ration\030\001 \001(\005\022\024\n\014nb_transfers\030\002 \001(\005\022\033\n\023de"
    "parture_date_time\030\003 \001(\004\022\031\n\021arrival_date_"
    "time\030\004 \001(\004\022\033\n\023requested_date_time\030\005 \001(\004\022"
    "$\n\010sections\030\006 \003(\0132\022.pbnavitia.Section\022#\n"
    "\006origin\030\007 \001(\0132\023.pbnavitia.PtObject\022(\n\013de"
    "stination\030\010 \001(\0132\023.pbnavitia.PtObject\022\014\n\004"
    "type\030\t \001(\t\022\035\n\004fare\030\n \001(\0132\017.pbnavitia.Far"
    "e\022\014\n\004tags\030\013 \003(\t\022&\n\tcalendars\030\014 \003(\0132\023.pbn"
    "avitia.Calendar\022,\n\014co2_emission\030\r \001(\0132\026."
    "pbnavitia.Co2Emission\022&\n\036most_serious_di"
    "sruption_effect\030\016 \001(\t\022\023\n\013internal_id\030\017 \001"
    "(\t\022\016\n\006sn_dur\030\020 \001(\004\022\024\n\014transfer_dur\030\021 \001(\004"
    "\022\027\n\017min_waiting_dur\030\022 \001(\004\022\030\n\020nb_vj_exten"
    "tions\030\023 \001(\r\022\023\n\013nb_sections\030\024 \001(\r\022\'\n\tdura"
    "tions\030\025 \001(\0132\024.pbnavitia.Durations\022\'\n\tdis"
    "tances\030\026 \001(\0132\024.pbnavitia.Distances\"~\n\007Pl"
    "anner\022$\n\010journeys\030\001 \003(\0132\022.pbnavitia.Jour"
    "ney\022.\n\rresponse_type\030\002 \001(\0162\027.pbnavitia.R"
    "esponseType\022\016\n\006before\030\003 \001(\t\022\r\n\005after\030\004 \001"
    "(\t\"\247\001\n\tGeoStatus\022\035\n\025street_network_sourc"
    "e\030\001 \001(\t\022\021\n\tnb_admins\030\002 \001(\005\022\035\n\025nb_admins_"
    "from_cities\030\003 \001(\005\022\017\n\007nb_ways\030\004 \001(\005\022\024\n\014nb"
    "_addresses\030\005 \001(\005\022\016\n\006nb_poi\030\006 \001(\005\022\022\n\npoi_"
    "source\030\007 \001(\t\"\261\003\n\006Status\022\030\n\020publication_d"
    "ate\030\001 \002(\t\022\035\n\025start_production_date\030\002 \002(\t"
    "\022\033\n\023end_production_date\030\003 \002(\t\022\024\n\014data_ve"
    "rsion\030\004 \001(\005\022\027\n\017navitia_version\030\006 \001(\t\022\024\n\014"
    "data_sources\030\007 \003(\t\022\024\n\014last_load_at\030\010 \001(\t"
    "\022\030\n\020last_load_status\030\t \001(\010\022\016\n\006loaded\030\n \001"
    "(\010\022\022\n\nnb_threads\030\013 \001(\005\022 \n\030is_connected_t"
    "o_rabbitmq\030\014 \001(\010\022\016\n\006status\030\r \001(\t\022\033\n\023last"
    "_rt_data_loaded\030\016 \001(\t\022\032\n\022is_realtime_loa"
    "ded\030\020 \001(\010\022\032\n\022dataset_created_at\030\021 \001(\t\022\027\n"
    "\017rt_contributors\030\022 \003(\t\022\030\n\020disruption_err"
    "or\030\023 \001(\010\"\340\001\n\020ScheduleStopTime\022)\n\npropert"
    "ies\030\002 \001(\0132\025.pbnavitia.Properties\022\014\n\004time"
    "\030\003 \001(\004\022\014\n\004date\030\004 \001(\004\022,\n\tdt_status\030\005 \001(\0162"
    "\031.pbnavitia.ResponseStatus\022*\n\016realtime_l"
    "evel\030\006 \001(\0162\022.pbnavitia.RTLevel\022\026\n\016base_d"
    "ate_time\030\007 \001(\004\022\023\n\013impact_uris\030\010 \003(\t\"\201\001\n\020"
    "RouteScheduleRow\022(\n\nstop_point\030\001 \002(\0132\024.p"
    "bnavitia.StopPoint\022/\n\ndate_times\030\002 \003(\0132\033"
    ".pbnavitia.ScheduleStopTime\022\022\n\nstop_time"
    "s\030\003 \003(\t\"\221\001\n\006Header\0229\n\027pt_display_informa"
    "tions\030\001 \002(\0132\030.pbnavitia.PtDisplayInfo\022L\n"
    "\027additional_informations\030\003 \003(\0162+.pbnavit"
    "ia.SectionAdditionalInformationType\"V\n\005T"
    "able\022)\n\004rows\030\001 \003(\0132\033.pbnavitia.RouteSche"
    "duleRow\022\"\n\007headers\030\002 \003(\0132\021.pbnavitia.Hea"
    "der\"\314\001\n\rRouteSchedule\022\037\n\005table\030\001 \002(\0132\020.p"
    "bnavitia.Table\0229\n\027pt_display_information"
    "s\030\002 \002(\0132\030.pbnavitia.PtDisplayInfo\022+\n\007geo"
    "json\030\003 \001(\0132\032.pbnavitia.MultiLineString\0222"
    "\n\017response_status\030\004 \001(\0162\031.pbnavitia.Resp"
    "onseStatus\"\300\001\n\007Passage\022/\n\016stop_date_time"
    "\030\001 \002(\0132\027.pbnavitia.StopDateTime\022(\n\nstop_"
    "point\030\002 \002(\0132\024.pbnavitia.StopPoint\0229\n\027pt_"
    "display_informations\030\003 \001(\0132\030.pbnavitia.P"
    "tDisplayInfo\022\037\n\005route\030\004 \001(\0132\020.pbnavitia."
    "Route\"\222\001\n\nRoutePoint\022\037\n\005route\030\001 \001(\0132\020.pb"
    "navitia.Route\022(\n\nstop_point\030\002 \001(\0132\024.pbna"
    "vitia.StopPoint\0229\n\027pt_display_informatio"
    "ns\030\003 \001(\0132\030.pbnavitia.PtDisplayInfo\"*\n\tBo"
    "ardItem\022\014\n\004hour\030\001 \002(\t\022\017\n\007minutes\030\002 \003(\t\"\206"
    "\001\n\016DepartureBoard\022(\n\nstop_point\030\001 \002(\0132\024."
    "pbnavitia.StopPoint\022\037\n\005route\030\002 \002(\0132\020.pbn"
    "avitia.Route\022)\n\013board_items\030\003 \003(\0132\024.pbna"
    "vitia.BoardItem\"\022\n\004Load\022\n\n\002ok\030\001 \002(\010\"\316\001\n\t"
    "Metadatas\022\035\n\025start_production_date\030\001 \002(\t"
    "\022\033\n\023end_production_date\030\002 \002(\t\022\r\n\005shape\030\003"
    " \002(\t\022\016\n\006status\030\004 \002(\t\022\024\n\014contributors\030\014 \003"
    "(\t\022\020\n\010timezone\030\r \001(\t\022\014\n\004name\030\016 \001(\t\022\024\n\014la"
    "st_load_at\030\017 \001(\004\022\032\n\022dataset_created_at\030\020"
    " \001(\t\"\207\001\n\nPagination\022\023\n\013totalResult\030\001 \002(\005"
    "\022\021\n\tstartPage\030\002 \002(\005\022\024\n\014itemsPerPage\030\003 \002("
    "\005\022\023\n\013itemsOnPage\030\004 \002(\005\022\020\n\010nextPage\030\005 \001(\t"
    "\022\024\n\014previousPage\030\006 \001(\t\"\342\002\n\014StopSchedule\022"
    "\037\n\005route\030\001 \002(\0132\020.pbnavitia.Route\0229\n\027pt_d"
    "isplay_informations\030\002 \002(\0132\030.pbnavitia.Pt"
    "DisplayInfo\022(\n\nstop_point\030\003 \002(\0132\024.pbnavi"
    "tia.StopPoint\022/\n\ndate_times\030\004 \003(\0132\033.pbna"
    "vitia.ScheduleStopTime\0222\n\017response_statu"
    "s\030\005 \001(\0162\031.pbnavitia.ResponseStatus\0223\n\016fi"
    "rst_datetime\030\006 \001(\0132\033.pbnavitia.ScheduleS"
    "topTime\0222\n\rlast_datetime\030\007 \001(\0132\033.pbnavit"
    "ia.ScheduleStopTime\"\362\002\n\005Error\022%\n\002id\030\001 \001("
    "\0162\031.pbnavitia.Error.error_id\022\017\n\007message\030"
    "\002 \001(\t\"\260\002\n\010error_id\022\016\n\nbad_filter\020\001\022\017\n\013un"
    "known_api\020\002\022\026\n\022date_out_of_bounds\020\003\022\023\n\017u"
    "nable_to_parse\020\004\022\016\n\nbad_format\020\005\022\r\n\tno_o"
    "rigin\020\006\022\022\n\016no_destination\020\007\022\035\n\031no_origin"
    "_nor_destination\020\010\022\017\n\013no_solution\020\t\022\022\n\016u"
    "nknown_object\020\n\022\027\n\023service_unavailable\020\013"
    "\022\034\n\030invalid_protobuf_request\020\014\022\022\n\016intern"
    "al_error\020\r\022\024\n\020deadline_expired\020\016\"\263\001\n\016Tra"
    "fficReports\022#\n\007network\030\001 \001(\0132\022.pbnavitia"
    ".Network\022\036\n\005lines\030\002 \003(\0132\017.pbnavitia.Line"
    "\022\'\n\nstop_areas\030\003 \003(\0132\023.pbnavitia.StopAre"
    "a\0223\n\020vehicle_journeys\030\004 \003(\0132\031.pbnavitia."
    "VehicleJourney\"T\n\nLineReport\022\035\n\004line\030\001 \001"
    "(\0132\017.pbnavitia.Line\022\'\n\npt_objects\030\002 \003(\0132"
    "\023.pbnavitia.PtObject\"\'\n\010LinkArgs\022\013\n\003key\030"
    "\001 \001(\t\022\016\n\006values\030\002 \003(\t\"\211\001\n\004Link\022\013\n\003rel\030\001 "
    "\001(\t\022\014\n\004type\030\002 \001(\t\022\024\n\014is_templated\030\003 \001(\010\022"
    "\023\n\013description\030\004 \001(\t\022#\n\006kwargs\030\005 \003(\0132\023.p"
    "bnavitia.LinkArgs\022\026\n\016ressource_name\030\006 \001("
    "\t\"\353\001\n\022GraphicalIsochrone\022\017\n\007geojson\030\001 \001("
    "\t\022\024\n\014max_duration\030\002 \001(\005\022\024\n\014min_duration\030"
    "\003 \001(\005\022#\n\006origin\030\004 \001(\0132\023.pbnavitia.PtObje"
    "ct\022(\n\013destination\030\005 \001(\0132\023.pbnavitia.PtOb"
    "ject\022\033\n\023requested_date_time\030\006 \001(\004\022\025\n\rmin"
    "_date_time\030\007 \001(\004\022\025\n\rmax_date_time\030\010 \001(\004\""
    "\212\001\n\007HeatMap\022\023\n\013heat_matrix\030\001 \001(\t\022#\n\006orig"
    "in\030\002 \001(\0132\023.pbnavitia.PtObject\022(\n\013destina"
    "tion\030\003 \001(\0132\023.pbnavitia.PtObject\022\033\n\023reque"
    "sted_date_time\030\004 \001(\004\"T\n\016RoutingElement\022\020"
    "\n\010duration\030\001 \002(\005\0220\n\016routing_status\030\002 \002(\016"
    "2\030.pbnavitia.RoutingStatus\"N\n\027StreetNetw"
    "orkRoutingRow\0223\n\020routing_response\030\002 \003(\0132"
    "\031.pbnavitia.RoutingElement\"N\n\032StreetNetw"
    "orkRoutingMatrix\0220\n\004rows\030\001 \003(\0132\".pbnavit"
    "ia.StreetNetworkRoutingRow\"\330\022\n\010Response\022"
    "\023\n\013status_code\030\001 \001(\005\022\037\n\005error\030\002 \001(\0132\020.pb"
    "navitia.Error\022\014\n\004info\030\003 \001(\t\022!\n\006status\030\004 "
    "\001(\0132\021.pbnavitia.Status\022\030\n\020publication_da"
    "te\030\005 \001(\005\022\025\n\rignored_words\030\013 \003(\t\022\021\n\tbad_w"
    "ords\030\014 \003(\t\022#\n\006places\030\r \003(\0132\023.pbnavitia.P"
    "tObject\022*\n\rplaces_nearby\030\016 \003(\0132\023.pbnavit"
    "ia.PtObject\0225\n\021validity_patterns\030\017 \003(\0132\032"
    ".pbnavitia.ValidityPattern\022\036\n\005lines\030\020 \003("
    "\0132\017.pbnavitia.Line\0223\n\020journey_patterns\030\021"
    " \003(\0132\031.pbnavitia.JourneyPattern\0223\n\020vehic"
    "le_journeys\030\022 \003(\0132\031.pbnavitia.VehicleJou"
    "rney\022)\n\013stop_points\030\023 \003(\0132\024.pbnavitia.St"
    "opPoint\022\'\n\nstop_areas\030\024 \003(\0132\023.pbnavitia."
    "StopArea\022$\n\010networks\030\025 \003(\0132\022.pbnavitia.N"
    "etwork\022/\n\016physical_modes\030\026 \003(\0132\027.pbnavit"
    "ia.PhysicalMode\0223\n\020commercial_modes\030\027 \003("
    "\0132\031.pbnavitia.CommercialMode\022*\n\013connecti"
    "ons\030\030 \003(\0132\025.pbnavitia.Connection\022>\n\026jour"
    "ney_pattern_points\030\031 \003(\0132\036.pbnavitia.Jou"
    "rneyPatternPoint\022%\n\tcompanies\030\032 \003(\0132\022.pb"
    "navitia.Company\022 \n\006routes\030\033 \003(\0132\020.pbnavi"
    "tia.Route\022\034\n\004pois\030\034 \003(\0132\016.pbnavitia.Poi\022"
    "%\n\tpoi_types\030\035 \003(\0132\022.pbnavitia.PoiType\022&"
    "\n\tcalendars\0307 \003(\0132\023.pbnavitia.Calendar\022)"
    "\n\013line_groups\0308 \003(\0132\024.pbnavitia.LineGrou"
    "p\022\036\n\005trips\030> \003(\0132\017.pbnavitia.Trip\022,\n\014con"
    "tributors\030@ \003(\0132\026.pbnavitia.Contributor\022"
    "$\n\010datasets\030A \003(\0132\022.pbnavitia.Dataset\022+\n"
    "\014route_points\030B \003(\0132\025.pbnavitia.RoutePoi"
    "nt\022\"\n\007impacts\0309 \003(\0132\021.pbnavitia.Impact\022$"
    "\n\010journeys\030\036 \003(\0132\022.pbnavitia.Journey\022.\n\r"
    "response_type\030\037 \001(\0162\027.pbnavitia.Response"
    "Type\022\014\n\004prev\030  \001(\t\022\014\n\004next\030! \001(\t\022\036\n\026next"
    "_request_date_time\030\" \001(\r\0221\n\017route_schedu"
    "les\030# \003(\0132\030.pbnavitia.RouteSchedule\0223\n\020d"
    "eparture_boards\030$ \003(\0132\031.pbnavitia.Depart"
    "ureBoard\022+\n\017next_departures\030% \003(\0132\022.pbna"
    "vitia.Passage\022)\n\rnext_arrivals\030& \003(\0132\022.p"
    "bnavitia.Passage\022/\n\016stop_schedules\030\' \003(\013"
    "2\027.pbnavitia.StopSchedule\022\035\n\004load\030. \001(\0132"
    "\017.pbnavitia.Load\022\'\n\tmetadatas\0300 \001(\0132\024.pb"
    "navitia.Metadatas\022)\n\npagination\0301 \001(\0132\025."
    "pbnavitia.Pagination\0222\n\017traffic_reports\030"
    "= \003(\0132\031.pbnavitia.TrafficReports\022+\n\014line"
    "_reports\030I \003(\0132\025.pbnavitia.LineReport\022\"\n"
    "\007tickets\0303 \003(\0132\021.pbnavitia.Ticket\022\'\n\npt_"
    "objects\0304 \003(\0132\023.pbnavitia.PtObject\0221\n\017fe"
    "ed_publishers\0305 \003(\0132\030.pbnavitia.FeedPubl"
    "isher\0228\n\023nearest_stop_points\030\? \003(\0132\033.pbn"
    "avitia.NearestStopPoint\022\036\n\005links\030C \003(\0132\017"
    ".pbnavitia.Link\022;\n\024graphical_isochrones\030"
    "D \003(\0132\035.pbnavitia.GraphicalIsochrone\022%\n\t"
    "heat_maps\030G \003(\0132\022.pbnavitia.HeatMap\022(\n\ng"
    "eo_status\030E \001(\0132\024.pbnavitia.GeoStatus\0220\n"
    "\020car_co2_emission\030F \001(\0132\026.pbnavitia.Co2E"
    "mission\022@\n\021sn_routing_matrix\030H \001(\0132%.pbn"
    "avitia.StreetNetworkRoutingMatrix\0225\n\021equ"
    "ipment_reports\030J \003(\0132\032.pbnavitia.Equipme"
    "ntReport\0223\n\022terminus_schedules\030K \003(\0132\027.p"
    "bnavitia.StopSchedule\"U\n\020NearestStopPoin"
    "t\022(\n\nstop_point\030\001 \001(\0132\024.pbnavitia.StopPo"
    "int\022\027\n\017access_duration\030\002 \001(\005\"l\n\017Equipmen"
    "tReport\022\035\n\004line\030\001 \001(\0132\017.pbnavitia.Line\022:"
    "\n\024stop_area_equipments\030\002 \003(\0132\034.pbnavitia"
    ".StopAreaEquipment*b\n\rCyclePathType\022\017\n\013N"
    "oCycleLane\020\000\022\022\n\016SharedCycleWay\020\001\022\025\n\021Dedi"
    "catedCycleWay\020\002\022\025\n\021SeparatedCycleWay\020\003*f"
    "\n\021StreetNetworkMode\022\013\n\007Walking\020\000\022\010\n\004Bike"
    "\020\001\022\007\n\003Car\020\003\022\007\n\003Bss\020\004\022\017\n\013Ridesharing\020\005\022\r\n"
    "\tCarNoPark\020\006\022\010\n\004Taxi\020\007*\361\001\n\013SectionType\022\024"
    "\n\020PUBLIC_TRANSPORT\020\001\022\022\n\016STREET_NETWORK\020\002"
    "\022\013\n\007WAITING\020\003\022\014\n\010TRANSFER\020\004\022\014\n\010boarding\020"
    "\006\022\013\n\007landing\020\007\022\014\n\010BSS_RENT\020\010\022\020\n\014BSS_PUT_"
    "BACK\020\t\022\014\n\010CROW_FLY\020\n\022\010\n\004PARK\020\013\022\021\n\rLEAVE_"
    "PARKING\020\014\022\r\n\tALIGHTING\020\r\022\017\n\013RIDESHARING\020"
    "\016\022\027\n\023ON_DEMAND_TRANSPORT\020\017*(\n\014TransferTy"
    "pe\022\013\n\007walking\020\001\022\013\n\007stay_in\020\003*\234\001\n Section"
    "AdditionalInformationType\022\021\n\rODT_WITH_ZO"
    "NE\020\001\022\027\n\023ODT_WITH_STOP_POINT\020\002\022\026\n\022ODT_WIT"
    "H_STOP_TIME\020\003\022\032\n\026HAS_DATETIME_ESTIMATED\020"
    "\004\022\013\n\007REGULAR\020\005\022\013\n\007STAY_IN\020\006*\"\n\nGenderTyp"
    "e\022\n\n\006FEMALE\020\001\022\010\n\004MALE\020\002*\346\001\n\014ResponseType"
    "\022\023\n\017ITINERARY_FOUND\020\001\022\026\n\022DATE_OUT_OF_BOU"
    "NDS\020\002\022\023\n\017NO_ORIGIN_POINT\020\003\022\030\n\024NO_DESTINA"
    "TION_POINT\020\004\022#\n\037NO_ORIGIN_NOR_DESTINATIO"
    "N_POINT\020\005\022\020\n\014NO_VIA_POINT\020\006\022\017\n\013NO_SOLUTI"
    "ON\020\007\022\031\n\025CONNECTION_LIMITATION\020\010\022\027\n\023DURAT"
    "ION_LIMITATION\020\t*8\n\rRoutingStatus\022\013\n\007rea"
    "ched\020\000\022\r\n\tunreached\020\001\022\013\n\007unknown\020\002", 11434);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "response.proto", &protobuf_RegisterTypes);
  PathItem::default_instance_ = new PathItem();
  StreetNetwork::default_instance_ = new StreetNetwork();
  PtDisplayInfo::default_instance_ = new PtDisplayInfo();
  Uris::default_instance_ = new Uris();
  Cost::default_instance_ = new Cost();
  Ticket::default_instance_ = new Ticket();
  Fare::default_instance_ = new Fare();
  Co2Emission::default_instance_ = new Co2Emission();
  Durations::default_instance_ = new Durations();
  Distances::default_instance_ = new Distances();
  IndividualRating::default_instance_ = new IndividualRating();
  IndividualInformation::default_instance_ = new IndividualInformation();
  SeatsDescription::default_instance_ = new SeatsDescription();
  ExternalLink::default_instance_ = new ExternalLink();
  RidesharingInformation::default_instance_ = new RidesharingInformation();
  FeedPublisher::default_instance_ = new FeedPublisher();
  Section::default_instance_ = new Section();
  Journey::default_instance_ = new Journey();
  Planner::default_instance_ = new Planner();
  GeoStatus::default_instance_ = new GeoStatus();
  Status::default_instance_ = new Status();
  ScheduleStopTime::default_instance_ = new ScheduleStopTime();
  RouteScheduleRow::default_instance_ = new RouteScheduleRow();
  Header::default_instance_ = new Header();
  Table::default_instance_ = new Table();
  RouteSchedule::default_instance_ = new RouteSchedule();
  Passage::default_instance_ = new Passage();
  RoutePoint::default_instance_ = new RoutePoint();
  BoardItem::default_instance_ = new BoardItem();
  DepartureBoard::default_instance_ = new DepartureBoard();
  Load::default_instance_ = new Load();
  Metadatas::default_instance_ = new Metadatas();
  Pagination::default_instance_ = new Pagination();
  StopSchedule::default_instance_ = new StopSchedule();
  Error::default_instance_ = new Error();
  TrafficReports::default_instance_ = new TrafficReports();
  LineReport::default_instance_ = new LineReport();
  LinkArgs::default_instance_ = new LinkArgs();
  Link::default_instance_ = new Link();
  GraphicalIsochrone::default_instance_ = new GraphicalIsochrone();
  HeatMap::default_instance_ = new HeatMap();
  RoutingElement::default_instance_ = new RoutingElement();
  StreetNetworkRoutingRow::default_instance_ = new StreetNetworkRoutingRow();
  StreetNetworkRoutingMatrix::default_instance_ = new StreetNetworkRoutingMatrix();
  Response::default_instance_ = new Response();
  NearestStopPoint::default_instance_ = new NearestStopPoint();
  EquipmentReport::default_instance_ = new EquipmentReport();
  PathItem::default_instance_->InitAsDefaultInstance();
  StreetNetwork::default_instance_->InitAsDefaultInstance();
  PtDisplayInfo::default_instance_->InitAsDefaultInstance();
  Uris::default_instance_->InitAsDefaultInstance();
  Cost::default_instance_->InitAsDefaultInstance();
  Ticket::default_instance_->InitAsDefaultInstance();
  Fare::default_instance_->InitAsDefaultInstance();
  Co2Emission::default_instance_->InitAsDefaultInstance();
  Durations::default_instance_->InitAsDefaultInstance();
  Distances::default_instance_->InitAsDefaultInstance();
  IndividualRating::default_instance_->InitAsDefaultInstance();
  IndividualInformation::default_instance_->InitAsDefaultInstance();
  SeatsDescription::default_instance_->InitAsDefaultInstance();
  ExternalLink::default_instance_->InitAsDefaultInstance();
  RidesharingInformation::default_instance_->InitAsDefaultInstance();
  FeedPublisher::default_instance_->InitAsDefaultInstance();
  Section::default_instance_->InitAsDefaultInstance();
  Journey::default_instance_->InitAsDefaultInstance();
  Planner::default_instance_->InitAsDefaultInstance();
  GeoStatus::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  ScheduleStopTime::default_instance_->InitAsDefaultInstance();
  RouteScheduleRow::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  Table::default_instance_->InitAsDefaultInstance();
  RouteSchedule::default_instance_->InitAsDefaultInstance();
  Passage::default_instance_->InitAsDefaultInstance();
  RoutePoint::default_instance_->InitAsDefaultInstance();
  BoardItem::default_instance_->InitAsDefaultInstance();
  DepartureBoard::default_instance_->InitAsDefaultInstance();
  Load::default_instance_->InitAsDefaultInstance();
  Metadatas::default_instance_->InitAsDefaultInstance();
  Pagination::default_instance_->InitAsDefaultInstance();
  StopSchedule::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  TrafficReports::default_instance_->InitAsDefaultInstance();
  LineReport::default_instance_->InitAsDefaultInstance();
  LinkArgs::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  GraphicalIsochrone::default_instance_->InitAsDefaultInstance();
  HeatMap::default_instance_->InitAsDefaultInstance();
  RoutingElement::default_instance_->InitAsDefaultInstance();
  StreetNetworkRoutingRow::default_instance_->InitAsDefaultInstance();
  StreetNetworkRoutingMatrix::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  NearestStopPoint::default_instance_->InitAsDefaultInstance();
  EquipmentReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_response_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_response_2eproto {
  StaticDescriptorInitializer_response_2eproto() {
    protobuf_AddDesc_response_2eproto();
  }
} static_descriptor_initializer_response_2eproto_;
const ::google::protobuf::EnumDescriptor* CyclePathType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CyclePathType_descriptor_;
}
bool CyclePathType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StreetNetworkMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetNetworkMode_descriptor_;
}
bool StreetNetworkMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionType_descriptor_;
}
bool SectionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransferType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferType_descriptor_;
}
bool TransferType_IsValid(int value) {
  switch(value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SectionAdditionalInformationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionAdditionalInformationType_descriptor_;
}
bool SectionAdditionalInformationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GenderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenderType_descriptor_;
}
bool GenderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseType_descriptor_;
}
bool ResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoutingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingStatus_descriptor_;
}
bool RoutingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathItem::kNameFieldNumber;
const int PathItem::kLengthFieldNumber;
const int PathItem::kDirectionFieldNumber;
const int PathItem::kDurationFieldNumber;
const int PathItem::kCyclePathTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathItem::PathItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PathItem)
}

void PathItem::InitAsDefaultInstance() {
}

PathItem::PathItem(const PathItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PathItem)
}

void PathItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  direction_ = 0;
  duration_ = 0;
  cycle_path_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathItem::~PathItem() {
  // @@protoc_insertion_point(destructor:pbnavitia.PathItem)
  SharedDtor();
}

void PathItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PathItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathItem_descriptor_;
}

const PathItem& PathItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

PathItem* PathItem::default_instance_ = NULL;

PathItem* PathItem::New(::google::protobuf::Arena* arena) const {
  PathItem* n = new PathItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PathItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(length_, cycle_path_type_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PathItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PathItem.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_length;
        break;
      }

      // optional double length = 2;
      case 2: {
        if (tag == 17) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional int32 direction = 3;
      case 3: {
        if (tag == 24) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_duration;
        break;
      }

      // optional double duration = 4;
      case 4: {
        if (tag == 33) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cycle_path_type;
        break;
      }

      // optional .pbnavitia.CyclePathType cycle_path_type = 5;
      case 5: {
        if (tag == 40) {
         parse_cycle_path_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::CyclePathType_IsValid(value)) {
            set_cycle_path_type(static_cast< ::pbnavitia::CyclePathType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PathItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PathItem)
  return false;
#undef DO_
}

void PathItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PathItem)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PathItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional int32 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // optional double duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration(), output);
  }

  // optional .pbnavitia.CyclePathType cycle_path_type = 5;
  if (has_cycle_path_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cycle_path_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PathItem)
}

::google::protobuf::uint8* PathItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PathItem)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PathItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional int32 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // optional double duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration(), target);
  }

  // optional .pbnavitia.CyclePathType cycle_path_type = 5;
  if (has_cycle_path_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->cycle_path_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PathItem)
  return target;
}

int PathItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PathItem)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional int32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional double duration = 4;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional .pbnavitia.CyclePathType cycle_path_type = 5;
    if (has_cycle_path_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cycle_path_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PathItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PathItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PathItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PathItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PathItem)
    MergeFrom(*source);
  }
}

void PathItem::MergeFrom(const PathItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PathItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_cycle_path_type()) {
      set_cycle_path_type(from.cycle_path_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PathItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PathItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathItem::CopyFrom(const PathItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PathItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathItem::IsInitialized() const {

  return true;
}

void PathItem::Swap(PathItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathItem::InternalSwap(PathItem* other) {
  name_.Swap(&other->name_);
  std::swap(length_, other->length_);
  std::swap(direction_, other->direction_);
  std::swap(duration_, other->duration_);
  std::swap(cycle_path_type_, other->cycle_path_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathItem_descriptor_;
  metadata.reflection = PathItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathItem

// optional string name = 1;
bool PathItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PathItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PathItem::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.name)
}
 void PathItem::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PathItem.name)
}
 void PathItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PathItem.name)
}
 ::std::string* PathItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PathItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PathItem::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PathItem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PathItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PathItem.name)
}

// optional double length = 2;
bool PathItem::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathItem::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void PathItem::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathItem::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double PathItem::length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.length)
  return length_;
}
 void PathItem::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.length)
}

// optional int32 direction = 3;
bool PathItem::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathItem::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void PathItem::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathItem::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
 ::google::protobuf::int32 PathItem::direction() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.direction)
  return direction_;
}
 void PathItem::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.direction)
}

// optional double duration = 4;
bool PathItem::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PathItem::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void PathItem::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void PathItem::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
 double PathItem::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.duration)
  return duration_;
}
 void PathItem::set_duration(double value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.duration)
}

// optional .pbnavitia.CyclePathType cycle_path_type = 5;
bool PathItem::has_cycle_path_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PathItem::set_has_cycle_path_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PathItem::clear_has_cycle_path_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PathItem::clear_cycle_path_type() {
  cycle_path_type_ = 0;
  clear_has_cycle_path_type();
}
 ::pbnavitia::CyclePathType PathItem::cycle_path_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PathItem.cycle_path_type)
  return static_cast< ::pbnavitia::CyclePathType >(cycle_path_type_);
}
 void PathItem::set_cycle_path_type(::pbnavitia::CyclePathType value) {
  assert(::pbnavitia::CyclePathType_IsValid(value));
  set_has_cycle_path_type();
  cycle_path_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.PathItem.cycle_path_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetNetwork::kLengthFieldNumber;
const int StreetNetwork::kDurationFieldNumber;
const int StreetNetwork::kModeFieldNumber;
const int StreetNetwork::kPathItemsFieldNumber;
const int StreetNetwork::kCoordinatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetNetwork::StreetNetwork()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StreetNetwork)
}

void StreetNetwork::InitAsDefaultInstance() {
}

StreetNetwork::StreetNetwork(const StreetNetwork& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StreetNetwork)
}

void StreetNetwork::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  duration_ = 0;
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetNetwork::~StreetNetwork() {
  // @@protoc_insertion_point(destructor:pbnavitia.StreetNetwork)
  SharedDtor();
}

void StreetNetwork::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreetNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetNetwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetNetwork_descriptor_;
}

const StreetNetwork& StreetNetwork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

StreetNetwork* StreetNetwork::default_instance_ = NULL;

StreetNetwork* StreetNetwork::New(::google::protobuf::Arena* arena) const {
  StreetNetwork* n = new StreetNetwork;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreetNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StreetNetwork)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StreetNetwork, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StreetNetwork*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(length_, duration_);
    mode_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  path_items_.Clear();
  coordinates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreetNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StreetNetwork)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double length = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_duration;
        break;
      }

      // optional double duration = 2;
      case 2: {
        if (tag == 17) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional .pbnavitia.StreetNetworkMode mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::StreetNetworkMode_IsValid(value)) {
            set_mode(static_cast< ::pbnavitia::StreetNetworkMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_path_items;
        break;
      }

      // repeated .pbnavitia.PathItem path_items = 4;
      case 4: {
        if (tag == 34) {
         parse_path_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_path_items;
        if (input->ExpectTag(42)) goto parse_loop_coordinates;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.GeographicalCoord coordinates = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_coordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_coordinates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_coordinates;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StreetNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StreetNetwork)
  return false;
#undef DO_
}

void StreetNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StreetNetwork)
  // optional double length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->length(), output);
  }

  // optional double duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->duration(), output);
  }

  // optional .pbnavitia.StreetNetworkMode mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // repeated .pbnavitia.PathItem path_items = 4;
  for (unsigned int i = 0, n = this->path_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->path_items(i), output);
  }

  // repeated .pbnavitia.GeographicalCoord coordinates = 5;
  for (unsigned int i = 0, n = this->coordinates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->coordinates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StreetNetwork)
}

::google::protobuf::uint8* StreetNetwork::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StreetNetwork)
  // optional double length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->length(), target);
  }

  // optional double duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->duration(), target);
  }

  // optional .pbnavitia.StreetNetworkMode mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // repeated .pbnavitia.PathItem path_items = 4;
  for (unsigned int i = 0, n = this->path_items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->path_items(i), false, target);
  }

  // repeated .pbnavitia.GeographicalCoord coordinates = 5;
  for (unsigned int i = 0, n = this->coordinates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->coordinates(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StreetNetwork)
  return target;
}

int StreetNetwork::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StreetNetwork)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double length = 1;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double duration = 2;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional .pbnavitia.StreetNetworkMode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  // repeated .pbnavitia.PathItem path_items = 4;
  total_size += 1 * this->path_items_size();
  for (int i = 0; i < this->path_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_items(i));
  }

  // repeated .pbnavitia.GeographicalCoord coordinates = 5;
  total_size += 1 * this->coordinates_size();
  for (int i = 0; i < this->coordinates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinates(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetNetwork::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StreetNetwork)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreetNetwork* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreetNetwork>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StreetNetwork)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StreetNetwork)
    MergeFrom(*source);
  }
}

void StreetNetwork::MergeFrom(const StreetNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StreetNetwork)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  path_items_.MergeFrom(from.path_items_);
  coordinates_.MergeFrom(from.coordinates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreetNetwork::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StreetNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetNetwork::CopyFrom(const StreetNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StreetNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetNetwork::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->coordinates())) return false;
  return true;
}

void StreetNetwork::Swap(StreetNetwork* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetNetwork::InternalSwap(StreetNetwork* other) {
  std::swap(length_, other->length_);
  std::swap(duration_, other->duration_);
  std::swap(mode_, other->mode_);
  path_items_.UnsafeArenaSwap(&other->path_items_);
  coordinates_.UnsafeArenaSwap(&other->coordinates_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreetNetwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreetNetwork_descriptor_;
  metadata.reflection = StreetNetwork_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreetNetwork

// optional double length = 1;
bool StreetNetwork::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreetNetwork::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
void StreetNetwork::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreetNetwork::clear_length() {
  length_ = 0;
  clear_has_length();
}
 double StreetNetwork::length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.length)
  return length_;
}
 void StreetNetwork::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetwork.length)
}

// optional double duration = 2;
bool StreetNetwork::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreetNetwork::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void StreetNetwork::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreetNetwork::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
 double StreetNetwork::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.duration)
  return duration_;
}
 void StreetNetwork::set_duration(double value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetwork.duration)
}

// optional .pbnavitia.StreetNetworkMode mode = 3;
bool StreetNetwork::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StreetNetwork::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void StreetNetwork::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void StreetNetwork::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::pbnavitia::StreetNetworkMode StreetNetwork::mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.mode)
  return static_cast< ::pbnavitia::StreetNetworkMode >(mode_);
}
 void StreetNetwork::set_mode(::pbnavitia::StreetNetworkMode value) {
  assert(::pbnavitia::StreetNetworkMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StreetNetwork.mode)
}

// repeated .pbnavitia.PathItem path_items = 4;
int StreetNetwork::path_items_size() const {
  return path_items_.size();
}
void StreetNetwork::clear_path_items() {
  path_items_.Clear();
}
const ::pbnavitia::PathItem& StreetNetwork::path_items(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.path_items)
  return path_items_.Get(index);
}
::pbnavitia::PathItem* StreetNetwork::mutable_path_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetwork.path_items)
  return path_items_.Mutable(index);
}
::pbnavitia::PathItem* StreetNetwork::add_path_items() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetwork.path_items)
  return path_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PathItem >*
StreetNetwork::mutable_path_items() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetwork.path_items)
  return &path_items_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PathItem >&
StreetNetwork::path_items() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetwork.path_items)
  return path_items_;
}

// repeated .pbnavitia.GeographicalCoord coordinates = 5;
int StreetNetwork::coordinates_size() const {
  return coordinates_.size();
}
void StreetNetwork::clear_coordinates() {
  coordinates_.Clear();
}
const ::pbnavitia::GeographicalCoord& StreetNetwork::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetwork.coordinates)
  return coordinates_.Get(index);
}
::pbnavitia::GeographicalCoord* StreetNetwork::mutable_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetwork.coordinates)
  return coordinates_.Mutable(index);
}
::pbnavitia::GeographicalCoord* StreetNetwork::add_coordinates() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetwork.coordinates)
  return coordinates_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
StreetNetwork::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetwork.coordinates)
  return &coordinates_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
StreetNetwork::coordinates() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetwork.coordinates)
  return coordinates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PtDisplayInfo::kNetworkFieldNumber;
const int PtDisplayInfo::kCodeFieldNumber;
const int PtDisplayInfo::kHeadsignFieldNumber;
const int PtDisplayInfo::kDirectionFieldNumber;
const int PtDisplayInfo::kColorFieldNumber;
const int PtDisplayInfo::kCommercialModeFieldNumber;
const int PtDisplayInfo::kPhysicalModeFieldNumber;
const int PtDisplayInfo::kDescriptionFieldNumber;
const int PtDisplayInfo::kUrisFieldNumber;
const int PtDisplayInfo::kHasEquipmentsFieldNumber;
const int PtDisplayInfo::kNameFieldNumber;
const int PtDisplayInfo::kMessagesFieldNumber;
const int PtDisplayInfo::kImpactUrisFieldNumber;
const int PtDisplayInfo::kNotesFieldNumber;
const int PtDisplayInfo::kHeadsignsFieldNumber;
const int PtDisplayInfo::kTextColorFieldNumber;
const int PtDisplayInfo::kTripShortNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PtDisplayInfo::PtDisplayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.PtDisplayInfo)
}

void PtDisplayInfo::InitAsDefaultInstance() {
  uris_ = const_cast< ::pbnavitia::Uris*>(&::pbnavitia::Uris::default_instance());
  has_equipments_ = const_cast< ::pbnavitia::hasEquipments*>(&::pbnavitia::hasEquipments::default_instance());
}

PtDisplayInfo::PtDisplayInfo(const PtDisplayInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.PtDisplayInfo)
}

void PtDisplayInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headsign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commercial_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uris_ = NULL;
  has_equipments_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trip_short_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PtDisplayInfo::~PtDisplayInfo() {
  // @@protoc_insertion_point(destructor:pbnavitia.PtDisplayInfo)
  SharedDtor();
}

void PtDisplayInfo::SharedDtor() {
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headsign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commercial_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trip_short_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete uris_;
    delete has_equipments_;
  }
}

void PtDisplayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PtDisplayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PtDisplayInfo_descriptor_;
}

const PtDisplayInfo& PtDisplayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

PtDisplayInfo* PtDisplayInfo::default_instance_ = NULL;

PtDisplayInfo* PtDisplayInfo::New(::google::protobuf::Arena* arena) const {
  PtDisplayInfo* n = new PtDisplayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PtDisplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.PtDisplayInfo)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_network()) {
      network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_code()) {
      code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_headsign()) {
      headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_direction()) {
      direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_color()) {
      color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_commercial_mode()) {
      commercial_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_physical_mode()) {
      physical_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 34560u) {
    if (has_uris()) {
      if (uris_ != NULL) uris_->::pbnavitia::Uris::Clear();
    }
    if (has_has_equipments()) {
      if (has_equipments_ != NULL) has_equipments_->::pbnavitia::hasEquipments::Clear();
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_text_color()) {
      text_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_trip_short_name()) {
    trip_short_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  messages_.Clear();
  impact_uris_.Clear();
  notes_.Clear();
  headsigns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PtDisplayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.PtDisplayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string network = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // optional string code = 2;
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_headsign;
        break;
      }

      // optional string headsign = 3;
      case 3: {
        if (tag == 26) {
         parse_headsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headsign().data(), this->headsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.headsign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_direction;
        break;
      }

      // optional string direction = 4;
      case 4: {
        if (tag == 34) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.direction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_color;
        break;
      }

      // optional string color = 5;
      case 5: {
        if (tag == 42) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_commercial_mode;
        break;
      }

      // optional string commercial_mode = 6;
      case 6: {
        if (tag == 50) {
         parse_commercial_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commercial_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commercial_mode().data(), this->commercial_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.commercial_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_physical_mode;
        break;
      }

      // optional string physical_mode = 7;
      case 7: {
        if (tag == 58) {
         parse_physical_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->physical_mode().data(), this->physical_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.physical_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_description;
        break;
      }

      // optional string description = 8;
      case 8: {
        if (tag == 66) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_uris;
        break;
      }

      // optional .pbnavitia.Uris uris = 9;
      case 9: {
        if (tag == 74) {
         parse_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uris()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_has_equipments;
        break;
      }

      // optional .pbnavitia.hasEquipments has_equipments = 11;
      case 11: {
        if (tag == 90) {
         parse_has_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_has_equipments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }

      // optional string name = 12;
      case 12: {
        if (tag == 98) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_messages;
        break;
      }

      // repeated .pbnavitia.Message messages = 13;
      case 13: {
        if (tag == 106) {
         parse_messages:
          DO_(input->IncrementRecursionDepth());
         parse_loop_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_messages;
        if (input->ExpectTag(122)) goto parse_loop_notes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Note notes = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_notes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(130)) goto parse_headsigns;
        break;
      }

      // repeated string headsigns = 16;
      case 16: {
        if (tag == 130) {
         parse_headsigns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_headsigns()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headsigns(this->headsigns_size() - 1).data(),
            this->headsigns(this->headsigns_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.headsigns");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_headsigns;
        if (input->ExpectTag(138)) goto parse_text_color;
        break;
      }

      // optional string text_color = 17;
      case 17: {
        if (tag == 138) {
         parse_text_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_color().data(), this->text_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.text_color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 18;
      case 18: {
        if (tag == 146) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_impact_uris;
        if (input->ExpectTag(154)) goto parse_trip_short_name;
        break;
      }

      // optional string trip_short_name = 19;
      case 19: {
        if (tag == 154) {
         parse_trip_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trip_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trip_short_name().data(), this->trip_short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.PtDisplayInfo.trip_short_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.PtDisplayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.PtDisplayInfo)
  return false;
#undef DO_
}

void PtDisplayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.PtDisplayInfo)
  // optional string network = 1;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network(), output);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // optional string headsign = 3;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.headsign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->headsign(), output);
  }

  // optional string direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.direction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->direction(), output);
  }

  // optional string color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->color(), output);
  }

  // optional string commercial_mode = 6;
  if (has_commercial_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commercial_mode().data(), this->commercial_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.commercial_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->commercial_mode(), output);
  }

  // optional string physical_mode = 7;
  if (has_physical_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->physical_mode().data(), this->physical_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.physical_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->physical_mode(), output);
  }

  // optional string description = 8;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->description(), output);
  }

  // optional .pbnavitia.Uris uris = 9;
  if (has_uris()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->uris_, output);
  }

  // optional .pbnavitia.hasEquipments has_equipments = 11;
  if (has_has_equipments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->has_equipments_, output);
  }

  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // repeated .pbnavitia.Message messages = 13;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->messages(i), output);
  }

  // repeated .pbnavitia.Note notes = 15;
  for (unsigned int i = 0, n = this->notes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->notes(i), output);
  }

  // repeated string headsigns = 16;
  for (int i = 0; i < this->headsigns_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headsigns(i).data(), this->headsigns(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.headsigns");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->headsigns(i), output);
  }

  // optional string text_color = 17;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_color().data(), this->text_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.text_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->text_color(), output);
  }

  // repeated string impact_uris = 18;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->impact_uris(i), output);
  }

  // optional string trip_short_name = 19;
  if (has_trip_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trip_short_name().data(), this->trip_short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.trip_short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->trip_short_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.PtDisplayInfo)
}

::google::protobuf::uint8* PtDisplayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.PtDisplayInfo)
  // optional string network = 1;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->network(), target);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // optional string headsign = 3;
  if (has_headsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headsign().data(), this->headsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.headsign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headsign(), target);
  }

  // optional string direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.direction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->direction(), target);
  }

  // optional string color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->color(), target);
  }

  // optional string commercial_mode = 6;
  if (has_commercial_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commercial_mode().data(), this->commercial_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.commercial_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->commercial_mode(), target);
  }

  // optional string physical_mode = 7;
  if (has_physical_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->physical_mode().data(), this->physical_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.physical_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->physical_mode(), target);
  }

  // optional string description = 8;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->description(), target);
  }

  // optional .pbnavitia.Uris uris = 9;
  if (has_uris()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->uris_, false, target);
  }

  // optional .pbnavitia.hasEquipments has_equipments = 11;
  if (has_has_equipments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->has_equipments_, false, target);
  }

  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // repeated .pbnavitia.Message messages = 13;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->messages(i), false, target);
  }

  // repeated .pbnavitia.Note notes = 15;
  for (unsigned int i = 0, n = this->notes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->notes(i), false, target);
  }

  // repeated string headsigns = 16;
  for (int i = 0; i < this->headsigns_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headsigns(i).data(), this->headsigns(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.headsigns");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->headsigns(i), target);
  }

  // optional string text_color = 17;
  if (has_text_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_color().data(), this->text_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.text_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->text_color(), target);
  }

  // repeated string impact_uris = 18;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->impact_uris(i), target);
  }

  // optional string trip_short_name = 19;
  if (has_trip_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trip_short_name().data(), this->trip_short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.PtDisplayInfo.trip_short_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->trip_short_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.PtDisplayInfo)
  return target;
}

int PtDisplayInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.PtDisplayInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string network = 1;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional string headsign = 3;
    if (has_headsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headsign());
    }

    // optional string direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction());
    }

    // optional string color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional string commercial_mode = 6;
    if (has_commercial_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commercial_mode());
    }

    // optional string physical_mode = 7;
    if (has_physical_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->physical_mode());
    }

    // optional string description = 8;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (_has_bits_[8 / 32] & 34560u) {
    // optional .pbnavitia.Uris uris = 9;
    if (has_uris()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uris_);
    }

    // optional .pbnavitia.hasEquipments has_equipments = 11;
    if (has_has_equipments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->has_equipments_);
    }

    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string text_color = 17;
    if (has_text_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_color());
    }

  }
  // optional string trip_short_name = 19;
  if (has_trip_short_name()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trip_short_name());
  }

  // repeated .pbnavitia.Message messages = 13;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  // repeated string impact_uris = 18;
  total_size += 2 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  // repeated .pbnavitia.Note notes = 15;
  total_size += 1 * this->notes_size();
  for (int i = 0; i < this->notes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notes(i));
  }

  // repeated string headsigns = 16;
  total_size += 2 * this->headsigns_size();
  for (int i = 0; i < this->headsigns_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->headsigns(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PtDisplayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.PtDisplayInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PtDisplayInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PtDisplayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.PtDisplayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.PtDisplayInfo)
    MergeFrom(*source);
  }
}

void PtDisplayInfo::MergeFrom(const PtDisplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.PtDisplayInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  messages_.MergeFrom(from.messages_);
  impact_uris_.MergeFrom(from.impact_uris_);
  notes_.MergeFrom(from.notes_);
  headsigns_.MergeFrom(from.headsigns_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_network()) {
      set_has_network();
      network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
    }
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (from.has_headsign()) {
      set_has_headsign();
      headsign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headsign_);
    }
    if (from.has_direction()) {
      set_has_direction();
      direction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.direction_);
    }
    if (from.has_color()) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (from.has_commercial_mode()) {
      set_has_commercial_mode();
      commercial_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commercial_mode_);
    }
    if (from.has_physical_mode()) {
      set_has_physical_mode();
      physical_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physical_mode_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uris()) {
      mutable_uris()->::pbnavitia::Uris::MergeFrom(from.uris());
    }
    if (from.has_has_equipments()) {
      mutable_has_equipments()->::pbnavitia::hasEquipments::MergeFrom(from.has_equipments());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_text_color()) {
      set_has_text_color();
      text_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_color_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trip_short_name()) {
      set_has_trip_short_name();
      trip_short_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_short_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PtDisplayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.PtDisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtDisplayInfo::CopyFrom(const PtDisplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.PtDisplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtDisplayInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->notes())) return false;
  return true;
}

void PtDisplayInfo::Swap(PtDisplayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PtDisplayInfo::InternalSwap(PtDisplayInfo* other) {
  network_.Swap(&other->network_);
  code_.Swap(&other->code_);
  headsign_.Swap(&other->headsign_);
  direction_.Swap(&other->direction_);
  color_.Swap(&other->color_);
  commercial_mode_.Swap(&other->commercial_mode_);
  physical_mode_.Swap(&other->physical_mode_);
  description_.Swap(&other->description_);
  std::swap(uris_, other->uris_);
  std::swap(has_equipments_, other->has_equipments_);
  name_.Swap(&other->name_);
  messages_.UnsafeArenaSwap(&other->messages_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  notes_.UnsafeArenaSwap(&other->notes_);
  headsigns_.UnsafeArenaSwap(&other->headsigns_);
  text_color_.Swap(&other->text_color_);
  trip_short_name_.Swap(&other->trip_short_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PtDisplayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PtDisplayInfo_descriptor_;
  metadata.reflection = PtDisplayInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PtDisplayInfo

// optional string network = 1;
bool PtDisplayInfo::has_network() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PtDisplayInfo::set_has_network() {
  _has_bits_[0] |= 0x00000001u;
}
void PtDisplayInfo::clear_has_network() {
  _has_bits_[0] &= ~0x00000001u;
}
void PtDisplayInfo::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network();
}
 const ::std::string& PtDisplayInfo::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_network(const ::std::string& value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.network)
}
 void PtDisplayInfo::set_network(const char* value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.network)
}
 void PtDisplayInfo::set_network(const char* value, size_t size) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.network)
}
 ::std::string* PtDisplayInfo::mutable_network() {
  set_has_network();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.network)
  clear_has_network();
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    set_has_network();
  } else {
    clear_has_network();
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.network)
}

// optional string code = 2;
bool PtDisplayInfo::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PtDisplayInfo::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void PtDisplayInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void PtDisplayInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
 const ::std::string& PtDisplayInfo::code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.code)
}
 void PtDisplayInfo::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.code)
}
 void PtDisplayInfo::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.code)
}
 ::std::string* PtDisplayInfo::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_code() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.code)
}

// optional string headsign = 3;
bool PtDisplayInfo::has_headsign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PtDisplayInfo::set_has_headsign() {
  _has_bits_[0] |= 0x00000004u;
}
void PtDisplayInfo::clear_has_headsign() {
  _has_bits_[0] &= ~0x00000004u;
}
void PtDisplayInfo::clear_headsign() {
  headsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headsign();
}
 const ::std::string& PtDisplayInfo::headsign() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.headsign)
  return headsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_headsign(const ::std::string& value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.headsign)
}
 void PtDisplayInfo::set_headsign(const char* value) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.headsign)
}
 void PtDisplayInfo::set_headsign(const char* value, size_t size) {
  set_has_headsign();
  headsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.headsign)
}
 ::std::string* PtDisplayInfo::mutable_headsign() {
  set_has_headsign();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.headsign)
  return headsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_headsign() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.headsign)
  clear_has_headsign();
  return headsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_headsign(::std::string* headsign) {
  if (headsign != NULL) {
    set_has_headsign();
  } else {
    clear_has_headsign();
  }
  headsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headsign);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.headsign)
}

// optional string direction = 4;
bool PtDisplayInfo::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PtDisplayInfo::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
void PtDisplayInfo::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
void PtDisplayInfo::clear_direction() {
  direction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_direction();
}
 const ::std::string& PtDisplayInfo::direction() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.direction)
  return direction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_direction(const ::std::string& value) {
  set_has_direction();
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.direction)
}
 void PtDisplayInfo::set_direction(const char* value) {
  set_has_direction();
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.direction)
}
 void PtDisplayInfo::set_direction(const char* value, size_t size) {
  set_has_direction();
  direction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.direction)
}
 ::std::string* PtDisplayInfo::mutable_direction() {
  set_has_direction();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.direction)
  return direction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_direction() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.direction)
  clear_has_direction();
  return direction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_direction(::std::string* direction) {
  if (direction != NULL) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  direction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.direction)
}

// optional string color = 5;
bool PtDisplayInfo::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PtDisplayInfo::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
void PtDisplayInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
void PtDisplayInfo::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
 const ::std::string& PtDisplayInfo::color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.color)
}
 void PtDisplayInfo::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.color)
}
 void PtDisplayInfo::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.color)
}
 ::std::string* PtDisplayInfo::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.color)
}

// optional string commercial_mode = 6;
bool PtDisplayInfo::has_commercial_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PtDisplayInfo::set_has_commercial_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void PtDisplayInfo::clear_has_commercial_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void PtDisplayInfo::clear_commercial_mode() {
  commercial_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commercial_mode();
}
 const ::std::string& PtDisplayInfo::commercial_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.commercial_mode)
  return commercial_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_commercial_mode(const ::std::string& value) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.commercial_mode)
}
 void PtDisplayInfo::set_commercial_mode(const char* value) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.commercial_mode)
}
 void PtDisplayInfo::set_commercial_mode(const char* value, size_t size) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.commercial_mode)
}
 ::std::string* PtDisplayInfo::mutable_commercial_mode() {
  set_has_commercial_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.commercial_mode)
  return commercial_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_commercial_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.commercial_mode)
  clear_has_commercial_mode();
  return commercial_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_commercial_mode(::std::string* commercial_mode) {
  if (commercial_mode != NULL) {
    set_has_commercial_mode();
  } else {
    clear_has_commercial_mode();
  }
  commercial_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commercial_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.commercial_mode)
}

// optional string physical_mode = 7;
bool PtDisplayInfo::has_physical_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PtDisplayInfo::set_has_physical_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void PtDisplayInfo::clear_has_physical_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void PtDisplayInfo::clear_physical_mode() {
  physical_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_physical_mode();
}
 const ::std::string& PtDisplayInfo::physical_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.physical_mode)
  return physical_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_physical_mode(const ::std::string& value) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.physical_mode)
}
 void PtDisplayInfo::set_physical_mode(const char* value) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.physical_mode)
}
 void PtDisplayInfo::set_physical_mode(const char* value, size_t size) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.physical_mode)
}
 ::std::string* PtDisplayInfo::mutable_physical_mode() {
  set_has_physical_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.physical_mode)
  return physical_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_physical_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.physical_mode)
  clear_has_physical_mode();
  return physical_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_physical_mode(::std::string* physical_mode) {
  if (physical_mode != NULL) {
    set_has_physical_mode();
  } else {
    clear_has_physical_mode();
  }
  physical_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.physical_mode)
}

// optional string description = 8;
bool PtDisplayInfo::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PtDisplayInfo::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
void PtDisplayInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
void PtDisplayInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& PtDisplayInfo::description() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.description)
}
 void PtDisplayInfo::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.description)
}
 void PtDisplayInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.description)
}
 ::std::string* PtDisplayInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_description() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.description)
}

// optional .pbnavitia.Uris uris = 9;
bool PtDisplayInfo::has_uris() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PtDisplayInfo::set_has_uris() {
  _has_bits_[0] |= 0x00000100u;
}
void PtDisplayInfo::clear_has_uris() {
  _has_bits_[0] &= ~0x00000100u;
}
void PtDisplayInfo::clear_uris() {
  if (uris_ != NULL) uris_->::pbnavitia::Uris::Clear();
  clear_has_uris();
}
const ::pbnavitia::Uris& PtDisplayInfo::uris() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.uris)
  return uris_ != NULL ? *uris_ : *default_instance_->uris_;
}
::pbnavitia::Uris* PtDisplayInfo::mutable_uris() {
  set_has_uris();
  if (uris_ == NULL) {
    uris_ = new ::pbnavitia::Uris;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.uris)
  return uris_;
}
::pbnavitia::Uris* PtDisplayInfo::release_uris() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.uris)
  clear_has_uris();
  ::pbnavitia::Uris* temp = uris_;
  uris_ = NULL;
  return temp;
}
void PtDisplayInfo::set_allocated_uris(::pbnavitia::Uris* uris) {
  delete uris_;
  uris_ = uris;
  if (uris) {
    set_has_uris();
  } else {
    clear_has_uris();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.uris)
}

// optional .pbnavitia.hasEquipments has_equipments = 11;
bool PtDisplayInfo::has_has_equipments() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PtDisplayInfo::set_has_has_equipments() {
  _has_bits_[0] |= 0x00000200u;
}
void PtDisplayInfo::clear_has_has_equipments() {
  _has_bits_[0] &= ~0x00000200u;
}
void PtDisplayInfo::clear_has_equipments() {
  if (has_equipments_ != NULL) has_equipments_->::pbnavitia::hasEquipments::Clear();
  clear_has_has_equipments();
}
const ::pbnavitia::hasEquipments& PtDisplayInfo::has_equipments() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.has_equipments)
  return has_equipments_ != NULL ? *has_equipments_ : *default_instance_->has_equipments_;
}
::pbnavitia::hasEquipments* PtDisplayInfo::mutable_has_equipments() {
  set_has_has_equipments();
  if (has_equipments_ == NULL) {
    has_equipments_ = new ::pbnavitia::hasEquipments;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.has_equipments)
  return has_equipments_;
}
::pbnavitia::hasEquipments* PtDisplayInfo::release_has_equipments() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.has_equipments)
  clear_has_has_equipments();
  ::pbnavitia::hasEquipments* temp = has_equipments_;
  has_equipments_ = NULL;
  return temp;
}
void PtDisplayInfo::set_allocated_has_equipments(::pbnavitia::hasEquipments* has_equipments) {
  delete has_equipments_;
  has_equipments_ = has_equipments;
  if (has_equipments) {
    set_has_has_equipments();
  } else {
    clear_has_has_equipments();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.has_equipments)
}

// optional string name = 12;
bool PtDisplayInfo::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PtDisplayInfo::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
void PtDisplayInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
void PtDisplayInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PtDisplayInfo::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.name)
}
 void PtDisplayInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.name)
}
 void PtDisplayInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.name)
}
 ::std::string* PtDisplayInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.name)
}

// repeated .pbnavitia.Message messages = 13;
int PtDisplayInfo::messages_size() const {
  return messages_.size();
}
void PtDisplayInfo::clear_messages() {
  messages_.Clear();
}
const ::pbnavitia::Message& PtDisplayInfo::messages(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.messages)
  return messages_.Get(index);
}
::pbnavitia::Message* PtDisplayInfo::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.messages)
  return messages_.Mutable(index);
}
::pbnavitia::Message* PtDisplayInfo::add_messages() {
  // @@protoc_insertion_point(field_add:pbnavitia.PtDisplayInfo.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >*
PtDisplayInfo::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtDisplayInfo.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Message >&
PtDisplayInfo::messages() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtDisplayInfo.messages)
  return messages_;
}

// repeated string impact_uris = 18;
int PtDisplayInfo::impact_uris_size() const {
  return impact_uris_.size();
}
void PtDisplayInfo::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& PtDisplayInfo::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* PtDisplayInfo::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.impact_uris)
  return impact_uris_.Mutable(index);
}
 void PtDisplayInfo::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void PtDisplayInfo::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.impact_uris)
}
 void PtDisplayInfo::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.impact_uris)
}
 ::std::string* PtDisplayInfo::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PtDisplayInfo.impact_uris)
  return impact_uris_.Add();
}
 void PtDisplayInfo::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtDisplayInfo.impact_uris)
}
 void PtDisplayInfo::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PtDisplayInfo.impact_uris)
}
 void PtDisplayInfo::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PtDisplayInfo.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PtDisplayInfo::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtDisplayInfo.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PtDisplayInfo::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtDisplayInfo.impact_uris)
  return &impact_uris_;
}

// repeated .pbnavitia.Note notes = 15;
int PtDisplayInfo::notes_size() const {
  return notes_.size();
}
void PtDisplayInfo::clear_notes() {
  notes_.Clear();
}
const ::pbnavitia::Note& PtDisplayInfo::notes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.notes)
  return notes_.Get(index);
}
::pbnavitia::Note* PtDisplayInfo::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.notes)
  return notes_.Mutable(index);
}
::pbnavitia::Note* PtDisplayInfo::add_notes() {
  // @@protoc_insertion_point(field_add:pbnavitia.PtDisplayInfo.notes)
  return notes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >*
PtDisplayInfo::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtDisplayInfo.notes)
  return &notes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Note >&
PtDisplayInfo::notes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtDisplayInfo.notes)
  return notes_;
}

// repeated string headsigns = 16;
int PtDisplayInfo::headsigns_size() const {
  return headsigns_.size();
}
void PtDisplayInfo::clear_headsigns() {
  headsigns_.Clear();
}
 const ::std::string& PtDisplayInfo::headsigns(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.headsigns)
  return headsigns_.Get(index);
}
 ::std::string* PtDisplayInfo::mutable_headsigns(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.headsigns)
  return headsigns_.Mutable(index);
}
 void PtDisplayInfo::set_headsigns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.headsigns)
  headsigns_.Mutable(index)->assign(value);
}
 void PtDisplayInfo::set_headsigns(int index, const char* value) {
  headsigns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.headsigns)
}
 void PtDisplayInfo::set_headsigns(int index, const char* value, size_t size) {
  headsigns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.headsigns)
}
 ::std::string* PtDisplayInfo::add_headsigns() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.PtDisplayInfo.headsigns)
  return headsigns_.Add();
}
 void PtDisplayInfo::add_headsigns(const ::std::string& value) {
  headsigns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.PtDisplayInfo.headsigns)
}
 void PtDisplayInfo::add_headsigns(const char* value) {
  headsigns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.PtDisplayInfo.headsigns)
}
 void PtDisplayInfo::add_headsigns(const char* value, size_t size) {
  headsigns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.PtDisplayInfo.headsigns)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PtDisplayInfo::headsigns() const {
  // @@protoc_insertion_point(field_list:pbnavitia.PtDisplayInfo.headsigns)
  return headsigns_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PtDisplayInfo::mutable_headsigns() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.PtDisplayInfo.headsigns)
  return &headsigns_;
}

// optional string text_color = 17;
bool PtDisplayInfo::has_text_color() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PtDisplayInfo::set_has_text_color() {
  _has_bits_[0] |= 0x00008000u;
}
void PtDisplayInfo::clear_has_text_color() {
  _has_bits_[0] &= ~0x00008000u;
}
void PtDisplayInfo::clear_text_color() {
  text_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text_color();
}
 const ::std::string& PtDisplayInfo::text_color() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.text_color)
  return text_color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_text_color(const ::std::string& value) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.text_color)
}
 void PtDisplayInfo::set_text_color(const char* value) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.text_color)
}
 void PtDisplayInfo::set_text_color(const char* value, size_t size) {
  set_has_text_color();
  text_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.text_color)
}
 ::std::string* PtDisplayInfo::mutable_text_color() {
  set_has_text_color();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.text_color)
  return text_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_text_color() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.text_color)
  clear_has_text_color();
  return text_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_text_color(::std::string* text_color) {
  if (text_color != NULL) {
    set_has_text_color();
  } else {
    clear_has_text_color();
  }
  text_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text_color);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.text_color)
}

// optional string trip_short_name = 19;
bool PtDisplayInfo::has_trip_short_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PtDisplayInfo::set_has_trip_short_name() {
  _has_bits_[0] |= 0x00010000u;
}
void PtDisplayInfo::clear_has_trip_short_name() {
  _has_bits_[0] &= ~0x00010000u;
}
void PtDisplayInfo::clear_trip_short_name() {
  trip_short_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trip_short_name();
}
 const ::std::string& PtDisplayInfo::trip_short_name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.PtDisplayInfo.trip_short_name)
  return trip_short_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_trip_short_name(const ::std::string& value) {
  set_has_trip_short_name();
  trip_short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.PtDisplayInfo.trip_short_name)
}
 void PtDisplayInfo::set_trip_short_name(const char* value) {
  set_has_trip_short_name();
  trip_short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.PtDisplayInfo.trip_short_name)
}
 void PtDisplayInfo::set_trip_short_name(const char* value, size_t size) {
  set_has_trip_short_name();
  trip_short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.PtDisplayInfo.trip_short_name)
}
 ::std::string* PtDisplayInfo::mutable_trip_short_name() {
  set_has_trip_short_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.PtDisplayInfo.trip_short_name)
  return trip_short_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PtDisplayInfo::release_trip_short_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.PtDisplayInfo.trip_short_name)
  clear_has_trip_short_name();
  return trip_short_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PtDisplayInfo::set_allocated_trip_short_name(::std::string* trip_short_name) {
  if (trip_short_name != NULL) {
    set_has_trip_short_name();
  } else {
    clear_has_trip_short_name();
  }
  trip_short_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_short_name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.PtDisplayInfo.trip_short_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uris::kCompanyFieldNumber;
const int Uris::kVehicleJourneyFieldNumber;
const int Uris::kLineFieldNumber;
const int Uris::kRouteFieldNumber;
const int Uris::kCommercialModeFieldNumber;
const int Uris::kPhysicalModeFieldNumber;
const int Uris::kNetworkFieldNumber;
const int Uris::kNoteFieldNumber;
const int Uris::kJourneyPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uris::Uris()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Uris)
}

void Uris::InitAsDefaultInstance() {
}

Uris::Uris(const Uris& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Uris)
}

void Uris::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicle_journey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commercial_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  journey_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uris::~Uris() {
  // @@protoc_insertion_point(destructor:pbnavitia.Uris)
  SharedDtor();
}

void Uris::SharedDtor() {
  company_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicle_journey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commercial_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  journey_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Uris::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uris::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uris_descriptor_;
}

const Uris& Uris::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Uris* Uris::default_instance_ = NULL;

Uris* Uris::New(::google::protobuf::Arena* arena) const {
  Uris* n = new Uris;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uris::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Uris)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_company()) {
      company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vehicle_journey()) {
      vehicle_journey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_line()) {
      line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_route()) {
      route_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_commercial_mode()) {
      commercial_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_physical_mode()) {
      physical_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_network()) {
      network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_note()) {
      note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_journey_pattern()) {
    journey_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Uris::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Uris)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string company = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company().data(), this->company().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.company");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle_journey;
        break;
      }

      // optional string vehicle_journey = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicle_journey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_journey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicle_journey().data(), this->vehicle_journey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.vehicle_journey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_line;
        break;
      }

      // optional string line = 3;
      case 3: {
        if (tag == 26) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->line().data(), this->line().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.line");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_route;
        break;
      }

      // optional string route = 4;
      case 4: {
        if (tag == 34) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->route().data(), this->route().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.route");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_commercial_mode;
        break;
      }

      // optional string commercial_mode = 5;
      case 5: {
        if (tag == 42) {
         parse_commercial_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commercial_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commercial_mode().data(), this->commercial_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.commercial_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_physical_mode;
        break;
      }

      // optional string physical_mode = 6;
      case 6: {
        if (tag == 50) {
         parse_physical_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->physical_mode().data(), this->physical_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.physical_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_network;
        break;
      }

      // optional string network = 7;
      case 7: {
        if (tag == 58) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_note;
        break;
      }

      // optional string note = 8;
      case 8: {
        if (tag == 66) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_journey_pattern;
        break;
      }

      // optional string journey_pattern = 9;
      case 9: {
        if (tag == 74) {
         parse_journey_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_journey_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->journey_pattern().data(), this->journey_pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Uris.journey_pattern");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Uris)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Uris)
  return false;
#undef DO_
}

void Uris::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Uris)
  // optional string company = 1;
  if (has_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company().data(), this->company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.company");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->company(), output);
  }

  // optional string vehicle_journey = 2;
  if (has_vehicle_journey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_journey().data(), this->vehicle_journey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.vehicle_journey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicle_journey(), output);
  }

  // optional string line = 3;
  if (has_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->line().data(), this->line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->line(), output);
  }

  // optional string route = 4;
  if (has_route()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route().data(), this->route().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.route");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->route(), output);
  }

  // optional string commercial_mode = 5;
  if (has_commercial_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commercial_mode().data(), this->commercial_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.commercial_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->commercial_mode(), output);
  }

  // optional string physical_mode = 6;
  if (has_physical_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->physical_mode().data(), this->physical_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.physical_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->physical_mode(), output);
  }

  // optional string network = 7;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->network(), output);
  }

  // optional string note = 8;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->note(), output);
  }

  // optional string journey_pattern = 9;
  if (has_journey_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->journey_pattern().data(), this->journey_pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.journey_pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->journey_pattern(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Uris)
}

::google::protobuf::uint8* Uris::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Uris)
  // optional string company = 1;
  if (has_company()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company().data(), this->company().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.company");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->company(), target);
  }

  // optional string vehicle_journey = 2;
  if (has_vehicle_journey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_journey().data(), this->vehicle_journey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.vehicle_journey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vehicle_journey(), target);
  }

  // optional string line = 3;
  if (has_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->line().data(), this->line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->line(), target);
  }

  // optional string route = 4;
  if (has_route()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->route().data(), this->route().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.route");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->route(), target);
  }

  // optional string commercial_mode = 5;
  if (has_commercial_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commercial_mode().data(), this->commercial_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.commercial_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->commercial_mode(), target);
  }

  // optional string physical_mode = 6;
  if (has_physical_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->physical_mode().data(), this->physical_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.physical_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->physical_mode(), target);
  }

  // optional string network = 7;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->network(), target);
  }

  // optional string note = 8;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->note(), target);
  }

  // optional string journey_pattern = 9;
  if (has_journey_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->journey_pattern().data(), this->journey_pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Uris.journey_pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->journey_pattern(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Uris)
  return target;
}

int Uris::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Uris)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string company = 1;
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company());
    }

    // optional string vehicle_journey = 2;
    if (has_vehicle_journey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicle_journey());
    }

    // optional string line = 3;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line());
    }

    // optional string route = 4;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route());
    }

    // optional string commercial_mode = 5;
    if (has_commercial_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commercial_mode());
    }

    // optional string physical_mode = 6;
    if (has_physical_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->physical_mode());
    }

    // optional string network = 7;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string note = 8;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

  }
  // optional string journey_pattern = 9;
  if (has_journey_pattern()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->journey_pattern());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uris::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Uris)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Uris* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Uris>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Uris)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Uris)
    MergeFrom(*source);
  }
}

void Uris::MergeFrom(const Uris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Uris)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_company()) {
      set_has_company();
      company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_);
    }
    if (from.has_vehicle_journey()) {
      set_has_vehicle_journey();
      vehicle_journey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicle_journey_);
    }
    if (from.has_line()) {
      set_has_line();
      line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
    }
    if (from.has_route()) {
      set_has_route();
      route_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_);
    }
    if (from.has_commercial_mode()) {
      set_has_commercial_mode();
      commercial_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commercial_mode_);
    }
    if (from.has_physical_mode()) {
      set_has_physical_mode();
      physical_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.physical_mode_);
    }
    if (from.has_network()) {
      set_has_network();
      network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
    }
    if (from.has_note()) {
      set_has_note();
      note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.note_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_journey_pattern()) {
      set_has_journey_pattern();
      journey_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.journey_pattern_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Uris::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Uris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uris::CopyFrom(const Uris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Uris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uris::IsInitialized() const {

  return true;
}

void Uris::Swap(Uris* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uris::InternalSwap(Uris* other) {
  company_.Swap(&other->company_);
  vehicle_journey_.Swap(&other->vehicle_journey_);
  line_.Swap(&other->line_);
  route_.Swap(&other->route_);
  commercial_mode_.Swap(&other->commercial_mode_);
  physical_mode_.Swap(&other->physical_mode_);
  network_.Swap(&other->network_);
  note_.Swap(&other->note_);
  journey_pattern_.Swap(&other->journey_pattern_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uris::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uris_descriptor_;
  metadata.reflection = Uris_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uris

// optional string company = 1;
bool Uris::has_company() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Uris::set_has_company() {
  _has_bits_[0] |= 0x00000001u;
}
void Uris::clear_has_company() {
  _has_bits_[0] &= ~0x00000001u;
}
void Uris::clear_company() {
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company();
}
 const ::std::string& Uris::company() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.company)
  return company_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_company(const ::std::string& value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.company)
}
 void Uris::set_company(const char* value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.company)
}
 void Uris::set_company(const char* value, size_t size) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.company)
}
 ::std::string* Uris::mutable_company() {
  set_has_company();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.company)
  return company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_company() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.company)
  clear_has_company();
  return company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_company(::std::string* company) {
  if (company != NULL) {
    set_has_company();
  } else {
    clear_has_company();
  }
  company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.company)
}

// optional string vehicle_journey = 2;
bool Uris::has_vehicle_journey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Uris::set_has_vehicle_journey() {
  _has_bits_[0] |= 0x00000002u;
}
void Uris::clear_has_vehicle_journey() {
  _has_bits_[0] &= ~0x00000002u;
}
void Uris::clear_vehicle_journey() {
  vehicle_journey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicle_journey();
}
 const ::std::string& Uris::vehicle_journey() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.vehicle_journey)
  return vehicle_journey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_vehicle_journey(const ::std::string& value) {
  set_has_vehicle_journey();
  vehicle_journey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.vehicle_journey)
}
 void Uris::set_vehicle_journey(const char* value) {
  set_has_vehicle_journey();
  vehicle_journey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.vehicle_journey)
}
 void Uris::set_vehicle_journey(const char* value, size_t size) {
  set_has_vehicle_journey();
  vehicle_journey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.vehicle_journey)
}
 ::std::string* Uris::mutable_vehicle_journey() {
  set_has_vehicle_journey();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.vehicle_journey)
  return vehicle_journey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_vehicle_journey() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.vehicle_journey)
  clear_has_vehicle_journey();
  return vehicle_journey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_vehicle_journey(::std::string* vehicle_journey) {
  if (vehicle_journey != NULL) {
    set_has_vehicle_journey();
  } else {
    clear_has_vehicle_journey();
  }
  vehicle_journey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_journey);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.vehicle_journey)
}

// optional string line = 3;
bool Uris::has_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Uris::set_has_line() {
  _has_bits_[0] |= 0x00000004u;
}
void Uris::clear_has_line() {
  _has_bits_[0] &= ~0x00000004u;
}
void Uris::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_line();
}
 const ::std::string& Uris::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.line)
  return line_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_line(const ::std::string& value) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.line)
}
 void Uris::set_line(const char* value) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.line)
}
 void Uris::set_line(const char* value, size_t size) {
  set_has_line();
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.line)
}
 ::std::string* Uris::mutable_line() {
  set_has_line();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.line)
  clear_has_line();
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_line(::std::string* line) {
  if (line != NULL) {
    set_has_line();
  } else {
    clear_has_line();
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.line)
}

// optional string route = 4;
bool Uris::has_route() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Uris::set_has_route() {
  _has_bits_[0] |= 0x00000008u;
}
void Uris::clear_has_route() {
  _has_bits_[0] &= ~0x00000008u;
}
void Uris::clear_route() {
  route_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_route();
}
 const ::std::string& Uris::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.route)
  return route_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_route(const ::std::string& value) {
  set_has_route();
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.route)
}
 void Uris::set_route(const char* value) {
  set_has_route();
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.route)
}
 void Uris::set_route(const char* value, size_t size) {
  set_has_route();
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.route)
}
 ::std::string* Uris::mutable_route() {
  set_has_route();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.route)
  return route_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.route)
  clear_has_route();
  return route_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_route(::std::string* route) {
  if (route != NULL) {
    set_has_route();
  } else {
    clear_has_route();
  }
  route_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.route)
}

// optional string commercial_mode = 5;
bool Uris::has_commercial_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Uris::set_has_commercial_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void Uris::clear_has_commercial_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void Uris::clear_commercial_mode() {
  commercial_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commercial_mode();
}
 const ::std::string& Uris::commercial_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.commercial_mode)
  return commercial_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_commercial_mode(const ::std::string& value) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.commercial_mode)
}
 void Uris::set_commercial_mode(const char* value) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.commercial_mode)
}
 void Uris::set_commercial_mode(const char* value, size_t size) {
  set_has_commercial_mode();
  commercial_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.commercial_mode)
}
 ::std::string* Uris::mutable_commercial_mode() {
  set_has_commercial_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.commercial_mode)
  return commercial_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_commercial_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.commercial_mode)
  clear_has_commercial_mode();
  return commercial_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_commercial_mode(::std::string* commercial_mode) {
  if (commercial_mode != NULL) {
    set_has_commercial_mode();
  } else {
    clear_has_commercial_mode();
  }
  commercial_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commercial_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.commercial_mode)
}

// optional string physical_mode = 6;
bool Uris::has_physical_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Uris::set_has_physical_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void Uris::clear_has_physical_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void Uris::clear_physical_mode() {
  physical_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_physical_mode();
}
 const ::std::string& Uris::physical_mode() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.physical_mode)
  return physical_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_physical_mode(const ::std::string& value) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.physical_mode)
}
 void Uris::set_physical_mode(const char* value) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.physical_mode)
}
 void Uris::set_physical_mode(const char* value, size_t size) {
  set_has_physical_mode();
  physical_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.physical_mode)
}
 ::std::string* Uris::mutable_physical_mode() {
  set_has_physical_mode();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.physical_mode)
  return physical_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_physical_mode() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.physical_mode)
  clear_has_physical_mode();
  return physical_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_physical_mode(::std::string* physical_mode) {
  if (physical_mode != NULL) {
    set_has_physical_mode();
  } else {
    clear_has_physical_mode();
  }
  physical_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_mode);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.physical_mode)
}

// optional string network = 7;
bool Uris::has_network() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Uris::set_has_network() {
  _has_bits_[0] |= 0x00000040u;
}
void Uris::clear_has_network() {
  _has_bits_[0] &= ~0x00000040u;
}
void Uris::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network();
}
 const ::std::string& Uris::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_network(const ::std::string& value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.network)
}
 void Uris::set_network(const char* value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.network)
}
 void Uris::set_network(const char* value, size_t size) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.network)
}
 ::std::string* Uris::mutable_network() {
  set_has_network();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.network)
  clear_has_network();
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    set_has_network();
  } else {
    clear_has_network();
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.network)
}

// optional string note = 8;
bool Uris::has_note() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Uris::set_has_note() {
  _has_bits_[0] |= 0x00000080u;
}
void Uris::clear_has_note() {
  _has_bits_[0] &= ~0x00000080u;
}
void Uris::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_note();
}
 const ::std::string& Uris::note() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.note)
  return note_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_note(const ::std::string& value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.note)
}
 void Uris::set_note(const char* value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.note)
}
 void Uris::set_note(const char* value, size_t size) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.note)
}
 ::std::string* Uris::mutable_note() {
  set_has_note();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_note() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.note)
  clear_has_note();
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    set_has_note();
  } else {
    clear_has_note();
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.note)
}

// optional string journey_pattern = 9;
bool Uris::has_journey_pattern() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Uris::set_has_journey_pattern() {
  _has_bits_[0] |= 0x00000100u;
}
void Uris::clear_has_journey_pattern() {
  _has_bits_[0] &= ~0x00000100u;
}
void Uris::clear_journey_pattern() {
  journey_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_journey_pattern();
}
 const ::std::string& Uris::journey_pattern() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Uris.journey_pattern)
  return journey_pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_journey_pattern(const ::std::string& value) {
  set_has_journey_pattern();
  journey_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Uris.journey_pattern)
}
 void Uris::set_journey_pattern(const char* value) {
  set_has_journey_pattern();
  journey_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Uris.journey_pattern)
}
 void Uris::set_journey_pattern(const char* value, size_t size) {
  set_has_journey_pattern();
  journey_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Uris.journey_pattern)
}
 ::std::string* Uris::mutable_journey_pattern() {
  set_has_journey_pattern();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Uris.journey_pattern)
  return journey_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Uris::release_journey_pattern() {
  // @@protoc_insertion_point(field_release:pbnavitia.Uris.journey_pattern)
  clear_has_journey_pattern();
  return journey_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Uris::set_allocated_journey_pattern(::std::string* journey_pattern) {
  if (journey_pattern != NULL) {
    set_has_journey_pattern();
  } else {
    clear_has_journey_pattern();
  }
  journey_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), journey_pattern);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Uris.journey_pattern)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cost::kValueFieldNumber;
const int Cost::kCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cost::Cost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Cost)
}

void Cost::InitAsDefaultInstance() {
}

Cost::Cost(const Cost& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Cost)
}

void Cost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = 0;
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cost::~Cost() {
  // @@protoc_insertion_point(destructor:pbnavitia.Cost)
  SharedDtor();
}

void Cost::SharedDtor() {
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Cost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cost_descriptor_;
}

const Cost& Cost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Cost* Cost::default_instance_ = NULL;

Cost* Cost::New(::google::protobuf::Arena* arena) const {
  Cost* n = new Cost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cost::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Cost)
  if (_has_bits_[0 / 32] & 3u) {
    value_ = 0;
    if (has_currency()) {
      currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Cost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Cost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_currency;
        break;
      }

      // optional string currency = 2;
      case 2: {
        if (tag == 18) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Cost.currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Cost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Cost)
  return false;
#undef DO_
}

void Cost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Cost)
  // optional double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional string currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Cost.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->currency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Cost)
}

::google::protobuf::uint8* Cost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Cost)
  // optional double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional string currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Cost.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->currency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Cost)
  return target;
}

int Cost::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Cost)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional string currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Cost)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Cost* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Cost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Cost)
    MergeFrom(*source);
  }
}

void Cost::MergeFrom(const Cost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Cost)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_currency()) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Cost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Cost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cost::CopyFrom(const Cost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Cost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cost::IsInitialized() const {

  return true;
}

void Cost::Swap(Cost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cost::InternalSwap(Cost* other) {
  std::swap(value_, other->value_);
  currency_.Swap(&other->currency_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cost_descriptor_;
  metadata.reflection = Cost_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cost

// optional double value = 1;
bool Cost::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Cost::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Cost::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Cost::clear_value() {
  value_ = 0;
  clear_has_value();
}
 double Cost::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Cost.value)
  return value_;
}
 void Cost::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Cost.value)
}

// optional string currency = 2;
bool Cost::has_currency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Cost::set_has_currency() {
  _has_bits_[0] |= 0x00000002u;
}
void Cost::clear_has_currency() {
  _has_bits_[0] &= ~0x00000002u;
}
void Cost::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
 const ::std::string& Cost::currency() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Cost.currency)
  return currency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Cost::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Cost.currency)
}
 void Cost::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Cost.currency)
}
 void Cost::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Cost.currency)
}
 ::std::string* Cost::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Cost.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Cost::release_currency() {
  // @@protoc_insertion_point(field_release:pbnavitia.Cost.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Cost::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Cost.currency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ticket::kIdFieldNumber;
const int Ticket::kNameFieldNumber;
const int Ticket::kCostFieldNumber;
const int Ticket::kSectionIdFieldNumber;
const int Ticket::kFoundFieldNumber;
const int Ticket::kCommentFieldNumber;
const int Ticket::kSourceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ticket::Ticket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Ticket)
}

void Ticket::InitAsDefaultInstance() {
  cost_ = const_cast< ::pbnavitia::Cost*>(&::pbnavitia::Cost::default_instance());
}

Ticket::Ticket(const Ticket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Ticket)
}

void Ticket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cost_ = NULL;
  found_ = false;
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ticket::~Ticket() {
  // @@protoc_insertion_point(destructor:pbnavitia.Ticket)
  SharedDtor();
}

void Ticket::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete cost_;
  }
}

void Ticket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ticket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ticket_descriptor_;
}

const Ticket& Ticket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Ticket* Ticket::default_instance_ = NULL;

Ticket* Ticket::New(::google::protobuf::Arena* arena) const {
  Ticket* n = new Ticket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Ticket)
  if (_has_bits_[0 / 32] & 119u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cost()) {
      if (cost_ != NULL) cost_->::pbnavitia::Cost::Clear();
    }
    found_ = false;
    if (has_comment()) {
      comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_source_id()) {
      source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  section_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ticket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Ticket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Ticket.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Ticket.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cost;
        break;
      }

      // optional .pbnavitia.Cost cost = 3;
      case 3: {
        if (tag == 26) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_section_id;
        break;
      }

      // repeated string section_id = 4;
      case 4: {
        if (tag == 34) {
         parse_section_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_section_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->section_id(this->section_id_size() - 1).data(),
            this->section_id(this->section_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Ticket.section_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_section_id;
        if (input->ExpectTag(40)) goto parse_found;
        break;
      }

      // optional bool found = 5;
      case 5: {
        if (tag == 40) {
         parse_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_)));
          set_has_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_comment;
        break;
      }

      // optional string comment = 6;
      case 6: {
        if (tag == 50) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Ticket.comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_source_id;
        break;
      }

      // optional string source_id = 7;
      case 7: {
        if (tag == 58) {
         parse_source_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_id().data(), this->source_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Ticket.source_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Ticket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Ticket)
  return false;
#undef DO_
}

void Ticket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Ticket)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .pbnavitia.Cost cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cost_, output);
  }

  // repeated string section_id = 4;
  for (int i = 0; i < this->section_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->section_id(i).data(), this->section_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.section_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->section_id(i), output);
  }

  // optional bool found = 5;
  if (has_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->found(), output);
  }

  // optional string comment = 6;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->comment(), output);
  }

  // optional string source_id = 7;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_id().data(), this->source_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.source_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Ticket)
}

::google::protobuf::uint8* Ticket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Ticket)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .pbnavitia.Cost cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cost_, false, target);
  }

  // repeated string section_id = 4;
  for (int i = 0; i < this->section_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->section_id(i).data(), this->section_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.section_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->section_id(i), target);
  }

  // optional bool found = 5;
  if (has_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->found(), target);
  }

  // optional string comment = 6;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comment(), target);
  }

  // optional string source_id = 7;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_id().data(), this->source_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Ticket.source_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Ticket)
  return target;
}

int Ticket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Ticket)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 119u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .pbnavitia.Cost cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cost_);
    }

    // optional bool found = 5;
    if (has_found()) {
      total_size += 1 + 1;
    }

    // optional string comment = 6;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string source_id = 7;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_id());
    }

  }
  // repeated string section_id = 4;
  total_size += 1 * this->section_id_size();
  for (int i = 0; i < this->section_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->section_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ticket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Ticket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ticket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ticket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Ticket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Ticket)
    MergeFrom(*source);
  }
}

void Ticket::MergeFrom(const Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Ticket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  section_id_.MergeFrom(from.section_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_cost()) {
      mutable_cost()->::pbnavitia::Cost::MergeFrom(from.cost());
    }
    if (from.has_found()) {
      set_found(from.found());
    }
    if (from.has_comment()) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (from.has_source_id()) {
      set_has_source_id();
      source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ticket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ticket::CopyFrom(const Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ticket::IsInitialized() const {

  return true;
}

void Ticket::Swap(Ticket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ticket::InternalSwap(Ticket* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(cost_, other->cost_);
  section_id_.UnsafeArenaSwap(&other->section_id_);
  std::swap(found_, other->found_);
  comment_.Swap(&other->comment_);
  source_id_.Swap(&other->source_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ticket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ticket_descriptor_;
  metadata.reflection = Ticket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ticket

// optional string id = 1;
bool Ticket::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ticket::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Ticket::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ticket::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Ticket::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ticket::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.id)
}
 void Ticket::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.id)
}
 void Ticket::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.id)
}
 ::std::string* Ticket::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Ticket::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ticket::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.id)
}

// optional string name = 2;
bool Ticket::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ticket::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Ticket::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ticket::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Ticket::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ticket::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.name)
}
 void Ticket::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.name)
}
 void Ticket::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.name)
}
 ::std::string* Ticket::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Ticket::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ticket::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.name)
}

// optional .pbnavitia.Cost cost = 3;
bool Ticket::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ticket::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
void Ticket::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ticket::clear_cost() {
  if (cost_ != NULL) cost_->::pbnavitia::Cost::Clear();
  clear_has_cost();
}
const ::pbnavitia::Cost& Ticket::cost() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.cost)
  return cost_ != NULL ? *cost_ : *default_instance_->cost_;
}
::pbnavitia::Cost* Ticket::mutable_cost() {
  set_has_cost();
  if (cost_ == NULL) {
    cost_ = new ::pbnavitia::Cost;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.cost)
  return cost_;
}
::pbnavitia::Cost* Ticket::release_cost() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.cost)
  clear_has_cost();
  ::pbnavitia::Cost* temp = cost_;
  cost_ = NULL;
  return temp;
}
void Ticket::set_allocated_cost(::pbnavitia::Cost* cost) {
  delete cost_;
  cost_ = cost;
  if (cost) {
    set_has_cost();
  } else {
    clear_has_cost();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.cost)
}

// repeated string section_id = 4;
int Ticket::section_id_size() const {
  return section_id_.size();
}
void Ticket::clear_section_id() {
  section_id_.Clear();
}
 const ::std::string& Ticket::section_id(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.section_id)
  return section_id_.Get(index);
}
 ::std::string* Ticket::mutable_section_id(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.section_id)
  return section_id_.Mutable(index);
}
 void Ticket::set_section_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.section_id)
  section_id_.Mutable(index)->assign(value);
}
 void Ticket::set_section_id(int index, const char* value) {
  section_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.section_id)
}
 void Ticket::set_section_id(int index, const char* value, size_t size) {
  section_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.section_id)
}
 ::std::string* Ticket::add_section_id() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Ticket.section_id)
  return section_id_.Add();
}
 void Ticket::add_section_id(const ::std::string& value) {
  section_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Ticket.section_id)
}
 void Ticket::add_section_id(const char* value) {
  section_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Ticket.section_id)
}
 void Ticket::add_section_id(const char* value, size_t size) {
  section_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Ticket.section_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Ticket::section_id() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Ticket.section_id)
  return section_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Ticket::mutable_section_id() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Ticket.section_id)
  return &section_id_;
}

// optional bool found = 5;
bool Ticket::has_found() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ticket::set_has_found() {
  _has_bits_[0] |= 0x00000010u;
}
void Ticket::clear_has_found() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ticket::clear_found() {
  found_ = false;
  clear_has_found();
}
 bool Ticket::found() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.found)
  return found_;
}
 void Ticket::set_found(bool value) {
  set_has_found();
  found_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.found)
}

// optional string comment = 6;
bool Ticket::has_comment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ticket::set_has_comment() {
  _has_bits_[0] |= 0x00000020u;
}
void Ticket::clear_has_comment() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ticket::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
 const ::std::string& Ticket::comment() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.comment)
  return comment_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ticket::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.comment)
}
 void Ticket::set_comment(const char* value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.comment)
}
 void Ticket::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.comment)
}
 ::std::string* Ticket::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Ticket::release_comment() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ticket::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.comment)
}

// optional string source_id = 7;
bool Ticket::has_source_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ticket::set_has_source_id() {
  _has_bits_[0] |= 0x00000040u;
}
void Ticket::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ticket::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_id();
}
 const ::std::string& Ticket::source_id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Ticket.source_id)
  return source_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ticket::set_source_id(const ::std::string& value) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Ticket.source_id)
}
 void Ticket::set_source_id(const char* value) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Ticket.source_id)
}
 void Ticket::set_source_id(const char* value, size_t size) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Ticket.source_id)
}
 ::std::string* Ticket::mutable_source_id() {
  set_has_source_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Ticket.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Ticket::release_source_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Ticket.source_id)
  clear_has_source_id();
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ticket::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    set_has_source_id();
  } else {
    clear_has_source_id();
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Ticket.source_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fare::kTotalFieldNumber;
const int Fare::kTicketIdFieldNumber;
const int Fare::kFoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fare::Fare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Fare)
}

void Fare::InitAsDefaultInstance() {
  total_ = const_cast< ::pbnavitia::Cost*>(&::pbnavitia::Cost::default_instance());
}

Fare::Fare(const Fare& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Fare)
}

void Fare::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  total_ = NULL;
  found_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fare::~Fare() {
  // @@protoc_insertion_point(destructor:pbnavitia.Fare)
  SharedDtor();
}

void Fare::SharedDtor() {
  if (this != default_instance_) {
    delete total_;
  }
}

void Fare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fare_descriptor_;
}

const Fare& Fare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Fare* Fare::default_instance_ = NULL;

Fare* Fare::New(::google::protobuf::Arena* arena) const {
  Fare* n = new Fare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fare::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Fare)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_total()) {
      if (total_ != NULL) total_->::pbnavitia::Cost::Clear();
    }
    found_ = false;
  }
  ticket_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Fare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Fare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.Cost total = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ticket_id;
        break;
      }

      // repeated string ticket_id = 2;
      case 2: {
        if (tag == 18) {
         parse_ticket_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ticket_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket_id(this->ticket_id_size() - 1).data(),
            this->ticket_id(this->ticket_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Fare.ticket_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ticket_id;
        if (input->ExpectTag(24)) goto parse_found;
        break;
      }

      // optional bool found = 3;
      case 3: {
        if (tag == 24) {
         parse_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_)));
          set_has_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Fare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Fare)
  return false;
#undef DO_
}

void Fare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Fare)
  // optional .pbnavitia.Cost total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->total_, output);
  }

  // repeated string ticket_id = 2;
  for (int i = 0; i < this->ticket_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket_id(i).data(), this->ticket_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Fare.ticket_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ticket_id(i), output);
  }

  // optional bool found = 3;
  if (has_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->found(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Fare)
}

::google::protobuf::uint8* Fare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Fare)
  // optional .pbnavitia.Cost total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->total_, false, target);
  }

  // repeated string ticket_id = 2;
  for (int i = 0; i < this->ticket_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket_id(i).data(), this->ticket_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Fare.ticket_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ticket_id(i), target);
  }

  // optional bool found = 3;
  if (has_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->found(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Fare)
  return target;
}

int Fare::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Fare)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .pbnavitia.Cost total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_);
    }

    // optional bool found = 3;
    if (has_found()) {
      total_size += 1 + 1;
    }

  }
  // repeated string ticket_id = 2;
  total_size += 1 * this->ticket_id_size();
  for (int i = 0; i < this->ticket_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ticket_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Fare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Fare* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Fare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Fare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Fare)
    MergeFrom(*source);
  }
}

void Fare::MergeFrom(const Fare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Fare)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ticket_id_.MergeFrom(from.ticket_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      mutable_total()->::pbnavitia::Cost::MergeFrom(from.total());
    }
    if (from.has_found()) {
      set_found(from.found());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Fare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Fare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fare::CopyFrom(const Fare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Fare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fare::IsInitialized() const {

  return true;
}

void Fare::Swap(Fare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fare::InternalSwap(Fare* other) {
  std::swap(total_, other->total_);
  ticket_id_.UnsafeArenaSwap(&other->ticket_id_);
  std::swap(found_, other->found_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fare_descriptor_;
  metadata.reflection = Fare_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fare

// optional .pbnavitia.Cost total = 1;
bool Fare::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Fare::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
void Fare::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void Fare::clear_total() {
  if (total_ != NULL) total_->::pbnavitia::Cost::Clear();
  clear_has_total();
}
const ::pbnavitia::Cost& Fare::total() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Fare.total)
  return total_ != NULL ? *total_ : *default_instance_->total_;
}
::pbnavitia::Cost* Fare::mutable_total() {
  set_has_total();
  if (total_ == NULL) {
    total_ = new ::pbnavitia::Cost;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Fare.total)
  return total_;
}
::pbnavitia::Cost* Fare::release_total() {
  // @@protoc_insertion_point(field_release:pbnavitia.Fare.total)
  clear_has_total();
  ::pbnavitia::Cost* temp = total_;
  total_ = NULL;
  return temp;
}
void Fare::set_allocated_total(::pbnavitia::Cost* total) {
  delete total_;
  total_ = total;
  if (total) {
    set_has_total();
  } else {
    clear_has_total();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Fare.total)
}

// repeated string ticket_id = 2;
int Fare::ticket_id_size() const {
  return ticket_id_.size();
}
void Fare::clear_ticket_id() {
  ticket_id_.Clear();
}
 const ::std::string& Fare::ticket_id(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Fare.ticket_id)
  return ticket_id_.Get(index);
}
 ::std::string* Fare::mutable_ticket_id(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Fare.ticket_id)
  return ticket_id_.Mutable(index);
}
 void Fare::set_ticket_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Fare.ticket_id)
  ticket_id_.Mutable(index)->assign(value);
}
 void Fare::set_ticket_id(int index, const char* value) {
  ticket_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Fare.ticket_id)
}
 void Fare::set_ticket_id(int index, const char* value, size_t size) {
  ticket_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Fare.ticket_id)
}
 ::std::string* Fare::add_ticket_id() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Fare.ticket_id)
  return ticket_id_.Add();
}
 void Fare::add_ticket_id(const ::std::string& value) {
  ticket_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Fare.ticket_id)
}
 void Fare::add_ticket_id(const char* value) {
  ticket_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Fare.ticket_id)
}
 void Fare::add_ticket_id(const char* value, size_t size) {
  ticket_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Fare.ticket_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Fare::ticket_id() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Fare.ticket_id)
  return ticket_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Fare::mutable_ticket_id() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Fare.ticket_id)
  return &ticket_id_;
}

// optional bool found = 3;
bool Fare::has_found() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Fare::set_has_found() {
  _has_bits_[0] |= 0x00000004u;
}
void Fare::clear_has_found() {
  _has_bits_[0] &= ~0x00000004u;
}
void Fare::clear_found() {
  found_ = false;
  clear_has_found();
}
 bool Fare::found() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Fare.found)
  return found_;
}
 void Fare::set_found(bool value) {
  set_has_found();
  found_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Fare.found)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Co2Emission::kValueFieldNumber;
const int Co2Emission::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Co2Emission::Co2Emission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Co2Emission)
}

void Co2Emission::InitAsDefaultInstance() {
}

Co2Emission::Co2Emission(const Co2Emission& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Co2Emission)
}

void Co2Emission::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = 0;
  unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Co2Emission::~Co2Emission() {
  // @@protoc_insertion_point(destructor:pbnavitia.Co2Emission)
  SharedDtor();
}

void Co2Emission::SharedDtor() {
  unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Co2Emission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Co2Emission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Co2Emission_descriptor_;
}

const Co2Emission& Co2Emission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Co2Emission* Co2Emission::default_instance_ = NULL;

Co2Emission* Co2Emission::New(::google::protobuf::Arena* arena) const {
  Co2Emission* n = new Co2Emission;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Co2Emission::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Co2Emission)
  if (_has_bits_[0 / 32] & 3u) {
    value_ = 0;
    if (has_unit()) {
      unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Co2Emission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Co2Emission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unit;
        break;
      }

      // optional string unit = 2;
      case 2: {
        if (tag == 18) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Co2Emission.unit");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Co2Emission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Co2Emission)
  return false;
#undef DO_
}

void Co2Emission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Co2Emission)
  // optional double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional string unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Co2Emission.unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Co2Emission)
}

::google::protobuf::uint8* Co2Emission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Co2Emission)
  // optional double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional string unit = 2;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Co2Emission.unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Co2Emission)
  return target;
}

int Co2Emission::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Co2Emission)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional string unit = 2;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Co2Emission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Co2Emission)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Co2Emission* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Co2Emission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Co2Emission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Co2Emission)
    MergeFrom(*source);
  }
}

void Co2Emission::MergeFrom(const Co2Emission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Co2Emission)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_unit()) {
      set_has_unit();
      unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Co2Emission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Co2Emission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Co2Emission::CopyFrom(const Co2Emission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Co2Emission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Co2Emission::IsInitialized() const {

  return true;
}

void Co2Emission::Swap(Co2Emission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Co2Emission::InternalSwap(Co2Emission* other) {
  std::swap(value_, other->value_);
  unit_.Swap(&other->unit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Co2Emission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Co2Emission_descriptor_;
  metadata.reflection = Co2Emission_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Co2Emission

// optional double value = 1;
bool Co2Emission::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Co2Emission::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Co2Emission::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Co2Emission::clear_value() {
  value_ = 0;
  clear_has_value();
}
 double Co2Emission::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Co2Emission.value)
  return value_;
}
 void Co2Emission::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Co2Emission.value)
}

// optional string unit = 2;
bool Co2Emission::has_unit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Co2Emission::set_has_unit() {
  _has_bits_[0] |= 0x00000002u;
}
void Co2Emission::clear_has_unit() {
  _has_bits_[0] &= ~0x00000002u;
}
void Co2Emission::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit();
}
 const ::std::string& Co2Emission::unit() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Co2Emission.unit)
  return unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Co2Emission::set_unit(const ::std::string& value) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Co2Emission.unit)
}
 void Co2Emission::set_unit(const char* value) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Co2Emission.unit)
}
 void Co2Emission::set_unit(const char* value, size_t size) {
  set_has_unit();
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Co2Emission.unit)
}
 ::std::string* Co2Emission::mutable_unit() {
  set_has_unit();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Co2Emission.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Co2Emission::release_unit() {
  // @@protoc_insertion_point(field_release:pbnavitia.Co2Emission.unit)
  clear_has_unit();
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Co2Emission::set_allocated_unit(::std::string* unit) {
  if (unit != NULL) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Co2Emission.unit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Durations::kTotalFieldNumber;
const int Durations::kWalkingFieldNumber;
const int Durations::kBikeFieldNumber;
const int Durations::kCarFieldNumber;
const int Durations::kRidesharingFieldNumber;
const int Durations::kTaxiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Durations::Durations()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Durations)
}

void Durations::InitAsDefaultInstance() {
}

Durations::Durations(const Durations& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Durations)
}

void Durations::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  walking_ = 0;
  bike_ = 0;
  car_ = 0;
  ridesharing_ = 0;
  taxi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Durations::~Durations() {
  // @@protoc_insertion_point(destructor:pbnavitia.Durations)
  SharedDtor();
}

void Durations::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Durations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Durations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Durations_descriptor_;
}

const Durations& Durations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Durations* Durations::default_instance_ = NULL;

Durations* Durations::New(::google::protobuf::Arena* arena) const {
  Durations* n = new Durations;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Durations::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Durations)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Durations, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Durations*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(total_, taxi_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Durations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Durations)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_walking;
        break;
      }

      // optional int32 walking = 2;
      case 2: {
        if (tag == 16) {
         parse_walking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &walking_)));
          set_has_walking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bike;
        break;
      }

      // optional int32 bike = 3;
      case 3: {
        if (tag == 24) {
         parse_bike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bike_)));
          set_has_bike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_car;
        break;
      }

      // optional int32 car = 4;
      case 4: {
        if (tag == 32) {
         parse_car:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &car_)));
          set_has_car();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ridesharing;
        break;
      }

      // optional int32 ridesharing = 5;
      case 5: {
        if (tag == 40) {
         parse_ridesharing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ridesharing_)));
          set_has_ridesharing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_taxi;
        break;
      }

      // optional int32 taxi = 6;
      case 6: {
        if (tag == 48) {
         parse_taxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taxi_)));
          set_has_taxi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Durations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Durations)
  return false;
#undef DO_
}

void Durations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Durations)
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // optional int32 walking = 2;
  if (has_walking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->walking(), output);
  }

  // optional int32 bike = 3;
  if (has_bike()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bike(), output);
  }

  // optional int32 car = 4;
  if (has_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->car(), output);
  }

  // optional int32 ridesharing = 5;
  if (has_ridesharing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ridesharing(), output);
  }

  // optional int32 taxi = 6;
  if (has_taxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->taxi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Durations)
}

::google::protobuf::uint8* Durations::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Durations)
  // optional int32 total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  // optional int32 walking = 2;
  if (has_walking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->walking(), target);
  }

  // optional int32 bike = 3;
  if (has_bike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bike(), target);
  }

  // optional int32 car = 4;
  if (has_car()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->car(), target);
  }

  // optional int32 ridesharing = 5;
  if (has_ridesharing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ridesharing(), target);
  }

  // optional int32 taxi = 6;
  if (has_taxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->taxi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Durations)
  return target;
}

int Durations::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Durations)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 walking = 2;
    if (has_walking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->walking());
    }

    // optional int32 bike = 3;
    if (has_bike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bike());
    }

    // optional int32 car = 4;
    if (has_car()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->car());
    }

    // optional int32 ridesharing = 5;
    if (has_ridesharing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ridesharing());
    }

    // optional int32 taxi = 6;
    if (has_taxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taxi());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Durations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Durations)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Durations* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Durations>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Durations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Durations)
    MergeFrom(*source);
  }
}

void Durations::MergeFrom(const Durations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Durations)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_walking()) {
      set_walking(from.walking());
    }
    if (from.has_bike()) {
      set_bike(from.bike());
    }
    if (from.has_car()) {
      set_car(from.car());
    }
    if (from.has_ridesharing()) {
      set_ridesharing(from.ridesharing());
    }
    if (from.has_taxi()) {
      set_taxi(from.taxi());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Durations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Durations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Durations::CopyFrom(const Durations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Durations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Durations::IsInitialized() const {

  return true;
}

void Durations::Swap(Durations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Durations::InternalSwap(Durations* other) {
  std::swap(total_, other->total_);
  std::swap(walking_, other->walking_);
  std::swap(bike_, other->bike_);
  std::swap(car_, other->car_);
  std::swap(ridesharing_, other->ridesharing_);
  std::swap(taxi_, other->taxi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Durations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Durations_descriptor_;
  metadata.reflection = Durations_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Durations

// optional int32 total = 1;
bool Durations::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Durations::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
void Durations::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void Durations::clear_total() {
  total_ = 0;
  clear_has_total();
}
 ::google::protobuf::int32 Durations::total() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.total)
  return total_;
}
 void Durations::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.total)
}

// optional int32 walking = 2;
bool Durations::has_walking() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Durations::set_has_walking() {
  _has_bits_[0] |= 0x00000002u;
}
void Durations::clear_has_walking() {
  _has_bits_[0] &= ~0x00000002u;
}
void Durations::clear_walking() {
  walking_ = 0;
  clear_has_walking();
}
 ::google::protobuf::int32 Durations::walking() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.walking)
  return walking_;
}
 void Durations::set_walking(::google::protobuf::int32 value) {
  set_has_walking();
  walking_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.walking)
}

// optional int32 bike = 3;
bool Durations::has_bike() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Durations::set_has_bike() {
  _has_bits_[0] |= 0x00000004u;
}
void Durations::clear_has_bike() {
  _has_bits_[0] &= ~0x00000004u;
}
void Durations::clear_bike() {
  bike_ = 0;
  clear_has_bike();
}
 ::google::protobuf::int32 Durations::bike() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.bike)
  return bike_;
}
 void Durations::set_bike(::google::protobuf::int32 value) {
  set_has_bike();
  bike_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.bike)
}

// optional int32 car = 4;
bool Durations::has_car() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Durations::set_has_car() {
  _has_bits_[0] |= 0x00000008u;
}
void Durations::clear_has_car() {
  _has_bits_[0] &= ~0x00000008u;
}
void Durations::clear_car() {
  car_ = 0;
  clear_has_car();
}
 ::google::protobuf::int32 Durations::car() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.car)
  return car_;
}
 void Durations::set_car(::google::protobuf::int32 value) {
  set_has_car();
  car_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.car)
}

// optional int32 ridesharing = 5;
bool Durations::has_ridesharing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Durations::set_has_ridesharing() {
  _has_bits_[0] |= 0x00000010u;
}
void Durations::clear_has_ridesharing() {
  _has_bits_[0] &= ~0x00000010u;
}
void Durations::clear_ridesharing() {
  ridesharing_ = 0;
  clear_has_ridesharing();
}
 ::google::protobuf::int32 Durations::ridesharing() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.ridesharing)
  return ridesharing_;
}
 void Durations::set_ridesharing(::google::protobuf::int32 value) {
  set_has_ridesharing();
  ridesharing_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.ridesharing)
}

// optional int32 taxi = 6;
bool Durations::has_taxi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Durations::set_has_taxi() {
  _has_bits_[0] |= 0x00000020u;
}
void Durations::clear_has_taxi() {
  _has_bits_[0] &= ~0x00000020u;
}
void Durations::clear_taxi() {
  taxi_ = 0;
  clear_has_taxi();
}
 ::google::protobuf::int32 Durations::taxi() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Durations.taxi)
  return taxi_;
}
 void Durations::set_taxi(::google::protobuf::int32 value) {
  set_has_taxi();
  taxi_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Durations.taxi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distances::kWalkingFieldNumber;
const int Distances::kBikeFieldNumber;
const int Distances::kCarFieldNumber;
const int Distances::kRidesharingFieldNumber;
const int Distances::kTaxiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distances::Distances()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Distances)
}

void Distances::InitAsDefaultInstance() {
}

Distances::Distances(const Distances& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Distances)
}

void Distances::SharedCtor() {
  _cached_size_ = 0;
  walking_ = 0;
  bike_ = 0;
  car_ = 0;
  ridesharing_ = 0;
  taxi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Distances::~Distances() {
  // @@protoc_insertion_point(destructor:pbnavitia.Distances)
  SharedDtor();
}

void Distances::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Distances::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Distances::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Distances_descriptor_;
}

const Distances& Distances::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Distances* Distances::default_instance_ = NULL;

Distances* Distances::New(::google::protobuf::Arena* arena) const {
  Distances* n = new Distances;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Distances::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Distances)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Distances, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Distances*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(walking_, taxi_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Distances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Distances)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 walking = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &walking_)));
          set_has_walking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bike;
        break;
      }

      // optional int32 bike = 2;
      case 2: {
        if (tag == 16) {
         parse_bike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bike_)));
          set_has_bike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_car;
        break;
      }

      // optional int32 car = 3;
      case 3: {
        if (tag == 24) {
         parse_car:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &car_)));
          set_has_car();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ridesharing;
        break;
      }

      // optional int32 ridesharing = 4;
      case 4: {
        if (tag == 32) {
         parse_ridesharing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ridesharing_)));
          set_has_ridesharing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_taxi;
        break;
      }

      // optional int32 taxi = 5;
      case 5: {
        if (tag == 40) {
         parse_taxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taxi_)));
          set_has_taxi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Distances)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Distances)
  return false;
#undef DO_
}

void Distances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Distances)
  // optional int32 walking = 1;
  if (has_walking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->walking(), output);
  }

  // optional int32 bike = 2;
  if (has_bike()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bike(), output);
  }

  // optional int32 car = 3;
  if (has_car()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->car(), output);
  }

  // optional int32 ridesharing = 4;
  if (has_ridesharing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ridesharing(), output);
  }

  // optional int32 taxi = 5;
  if (has_taxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->taxi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Distances)
}

::google::protobuf::uint8* Distances::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Distances)
  // optional int32 walking = 1;
  if (has_walking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->walking(), target);
  }

  // optional int32 bike = 2;
  if (has_bike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bike(), target);
  }

  // optional int32 car = 3;
  if (has_car()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->car(), target);
  }

  // optional int32 ridesharing = 4;
  if (has_ridesharing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ridesharing(), target);
  }

  // optional int32 taxi = 5;
  if (has_taxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->taxi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Distances)
  return target;
}

int Distances::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Distances)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 walking = 1;
    if (has_walking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->walking());
    }

    // optional int32 bike = 2;
    if (has_bike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bike());
    }

    // optional int32 car = 3;
    if (has_car()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->car());
    }

    // optional int32 ridesharing = 4;
    if (has_ridesharing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ridesharing());
    }

    // optional int32 taxi = 5;
    if (has_taxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taxi());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Distances::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Distances)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Distances* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Distances>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Distances)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Distances)
    MergeFrom(*source);
  }
}

void Distances::MergeFrom(const Distances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Distances)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_walking()) {
      set_walking(from.walking());
    }
    if (from.has_bike()) {
      set_bike(from.bike());
    }
    if (from.has_car()) {
      set_car(from.car());
    }
    if (from.has_ridesharing()) {
      set_ridesharing(from.ridesharing());
    }
    if (from.has_taxi()) {
      set_taxi(from.taxi());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Distances::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Distances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distances::CopyFrom(const Distances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Distances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distances::IsInitialized() const {

  return true;
}

void Distances::Swap(Distances* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distances::InternalSwap(Distances* other) {
  std::swap(walking_, other->walking_);
  std::swap(bike_, other->bike_);
  std::swap(car_, other->car_);
  std::swap(ridesharing_, other->ridesharing_);
  std::swap(taxi_, other->taxi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Distances::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Distances_descriptor_;
  metadata.reflection = Distances_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Distances

// optional int32 walking = 1;
bool Distances::has_walking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Distances::set_has_walking() {
  _has_bits_[0] |= 0x00000001u;
}
void Distances::clear_has_walking() {
  _has_bits_[0] &= ~0x00000001u;
}
void Distances::clear_walking() {
  walking_ = 0;
  clear_has_walking();
}
 ::google::protobuf::int32 Distances::walking() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.walking)
  return walking_;
}
 void Distances::set_walking(::google::protobuf::int32 value) {
  set_has_walking();
  walking_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.walking)
}

// optional int32 bike = 2;
bool Distances::has_bike() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Distances::set_has_bike() {
  _has_bits_[0] |= 0x00000002u;
}
void Distances::clear_has_bike() {
  _has_bits_[0] &= ~0x00000002u;
}
void Distances::clear_bike() {
  bike_ = 0;
  clear_has_bike();
}
 ::google::protobuf::int32 Distances::bike() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.bike)
  return bike_;
}
 void Distances::set_bike(::google::protobuf::int32 value) {
  set_has_bike();
  bike_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.bike)
}

// optional int32 car = 3;
bool Distances::has_car() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Distances::set_has_car() {
  _has_bits_[0] |= 0x00000004u;
}
void Distances::clear_has_car() {
  _has_bits_[0] &= ~0x00000004u;
}
void Distances::clear_car() {
  car_ = 0;
  clear_has_car();
}
 ::google::protobuf::int32 Distances::car() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.car)
  return car_;
}
 void Distances::set_car(::google::protobuf::int32 value) {
  set_has_car();
  car_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.car)
}

// optional int32 ridesharing = 4;
bool Distances::has_ridesharing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Distances::set_has_ridesharing() {
  _has_bits_[0] |= 0x00000008u;
}
void Distances::clear_has_ridesharing() {
  _has_bits_[0] &= ~0x00000008u;
}
void Distances::clear_ridesharing() {
  ridesharing_ = 0;
  clear_has_ridesharing();
}
 ::google::protobuf::int32 Distances::ridesharing() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.ridesharing)
  return ridesharing_;
}
 void Distances::set_ridesharing(::google::protobuf::int32 value) {
  set_has_ridesharing();
  ridesharing_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.ridesharing)
}

// optional int32 taxi = 5;
bool Distances::has_taxi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Distances::set_has_taxi() {
  _has_bits_[0] |= 0x00000010u;
}
void Distances::clear_has_taxi() {
  _has_bits_[0] &= ~0x00000010u;
}
void Distances::clear_taxi() {
  taxi_ = 0;
  clear_has_taxi();
}
 ::google::protobuf::int32 Distances::taxi() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Distances.taxi)
  return taxi_;
}
 void Distances::set_taxi(::google::protobuf::int32 value) {
  set_has_taxi();
  taxi_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Distances.taxi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndividualRating::kValueFieldNumber;
const int IndividualRating::kCountFieldNumber;
const int IndividualRating::kScaleMinFieldNumber;
const int IndividualRating::kScaleMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndividualRating::IndividualRating()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.IndividualRating)
}

void IndividualRating::InitAsDefaultInstance() {
}

IndividualRating::IndividualRating(const IndividualRating& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.IndividualRating)
}

void IndividualRating::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  count_ = 0u;
  scale_min_ = 0;
  scale_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndividualRating::~IndividualRating() {
  // @@protoc_insertion_point(destructor:pbnavitia.IndividualRating)
  SharedDtor();
}

void IndividualRating::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndividualRating::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndividualRating::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndividualRating_descriptor_;
}

const IndividualRating& IndividualRating::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

IndividualRating* IndividualRating::default_instance_ = NULL;

IndividualRating* IndividualRating::New(::google::protobuf::Arena* arena) const {
  IndividualRating* n = new IndividualRating;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndividualRating::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.IndividualRating)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IndividualRating, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IndividualRating*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IndividualRating::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.IndividualRating)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_scale_min;
        break;
      }

      // optional double scale_min = 3;
      case 3: {
        if (tag == 25) {
         parse_scale_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_min_)));
          set_has_scale_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_scale_max;
        break;
      }

      // optional double scale_max = 4;
      case 4: {
        if (tag == 33) {
         parse_scale_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_max_)));
          set_has_scale_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.IndividualRating)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.IndividualRating)
  return false;
#undef DO_
}

void IndividualRating::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.IndividualRating)
  // optional double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional double scale_min = 3;
  if (has_scale_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->scale_min(), output);
  }

  // optional double scale_max = 4;
  if (has_scale_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->scale_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.IndividualRating)
}

::google::protobuf::uint8* IndividualRating::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.IndividualRating)
  // optional double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional double scale_min = 3;
  if (has_scale_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->scale_min(), target);
  }

  // optional double scale_max = 4;
  if (has_scale_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->scale_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.IndividualRating)
  return target;
}

int IndividualRating::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.IndividualRating)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional double scale_min = 3;
    if (has_scale_min()) {
      total_size += 1 + 8;
    }

    // optional double scale_max = 4;
    if (has_scale_max()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndividualRating::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.IndividualRating)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IndividualRating* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IndividualRating>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.IndividualRating)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.IndividualRating)
    MergeFrom(*source);
  }
}

void IndividualRating::MergeFrom(const IndividualRating& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.IndividualRating)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_scale_min()) {
      set_scale_min(from.scale_min());
    }
    if (from.has_scale_max()) {
      set_scale_max(from.scale_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IndividualRating::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.IndividualRating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndividualRating::CopyFrom(const IndividualRating& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.IndividualRating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndividualRating::IsInitialized() const {

  return true;
}

void IndividualRating::Swap(IndividualRating* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndividualRating::InternalSwap(IndividualRating* other) {
  std::swap(value_, other->value_);
  std::swap(count_, other->count_);
  std::swap(scale_min_, other->scale_min_);
  std::swap(scale_max_, other->scale_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndividualRating::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndividualRating_descriptor_;
  metadata.reflection = IndividualRating_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndividualRating

// optional double value = 1;
bool IndividualRating::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IndividualRating::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void IndividualRating::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void IndividualRating::clear_value() {
  value_ = 0;
  clear_has_value();
}
 double IndividualRating::value() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualRating.value)
  return value_;
}
 void IndividualRating::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualRating.value)
}

// optional uint32 count = 2;
bool IndividualRating::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IndividualRating::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void IndividualRating::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void IndividualRating::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 IndividualRating::count() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualRating.count)
  return count_;
}
 void IndividualRating::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualRating.count)
}

// optional double scale_min = 3;
bool IndividualRating::has_scale_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IndividualRating::set_has_scale_min() {
  _has_bits_[0] |= 0x00000004u;
}
void IndividualRating::clear_has_scale_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void IndividualRating::clear_scale_min() {
  scale_min_ = 0;
  clear_has_scale_min();
}
 double IndividualRating::scale_min() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualRating.scale_min)
  return scale_min_;
}
 void IndividualRating::set_scale_min(double value) {
  set_has_scale_min();
  scale_min_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualRating.scale_min)
}

// optional double scale_max = 4;
bool IndividualRating::has_scale_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IndividualRating::set_has_scale_max() {
  _has_bits_[0] |= 0x00000008u;
}
void IndividualRating::clear_has_scale_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void IndividualRating::clear_scale_max() {
  scale_max_ = 0;
  clear_has_scale_max();
}
 double IndividualRating::scale_max() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualRating.scale_max)
  return scale_max_;
}
 void IndividualRating::set_scale_max(double value) {
  set_has_scale_max();
  scale_max_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualRating.scale_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndividualInformation::kAliasFieldNumber;
const int IndividualInformation::kImageFieldNumber;
const int IndividualInformation::kGenderFieldNumber;
const int IndividualInformation::kRatingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndividualInformation::IndividualInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.IndividualInformation)
}

void IndividualInformation::InitAsDefaultInstance() {
  rating_ = const_cast< ::pbnavitia::IndividualRating*>(&::pbnavitia::IndividualRating::default_instance());
}

IndividualInformation::IndividualInformation(const IndividualInformation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.IndividualInformation)
}

void IndividualInformation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = 1;
  rating_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndividualInformation::~IndividualInformation() {
  // @@protoc_insertion_point(destructor:pbnavitia.IndividualInformation)
  SharedDtor();
}

void IndividualInformation::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete rating_;
  }
}

void IndividualInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndividualInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndividualInformation_descriptor_;
}

const IndividualInformation& IndividualInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

IndividualInformation* IndividualInformation::default_instance_ = NULL;

IndividualInformation* IndividualInformation::New(::google::protobuf::Arena* arena) const {
  IndividualInformation* n = new IndividualInformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IndividualInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.IndividualInformation)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_alias()) {
      alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_image()) {
      image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    gender_ = 1;
    if (has_rating()) {
      if (rating_ != NULL) rating_->::pbnavitia::IndividualRating::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IndividualInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.IndividualInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string alias = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.IndividualInformation.alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional string image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.IndividualInformation.image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // optional .pbnavitia.GenderType gender = 3;
      case 3: {
        if (tag == 24) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::GenderType_IsValid(value)) {
            set_gender(static_cast< ::pbnavitia::GenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rating;
        break;
      }

      // optional .pbnavitia.IndividualRating rating = 4;
      case 4: {
        if (tag == 34) {
         parse_rating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rating()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.IndividualInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.IndividualInformation)
  return false;
#undef DO_
}

void IndividualInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.IndividualInformation)
  // optional string alias = 1;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.IndividualInformation.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // optional string image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.IndividualInformation.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // optional .pbnavitia.GenderType gender = 3;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gender(), output);
  }

  // optional .pbnavitia.IndividualRating rating = 4;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rating_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.IndividualInformation)
}

::google::protobuf::uint8* IndividualInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.IndividualInformation)
  // optional string alias = 1;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.IndividualInformation.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // optional string image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.IndividualInformation.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // optional .pbnavitia.GenderType gender = 3;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gender(), target);
  }

  // optional .pbnavitia.IndividualRating rating = 4;
  if (has_rating()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rating_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.IndividualInformation)
  return target;
}

int IndividualInformation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.IndividualInformation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string alias = 1;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional string image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional .pbnavitia.GenderType gender = 3;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .pbnavitia.IndividualRating rating = 4;
    if (has_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rating_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndividualInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.IndividualInformation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IndividualInformation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IndividualInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.IndividualInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.IndividualInformation)
    MergeFrom(*source);
  }
}

void IndividualInformation::MergeFrom(const IndividualInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.IndividualInformation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alias()) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (from.has_image()) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_rating()) {
      mutable_rating()->::pbnavitia::IndividualRating::MergeFrom(from.rating());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IndividualInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.IndividualInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndividualInformation::CopyFrom(const IndividualInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.IndividualInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndividualInformation::IsInitialized() const {

  return true;
}

void IndividualInformation::Swap(IndividualInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndividualInformation::InternalSwap(IndividualInformation* other) {
  alias_.Swap(&other->alias_);
  image_.Swap(&other->image_);
  std::swap(gender_, other->gender_);
  std::swap(rating_, other->rating_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IndividualInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndividualInformation_descriptor_;
  metadata.reflection = IndividualInformation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IndividualInformation

// optional string alias = 1;
bool IndividualInformation::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IndividualInformation::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
void IndividualInformation::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
void IndividualInformation::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
 const ::std::string& IndividualInformation::alias() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualInformation.alias)
  return alias_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IndividualInformation::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualInformation.alias)
}
 void IndividualInformation::set_alias(const char* value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.IndividualInformation.alias)
}
 void IndividualInformation::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.IndividualInformation.alias)
}
 ::std::string* IndividualInformation::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:pbnavitia.IndividualInformation.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IndividualInformation::release_alias() {
  // @@protoc_insertion_point(field_release:pbnavitia.IndividualInformation.alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IndividualInformation::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.IndividualInformation.alias)
}

// optional string image = 2;
bool IndividualInformation::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IndividualInformation::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
void IndividualInformation::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
void IndividualInformation::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
 const ::std::string& IndividualInformation::image() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualInformation.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IndividualInformation::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualInformation.image)
}
 void IndividualInformation::set_image(const char* value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.IndividualInformation.image)
}
 void IndividualInformation::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.IndividualInformation.image)
}
 ::std::string* IndividualInformation::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:pbnavitia.IndividualInformation.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IndividualInformation::release_image() {
  // @@protoc_insertion_point(field_release:pbnavitia.IndividualInformation.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IndividualInformation::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.IndividualInformation.image)
}

// optional .pbnavitia.GenderType gender = 3;
bool IndividualInformation::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IndividualInformation::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
void IndividualInformation::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
void IndividualInformation::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
 ::pbnavitia::GenderType IndividualInformation::gender() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualInformation.gender)
  return static_cast< ::pbnavitia::GenderType >(gender_);
}
 void IndividualInformation::set_gender(::pbnavitia::GenderType value) {
  assert(::pbnavitia::GenderType_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.IndividualInformation.gender)
}

// optional .pbnavitia.IndividualRating rating = 4;
bool IndividualInformation::has_rating() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IndividualInformation::set_has_rating() {
  _has_bits_[0] |= 0x00000008u;
}
void IndividualInformation::clear_has_rating() {
  _has_bits_[0] &= ~0x00000008u;
}
void IndividualInformation::clear_rating() {
  if (rating_ != NULL) rating_->::pbnavitia::IndividualRating::Clear();
  clear_has_rating();
}
const ::pbnavitia::IndividualRating& IndividualInformation::rating() const {
  // @@protoc_insertion_point(field_get:pbnavitia.IndividualInformation.rating)
  return rating_ != NULL ? *rating_ : *default_instance_->rating_;
}
::pbnavitia::IndividualRating* IndividualInformation::mutable_rating() {
  set_has_rating();
  if (rating_ == NULL) {
    rating_ = new ::pbnavitia::IndividualRating;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.IndividualInformation.rating)
  return rating_;
}
::pbnavitia::IndividualRating* IndividualInformation::release_rating() {
  // @@protoc_insertion_point(field_release:pbnavitia.IndividualInformation.rating)
  clear_has_rating();
  ::pbnavitia::IndividualRating* temp = rating_;
  rating_ = NULL;
  return temp;
}
void IndividualInformation::set_allocated_rating(::pbnavitia::IndividualRating* rating) {
  delete rating_;
  rating_ = rating;
  if (rating) {
    set_has_rating();
  } else {
    clear_has_rating();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.IndividualInformation.rating)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatsDescription::kTotalFieldNumber;
const int SeatsDescription::kAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatsDescription::SeatsDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.SeatsDescription)
}

void SeatsDescription::InitAsDefaultInstance() {
}

SeatsDescription::SeatsDescription(const SeatsDescription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.SeatsDescription)
}

void SeatsDescription::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0u;
  available_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatsDescription::~SeatsDescription() {
  // @@protoc_insertion_point(destructor:pbnavitia.SeatsDescription)
  SharedDtor();
}

void SeatsDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeatsDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatsDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatsDescription_descriptor_;
}

const SeatsDescription& SeatsDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

SeatsDescription* SeatsDescription::default_instance_ = NULL;

SeatsDescription* SeatsDescription::New(::google::protobuf::Arena* arena) const {
  SeatsDescription* n = new SeatsDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeatsDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.SeatsDescription)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SeatsDescription, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SeatsDescription*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_, available_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SeatsDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.SeatsDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }

      // optional uint32 available = 2;
      case 2: {
        if (tag == 16) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.SeatsDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.SeatsDescription)
  return false;
#undef DO_
}

void SeatsDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.SeatsDescription)
  // optional uint32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total(), output);
  }

  // optional uint32 available = 2;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.SeatsDescription)
}

::google::protobuf::uint8* SeatsDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.SeatsDescription)
  // optional uint32 total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total(), target);
  }

  // optional uint32 available = 2;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.SeatsDescription)
  return target;
}

int SeatsDescription::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.SeatsDescription)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // optional uint32 available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatsDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.SeatsDescription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeatsDescription* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatsDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.SeatsDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.SeatsDescription)
    MergeFrom(*source);
  }
}

void SeatsDescription::MergeFrom(const SeatsDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.SeatsDescription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SeatsDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.SeatsDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatsDescription::CopyFrom(const SeatsDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.SeatsDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatsDescription::IsInitialized() const {

  return true;
}

void SeatsDescription::Swap(SeatsDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeatsDescription::InternalSwap(SeatsDescription* other) {
  std::swap(total_, other->total_);
  std::swap(available_, other->available_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeatsDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatsDescription_descriptor_;
  metadata.reflection = SeatsDescription_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeatsDescription

// optional uint32 total = 1;
bool SeatsDescription::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SeatsDescription::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
void SeatsDescription::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void SeatsDescription::clear_total() {
  total_ = 0u;
  clear_has_total();
}
 ::google::protobuf::uint32 SeatsDescription::total() const {
  // @@protoc_insertion_point(field_get:pbnavitia.SeatsDescription.total)
  return total_;
}
 void SeatsDescription::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.SeatsDescription.total)
}

// optional uint32 available = 2;
bool SeatsDescription::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SeatsDescription::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
void SeatsDescription::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
void SeatsDescription::clear_available() {
  available_ = 0u;
  clear_has_available();
}
 ::google::protobuf::uint32 SeatsDescription::available() const {
  // @@protoc_insertion_point(field_get:pbnavitia.SeatsDescription.available)
  return available_;
}
 void SeatsDescription::set_available(::google::protobuf::uint32 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.SeatsDescription.available)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalLink::kKeyFieldNumber;
const int ExternalLink::kHrefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalLink::ExternalLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.ExternalLink)
}

void ExternalLink::InitAsDefaultInstance() {
}

ExternalLink::ExternalLink(const ExternalLink& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.ExternalLink)
}

void ExternalLink::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  href_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalLink::~ExternalLink() {
  // @@protoc_insertion_point(destructor:pbnavitia.ExternalLink)
  SharedDtor();
}

void ExternalLink::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  href_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExternalLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalLink_descriptor_;
}

const ExternalLink& ExternalLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

ExternalLink* ExternalLink::default_instance_ = NULL;

ExternalLink* ExternalLink::New(::google::protobuf::Arena* arena) const {
  ExternalLink* n = new ExternalLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternalLink::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.ExternalLink)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_href()) {
      href_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExternalLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.ExternalLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.ExternalLink.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_href;
        break;
      }

      // optional string href = 2;
      case 2: {
        if (tag == 18) {
         parse_href:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_href()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->href().data(), this->href().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.ExternalLink.href");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.ExternalLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.ExternalLink)
  return false;
#undef DO_
}

void ExternalLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.ExternalLink)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ExternalLink.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string href = 2;
  if (has_href()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->href().data(), this->href().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ExternalLink.href");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->href(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.ExternalLink)
}

::google::protobuf::uint8* ExternalLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.ExternalLink)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ExternalLink.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string href = 2;
  if (has_href()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->href().data(), this->href().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ExternalLink.href");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->href(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.ExternalLink)
  return target;
}

int ExternalLink::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.ExternalLink)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string href = 2;
    if (has_href()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->href());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.ExternalLink)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExternalLink* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternalLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.ExternalLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.ExternalLink)
    MergeFrom(*source);
  }
}

void ExternalLink::MergeFrom(const ExternalLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.ExternalLink)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_href()) {
      set_has_href();
      href_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.href_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExternalLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.ExternalLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalLink::CopyFrom(const ExternalLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.ExternalLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalLink::IsInitialized() const {

  return true;
}

void ExternalLink::Swap(ExternalLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalLink::InternalSwap(ExternalLink* other) {
  key_.Swap(&other->key_);
  href_.Swap(&other->href_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternalLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalLink_descriptor_;
  metadata.reflection = ExternalLink_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternalLink

// optional string key = 1;
bool ExternalLink::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExternalLink::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void ExternalLink::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExternalLink::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& ExternalLink::key() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ExternalLink.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExternalLink::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.ExternalLink.key)
}
 void ExternalLink::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.ExternalLink.key)
}
 void ExternalLink::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ExternalLink.key)
}
 ::std::string* ExternalLink::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pbnavitia.ExternalLink.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExternalLink::release_key() {
  // @@protoc_insertion_point(field_release:pbnavitia.ExternalLink.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExternalLink::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ExternalLink.key)
}

// optional string href = 2;
bool ExternalLink::has_href() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExternalLink::set_has_href() {
  _has_bits_[0] |= 0x00000002u;
}
void ExternalLink::clear_has_href() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExternalLink::clear_href() {
  href_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_href();
}
 const ::std::string& ExternalLink::href() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ExternalLink.href)
  return href_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExternalLink::set_href(const ::std::string& value) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.ExternalLink.href)
}
 void ExternalLink::set_href(const char* value) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.ExternalLink.href)
}
 void ExternalLink::set_href(const char* value, size_t size) {
  set_has_href();
  href_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ExternalLink.href)
}
 ::std::string* ExternalLink::mutable_href() {
  set_has_href();
  // @@protoc_insertion_point(field_mutable:pbnavitia.ExternalLink.href)
  return href_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExternalLink::release_href() {
  // @@protoc_insertion_point(field_release:pbnavitia.ExternalLink.href)
  clear_has_href();
  return href_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExternalLink::set_allocated_href(::std::string* href) {
  if (href != NULL) {
    set_has_href();
  } else {
    clear_has_href();
  }
  href_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), href);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ExternalLink.href)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RidesharingInformation::kOperatorFieldNumber;
const int RidesharingInformation::kNetworkFieldNumber;
const int RidesharingInformation::kDriverFieldNumber;
const int RidesharingInformation::kSeatsFieldNumber;
const int RidesharingInformation::kLinksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RidesharingInformation::RidesharingInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.RidesharingInformation)
}

void RidesharingInformation::InitAsDefaultInstance() {
  driver_ = const_cast< ::pbnavitia::IndividualInformation*>(&::pbnavitia::IndividualInformation::default_instance());
  seats_ = const_cast< ::pbnavitia::SeatsDescription*>(&::pbnavitia::SeatsDescription::default_instance());
}

RidesharingInformation::RidesharingInformation(const RidesharingInformation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.RidesharingInformation)
}

void RidesharingInformation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operator__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_ = NULL;
  seats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RidesharingInformation::~RidesharingInformation() {
  // @@protoc_insertion_point(destructor:pbnavitia.RidesharingInformation)
  SharedDtor();
}

void RidesharingInformation::SharedDtor() {
  operator__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete driver_;
    delete seats_;
  }
}

void RidesharingInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RidesharingInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RidesharingInformation_descriptor_;
}

const RidesharingInformation& RidesharingInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

RidesharingInformation* RidesharingInformation::default_instance_ = NULL;

RidesharingInformation* RidesharingInformation::New(::google::protobuf::Arena* arena) const {
  RidesharingInformation* n = new RidesharingInformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RidesharingInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.RidesharingInformation)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_operator_()) {
      operator__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_network()) {
      network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_driver()) {
      if (driver_ != NULL) driver_->::pbnavitia::IndividualInformation::Clear();
    }
    if (has_seats()) {
      if (seats_ != NULL) seats_->::pbnavitia::SeatsDescription::Clear();
    }
  }
  links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RidesharingInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.RidesharingInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string operator = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->operator_().data(), this->operator_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.RidesharingInformation.operator");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_network;
        break;
      }

      // optional string network = 2;
      case 2: {
        if (tag == 18) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.RidesharingInformation.network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_driver;
        break;
      }

      // optional .pbnavitia.IndividualInformation driver = 3;
      case 3: {
        if (tag == 26) {
         parse_driver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_driver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_seats;
        break;
      }

      // optional .pbnavitia.SeatsDescription seats = 4;
      case 4: {
        if (tag == 34) {
         parse_seats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_links;
        break;
      }

      // repeated .pbnavitia.ExternalLink links = 5;
      case 5: {
        if (tag == 42) {
         parse_links:
          DO_(input->IncrementRecursionDepth());
         parse_loop_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.RidesharingInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.RidesharingInformation)
  return false;
#undef DO_
}

void RidesharingInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.RidesharingInformation)
  // optional string operator = 1;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operator_().data(), this->operator_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.RidesharingInformation.operator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->operator_(), output);
  }

  // optional string network = 2;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.RidesharingInformation.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->network(), output);
  }

  // optional .pbnavitia.IndividualInformation driver = 3;
  if (has_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->driver_, output);
  }

  // optional .pbnavitia.SeatsDescription seats = 4;
  if (has_seats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->seats_, output);
  }

  // repeated .pbnavitia.ExternalLink links = 5;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->links(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.RidesharingInformation)
}

::google::protobuf::uint8* RidesharingInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.RidesharingInformation)
  // optional string operator = 1;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->operator_().data(), this->operator_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.RidesharingInformation.operator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operator_(), target);
  }

  // optional string network = 2;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.RidesharingInformation.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network(), target);
  }

  // optional .pbnavitia.IndividualInformation driver = 3;
  if (has_driver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->driver_, false, target);
  }

  // optional .pbnavitia.SeatsDescription seats = 4;
  if (has_seats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->seats_, false, target);
  }

  // repeated .pbnavitia.ExternalLink links = 5;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->links(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.RidesharingInformation)
  return target;
}

int RidesharingInformation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.RidesharingInformation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string operator = 1;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_());
    }

    // optional string network = 2;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional .pbnavitia.IndividualInformation driver = 3;
    if (has_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->driver_);
    }

    // optional .pbnavitia.SeatsDescription seats = 4;
    if (has_seats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->seats_);
    }

  }
  // repeated .pbnavitia.ExternalLink links = 5;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RidesharingInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.RidesharingInformation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RidesharingInformation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RidesharingInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.RidesharingInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.RidesharingInformation)
    MergeFrom(*source);
  }
}

void RidesharingInformation::MergeFrom(const RidesharingInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.RidesharingInformation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  links_.MergeFrom(from.links_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operator_()) {
      set_has_operator_();
      operator__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operator__);
    }
    if (from.has_network()) {
      set_has_network();
      network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
    }
    if (from.has_driver()) {
      mutable_driver()->::pbnavitia::IndividualInformation::MergeFrom(from.driver());
    }
    if (from.has_seats()) {
      mutable_seats()->::pbnavitia::SeatsDescription::MergeFrom(from.seats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RidesharingInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.RidesharingInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RidesharingInformation::CopyFrom(const RidesharingInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.RidesharingInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RidesharingInformation::IsInitialized() const {

  return true;
}

void RidesharingInformation::Swap(RidesharingInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RidesharingInformation::InternalSwap(RidesharingInformation* other) {
  operator__.Swap(&other->operator__);
  network_.Swap(&other->network_);
  std::swap(driver_, other->driver_);
  std::swap(seats_, other->seats_);
  links_.UnsafeArenaSwap(&other->links_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RidesharingInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RidesharingInformation_descriptor_;
  metadata.reflection = RidesharingInformation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RidesharingInformation

// optional string operator = 1;
bool RidesharingInformation::has_operator_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RidesharingInformation::set_has_operator_() {
  _has_bits_[0] |= 0x00000001u;
}
void RidesharingInformation::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000001u;
}
void RidesharingInformation::clear_operator_() {
  operator__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operator_();
}
 const ::std::string& RidesharingInformation::operator_() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.operator)
  return operator__.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RidesharingInformation::set_operator_(const ::std::string& value) {
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.RidesharingInformation.operator)
}
 void RidesharingInformation::set_operator_(const char* value) {
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.RidesharingInformation.operator)
}
 void RidesharingInformation::set_operator_(const char* value, size_t size) {
  set_has_operator_();
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.RidesharingInformation.operator)
}
 ::std::string* RidesharingInformation::mutable_operator_() {
  set_has_operator_();
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.operator)
  return operator__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RidesharingInformation::release_operator_() {
  // @@protoc_insertion_point(field_release:pbnavitia.RidesharingInformation.operator)
  clear_has_operator_();
  return operator__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RidesharingInformation::set_allocated_operator_(::std::string* operator_) {
  if (operator_ != NULL) {
    set_has_operator_();
  } else {
    clear_has_operator_();
  }
  operator__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operator_);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RidesharingInformation.operator)
}

// optional string network = 2;
bool RidesharingInformation::has_network() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RidesharingInformation::set_has_network() {
  _has_bits_[0] |= 0x00000002u;
}
void RidesharingInformation::clear_has_network() {
  _has_bits_[0] &= ~0x00000002u;
}
void RidesharingInformation::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network();
}
 const ::std::string& RidesharingInformation::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RidesharingInformation::set_network(const ::std::string& value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.RidesharingInformation.network)
}
 void RidesharingInformation::set_network(const char* value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.RidesharingInformation.network)
}
 void RidesharingInformation::set_network(const char* value, size_t size) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.RidesharingInformation.network)
}
 ::std::string* RidesharingInformation::mutable_network() {
  set_has_network();
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RidesharingInformation::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.RidesharingInformation.network)
  clear_has_network();
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RidesharingInformation::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    set_has_network();
  } else {
    clear_has_network();
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RidesharingInformation.network)
}

// optional .pbnavitia.IndividualInformation driver = 3;
bool RidesharingInformation::has_driver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RidesharingInformation::set_has_driver() {
  _has_bits_[0] |= 0x00000004u;
}
void RidesharingInformation::clear_has_driver() {
  _has_bits_[0] &= ~0x00000004u;
}
void RidesharingInformation::clear_driver() {
  if (driver_ != NULL) driver_->::pbnavitia::IndividualInformation::Clear();
  clear_has_driver();
}
const ::pbnavitia::IndividualInformation& RidesharingInformation::driver() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.driver)
  return driver_ != NULL ? *driver_ : *default_instance_->driver_;
}
::pbnavitia::IndividualInformation* RidesharingInformation::mutable_driver() {
  set_has_driver();
  if (driver_ == NULL) {
    driver_ = new ::pbnavitia::IndividualInformation;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.driver)
  return driver_;
}
::pbnavitia::IndividualInformation* RidesharingInformation::release_driver() {
  // @@protoc_insertion_point(field_release:pbnavitia.RidesharingInformation.driver)
  clear_has_driver();
  ::pbnavitia::IndividualInformation* temp = driver_;
  driver_ = NULL;
  return temp;
}
void RidesharingInformation::set_allocated_driver(::pbnavitia::IndividualInformation* driver) {
  delete driver_;
  driver_ = driver;
  if (driver) {
    set_has_driver();
  } else {
    clear_has_driver();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RidesharingInformation.driver)
}

// optional .pbnavitia.SeatsDescription seats = 4;
bool RidesharingInformation::has_seats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RidesharingInformation::set_has_seats() {
  _has_bits_[0] |= 0x00000008u;
}
void RidesharingInformation::clear_has_seats() {
  _has_bits_[0] &= ~0x00000008u;
}
void RidesharingInformation::clear_seats() {
  if (seats_ != NULL) seats_->::pbnavitia::SeatsDescription::Clear();
  clear_has_seats();
}
const ::pbnavitia::SeatsDescription& RidesharingInformation::seats() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.seats)
  return seats_ != NULL ? *seats_ : *default_instance_->seats_;
}
::pbnavitia::SeatsDescription* RidesharingInformation::mutable_seats() {
  set_has_seats();
  if (seats_ == NULL) {
    seats_ = new ::pbnavitia::SeatsDescription;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.seats)
  return seats_;
}
::pbnavitia::SeatsDescription* RidesharingInformation::release_seats() {
  // @@protoc_insertion_point(field_release:pbnavitia.RidesharingInformation.seats)
  clear_has_seats();
  ::pbnavitia::SeatsDescription* temp = seats_;
  seats_ = NULL;
  return temp;
}
void RidesharingInformation::set_allocated_seats(::pbnavitia::SeatsDescription* seats) {
  delete seats_;
  seats_ = seats;
  if (seats) {
    set_has_seats();
  } else {
    clear_has_seats();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RidesharingInformation.seats)
}

// repeated .pbnavitia.ExternalLink links = 5;
int RidesharingInformation::links_size() const {
  return links_.size();
}
void RidesharingInformation::clear_links() {
  links_.Clear();
}
const ::pbnavitia::ExternalLink& RidesharingInformation::links(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.RidesharingInformation.links)
  return links_.Get(index);
}
::pbnavitia::ExternalLink* RidesharingInformation::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.RidesharingInformation.links)
  return links_.Mutable(index);
}
::pbnavitia::ExternalLink* RidesharingInformation::add_links() {
  // @@protoc_insertion_point(field_add:pbnavitia.RidesharingInformation.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::ExternalLink >*
RidesharingInformation::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.RidesharingInformation.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ExternalLink >&
RidesharingInformation::links() const {
  // @@protoc_insertion_point(field_list:pbnavitia.RidesharingInformation.links)
  return links_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedPublisher::kIdFieldNumber;
const int FeedPublisher::kNameFieldNumber;
const int FeedPublisher::kUrlFieldNumber;
const int FeedPublisher::kLicenseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedPublisher::FeedPublisher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.FeedPublisher)
}

void FeedPublisher::InitAsDefaultInstance() {
}

FeedPublisher::FeedPublisher(const FeedPublisher& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.FeedPublisher)
}

void FeedPublisher::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedPublisher::~FeedPublisher() {
  // @@protoc_insertion_point(destructor:pbnavitia.FeedPublisher)
  SharedDtor();
}

void FeedPublisher::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FeedPublisher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedPublisher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedPublisher_descriptor_;
}

const FeedPublisher& FeedPublisher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

FeedPublisher* FeedPublisher::default_instance_ = NULL;

FeedPublisher* FeedPublisher::New(::google::protobuf::Arena* arena) const {
  FeedPublisher* n = new FeedPublisher;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedPublisher::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.FeedPublisher)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_license()) {
      license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FeedPublisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.FeedPublisher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.FeedPublisher.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.FeedPublisher.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.FeedPublisher.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_license;
        break;
      }

      // optional string license = 4;
      case 4: {
        if (tag == 34) {
         parse_license:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license().data(), this->license().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.FeedPublisher.license");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.FeedPublisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.FeedPublisher)
  return false;
#undef DO_
}

void FeedPublisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.FeedPublisher)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FeedPublisher.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FeedPublisher.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FeedPublisher.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional string license = 4;
  if (has_license()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license().data(), this->license().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FeedPublisher.license");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->license(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.FeedPublisher)
}

::google::protobuf::uint8* FeedPublisher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.FeedPublisher)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FeedPublisher.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FeedPublisher.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FeedPublisher.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string license = 4;
  if (has_license()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license().data(), this->license().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.FeedPublisher.license");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->license(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.FeedPublisher)
  return target;
}

int FeedPublisher::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.FeedPublisher)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string license = 4;
    if (has_license()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedPublisher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.FeedPublisher)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeedPublisher* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedPublisher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.FeedPublisher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.FeedPublisher)
    MergeFrom(*source);
  }
}

void FeedPublisher::MergeFrom(const FeedPublisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.FeedPublisher)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_license()) {
      set_has_license();
      license_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.license_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FeedPublisher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.FeedPublisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedPublisher::CopyFrom(const FeedPublisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.FeedPublisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedPublisher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FeedPublisher::Swap(FeedPublisher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedPublisher::InternalSwap(FeedPublisher* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  license_.Swap(&other->license_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedPublisher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedPublisher_descriptor_;
  metadata.reflection = FeedPublisher_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedPublisher

// required string id = 1;
bool FeedPublisher::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeedPublisher::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FeedPublisher::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeedPublisher::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& FeedPublisher::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FeedPublisher.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedPublisher::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FeedPublisher.id)
}
 void FeedPublisher::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FeedPublisher.id)
}
 void FeedPublisher::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FeedPublisher.id)
}
 ::std::string* FeedPublisher::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FeedPublisher.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeedPublisher::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.FeedPublisher.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedPublisher::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FeedPublisher.id)
}

// optional string name = 2;
bool FeedPublisher::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeedPublisher::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void FeedPublisher::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeedPublisher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& FeedPublisher::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FeedPublisher.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedPublisher::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FeedPublisher.name)
}
 void FeedPublisher::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FeedPublisher.name)
}
 void FeedPublisher::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FeedPublisher.name)
}
 ::std::string* FeedPublisher::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FeedPublisher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeedPublisher::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.FeedPublisher.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedPublisher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FeedPublisher.name)
}

// optional string url = 3;
bool FeedPublisher::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeedPublisher::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void FeedPublisher::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeedPublisher::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& FeedPublisher::url() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FeedPublisher.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedPublisher::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FeedPublisher.url)
}
 void FeedPublisher::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FeedPublisher.url)
}
 void FeedPublisher::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FeedPublisher.url)
}
 ::std::string* FeedPublisher::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FeedPublisher.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeedPublisher::release_url() {
  // @@protoc_insertion_point(field_release:pbnavitia.FeedPublisher.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedPublisher::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FeedPublisher.url)
}

// optional string license = 4;
bool FeedPublisher::has_license() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FeedPublisher::set_has_license() {
  _has_bits_[0] |= 0x00000008u;
}
void FeedPublisher::clear_has_license() {
  _has_bits_[0] &= ~0x00000008u;
}
void FeedPublisher::clear_license() {
  license_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_license();
}
 const ::std::string& FeedPublisher::license() const {
  // @@protoc_insertion_point(field_get:pbnavitia.FeedPublisher.license)
  return license_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedPublisher::set_license(const ::std::string& value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.FeedPublisher.license)
}
 void FeedPublisher::set_license(const char* value) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.FeedPublisher.license)
}
 void FeedPublisher::set_license(const char* value, size_t size) {
  set_has_license();
  license_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.FeedPublisher.license)
}
 ::std::string* FeedPublisher::mutable_license() {
  set_has_license();
  // @@protoc_insertion_point(field_mutable:pbnavitia.FeedPublisher.license)
  return license_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeedPublisher::release_license() {
  // @@protoc_insertion_point(field_release:pbnavitia.FeedPublisher.license)
  clear_has_license();
  return license_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedPublisher::set_allocated_license(::std::string* license) {
  if (license != NULL) {
    set_has_license();
  } else {
    clear_has_license();
  }
  license_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), license);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.FeedPublisher.license)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Section::kTypeFieldNumber;
const int Section::kOriginFieldNumber;
const int Section::kDestinationFieldNumber;
const int Section::kPtDisplayInformationsFieldNumber;
const int Section::kUrisFieldNumber;
const int Section::kVehicleJourneyFieldNumber;
const int Section::kStopDateTimesFieldNumber;
const int Section::kStreetNetworkFieldNumber;
const int Section::kCycleLaneLengthFieldNumber;
const int Section::kTransferTypeFieldNumber;
const int Section::kRidesharingJourneysFieldNumber;
const int Section::kRidesharingInformationFieldNumber;
const int Section::kShapeFieldNumber;
const int Section::kDurationFieldNumber;
const int Section::kBeginDateTimeFieldNumber;
const int Section::kEndDateTimeFieldNumber;
const int Section::kBaseBeginDateTimeFieldNumber;
const int Section::kBaseEndDateTimeFieldNumber;
const int Section::kRealtimeLevelFieldNumber;
const int Section::kLengthFieldNumber;
const int Section::kIdFieldNumber;
const int Section::kCo2EmissionFieldNumber;
const int Section::kAdditionalInformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Section::Section()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Section)
}

void Section::InitAsDefaultInstance() {
  origin_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  destination_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  pt_display_informations_ = const_cast< ::pbnavitia::PtDisplayInfo*>(&::pbnavitia::PtDisplayInfo::default_instance());
  uris_ = const_cast< ::pbnavitia::Uris*>(&::pbnavitia::Uris::default_instance());
  vehicle_journey_ = const_cast< ::pbnavitia::VehicleJourney*>(&::pbnavitia::VehicleJourney::default_instance());
  street_network_ = const_cast< ::pbnavitia::StreetNetwork*>(&::pbnavitia::StreetNetwork::default_instance());
  ridesharing_information_ = const_cast< ::pbnavitia::RidesharingInformation*>(&::pbnavitia::RidesharingInformation::default_instance());
  co2_emission_ = const_cast< ::pbnavitia::Co2Emission*>(&::pbnavitia::Co2Emission::default_instance());
}

Section::Section(const Section& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Section)
}

void Section::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  origin_ = NULL;
  destination_ = NULL;
  pt_display_informations_ = NULL;
  uris_ = NULL;
  vehicle_journey_ = NULL;
  street_network_ = NULL;
  cycle_lane_length_ = 0;
  transfer_type_ = 1;
  ridesharing_information_ = NULL;
  duration_ = 0;
  begin_date_time_ = GOOGLE_ULONGLONG(0);
  end_date_time_ = GOOGLE_ULONGLONG(0);
  base_begin_date_time_ = GOOGLE_ULONGLONG(0);
  base_end_date_time_ = GOOGLE_ULONGLONG(0);
  realtime_level_ = 1;
  length_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  co2_emission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Section::~Section() {
  // @@protoc_insertion_point(destructor:pbnavitia.Section)
  SharedDtor();
}

void Section::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete origin_;
    delete destination_;
    delete pt_display_informations_;
    delete uris_;
    delete vehicle_journey_;
    delete street_network_;
    delete ridesharing_information_;
    delete co2_emission_;
  }
}

void Section::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Section::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Section_descriptor_;
}

const Section& Section::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Section* Section::default_instance_ = NULL;

Section* Section::New(::google::protobuf::Arena* arena) const {
  Section* n = new Section;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Section::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Section)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Section, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Section*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    type_ = 1;
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
    }
    if (has_pt_display_informations()) {
      if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
    }
    if (has_uris()) {
      if (uris_ != NULL) uris_->::pbnavitia::Uris::Clear();
    }
    if (has_vehicle_journey()) {
      if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
    }
    if (has_street_network()) {
      if (street_network_ != NULL) street_network_->::pbnavitia::StreetNetwork::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 60160u) {
    ZR_(begin_date_time_, end_date_time_);
    cycle_lane_length_ = 0;
    transfer_type_ = 1;
    if (has_ridesharing_information()) {
      if (ridesharing_information_ != NULL) ridesharing_information_->::pbnavitia::RidesharingInformation::Clear();
    }
    duration_ = 0;
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(base_begin_date_time_, base_end_date_time_);
    realtime_level_ = 1;
    length_ = 0;
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_co2_emission()) {
      if (co2_emission_ != NULL) co2_emission_->::pbnavitia::Co2Emission::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  stop_date_times_.Clear();
  ridesharing_journeys_.Clear();
  shape_.Clear();
  additional_informations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Section::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Section)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.SectionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::SectionType_IsValid(value)) {
            set_type(static_cast< ::pbnavitia::SectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_origin;
        break;
      }

      // optional .pbnavitia.PtObject origin = 2;
      case 2: {
        if (tag == 18) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_destination;
        break;
      }

      // optional .pbnavitia.PtObject destination = 3;
      case 3: {
        if (tag == 26) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pt_display_informations;
        break;
      }

      // optional .pbnavitia.PtDisplayInfo pt_display_informations = 4;
      case 4: {
        if (tag == 34) {
         parse_pt_display_informations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_display_informations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uris;
        break;
      }

      // optional .pbnavitia.Uris uris = 5;
      case 5: {
        if (tag == 42) {
         parse_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uris()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vehicle_journey;
        break;
      }

      // optional .pbnavitia.VehicleJourney vehicle_journey = 9;
      case 9: {
        if (tag == 74) {
         parse_vehicle_journey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_journey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_stop_date_times;
        break;
      }

      // repeated .pbnavitia.StopDateTime stop_date_times = 10;
      case 10: {
        if (tag == 82) {
         parse_stop_date_times:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_date_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_date_times()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_stop_date_times;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(98)) goto parse_street_network;
        break;
      }

      // optional .pbnavitia.StreetNetwork street_network = 12;
      case 12: {
        if (tag == 98) {
         parse_street_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_street_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_transfer_type;
        break;
      }

      // optional .pbnavitia.TransferType transfer_type = 13;
      case 13: {
        if (tag == 104) {
         parse_transfer_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::TransferType_IsValid(value)) {
            set_transfer_type(static_cast< ::pbnavitia::TransferType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_duration;
        break;
      }

      // optional int32 duration = 15;
      case 15: {
        if (tag == 120) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_begin_date_time;
        break;
      }

      // optional uint64 begin_date_time = 16;
      case 16: {
        if (tag == 128) {
         parse_begin_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_date_time_)));
          set_has_begin_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_end_date_time;
        break;
      }

      // optional uint64 end_date_time = 17;
      case 17: {
        if (tag == 136) {
         parse_end_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_date_time_)));
          set_has_end_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_length;
        break;
      }

      // optional int32 length = 19;
      case 19: {
        if (tag == 152) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_id;
        break;
      }

      // optional string id = 20;
      case 20: {
        if (tag == 162) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Section.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_co2_emission;
        break;
      }

      // optional .pbnavitia.Co2Emission co2_emission = 21;
      case 21: {
        if (tag == 170) {
         parse_co2_emission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_co2_emission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_additional_informations;
        break;
      }

      // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 22;
      case 22: {
        if (tag == 176) {
         parse_additional_informations:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::SectionAdditionalInformationType_IsValid(value)) {
            add_additional_informations(static_cast< ::pbnavitia::SectionAdditionalInformationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 22,
                 ::pbnavitia::SectionAdditionalInformationType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_additional_informations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_additional_informations;
        if (input->ExpectTag(194)) goto parse_shape;
        break;
      }

      // repeated .pbnavitia.GeographicalCoord shape = 24;
      case 24: {
        if (tag == 194) {
         parse_shape:
          DO_(input->IncrementRecursionDepth());
         parse_loop_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_loop_shape;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(200)) goto parse_base_begin_date_time;
        break;
      }

      // optional uint64 base_begin_date_time = 25;
      case 25: {
        if (tag == 200) {
         parse_base_begin_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_begin_date_time_)));
          set_has_base_begin_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_base_end_date_time;
        break;
      }

      // optional uint64 base_end_date_time = 26;
      case 26: {
        if (tag == 208) {
         parse_base_end_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_end_date_time_)));
          set_has_base_end_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_realtime_level;
        break;
      }

      // optional .pbnavitia.RTLevel realtime_level = 27;
      case 27: {
        if (tag == 216) {
         parse_realtime_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::RTLevel_IsValid(value)) {
            set_realtime_level(static_cast< ::pbnavitia::RTLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_ridesharing_journeys;
        break;
      }

      // repeated .pbnavitia.Journey ridesharing_journeys = 28;
      case 28: {
        if (tag == 226) {
         parse_ridesharing_journeys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ridesharing_journeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ridesharing_journeys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_loop_ridesharing_journeys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(234)) goto parse_ridesharing_information;
        break;
      }

      // optional .pbnavitia.RidesharingInformation ridesharing_information = 29;
      case 29: {
        if (tag == 234) {
         parse_ridesharing_information:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ridesharing_information()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_cycle_lane_length;
        break;
      }

      // optional int32 cycle_lane_length = 30;
      case 30: {
        if (tag == 240) {
         parse_cycle_lane_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycle_lane_length_)));
          set_has_cycle_lane_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Section)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Section)
  return false;
#undef DO_
}

void Section::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Section)
  // optional .pbnavitia.SectionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pbnavitia.PtObject origin = 2;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->origin_, output);
  }

  // optional .pbnavitia.PtObject destination = 3;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->destination_, output);
  }

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 4;
  if (has_pt_display_informations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pt_display_informations_, output);
  }

  // optional .pbnavitia.Uris uris = 5;
  if (has_uris()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->uris_, output);
  }

  // optional .pbnavitia.VehicleJourney vehicle_journey = 9;
  if (has_vehicle_journey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->vehicle_journey_, output);
  }

  // repeated .pbnavitia.StopDateTime stop_date_times = 10;
  for (unsigned int i = 0, n = this->stop_date_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->stop_date_times(i), output);
  }

  // optional .pbnavitia.StreetNetwork street_network = 12;
  if (has_street_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->street_network_, output);
  }

  // optional .pbnavitia.TransferType transfer_type = 13;
  if (has_transfer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->transfer_type(), output);
  }

  // optional int32 duration = 15;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->duration(), output);
  }

  // optional uint64 begin_date_time = 16;
  if (has_begin_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->begin_date_time(), output);
  }

  // optional uint64 end_date_time = 17;
  if (has_end_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->end_date_time(), output);
  }

  // optional int32 length = 19;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->length(), output);
  }

  // optional string id = 20;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Section.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->id(), output);
  }

  // optional .pbnavitia.Co2Emission co2_emission = 21;
  if (has_co2_emission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->co2_emission_, output);
  }

  // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 22;
  for (int i = 0; i < this->additional_informations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->additional_informations(i), output);
  }

  // repeated .pbnavitia.GeographicalCoord shape = 24;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->shape(i), output);
  }

  // optional uint64 base_begin_date_time = 25;
  if (has_base_begin_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->base_begin_date_time(), output);
  }

  // optional uint64 base_end_date_time = 26;
  if (has_base_end_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->base_end_date_time(), output);
  }

  // optional .pbnavitia.RTLevel realtime_level = 27;
  if (has_realtime_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->realtime_level(), output);
  }

  // repeated .pbnavitia.Journey ridesharing_journeys = 28;
  for (unsigned int i = 0, n = this->ridesharing_journeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->ridesharing_journeys(i), output);
  }

  // optional .pbnavitia.RidesharingInformation ridesharing_information = 29;
  if (has_ridesharing_information()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->ridesharing_information_, output);
  }

  // optional int32 cycle_lane_length = 30;
  if (has_cycle_lane_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->cycle_lane_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Section)
}

::google::protobuf::uint8* Section::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Section)
  // optional .pbnavitia.SectionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pbnavitia.PtObject origin = 2;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->origin_, false, target);
  }

  // optional .pbnavitia.PtObject destination = 3;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->destination_, false, target);
  }

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 4;
  if (has_pt_display_informations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pt_display_informations_, false, target);
  }

  // optional .pbnavitia.Uris uris = 5;
  if (has_uris()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->uris_, false, target);
  }

  // optional .pbnavitia.VehicleJourney vehicle_journey = 9;
  if (has_vehicle_journey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->vehicle_journey_, false, target);
  }

  // repeated .pbnavitia.StopDateTime stop_date_times = 10;
  for (unsigned int i = 0, n = this->stop_date_times_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->stop_date_times(i), false, target);
  }

  // optional .pbnavitia.StreetNetwork street_network = 12;
  if (has_street_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->street_network_, false, target);
  }

  // optional .pbnavitia.TransferType transfer_type = 13;
  if (has_transfer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->transfer_type(), target);
  }

  // optional int32 duration = 15;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->duration(), target);
  }

  // optional uint64 begin_date_time = 16;
  if (has_begin_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->begin_date_time(), target);
  }

  // optional uint64 end_date_time = 17;
  if (has_end_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->end_date_time(), target);
  }

  // optional int32 length = 19;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->length(), target);
  }

  // optional string id = 20;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Section.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->id(), target);
  }

  // optional .pbnavitia.Co2Emission co2_emission = 21;
  if (has_co2_emission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->co2_emission_, false, target);
  }

  // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 22;
  for (int i = 0; i < this->additional_informations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->additional_informations(i), target);
  }

  // repeated .pbnavitia.GeographicalCoord shape = 24;
  for (unsigned int i = 0, n = this->shape_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->shape(i), false, target);
  }

  // optional uint64 base_begin_date_time = 25;
  if (has_base_begin_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->base_begin_date_time(), target);
  }

  // optional uint64 base_end_date_time = 26;
  if (has_base_end_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->base_end_date_time(), target);
  }

  // optional .pbnavitia.RTLevel realtime_level = 27;
  if (has_realtime_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->realtime_level(), target);
  }

  // repeated .pbnavitia.Journey ridesharing_journeys = 28;
  for (unsigned int i = 0, n = this->ridesharing_journeys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, this->ridesharing_journeys(i), false, target);
  }

  // optional .pbnavitia.RidesharingInformation ridesharing_information = 29;
  if (has_ridesharing_information()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->ridesharing_information_, false, target);
  }

  // optional int32 cycle_lane_length = 30;
  if (has_cycle_lane_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->cycle_lane_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Section)
  return target;
}

int Section::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Section)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional .pbnavitia.SectionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pbnavitia.PtObject origin = 2;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .pbnavitia.PtObject destination = 3;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

    // optional .pbnavitia.PtDisplayInfo pt_display_informations = 4;
    if (has_pt_display_informations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pt_display_informations_);
    }

    // optional .pbnavitia.Uris uris = 5;
    if (has_uris()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uris_);
    }

    // optional .pbnavitia.VehicleJourney vehicle_journey = 9;
    if (has_vehicle_journey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_journey_);
    }

    // optional .pbnavitia.StreetNetwork street_network = 12;
    if (has_street_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->street_network_);
    }

  }
  if (_has_bits_[8 / 32] & 60160u) {
    // optional int32 cycle_lane_length = 30;
    if (has_cycle_lane_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cycle_lane_length());
    }

    // optional .pbnavitia.TransferType transfer_type = 13;
    if (has_transfer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());
    }

    // optional .pbnavitia.RidesharingInformation ridesharing_information = 29;
    if (has_ridesharing_information()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ridesharing_information_);
    }

    // optional int32 duration = 15;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional uint64 begin_date_time = 16;
    if (has_begin_date_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_date_time());
    }

    // optional uint64 end_date_time = 17;
    if (has_end_date_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_date_time());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint64 base_begin_date_time = 25;
    if (has_base_begin_date_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_begin_date_time());
    }

    // optional uint64 base_end_date_time = 26;
    if (has_base_end_date_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_end_date_time());
    }

    // optional .pbnavitia.RTLevel realtime_level = 27;
    if (has_realtime_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->realtime_level());
    }

    // optional int32 length = 19;
    if (has_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional string id = 20;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .pbnavitia.Co2Emission co2_emission = 21;
    if (has_co2_emission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->co2_emission_);
    }

  }
  // repeated .pbnavitia.StopDateTime stop_date_times = 10;
  total_size += 1 * this->stop_date_times_size();
  for (int i = 0; i < this->stop_date_times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_date_times(i));
  }

  // repeated .pbnavitia.Journey ridesharing_journeys = 28;
  total_size += 2 * this->ridesharing_journeys_size();
  for (int i = 0; i < this->ridesharing_journeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ridesharing_journeys(i));
  }

  // repeated .pbnavitia.GeographicalCoord shape = 24;
  total_size += 2 * this->shape_size();
  for (int i = 0; i < this->shape_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shape(i));
  }

  // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->additional_informations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->additional_informations(i));
    }
    total_size += 2 * this->additional_informations_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Section::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Section)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Section* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Section>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Section)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Section)
    MergeFrom(*source);
  }
}

void Section::MergeFrom(const Section& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Section)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stop_date_times_.MergeFrom(from.stop_date_times_);
  ridesharing_journeys_.MergeFrom(from.ridesharing_journeys_);
  shape_.MergeFrom(from.shape_);
  additional_informations_.MergeFrom(from.additional_informations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_origin()) {
      mutable_origin()->::pbnavitia::PtObject::MergeFrom(from.origin());
    }
    if (from.has_destination()) {
      mutable_destination()->::pbnavitia::PtObject::MergeFrom(from.destination());
    }
    if (from.has_pt_display_informations()) {
      mutable_pt_display_informations()->::pbnavitia::PtDisplayInfo::MergeFrom(from.pt_display_informations());
    }
    if (from.has_uris()) {
      mutable_uris()->::pbnavitia::Uris::MergeFrom(from.uris());
    }
    if (from.has_vehicle_journey()) {
      mutable_vehicle_journey()->::pbnavitia::VehicleJourney::MergeFrom(from.vehicle_journey());
    }
    if (from.has_street_network()) {
      mutable_street_network()->::pbnavitia::StreetNetwork::MergeFrom(from.street_network());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cycle_lane_length()) {
      set_cycle_lane_length(from.cycle_lane_length());
    }
    if (from.has_transfer_type()) {
      set_transfer_type(from.transfer_type());
    }
    if (from.has_ridesharing_information()) {
      mutable_ridesharing_information()->::pbnavitia::RidesharingInformation::MergeFrom(from.ridesharing_information());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_begin_date_time()) {
      set_begin_date_time(from.begin_date_time());
    }
    if (from.has_end_date_time()) {
      set_end_date_time(from.end_date_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_base_begin_date_time()) {
      set_base_begin_date_time(from.base_begin_date_time());
    }
    if (from.has_base_end_date_time()) {
      set_base_end_date_time(from.base_end_date_time());
    }
    if (from.has_realtime_level()) {
      set_realtime_level(from.realtime_level());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_co2_emission()) {
      mutable_co2_emission()->::pbnavitia::Co2Emission::MergeFrom(from.co2_emission());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Section::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Section::CopyFrom(const Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Section::IsInitialized() const {

  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  if (has_pt_display_informations()) {
    if (!this->pt_display_informations_->IsInitialized()) return false;
  }
  if (has_vehicle_journey()) {
    if (!this->vehicle_journey_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_date_times())) return false;
  if (has_street_network()) {
    if (!this->street_network_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->ridesharing_journeys())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->shape())) return false;
  return true;
}

void Section::Swap(Section* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Section::InternalSwap(Section* other) {
  std::swap(type_, other->type_);
  std::swap(origin_, other->origin_);
  std::swap(destination_, other->destination_);
  std::swap(pt_display_informations_, other->pt_display_informations_);
  std::swap(uris_, other->uris_);
  std::swap(vehicle_journey_, other->vehicle_journey_);
  stop_date_times_.UnsafeArenaSwap(&other->stop_date_times_);
  std::swap(street_network_, other->street_network_);
  std::swap(cycle_lane_length_, other->cycle_lane_length_);
  std::swap(transfer_type_, other->transfer_type_);
  ridesharing_journeys_.UnsafeArenaSwap(&other->ridesharing_journeys_);
  std::swap(ridesharing_information_, other->ridesharing_information_);
  shape_.UnsafeArenaSwap(&other->shape_);
  std::swap(duration_, other->duration_);
  std::swap(begin_date_time_, other->begin_date_time_);
  std::swap(end_date_time_, other->end_date_time_);
  std::swap(base_begin_date_time_, other->base_begin_date_time_);
  std::swap(base_end_date_time_, other->base_end_date_time_);
  std::swap(realtime_level_, other->realtime_level_);
  std::swap(length_, other->length_);
  id_.Swap(&other->id_);
  std::swap(co2_emission_, other->co2_emission_);
  additional_informations_.UnsafeArenaSwap(&other->additional_informations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Section::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Section_descriptor_;
  metadata.reflection = Section_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Section

// optional .pbnavitia.SectionType type = 1;
bool Section::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Section::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Section::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Section::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::pbnavitia::SectionType Section::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.type)
  return static_cast< ::pbnavitia::SectionType >(type_);
}
 void Section::set_type(::pbnavitia::SectionType value) {
  assert(::pbnavitia::SectionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.type)
}

// optional .pbnavitia.PtObject origin = 2;
bool Section::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Section::set_has_origin() {
  _has_bits_[0] |= 0x00000002u;
}
void Section::clear_has_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
void Section::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
  clear_has_origin();
}
const ::pbnavitia::PtObject& Section::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::pbnavitia::PtObject* Section::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.origin)
  return origin_;
}
::pbnavitia::PtObject* Section::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.origin)
  clear_has_origin();
  ::pbnavitia::PtObject* temp = origin_;
  origin_ = NULL;
  return temp;
}
void Section::set_allocated_origin(::pbnavitia::PtObject* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.origin)
}

// optional .pbnavitia.PtObject destination = 3;
bool Section::has_destination() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Section::set_has_destination() {
  _has_bits_[0] |= 0x00000004u;
}
void Section::clear_has_destination() {
  _has_bits_[0] &= ~0x00000004u;
}
void Section::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
  clear_has_destination();
}
const ::pbnavitia::PtObject& Section::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::pbnavitia::PtObject* Section::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.destination)
  return destination_;
}
::pbnavitia::PtObject* Section::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.destination)
  clear_has_destination();
  ::pbnavitia::PtObject* temp = destination_;
  destination_ = NULL;
  return temp;
}
void Section::set_allocated_destination(::pbnavitia::PtObject* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.destination)
}

// optional .pbnavitia.PtDisplayInfo pt_display_informations = 4;
bool Section::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Section::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000008u;
}
void Section::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000008u;
}
void Section::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
const ::pbnavitia::PtDisplayInfo& Section::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* Section::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.pt_display_informations)
  return pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* Section::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
void Section::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.pt_display_informations)
}

// optional .pbnavitia.Uris uris = 5;
bool Section::has_uris() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Section::set_has_uris() {
  _has_bits_[0] |= 0x00000010u;
}
void Section::clear_has_uris() {
  _has_bits_[0] &= ~0x00000010u;
}
void Section::clear_uris() {
  if (uris_ != NULL) uris_->::pbnavitia::Uris::Clear();
  clear_has_uris();
}
const ::pbnavitia::Uris& Section::uris() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.uris)
  return uris_ != NULL ? *uris_ : *default_instance_->uris_;
}
::pbnavitia::Uris* Section::mutable_uris() {
  set_has_uris();
  if (uris_ == NULL) {
    uris_ = new ::pbnavitia::Uris;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.uris)
  return uris_;
}
::pbnavitia::Uris* Section::release_uris() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.uris)
  clear_has_uris();
  ::pbnavitia::Uris* temp = uris_;
  uris_ = NULL;
  return temp;
}
void Section::set_allocated_uris(::pbnavitia::Uris* uris) {
  delete uris_;
  uris_ = uris;
  if (uris) {
    set_has_uris();
  } else {
    clear_has_uris();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.uris)
}

// optional .pbnavitia.VehicleJourney vehicle_journey = 9;
bool Section::has_vehicle_journey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Section::set_has_vehicle_journey() {
  _has_bits_[0] |= 0x00000020u;
}
void Section::clear_has_vehicle_journey() {
  _has_bits_[0] &= ~0x00000020u;
}
void Section::clear_vehicle_journey() {
  if (vehicle_journey_ != NULL) vehicle_journey_->::pbnavitia::VehicleJourney::Clear();
  clear_has_vehicle_journey();
}
const ::pbnavitia::VehicleJourney& Section::vehicle_journey() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.vehicle_journey)
  return vehicle_journey_ != NULL ? *vehicle_journey_ : *default_instance_->vehicle_journey_;
}
::pbnavitia::VehicleJourney* Section::mutable_vehicle_journey() {
  set_has_vehicle_journey();
  if (vehicle_journey_ == NULL) {
    vehicle_journey_ = new ::pbnavitia::VehicleJourney;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.vehicle_journey)
  return vehicle_journey_;
}
::pbnavitia::VehicleJourney* Section::release_vehicle_journey() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.vehicle_journey)
  clear_has_vehicle_journey();
  ::pbnavitia::VehicleJourney* temp = vehicle_journey_;
  vehicle_journey_ = NULL;
  return temp;
}
void Section::set_allocated_vehicle_journey(::pbnavitia::VehicleJourney* vehicle_journey) {
  delete vehicle_journey_;
  vehicle_journey_ = vehicle_journey;
  if (vehicle_journey) {
    set_has_vehicle_journey();
  } else {
    clear_has_vehicle_journey();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.vehicle_journey)
}

// repeated .pbnavitia.StopDateTime stop_date_times = 10;
int Section::stop_date_times_size() const {
  return stop_date_times_.size();
}
void Section::clear_stop_date_times() {
  stop_date_times_.Clear();
}
const ::pbnavitia::StopDateTime& Section::stop_date_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.stop_date_times)
  return stop_date_times_.Get(index);
}
::pbnavitia::StopDateTime* Section::mutable_stop_date_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.stop_date_times)
  return stop_date_times_.Mutable(index);
}
::pbnavitia::StopDateTime* Section::add_stop_date_times() {
  // @@protoc_insertion_point(field_add:pbnavitia.Section.stop_date_times)
  return stop_date_times_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopDateTime >*
Section::mutable_stop_date_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Section.stop_date_times)
  return &stop_date_times_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopDateTime >&
Section::stop_date_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Section.stop_date_times)
  return stop_date_times_;
}

// optional .pbnavitia.StreetNetwork street_network = 12;
bool Section::has_street_network() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Section::set_has_street_network() {
  _has_bits_[0] |= 0x00000080u;
}
void Section::clear_has_street_network() {
  _has_bits_[0] &= ~0x00000080u;
}
void Section::clear_street_network() {
  if (street_network_ != NULL) street_network_->::pbnavitia::StreetNetwork::Clear();
  clear_has_street_network();
}
const ::pbnavitia::StreetNetwork& Section::street_network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.street_network)
  return street_network_ != NULL ? *street_network_ : *default_instance_->street_network_;
}
::pbnavitia::StreetNetwork* Section::mutable_street_network() {
  set_has_street_network();
  if (street_network_ == NULL) {
    street_network_ = new ::pbnavitia::StreetNetwork;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.street_network)
  return street_network_;
}
::pbnavitia::StreetNetwork* Section::release_street_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.street_network)
  clear_has_street_network();
  ::pbnavitia::StreetNetwork* temp = street_network_;
  street_network_ = NULL;
  return temp;
}
void Section::set_allocated_street_network(::pbnavitia::StreetNetwork* street_network) {
  delete street_network_;
  street_network_ = street_network;
  if (street_network) {
    set_has_street_network();
  } else {
    clear_has_street_network();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.street_network)
}

// optional int32 cycle_lane_length = 30;
bool Section::has_cycle_lane_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Section::set_has_cycle_lane_length() {
  _has_bits_[0] |= 0x00000100u;
}
void Section::clear_has_cycle_lane_length() {
  _has_bits_[0] &= ~0x00000100u;
}
void Section::clear_cycle_lane_length() {
  cycle_lane_length_ = 0;
  clear_has_cycle_lane_length();
}
 ::google::protobuf::int32 Section::cycle_lane_length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.cycle_lane_length)
  return cycle_lane_length_;
}
 void Section::set_cycle_lane_length(::google::protobuf::int32 value) {
  set_has_cycle_lane_length();
  cycle_lane_length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.cycle_lane_length)
}

// optional .pbnavitia.TransferType transfer_type = 13;
bool Section::has_transfer_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Section::set_has_transfer_type() {
  _has_bits_[0] |= 0x00000200u;
}
void Section::clear_has_transfer_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void Section::clear_transfer_type() {
  transfer_type_ = 1;
  clear_has_transfer_type();
}
 ::pbnavitia::TransferType Section::transfer_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.transfer_type)
  return static_cast< ::pbnavitia::TransferType >(transfer_type_);
}
 void Section::set_transfer_type(::pbnavitia::TransferType value) {
  assert(::pbnavitia::TransferType_IsValid(value));
  set_has_transfer_type();
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.transfer_type)
}

// repeated .pbnavitia.Journey ridesharing_journeys = 28;
int Section::ridesharing_journeys_size() const {
  return ridesharing_journeys_.size();
}
void Section::clear_ridesharing_journeys() {
  ridesharing_journeys_.Clear();
}
const ::pbnavitia::Journey& Section::ridesharing_journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.ridesharing_journeys)
  return ridesharing_journeys_.Get(index);
}
::pbnavitia::Journey* Section::mutable_ridesharing_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.ridesharing_journeys)
  return ridesharing_journeys_.Mutable(index);
}
::pbnavitia::Journey* Section::add_ridesharing_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.Section.ridesharing_journeys)
  return ridesharing_journeys_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
Section::mutable_ridesharing_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Section.ridesharing_journeys)
  return &ridesharing_journeys_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
Section::ridesharing_journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Section.ridesharing_journeys)
  return ridesharing_journeys_;
}

// optional .pbnavitia.RidesharingInformation ridesharing_information = 29;
bool Section::has_ridesharing_information() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Section::set_has_ridesharing_information() {
  _has_bits_[0] |= 0x00000800u;
}
void Section::clear_has_ridesharing_information() {
  _has_bits_[0] &= ~0x00000800u;
}
void Section::clear_ridesharing_information() {
  if (ridesharing_information_ != NULL) ridesharing_information_->::pbnavitia::RidesharingInformation::Clear();
  clear_has_ridesharing_information();
}
const ::pbnavitia::RidesharingInformation& Section::ridesharing_information() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.ridesharing_information)
  return ridesharing_information_ != NULL ? *ridesharing_information_ : *default_instance_->ridesharing_information_;
}
::pbnavitia::RidesharingInformation* Section::mutable_ridesharing_information() {
  set_has_ridesharing_information();
  if (ridesharing_information_ == NULL) {
    ridesharing_information_ = new ::pbnavitia::RidesharingInformation;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.ridesharing_information)
  return ridesharing_information_;
}
::pbnavitia::RidesharingInformation* Section::release_ridesharing_information() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.ridesharing_information)
  clear_has_ridesharing_information();
  ::pbnavitia::RidesharingInformation* temp = ridesharing_information_;
  ridesharing_information_ = NULL;
  return temp;
}
void Section::set_allocated_ridesharing_information(::pbnavitia::RidesharingInformation* ridesharing_information) {
  delete ridesharing_information_;
  ridesharing_information_ = ridesharing_information;
  if (ridesharing_information) {
    set_has_ridesharing_information();
  } else {
    clear_has_ridesharing_information();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.ridesharing_information)
}

// repeated .pbnavitia.GeographicalCoord shape = 24;
int Section::shape_size() const {
  return shape_.size();
}
void Section::clear_shape() {
  shape_.Clear();
}
const ::pbnavitia::GeographicalCoord& Section::shape(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.shape)
  return shape_.Get(index);
}
::pbnavitia::GeographicalCoord* Section::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.shape)
  return shape_.Mutable(index);
}
::pbnavitia::GeographicalCoord* Section::add_shape() {
  // @@protoc_insertion_point(field_add:pbnavitia.Section.shape)
  return shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >*
Section::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Section.shape)
  return &shape_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GeographicalCoord >&
Section::shape() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Section.shape)
  return shape_;
}

// optional int32 duration = 15;
bool Section::has_duration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Section::set_has_duration() {
  _has_bits_[0] |= 0x00002000u;
}
void Section::clear_has_duration() {
  _has_bits_[0] &= ~0x00002000u;
}
void Section::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
 ::google::protobuf::int32 Section::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.duration)
  return duration_;
}
 void Section::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.duration)
}

// optional uint64 begin_date_time = 16;
bool Section::has_begin_date_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Section::set_has_begin_date_time() {
  _has_bits_[0] |= 0x00004000u;
}
void Section::clear_has_begin_date_time() {
  _has_bits_[0] &= ~0x00004000u;
}
void Section::clear_begin_date_time() {
  begin_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_date_time();
}
 ::google::protobuf::uint64 Section::begin_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.begin_date_time)
  return begin_date_time_;
}
 void Section::set_begin_date_time(::google::protobuf::uint64 value) {
  set_has_begin_date_time();
  begin_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.begin_date_time)
}

// optional uint64 end_date_time = 17;
bool Section::has_end_date_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Section::set_has_end_date_time() {
  _has_bits_[0] |= 0x00008000u;
}
void Section::clear_has_end_date_time() {
  _has_bits_[0] &= ~0x00008000u;
}
void Section::clear_end_date_time() {
  end_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_date_time();
}
 ::google::protobuf::uint64 Section::end_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.end_date_time)
  return end_date_time_;
}
 void Section::set_end_date_time(::google::protobuf::uint64 value) {
  set_has_end_date_time();
  end_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.end_date_time)
}

// optional uint64 base_begin_date_time = 25;
bool Section::has_base_begin_date_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Section::set_has_base_begin_date_time() {
  _has_bits_[0] |= 0x00010000u;
}
void Section::clear_has_base_begin_date_time() {
  _has_bits_[0] &= ~0x00010000u;
}
void Section::clear_base_begin_date_time() {
  base_begin_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_begin_date_time();
}
 ::google::protobuf::uint64 Section::base_begin_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.base_begin_date_time)
  return base_begin_date_time_;
}
 void Section::set_base_begin_date_time(::google::protobuf::uint64 value) {
  set_has_base_begin_date_time();
  base_begin_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.base_begin_date_time)
}

// optional uint64 base_end_date_time = 26;
bool Section::has_base_end_date_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Section::set_has_base_end_date_time() {
  _has_bits_[0] |= 0x00020000u;
}
void Section::clear_has_base_end_date_time() {
  _has_bits_[0] &= ~0x00020000u;
}
void Section::clear_base_end_date_time() {
  base_end_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_end_date_time();
}
 ::google::protobuf::uint64 Section::base_end_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.base_end_date_time)
  return base_end_date_time_;
}
 void Section::set_base_end_date_time(::google::protobuf::uint64 value) {
  set_has_base_end_date_time();
  base_end_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.base_end_date_time)
}

// optional .pbnavitia.RTLevel realtime_level = 27;
bool Section::has_realtime_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Section::set_has_realtime_level() {
  _has_bits_[0] |= 0x00040000u;
}
void Section::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00040000u;
}
void Section::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
 ::pbnavitia::RTLevel Section::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
 void Section::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.realtime_level)
}

// optional int32 length = 19;
bool Section::has_length() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Section::set_has_length() {
  _has_bits_[0] |= 0x00080000u;
}
void Section::clear_has_length() {
  _has_bits_[0] &= ~0x00080000u;
}
void Section::clear_length() {
  length_ = 0;
  clear_has_length();
}
 ::google::protobuf::int32 Section::length() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.length)
  return length_;
}
 void Section::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Section.length)
}

// optional string id = 20;
bool Section::has_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Section::set_has_id() {
  _has_bits_[0] |= 0x00100000u;
}
void Section::clear_has_id() {
  _has_bits_[0] &= ~0x00100000u;
}
void Section::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Section::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Section::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Section.id)
}
 void Section::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Section.id)
}
 void Section::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Section.id)
}
 ::std::string* Section::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Section::release_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Section::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.id)
}

// optional .pbnavitia.Co2Emission co2_emission = 21;
bool Section::has_co2_emission() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Section::set_has_co2_emission() {
  _has_bits_[0] |= 0x00200000u;
}
void Section::clear_has_co2_emission() {
  _has_bits_[0] &= ~0x00200000u;
}
void Section::clear_co2_emission() {
  if (co2_emission_ != NULL) co2_emission_->::pbnavitia::Co2Emission::Clear();
  clear_has_co2_emission();
}
const ::pbnavitia::Co2Emission& Section::co2_emission() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.co2_emission)
  return co2_emission_ != NULL ? *co2_emission_ : *default_instance_->co2_emission_;
}
::pbnavitia::Co2Emission* Section::mutable_co2_emission() {
  set_has_co2_emission();
  if (co2_emission_ == NULL) {
    co2_emission_ = new ::pbnavitia::Co2Emission;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Section.co2_emission)
  return co2_emission_;
}
::pbnavitia::Co2Emission* Section::release_co2_emission() {
  // @@protoc_insertion_point(field_release:pbnavitia.Section.co2_emission)
  clear_has_co2_emission();
  ::pbnavitia::Co2Emission* temp = co2_emission_;
  co2_emission_ = NULL;
  return temp;
}
void Section::set_allocated_co2_emission(::pbnavitia::Co2Emission* co2_emission) {
  delete co2_emission_;
  co2_emission_ = co2_emission;
  if (co2_emission) {
    set_has_co2_emission();
  } else {
    clear_has_co2_emission();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Section.co2_emission)
}

// repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 22;
int Section::additional_informations_size() const {
  return additional_informations_.size();
}
void Section::clear_additional_informations() {
  additional_informations_.Clear();
}
 ::pbnavitia::SectionAdditionalInformationType Section::additional_informations(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Section.additional_informations)
  return static_cast< ::pbnavitia::SectionAdditionalInformationType >(additional_informations_.Get(index));
}
 void Section::set_additional_informations(int index, ::pbnavitia::SectionAdditionalInformationType value) {
  assert(::pbnavitia::SectionAdditionalInformationType_IsValid(value));
  additional_informations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.Section.additional_informations)
}
 void Section::add_additional_informations(::pbnavitia::SectionAdditionalInformationType value) {
  assert(::pbnavitia::SectionAdditionalInformationType_IsValid(value));
  additional_informations_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Section.additional_informations)
}
 const ::google::protobuf::RepeatedField<int>&
Section::additional_informations() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Section.additional_informations)
  return additional_informations_;
}
 ::google::protobuf::RepeatedField<int>*
Section::mutable_additional_informations() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Section.additional_informations)
  return &additional_informations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Journey::kDurationFieldNumber;
const int Journey::kNbTransfersFieldNumber;
const int Journey::kDepartureDateTimeFieldNumber;
const int Journey::kArrivalDateTimeFieldNumber;
const int Journey::kRequestedDateTimeFieldNumber;
const int Journey::kSectionsFieldNumber;
const int Journey::kOriginFieldNumber;
const int Journey::kDestinationFieldNumber;
const int Journey::kTypeFieldNumber;
const int Journey::kFareFieldNumber;
const int Journey::kTagsFieldNumber;
const int Journey::kCalendarsFieldNumber;
const int Journey::kCo2EmissionFieldNumber;
const int Journey::kMostSeriousDisruptionEffectFieldNumber;
const int Journey::kInternalIdFieldNumber;
const int Journey::kSnDurFieldNumber;
const int Journey::kTransferDurFieldNumber;
const int Journey::kMinWaitingDurFieldNumber;
const int Journey::kNbVjExtentionsFieldNumber;
const int Journey::kNbSectionsFieldNumber;
const int Journey::kDurationsFieldNumber;
const int Journey::kDistancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Journey::Journey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Journey)
}

void Journey::InitAsDefaultInstance() {
  origin_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  destination_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  fare_ = const_cast< ::pbnavitia::Fare*>(&::pbnavitia::Fare::default_instance());
  co2_emission_ = const_cast< ::pbnavitia::Co2Emission*>(&::pbnavitia::Co2Emission::default_instance());
  durations_ = const_cast< ::pbnavitia::Durations*>(&::pbnavitia::Durations::default_instance());
  distances_ = const_cast< ::pbnavitia::Distances*>(&::pbnavitia::Distances::default_instance());
}

Journey::Journey(const Journey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Journey)
}

void Journey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  duration_ = 0;
  nb_transfers_ = 0;
  departure_date_time_ = GOOGLE_ULONGLONG(0);
  arrival_date_time_ = GOOGLE_ULONGLONG(0);
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  origin_ = NULL;
  destination_ = NULL;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fare_ = NULL;
  co2_emission_ = NULL;
  most_serious_disruption_effect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sn_dur_ = GOOGLE_ULONGLONG(0);
  transfer_dur_ = GOOGLE_ULONGLONG(0);
  min_waiting_dur_ = GOOGLE_ULONGLONG(0);
  nb_vj_extentions_ = 0u;
  nb_sections_ = 0u;
  durations_ = NULL;
  distances_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Journey::~Journey() {
  // @@protoc_insertion_point(destructor:pbnavitia.Journey)
  SharedDtor();
}

void Journey::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  most_serious_disruption_effect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete origin_;
    delete destination_;
    delete fare_;
    delete co2_emission_;
    delete durations_;
    delete distances_;
  }
}

void Journey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Journey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Journey_descriptor_;
}

const Journey& Journey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Journey* Journey::default_instance_ = NULL;

Journey* Journey::New(::google::protobuf::Arena* arena) const {
  Journey* n = new Journey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Journey::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Journey)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Journey, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Journey*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    ZR_(duration_, requested_date_time_);
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 62208u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fare()) {
      if (fare_ != NULL) fare_->::pbnavitia::Fare::Clear();
    }
    if (has_co2_emission()) {
      if (co2_emission_ != NULL) co2_emission_->::pbnavitia::Co2Emission::Clear();
    }
    if (has_most_serious_disruption_effect()) {
      most_serious_disruption_effect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_internal_id()) {
      internal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sn_dur_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(transfer_dur_, nb_sections_);
    if (has_durations()) {
      if (durations_ != NULL) durations_->::pbnavitia::Durations::Clear();
    }
    if (has_distances()) {
      if (distances_ != NULL) distances_->::pbnavitia::Distances::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  sections_.Clear();
  tags_.Clear();
  calendars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Journey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Journey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nb_transfers;
        break;
      }

      // optional int32 nb_transfers = 2;
      case 2: {
        if (tag == 16) {
         parse_nb_transfers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nb_transfers_)));
          set_has_nb_transfers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_departure_date_time;
        break;
      }

      // optional uint64 departure_date_time = 3;
      case 3: {
        if (tag == 24) {
         parse_departure_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &departure_date_time_)));
          set_has_departure_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_arrival_date_time;
        break;
      }

      // optional uint64 arrival_date_time = 4;
      case 4: {
        if (tag == 32) {
         parse_arrival_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arrival_date_time_)));
          set_has_arrival_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_requested_date_time;
        break;
      }

      // optional uint64 requested_date_time = 5;
      case 5: {
        if (tag == 40) {
         parse_requested_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requested_date_time_)));
          set_has_requested_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sections;
        break;
      }

      // repeated .pbnavitia.Section sections = 6;
      case 6: {
        if (tag == 50) {
         parse_sections:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_sections;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_origin;
        break;
      }

      // optional .pbnavitia.PtObject origin = 7;
      case 7: {
        if (tag == 58) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_destination;
        break;
      }

      // optional .pbnavitia.PtObject destination = 8;
      case 8: {
        if (tag == 66) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_type;
        break;
      }

      // optional string type = 9;
      case 9: {
        if (tag == 74) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Journey.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_fare;
        break;
      }

      // optional .pbnavitia.Fare fare = 10;
      case 10: {
        if (tag == 82) {
         parse_fare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        break;
      }

      // repeated string tags = 11;
      case 11: {
        if (tag == 90) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Journey.tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        if (input->ExpectTag(98)) goto parse_calendars;
        break;
      }

      // repeated .pbnavitia.Calendar calendars = 12;
      case 12: {
        if (tag == 98) {
         parse_calendars:
          DO_(input->IncrementRecursionDepth());
         parse_loop_calendars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_calendars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_calendars;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_co2_emission;
        break;
      }

      // optional .pbnavitia.Co2Emission co2_emission = 13;
      case 13: {
        if (tag == 106) {
         parse_co2_emission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_co2_emission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_most_serious_disruption_effect;
        break;
      }

      // optional string most_serious_disruption_effect = 14;
      case 14: {
        if (tag == 114) {
         parse_most_serious_disruption_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_most_serious_disruption_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->most_serious_disruption_effect().data(), this->most_serious_disruption_effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Journey.most_serious_disruption_effect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_internal_id;
        break;
      }

      // optional string internal_id = 15;
      case 15: {
        if (tag == 122) {
         parse_internal_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->internal_id().data(), this->internal_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Journey.internal_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_sn_dur;
        break;
      }

      // optional uint64 sn_dur = 16;
      case 16: {
        if (tag == 128) {
         parse_sn_dur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sn_dur_)));
          set_has_sn_dur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_transfer_dur;
        break;
      }

      // optional uint64 transfer_dur = 17;
      case 17: {
        if (tag == 136) {
         parse_transfer_dur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transfer_dur_)));
          set_has_transfer_dur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_min_waiting_dur;
        break;
      }

      // optional uint64 min_waiting_dur = 18;
      case 18: {
        if (tag == 144) {
         parse_min_waiting_dur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_waiting_dur_)));
          set_has_min_waiting_dur();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_nb_vj_extentions;
        break;
      }

      // optional uint32 nb_vj_extentions = 19;
      case 19: {
        if (tag == 152) {
         parse_nb_vj_extentions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nb_vj_extentions_)));
          set_has_nb_vj_extentions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_nb_sections;
        break;
      }

      // optional uint32 nb_sections = 20;
      case 20: {
        if (tag == 160) {
         parse_nb_sections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nb_sections_)));
          set_has_nb_sections();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_durations;
        break;
      }

      // optional .pbnavitia.Durations durations = 21;
      case 21: {
        if (tag == 170) {
         parse_durations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_durations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_distances;
        break;
      }

      // optional .pbnavitia.Distances distances = 22;
      case 22: {
        if (tag == 178) {
         parse_distances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distances()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Journey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Journey)
  return false;
#undef DO_
}

void Journey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Journey)
  // optional int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional int32 nb_transfers = 2;
  if (has_nb_transfers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nb_transfers(), output);
  }

  // optional uint64 departure_date_time = 3;
  if (has_departure_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->departure_date_time(), output);
  }

  // optional uint64 arrival_date_time = 4;
  if (has_arrival_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->arrival_date_time(), output);
  }

  // optional uint64 requested_date_time = 5;
  if (has_requested_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->requested_date_time(), output);
  }

  // repeated .pbnavitia.Section sections = 6;
  for (unsigned int i = 0, n = this->sections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sections(i), output);
  }

  // optional .pbnavitia.PtObject origin = 7;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->origin_, output);
  }

  // optional .pbnavitia.PtObject destination = 8;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->destination_, output);
  }

  // optional string type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Journey.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->type(), output);
  }

  // optional .pbnavitia.Fare fare = 10;
  if (has_fare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->fare_, output);
  }

  // repeated string tags = 11;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Journey.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->tags(i), output);
  }

  // repeated .pbnavitia.Calendar calendars = 12;
  for (unsigned int i = 0, n = this->calendars_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->calendars(i), output);
  }

  // optional .pbnavitia.Co2Emission co2_emission = 13;
  if (has_co2_emission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->co2_emission_, output);
  }

  // optional string most_serious_disruption_effect = 14;
  if (has_most_serious_disruption_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->most_serious_disruption_effect().data(), this->most_serious_disruption_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Journey.most_serious_disruption_effect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->most_serious_disruption_effect(), output);
  }

  // optional string internal_id = 15;
  if (has_internal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->internal_id().data(), this->internal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Journey.internal_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->internal_id(), output);
  }

  // optional uint64 sn_dur = 16;
  if (has_sn_dur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->sn_dur(), output);
  }

  // optional uint64 transfer_dur = 17;
  if (has_transfer_dur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->transfer_dur(), output);
  }

  // optional uint64 min_waiting_dur = 18;
  if (has_min_waiting_dur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->min_waiting_dur(), output);
  }

  // optional uint32 nb_vj_extentions = 19;
  if (has_nb_vj_extentions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->nb_vj_extentions(), output);
  }

  // optional uint32 nb_sections = 20;
  if (has_nb_sections()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->nb_sections(), output);
  }

  // optional .pbnavitia.Durations durations = 21;
  if (has_durations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->durations_, output);
  }

  // optional .pbnavitia.Distances distances = 22;
  if (has_distances()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->distances_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Journey)
}

::google::protobuf::uint8* Journey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Journey)
  // optional int32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // optional int32 nb_transfers = 2;
  if (has_nb_transfers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nb_transfers(), target);
  }

  // optional uint64 departure_date_time = 3;
  if (has_departure_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->departure_date_time(), target);
  }

  // optional uint64 arrival_date_time = 4;
  if (has_arrival_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->arrival_date_time(), target);
  }

  // optional uint64 requested_date_time = 5;
  if (has_requested_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->requested_date_time(), target);
  }

  // repeated .pbnavitia.Section sections = 6;
  for (unsigned int i = 0, n = this->sections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->sections(i), false, target);
  }

  // optional .pbnavitia.PtObject origin = 7;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->origin_, false, target);
  }

  // optional .pbnavitia.PtObject destination = 8;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->destination_, false, target);
  }

  // optional string type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Journey.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->type(), target);
  }

  // optional .pbnavitia.Fare fare = 10;
  if (has_fare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->fare_, false, target);
  }

  // repeated string tags = 11;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Journey.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->tags(i), target);
  }

  // repeated .pbnavitia.Calendar calendars = 12;
  for (unsigned int i = 0, n = this->calendars_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->calendars(i), false, target);
  }

  // optional .pbnavitia.Co2Emission co2_emission = 13;
  if (has_co2_emission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->co2_emission_, false, target);
  }

  // optional string most_serious_disruption_effect = 14;
  if (has_most_serious_disruption_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->most_serious_disruption_effect().data(), this->most_serious_disruption_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Journey.most_serious_disruption_effect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->most_serious_disruption_effect(), target);
  }

  // optional string internal_id = 15;
  if (has_internal_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->internal_id().data(), this->internal_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Journey.internal_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->internal_id(), target);
  }

  // optional uint64 sn_dur = 16;
  if (has_sn_dur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->sn_dur(), target);
  }

  // optional uint64 transfer_dur = 17;
  if (has_transfer_dur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->transfer_dur(), target);
  }

  // optional uint64 min_waiting_dur = 18;
  if (has_min_waiting_dur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->min_waiting_dur(), target);
  }

  // optional uint32 nb_vj_extentions = 19;
  if (has_nb_vj_extentions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->nb_vj_extentions(), target);
  }

  // optional uint32 nb_sections = 20;
  if (has_nb_sections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->nb_sections(), target);
  }

  // optional .pbnavitia.Durations durations = 21;
  if (has_durations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->durations_, false, target);
  }

  // optional .pbnavitia.Distances distances = 22;
  if (has_distances()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->distances_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Journey)
  return target;
}

int Journey::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Journey)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 223u) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 nb_transfers = 2;
    if (has_nb_transfers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_transfers());
    }

    // optional uint64 departure_date_time = 3;
    if (has_departure_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->departure_date_time());
    }

    // optional uint64 arrival_date_time = 4;
    if (has_arrival_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arrival_date_time());
    }

    // optional uint64 requested_date_time = 5;
    if (has_requested_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requested_date_time());
    }

    // optional .pbnavitia.PtObject origin = 7;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .pbnavitia.PtObject destination = 8;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

  }
  if (_has_bits_[8 / 32] & 62208u) {
    // optional string type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .pbnavitia.Fare fare = 10;
    if (has_fare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fare_);
    }

    // optional .pbnavitia.Co2Emission co2_emission = 13;
    if (has_co2_emission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->co2_emission_);
    }

    // optional string most_serious_disruption_effect = 14;
    if (has_most_serious_disruption_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->most_serious_disruption_effect());
    }

    // optional string internal_id = 15;
    if (has_internal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->internal_id());
    }

    // optional uint64 sn_dur = 16;
    if (has_sn_dur()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sn_dur());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint64 transfer_dur = 17;
    if (has_transfer_dur()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transfer_dur());
    }

    // optional uint64 min_waiting_dur = 18;
    if (has_min_waiting_dur()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_waiting_dur());
    }

    // optional uint32 nb_vj_extentions = 19;
    if (has_nb_vj_extentions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nb_vj_extentions());
    }

    // optional uint32 nb_sections = 20;
    if (has_nb_sections()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nb_sections());
    }

    // optional .pbnavitia.Durations durations = 21;
    if (has_durations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->durations_);
    }

    // optional .pbnavitia.Distances distances = 22;
    if (has_distances()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->distances_);
    }

  }
  // repeated .pbnavitia.Section sections = 6;
  total_size += 1 * this->sections_size();
  for (int i = 0; i < this->sections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sections(i));
  }

  // repeated string tags = 11;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .pbnavitia.Calendar calendars = 12;
  total_size += 1 * this->calendars_size();
  for (int i = 0; i < this->calendars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calendars(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Journey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Journey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Journey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Journey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Journey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Journey)
    MergeFrom(*source);
  }
}

void Journey::MergeFrom(const Journey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Journey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sections_.MergeFrom(from.sections_);
  tags_.MergeFrom(from.tags_);
  calendars_.MergeFrom(from.calendars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_nb_transfers()) {
      set_nb_transfers(from.nb_transfers());
    }
    if (from.has_departure_date_time()) {
      set_departure_date_time(from.departure_date_time());
    }
    if (from.has_arrival_date_time()) {
      set_arrival_date_time(from.arrival_date_time());
    }
    if (from.has_requested_date_time()) {
      set_requested_date_time(from.requested_date_time());
    }
    if (from.has_origin()) {
      mutable_origin()->::pbnavitia::PtObject::MergeFrom(from.origin());
    }
    if (from.has_destination()) {
      mutable_destination()->::pbnavitia::PtObject::MergeFrom(from.destination());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_fare()) {
      mutable_fare()->::pbnavitia::Fare::MergeFrom(from.fare());
    }
    if (from.has_co2_emission()) {
      mutable_co2_emission()->::pbnavitia::Co2Emission::MergeFrom(from.co2_emission());
    }
    if (from.has_most_serious_disruption_effect()) {
      set_has_most_serious_disruption_effect();
      most_serious_disruption_effect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.most_serious_disruption_effect_);
    }
    if (from.has_internal_id()) {
      set_has_internal_id();
      internal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_id_);
    }
    if (from.has_sn_dur()) {
      set_sn_dur(from.sn_dur());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_transfer_dur()) {
      set_transfer_dur(from.transfer_dur());
    }
    if (from.has_min_waiting_dur()) {
      set_min_waiting_dur(from.min_waiting_dur());
    }
    if (from.has_nb_vj_extentions()) {
      set_nb_vj_extentions(from.nb_vj_extentions());
    }
    if (from.has_nb_sections()) {
      set_nb_sections(from.nb_sections());
    }
    if (from.has_durations()) {
      mutable_durations()->::pbnavitia::Durations::MergeFrom(from.durations());
    }
    if (from.has_distances()) {
      mutable_distances()->::pbnavitia::Distances::MergeFrom(from.distances());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Journey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Journey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Journey::CopyFrom(const Journey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Journey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Journey::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->sections())) return false;
  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  return true;
}

void Journey::Swap(Journey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Journey::InternalSwap(Journey* other) {
  std::swap(duration_, other->duration_);
  std::swap(nb_transfers_, other->nb_transfers_);
  std::swap(departure_date_time_, other->departure_date_time_);
  std::swap(arrival_date_time_, other->arrival_date_time_);
  std::swap(requested_date_time_, other->requested_date_time_);
  sections_.UnsafeArenaSwap(&other->sections_);
  std::swap(origin_, other->origin_);
  std::swap(destination_, other->destination_);
  type_.Swap(&other->type_);
  std::swap(fare_, other->fare_);
  tags_.UnsafeArenaSwap(&other->tags_);
  calendars_.UnsafeArenaSwap(&other->calendars_);
  std::swap(co2_emission_, other->co2_emission_);
  most_serious_disruption_effect_.Swap(&other->most_serious_disruption_effect_);
  internal_id_.Swap(&other->internal_id_);
  std::swap(sn_dur_, other->sn_dur_);
  std::swap(transfer_dur_, other->transfer_dur_);
  std::swap(min_waiting_dur_, other->min_waiting_dur_);
  std::swap(nb_vj_extentions_, other->nb_vj_extentions_);
  std::swap(nb_sections_, other->nb_sections_);
  std::swap(durations_, other->durations_);
  std::swap(distances_, other->distances_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Journey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Journey_descriptor_;
  metadata.reflection = Journey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Journey

// optional int32 duration = 1;
bool Journey::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Journey::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void Journey::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void Journey::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
 ::google::protobuf::int32 Journey::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.duration)
  return duration_;
}
 void Journey::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.duration)
}

// optional int32 nb_transfers = 2;
bool Journey::has_nb_transfers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Journey::set_has_nb_transfers() {
  _has_bits_[0] |= 0x00000002u;
}
void Journey::clear_has_nb_transfers() {
  _has_bits_[0] &= ~0x00000002u;
}
void Journey::clear_nb_transfers() {
  nb_transfers_ = 0;
  clear_has_nb_transfers();
}
 ::google::protobuf::int32 Journey::nb_transfers() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.nb_transfers)
  return nb_transfers_;
}
 void Journey::set_nb_transfers(::google::protobuf::int32 value) {
  set_has_nb_transfers();
  nb_transfers_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.nb_transfers)
}

// optional uint64 departure_date_time = 3;
bool Journey::has_departure_date_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Journey::set_has_departure_date_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Journey::clear_has_departure_date_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Journey::clear_departure_date_time() {
  departure_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_departure_date_time();
}
 ::google::protobuf::uint64 Journey::departure_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.departure_date_time)
  return departure_date_time_;
}
 void Journey::set_departure_date_time(::google::protobuf::uint64 value) {
  set_has_departure_date_time();
  departure_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.departure_date_time)
}

// optional uint64 arrival_date_time = 4;
bool Journey::has_arrival_date_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Journey::set_has_arrival_date_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Journey::clear_has_arrival_date_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Journey::clear_arrival_date_time() {
  arrival_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_arrival_date_time();
}
 ::google::protobuf::uint64 Journey::arrival_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.arrival_date_time)
  return arrival_date_time_;
}
 void Journey::set_arrival_date_time(::google::protobuf::uint64 value) {
  set_has_arrival_date_time();
  arrival_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.arrival_date_time)
}

// optional uint64 requested_date_time = 5;
bool Journey::has_requested_date_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Journey::set_has_requested_date_time() {
  _has_bits_[0] |= 0x00000010u;
}
void Journey::clear_has_requested_date_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void Journey::clear_requested_date_time() {
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_requested_date_time();
}
 ::google::protobuf::uint64 Journey::requested_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.requested_date_time)
  return requested_date_time_;
}
 void Journey::set_requested_date_time(::google::protobuf::uint64 value) {
  set_has_requested_date_time();
  requested_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.requested_date_time)
}

// repeated .pbnavitia.Section sections = 6;
int Journey::sections_size() const {
  return sections_.size();
}
void Journey::clear_sections() {
  sections_.Clear();
}
const ::pbnavitia::Section& Journey::sections(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.sections)
  return sections_.Get(index);
}
::pbnavitia::Section* Journey::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.sections)
  return sections_.Mutable(index);
}
::pbnavitia::Section* Journey::add_sections() {
  // @@protoc_insertion_point(field_add:pbnavitia.Journey.sections)
  return sections_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Section >*
Journey::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Journey.sections)
  return &sections_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Section >&
Journey::sections() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Journey.sections)
  return sections_;
}

// optional .pbnavitia.PtObject origin = 7;
bool Journey::has_origin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Journey::set_has_origin() {
  _has_bits_[0] |= 0x00000040u;
}
void Journey::clear_has_origin() {
  _has_bits_[0] &= ~0x00000040u;
}
void Journey::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
  clear_has_origin();
}
const ::pbnavitia::PtObject& Journey::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::pbnavitia::PtObject* Journey::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.origin)
  return origin_;
}
::pbnavitia::PtObject* Journey::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.origin)
  clear_has_origin();
  ::pbnavitia::PtObject* temp = origin_;
  origin_ = NULL;
  return temp;
}
void Journey::set_allocated_origin(::pbnavitia::PtObject* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.origin)
}

// optional .pbnavitia.PtObject destination = 8;
bool Journey::has_destination() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Journey::set_has_destination() {
  _has_bits_[0] |= 0x00000080u;
}
void Journey::clear_has_destination() {
  _has_bits_[0] &= ~0x00000080u;
}
void Journey::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
  clear_has_destination();
}
const ::pbnavitia::PtObject& Journey::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::pbnavitia::PtObject* Journey::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.destination)
  return destination_;
}
::pbnavitia::PtObject* Journey::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.destination)
  clear_has_destination();
  ::pbnavitia::PtObject* temp = destination_;
  destination_ = NULL;
  return temp;
}
void Journey::set_allocated_destination(::pbnavitia::PtObject* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.destination)
}

// optional string type = 9;
bool Journey::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Journey::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void Journey::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void Journey::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Journey::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Journey::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.type)
}
 void Journey::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Journey.type)
}
 void Journey::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Journey.type)
}
 ::std::string* Journey::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Journey::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Journey::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.type)
}

// optional .pbnavitia.Fare fare = 10;
bool Journey::has_fare() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Journey::set_has_fare() {
  _has_bits_[0] |= 0x00000200u;
}
void Journey::clear_has_fare() {
  _has_bits_[0] &= ~0x00000200u;
}
void Journey::clear_fare() {
  if (fare_ != NULL) fare_->::pbnavitia::Fare::Clear();
  clear_has_fare();
}
const ::pbnavitia::Fare& Journey::fare() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.fare)
  return fare_ != NULL ? *fare_ : *default_instance_->fare_;
}
::pbnavitia::Fare* Journey::mutable_fare() {
  set_has_fare();
  if (fare_ == NULL) {
    fare_ = new ::pbnavitia::Fare;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.fare)
  return fare_;
}
::pbnavitia::Fare* Journey::release_fare() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.fare)
  clear_has_fare();
  ::pbnavitia::Fare* temp = fare_;
  fare_ = NULL;
  return temp;
}
void Journey::set_allocated_fare(::pbnavitia::Fare* fare) {
  delete fare_;
  fare_ = fare;
  if (fare) {
    set_has_fare();
  } else {
    clear_has_fare();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.fare)
}

// repeated string tags = 11;
int Journey::tags_size() const {
  return tags_.size();
}
void Journey::clear_tags() {
  tags_.Clear();
}
 const ::std::string& Journey::tags(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.tags)
  return tags_.Get(index);
}
 ::std::string* Journey::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.tags)
  return tags_.Mutable(index);
}
 void Journey::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.tags)
  tags_.Mutable(index)->assign(value);
}
 void Journey::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Journey.tags)
}
 void Journey::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Journey.tags)
}
 ::std::string* Journey::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Journey.tags)
  return tags_.Add();
}
 void Journey::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Journey.tags)
}
 void Journey::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Journey.tags)
}
 void Journey::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Journey.tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Journey::tags() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Journey.tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Journey::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Journey.tags)
  return &tags_;
}

// repeated .pbnavitia.Calendar calendars = 12;
int Journey::calendars_size() const {
  return calendars_.size();
}
void Journey::clear_calendars() {
  calendars_.Clear();
}
const ::pbnavitia::Calendar& Journey::calendars(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.calendars)
  return calendars_.Get(index);
}
::pbnavitia::Calendar* Journey::mutable_calendars(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.calendars)
  return calendars_.Mutable(index);
}
::pbnavitia::Calendar* Journey::add_calendars() {
  // @@protoc_insertion_point(field_add:pbnavitia.Journey.calendars)
  return calendars_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
Journey::mutable_calendars() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Journey.calendars)
  return &calendars_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
Journey::calendars() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Journey.calendars)
  return calendars_;
}

// optional .pbnavitia.Co2Emission co2_emission = 13;
bool Journey::has_co2_emission() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Journey::set_has_co2_emission() {
  _has_bits_[0] |= 0x00001000u;
}
void Journey::clear_has_co2_emission() {
  _has_bits_[0] &= ~0x00001000u;
}
void Journey::clear_co2_emission() {
  if (co2_emission_ != NULL) co2_emission_->::pbnavitia::Co2Emission::Clear();
  clear_has_co2_emission();
}
const ::pbnavitia::Co2Emission& Journey::co2_emission() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.co2_emission)
  return co2_emission_ != NULL ? *co2_emission_ : *default_instance_->co2_emission_;
}
::pbnavitia::Co2Emission* Journey::mutable_co2_emission() {
  set_has_co2_emission();
  if (co2_emission_ == NULL) {
    co2_emission_ = new ::pbnavitia::Co2Emission;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.co2_emission)
  return co2_emission_;
}
::pbnavitia::Co2Emission* Journey::release_co2_emission() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.co2_emission)
  clear_has_co2_emission();
  ::pbnavitia::Co2Emission* temp = co2_emission_;
  co2_emission_ = NULL;
  return temp;
}
void Journey::set_allocated_co2_emission(::pbnavitia::Co2Emission* co2_emission) {
  delete co2_emission_;
  co2_emission_ = co2_emission;
  if (co2_emission) {
    set_has_co2_emission();
  } else {
    clear_has_co2_emission();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.co2_emission)
}

// optional string most_serious_disruption_effect = 14;
bool Journey::has_most_serious_disruption_effect() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Journey::set_has_most_serious_disruption_effect() {
  _has_bits_[0] |= 0x00002000u;
}
void Journey::clear_has_most_serious_disruption_effect() {
  _has_bits_[0] &= ~0x00002000u;
}
void Journey::clear_most_serious_disruption_effect() {
  most_serious_disruption_effect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_most_serious_disruption_effect();
}
 const ::std::string& Journey::most_serious_disruption_effect() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.most_serious_disruption_effect)
  return most_serious_disruption_effect_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Journey::set_most_serious_disruption_effect(const ::std::string& value) {
  set_has_most_serious_disruption_effect();
  most_serious_disruption_effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.most_serious_disruption_effect)
}
 void Journey::set_most_serious_disruption_effect(const char* value) {
  set_has_most_serious_disruption_effect();
  most_serious_disruption_effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Journey.most_serious_disruption_effect)
}
 void Journey::set_most_serious_disruption_effect(const char* value, size_t size) {
  set_has_most_serious_disruption_effect();
  most_serious_disruption_effect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Journey.most_serious_disruption_effect)
}
 ::std::string* Journey::mutable_most_serious_disruption_effect() {
  set_has_most_serious_disruption_effect();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.most_serious_disruption_effect)
  return most_serious_disruption_effect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Journey::release_most_serious_disruption_effect() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.most_serious_disruption_effect)
  clear_has_most_serious_disruption_effect();
  return most_serious_disruption_effect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Journey::set_allocated_most_serious_disruption_effect(::std::string* most_serious_disruption_effect) {
  if (most_serious_disruption_effect != NULL) {
    set_has_most_serious_disruption_effect();
  } else {
    clear_has_most_serious_disruption_effect();
  }
  most_serious_disruption_effect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), most_serious_disruption_effect);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.most_serious_disruption_effect)
}

// optional string internal_id = 15;
bool Journey::has_internal_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Journey::set_has_internal_id() {
  _has_bits_[0] |= 0x00004000u;
}
void Journey::clear_has_internal_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void Journey::clear_internal_id() {
  internal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_internal_id();
}
 const ::std::string& Journey::internal_id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.internal_id)
  return internal_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Journey::set_internal_id(const ::std::string& value) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.internal_id)
}
 void Journey::set_internal_id(const char* value) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Journey.internal_id)
}
 void Journey::set_internal_id(const char* value, size_t size) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Journey.internal_id)
}
 ::std::string* Journey::mutable_internal_id() {
  set_has_internal_id();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.internal_id)
  return internal_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Journey::release_internal_id() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.internal_id)
  clear_has_internal_id();
  return internal_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Journey::set_allocated_internal_id(::std::string* internal_id) {
  if (internal_id != NULL) {
    set_has_internal_id();
  } else {
    clear_has_internal_id();
  }
  internal_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_id);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.internal_id)
}

// optional uint64 sn_dur = 16;
bool Journey::has_sn_dur() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Journey::set_has_sn_dur() {
  _has_bits_[0] |= 0x00008000u;
}
void Journey::clear_has_sn_dur() {
  _has_bits_[0] &= ~0x00008000u;
}
void Journey::clear_sn_dur() {
  sn_dur_ = GOOGLE_ULONGLONG(0);
  clear_has_sn_dur();
}
 ::google::protobuf::uint64 Journey::sn_dur() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.sn_dur)
  return sn_dur_;
}
 void Journey::set_sn_dur(::google::protobuf::uint64 value) {
  set_has_sn_dur();
  sn_dur_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.sn_dur)
}

// optional uint64 transfer_dur = 17;
bool Journey::has_transfer_dur() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Journey::set_has_transfer_dur() {
  _has_bits_[0] |= 0x00010000u;
}
void Journey::clear_has_transfer_dur() {
  _has_bits_[0] &= ~0x00010000u;
}
void Journey::clear_transfer_dur() {
  transfer_dur_ = GOOGLE_ULONGLONG(0);
  clear_has_transfer_dur();
}
 ::google::protobuf::uint64 Journey::transfer_dur() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.transfer_dur)
  return transfer_dur_;
}
 void Journey::set_transfer_dur(::google::protobuf::uint64 value) {
  set_has_transfer_dur();
  transfer_dur_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.transfer_dur)
}

// optional uint64 min_waiting_dur = 18;
bool Journey::has_min_waiting_dur() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Journey::set_has_min_waiting_dur() {
  _has_bits_[0] |= 0x00020000u;
}
void Journey::clear_has_min_waiting_dur() {
  _has_bits_[0] &= ~0x00020000u;
}
void Journey::clear_min_waiting_dur() {
  min_waiting_dur_ = GOOGLE_ULONGLONG(0);
  clear_has_min_waiting_dur();
}
 ::google::protobuf::uint64 Journey::min_waiting_dur() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.min_waiting_dur)
  return min_waiting_dur_;
}
 void Journey::set_min_waiting_dur(::google::protobuf::uint64 value) {
  set_has_min_waiting_dur();
  min_waiting_dur_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.min_waiting_dur)
}

// optional uint32 nb_vj_extentions = 19;
bool Journey::has_nb_vj_extentions() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Journey::set_has_nb_vj_extentions() {
  _has_bits_[0] |= 0x00040000u;
}
void Journey::clear_has_nb_vj_extentions() {
  _has_bits_[0] &= ~0x00040000u;
}
void Journey::clear_nb_vj_extentions() {
  nb_vj_extentions_ = 0u;
  clear_has_nb_vj_extentions();
}
 ::google::protobuf::uint32 Journey::nb_vj_extentions() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.nb_vj_extentions)
  return nb_vj_extentions_;
}
 void Journey::set_nb_vj_extentions(::google::protobuf::uint32 value) {
  set_has_nb_vj_extentions();
  nb_vj_extentions_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.nb_vj_extentions)
}

// optional uint32 nb_sections = 20;
bool Journey::has_nb_sections() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Journey::set_has_nb_sections() {
  _has_bits_[0] |= 0x00080000u;
}
void Journey::clear_has_nb_sections() {
  _has_bits_[0] &= ~0x00080000u;
}
void Journey::clear_nb_sections() {
  nb_sections_ = 0u;
  clear_has_nb_sections();
}
 ::google::protobuf::uint32 Journey::nb_sections() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.nb_sections)
  return nb_sections_;
}
 void Journey::set_nb_sections(::google::protobuf::uint32 value) {
  set_has_nb_sections();
  nb_sections_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Journey.nb_sections)
}

// optional .pbnavitia.Durations durations = 21;
bool Journey::has_durations() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Journey::set_has_durations() {
  _has_bits_[0] |= 0x00100000u;
}
void Journey::clear_has_durations() {
  _has_bits_[0] &= ~0x00100000u;
}
void Journey::clear_durations() {
  if (durations_ != NULL) durations_->::pbnavitia::Durations::Clear();
  clear_has_durations();
}
const ::pbnavitia::Durations& Journey::durations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.durations)
  return durations_ != NULL ? *durations_ : *default_instance_->durations_;
}
::pbnavitia::Durations* Journey::mutable_durations() {
  set_has_durations();
  if (durations_ == NULL) {
    durations_ = new ::pbnavitia::Durations;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.durations)
  return durations_;
}
::pbnavitia::Durations* Journey::release_durations() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.durations)
  clear_has_durations();
  ::pbnavitia::Durations* temp = durations_;
  durations_ = NULL;
  return temp;
}
void Journey::set_allocated_durations(::pbnavitia::Durations* durations) {
  delete durations_;
  durations_ = durations;
  if (durations) {
    set_has_durations();
  } else {
    clear_has_durations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.durations)
}

// optional .pbnavitia.Distances distances = 22;
bool Journey::has_distances() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Journey::set_has_distances() {
  _has_bits_[0] |= 0x00200000u;
}
void Journey::clear_has_distances() {
  _has_bits_[0] &= ~0x00200000u;
}
void Journey::clear_distances() {
  if (distances_ != NULL) distances_->::pbnavitia::Distances::Clear();
  clear_has_distances();
}
const ::pbnavitia::Distances& Journey::distances() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Journey.distances)
  return distances_ != NULL ? *distances_ : *default_instance_->distances_;
}
::pbnavitia::Distances* Journey::mutable_distances() {
  set_has_distances();
  if (distances_ == NULL) {
    distances_ = new ::pbnavitia::Distances;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Journey.distances)
  return distances_;
}
::pbnavitia::Distances* Journey::release_distances() {
  // @@protoc_insertion_point(field_release:pbnavitia.Journey.distances)
  clear_has_distances();
  ::pbnavitia::Distances* temp = distances_;
  distances_ = NULL;
  return temp;
}
void Journey::set_allocated_distances(::pbnavitia::Distances* distances) {
  delete distances_;
  distances_ = distances;
  if (distances) {
    set_has_distances();
  } else {
    clear_has_distances();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Journey.distances)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Planner::kJourneysFieldNumber;
const int Planner::kResponseTypeFieldNumber;
const int Planner::kBeforeFieldNumber;
const int Planner::kAfterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Planner::Planner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Planner)
}

void Planner::InitAsDefaultInstance() {
}

Planner::Planner(const Planner& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Planner)
}

void Planner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_type_ = 1;
  before_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  after_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Planner::~Planner() {
  // @@protoc_insertion_point(destructor:pbnavitia.Planner)
  SharedDtor();
}

void Planner::SharedDtor() {
  before_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  after_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Planner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Planner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Planner_descriptor_;
}

const Planner& Planner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Planner* Planner::default_instance_ = NULL;

Planner* Planner::New(::google::protobuf::Arena* arena) const {
  Planner* n = new Planner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Planner::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Planner)
  if (_has_bits_[0 / 32] & 14u) {
    response_type_ = 1;
    if (has_before()) {
      before_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_after()) {
      after_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  journeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Planner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Planner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.Journey journeys = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_journeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_journeys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_journeys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_response_type;
        break;
      }

      // optional .pbnavitia.ResponseType response_type = 2;
      case 2: {
        if (tag == 16) {
         parse_response_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::ResponseType_IsValid(value)) {
            set_response_type(static_cast< ::pbnavitia::ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_before;
        break;
      }

      // optional string before = 3;
      case 3: {
        if (tag == 26) {
         parse_before:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_before()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->before().data(), this->before().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Planner.before");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_after;
        break;
      }

      // optional string after = 4;
      case 4: {
        if (tag == 34) {
         parse_after:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_after()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->after().data(), this->after().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Planner.after");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Planner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Planner)
  return false;
#undef DO_
}

void Planner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Planner)
  // repeated .pbnavitia.Journey journeys = 1;
  for (unsigned int i = 0, n = this->journeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->journeys(i), output);
  }

  // optional .pbnavitia.ResponseType response_type = 2;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response_type(), output);
  }

  // optional string before = 3;
  if (has_before()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->before().data(), this->before().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Planner.before");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->before(), output);
  }

  // optional string after = 4;
  if (has_after()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->after().data(), this->after().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Planner.after");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->after(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Planner)
}

::google::protobuf::uint8* Planner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Planner)
  // repeated .pbnavitia.Journey journeys = 1;
  for (unsigned int i = 0, n = this->journeys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->journeys(i), false, target);
  }

  // optional .pbnavitia.ResponseType response_type = 2;
  if (has_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response_type(), target);
  }

  // optional string before = 3;
  if (has_before()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->before().data(), this->before().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Planner.before");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->before(), target);
  }

  // optional string after = 4;
  if (has_after()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->after().data(), this->after().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Planner.after");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->after(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Planner)
  return target;
}

int Planner::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Planner)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 14u) {
    // optional .pbnavitia.ResponseType response_type = 2;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
    }

    // optional string before = 3;
    if (has_before()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->before());
    }

    // optional string after = 4;
    if (has_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->after());
    }

  }
  // repeated .pbnavitia.Journey journeys = 1;
  total_size += 1 * this->journeys_size();
  for (int i = 0; i < this->journeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->journeys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Planner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Planner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Planner* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Planner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Planner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Planner)
    MergeFrom(*source);
  }
}

void Planner::MergeFrom(const Planner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Planner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  journeys_.MergeFrom(from.journeys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_before()) {
      set_has_before();
      before_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.before_);
    }
    if (from.has_after()) {
      set_has_after();
      after_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.after_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Planner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Planner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Planner::CopyFrom(const Planner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Planner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Planner::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->journeys())) return false;
  return true;
}

void Planner::Swap(Planner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Planner::InternalSwap(Planner* other) {
  journeys_.UnsafeArenaSwap(&other->journeys_);
  std::swap(response_type_, other->response_type_);
  before_.Swap(&other->before_);
  after_.Swap(&other->after_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Planner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Planner_descriptor_;
  metadata.reflection = Planner_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Planner

// repeated .pbnavitia.Journey journeys = 1;
int Planner::journeys_size() const {
  return journeys_.size();
}
void Planner::clear_journeys() {
  journeys_.Clear();
}
const ::pbnavitia::Journey& Planner::journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Planner.journeys)
  return journeys_.Get(index);
}
::pbnavitia::Journey* Planner::mutable_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Planner.journeys)
  return journeys_.Mutable(index);
}
::pbnavitia::Journey* Planner::add_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.Planner.journeys)
  return journeys_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
Planner::mutable_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Planner.journeys)
  return &journeys_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
Planner::journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Planner.journeys)
  return journeys_;
}

// optional .pbnavitia.ResponseType response_type = 2;
bool Planner::has_response_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Planner::set_has_response_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Planner::clear_has_response_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Planner::clear_response_type() {
  response_type_ = 1;
  clear_has_response_type();
}
 ::pbnavitia::ResponseType Planner::response_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Planner.response_type)
  return static_cast< ::pbnavitia::ResponseType >(response_type_);
}
 void Planner::set_response_type(::pbnavitia::ResponseType value) {
  assert(::pbnavitia::ResponseType_IsValid(value));
  set_has_response_type();
  response_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Planner.response_type)
}

// optional string before = 3;
bool Planner::has_before() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Planner::set_has_before() {
  _has_bits_[0] |= 0x00000004u;
}
void Planner::clear_has_before() {
  _has_bits_[0] &= ~0x00000004u;
}
void Planner::clear_before() {
  before_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_before();
}
 const ::std::string& Planner::before() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Planner.before)
  return before_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Planner::set_before(const ::std::string& value) {
  set_has_before();
  before_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Planner.before)
}
 void Planner::set_before(const char* value) {
  set_has_before();
  before_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Planner.before)
}
 void Planner::set_before(const char* value, size_t size) {
  set_has_before();
  before_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Planner.before)
}
 ::std::string* Planner::mutable_before() {
  set_has_before();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Planner.before)
  return before_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Planner::release_before() {
  // @@protoc_insertion_point(field_release:pbnavitia.Planner.before)
  clear_has_before();
  return before_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Planner::set_allocated_before(::std::string* before) {
  if (before != NULL) {
    set_has_before();
  } else {
    clear_has_before();
  }
  before_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), before);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Planner.before)
}

// optional string after = 4;
bool Planner::has_after() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Planner::set_has_after() {
  _has_bits_[0] |= 0x00000008u;
}
void Planner::clear_has_after() {
  _has_bits_[0] &= ~0x00000008u;
}
void Planner::clear_after() {
  after_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_after();
}
 const ::std::string& Planner::after() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Planner.after)
  return after_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Planner::set_after(const ::std::string& value) {
  set_has_after();
  after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Planner.after)
}
 void Planner::set_after(const char* value) {
  set_has_after();
  after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Planner.after)
}
 void Planner::set_after(const char* value, size_t size) {
  set_has_after();
  after_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Planner.after)
}
 ::std::string* Planner::mutable_after() {
  set_has_after();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Planner.after)
  return after_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Planner::release_after() {
  // @@protoc_insertion_point(field_release:pbnavitia.Planner.after)
  clear_has_after();
  return after_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Planner::set_allocated_after(::std::string* after) {
  if (after != NULL) {
    set_has_after();
  } else {
    clear_has_after();
  }
  after_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), after);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Planner.after)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoStatus::kStreetNetworkSourceFieldNumber;
const int GeoStatus::kNbAdminsFieldNumber;
const int GeoStatus::kNbAdminsFromCitiesFieldNumber;
const int GeoStatus::kNbWaysFieldNumber;
const int GeoStatus::kNbAddressesFieldNumber;
const int GeoStatus::kNbPoiFieldNumber;
const int GeoStatus::kPoiSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoStatus::GeoStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.GeoStatus)
}

void GeoStatus::InitAsDefaultInstance() {
}

GeoStatus::GeoStatus(const GeoStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.GeoStatus)
}

void GeoStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  street_network_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nb_admins_ = 0;
  nb_admins_from_cities_ = 0;
  nb_ways_ = 0;
  nb_addresses_ = 0;
  nb_poi_ = 0;
  poi_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoStatus::~GeoStatus() {
  // @@protoc_insertion_point(destructor:pbnavitia.GeoStatus)
  SharedDtor();
}

void GeoStatus::SharedDtor() {
  street_network_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poi_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GeoStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoStatus_descriptor_;
}

const GeoStatus& GeoStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

GeoStatus* GeoStatus::default_instance_ = NULL;

GeoStatus* GeoStatus::New(::google::protobuf::Arena* arena) const {
  GeoStatus* n = new GeoStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.GeoStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GeoStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GeoStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(nb_admins_, nb_addresses_);
    if (has_street_network_source()) {
      street_network_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    nb_poi_ = 0;
    if (has_poi_source()) {
      poi_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GeoStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.GeoStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string street_network_source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street_network_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street_network_source().data(), this->street_network_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.GeoStatus.street_network_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nb_admins;
        break;
      }

      // optional int32 nb_admins = 2;
      case 2: {
        if (tag == 16) {
         parse_nb_admins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nb_admins_)));
          set_has_nb_admins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nb_admins_from_cities;
        break;
      }

      // optional int32 nb_admins_from_cities = 3;
      case 3: {
        if (tag == 24) {
         parse_nb_admins_from_cities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nb_admins_from_cities_)));
          set_has_nb_admins_from_cities();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nb_ways;
        break;
      }

      // optional int32 nb_ways = 4;
      case 4: {
        if (tag == 32) {
         parse_nb_ways:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nb_ways_)));
          set_has_nb_ways();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nb_addresses;
        break;
      }

      // optional int32 nb_addresses = 5;
      case 5: {
        if (tag == 40) {
         parse_nb_addresses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nb_addresses_)));
          set_has_nb_addresses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nb_poi;
        break;
      }

      // optional int32 nb_poi = 6;
      case 6: {
        if (tag == 48) {
         parse_nb_poi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nb_poi_)));
          set_has_nb_poi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_poi_source;
        break;
      }

      // optional string poi_source = 7;
      case 7: {
        if (tag == 58) {
         parse_poi_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poi_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->poi_source().data(), this->poi_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.GeoStatus.poi_source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.GeoStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.GeoStatus)
  return false;
#undef DO_
}

void GeoStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.GeoStatus)
  // optional string street_network_source = 1;
  if (has_street_network_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street_network_source().data(), this->street_network_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.GeoStatus.street_network_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->street_network_source(), output);
  }

  // optional int32 nb_admins = 2;
  if (has_nb_admins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nb_admins(), output);
  }

  // optional int32 nb_admins_from_cities = 3;
  if (has_nb_admins_from_cities()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nb_admins_from_cities(), output);
  }

  // optional int32 nb_ways = 4;
  if (has_nb_ways()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nb_ways(), output);
  }

  // optional int32 nb_addresses = 5;
  if (has_nb_addresses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nb_addresses(), output);
  }

  // optional int32 nb_poi = 6;
  if (has_nb_poi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nb_poi(), output);
  }

  // optional string poi_source = 7;
  if (has_poi_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poi_source().data(), this->poi_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.GeoStatus.poi_source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->poi_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.GeoStatus)
}

::google::protobuf::uint8* GeoStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.GeoStatus)
  // optional string street_network_source = 1;
  if (has_street_network_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street_network_source().data(), this->street_network_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.GeoStatus.street_network_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->street_network_source(), target);
  }

  // optional int32 nb_admins = 2;
  if (has_nb_admins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nb_admins(), target);
  }

  // optional int32 nb_admins_from_cities = 3;
  if (has_nb_admins_from_cities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nb_admins_from_cities(), target);
  }

  // optional int32 nb_ways = 4;
  if (has_nb_ways()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nb_ways(), target);
  }

  // optional int32 nb_addresses = 5;
  if (has_nb_addresses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nb_addresses(), target);
  }

  // optional int32 nb_poi = 6;
  if (has_nb_poi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nb_poi(), target);
  }

  // optional string poi_source = 7;
  if (has_poi_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->poi_source().data(), this->poi_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.GeoStatus.poi_source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->poi_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.GeoStatus)
  return target;
}

int GeoStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.GeoStatus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string street_network_source = 1;
    if (has_street_network_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street_network_source());
    }

    // optional int32 nb_admins = 2;
    if (has_nb_admins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_admins());
    }

    // optional int32 nb_admins_from_cities = 3;
    if (has_nb_admins_from_cities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_admins_from_cities());
    }

    // optional int32 nb_ways = 4;
    if (has_nb_ways()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_ways());
    }

    // optional int32 nb_addresses = 5;
    if (has_nb_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_addresses());
    }

    // optional int32 nb_poi = 6;
    if (has_nb_poi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_poi());
    }

    // optional string poi_source = 7;
    if (has_poi_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poi_source());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.GeoStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeoStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.GeoStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.GeoStatus)
    MergeFrom(*source);
  }
}

void GeoStatus::MergeFrom(const GeoStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.GeoStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_street_network_source()) {
      set_has_street_network_source();
      street_network_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.street_network_source_);
    }
    if (from.has_nb_admins()) {
      set_nb_admins(from.nb_admins());
    }
    if (from.has_nb_admins_from_cities()) {
      set_nb_admins_from_cities(from.nb_admins_from_cities());
    }
    if (from.has_nb_ways()) {
      set_nb_ways(from.nb_ways());
    }
    if (from.has_nb_addresses()) {
      set_nb_addresses(from.nb_addresses());
    }
    if (from.has_nb_poi()) {
      set_nb_poi(from.nb_poi());
    }
    if (from.has_poi_source()) {
      set_has_poi_source();
      poi_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poi_source_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GeoStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.GeoStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoStatus::CopyFrom(const GeoStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.GeoStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoStatus::IsInitialized() const {

  return true;
}

void GeoStatus::Swap(GeoStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoStatus::InternalSwap(GeoStatus* other) {
  street_network_source_.Swap(&other->street_network_source_);
  std::swap(nb_admins_, other->nb_admins_);
  std::swap(nb_admins_from_cities_, other->nb_admins_from_cities_);
  std::swap(nb_ways_, other->nb_ways_);
  std::swap(nb_addresses_, other->nb_addresses_);
  std::swap(nb_poi_, other->nb_poi_);
  poi_source_.Swap(&other->poi_source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoStatus_descriptor_;
  metadata.reflection = GeoStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoStatus

// optional string street_network_source = 1;
bool GeoStatus::has_street_network_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoStatus::set_has_street_network_source() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoStatus::clear_has_street_network_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoStatus::clear_street_network_source() {
  street_network_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street_network_source();
}
 const ::std::string& GeoStatus::street_network_source() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.street_network_source)
  return street_network_source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeoStatus::set_street_network_source(const ::std::string& value) {
  set_has_street_network_source();
  street_network_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.street_network_source)
}
 void GeoStatus::set_street_network_source(const char* value) {
  set_has_street_network_source();
  street_network_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.GeoStatus.street_network_source)
}
 void GeoStatus::set_street_network_source(const char* value, size_t size) {
  set_has_street_network_source();
  street_network_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.GeoStatus.street_network_source)
}
 ::std::string* GeoStatus::mutable_street_network_source() {
  set_has_street_network_source();
  // @@protoc_insertion_point(field_mutable:pbnavitia.GeoStatus.street_network_source)
  return street_network_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GeoStatus::release_street_network_source() {
  // @@protoc_insertion_point(field_release:pbnavitia.GeoStatus.street_network_source)
  clear_has_street_network_source();
  return street_network_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeoStatus::set_allocated_street_network_source(::std::string* street_network_source) {
  if (street_network_source != NULL) {
    set_has_street_network_source();
  } else {
    clear_has_street_network_source();
  }
  street_network_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street_network_source);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GeoStatus.street_network_source)
}

// optional int32 nb_admins = 2;
bool GeoStatus::has_nb_admins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeoStatus::set_has_nb_admins() {
  _has_bits_[0] |= 0x00000002u;
}
void GeoStatus::clear_has_nb_admins() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeoStatus::clear_nb_admins() {
  nb_admins_ = 0;
  clear_has_nb_admins();
}
 ::google::protobuf::int32 GeoStatus::nb_admins() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_admins)
  return nb_admins_;
}
 void GeoStatus::set_nb_admins(::google::protobuf::int32 value) {
  set_has_nb_admins();
  nb_admins_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_admins)
}

// optional int32 nb_admins_from_cities = 3;
bool GeoStatus::has_nb_admins_from_cities() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GeoStatus::set_has_nb_admins_from_cities() {
  _has_bits_[0] |= 0x00000004u;
}
void GeoStatus::clear_has_nb_admins_from_cities() {
  _has_bits_[0] &= ~0x00000004u;
}
void GeoStatus::clear_nb_admins_from_cities() {
  nb_admins_from_cities_ = 0;
  clear_has_nb_admins_from_cities();
}
 ::google::protobuf::int32 GeoStatus::nb_admins_from_cities() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_admins_from_cities)
  return nb_admins_from_cities_;
}
 void GeoStatus::set_nb_admins_from_cities(::google::protobuf::int32 value) {
  set_has_nb_admins_from_cities();
  nb_admins_from_cities_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_admins_from_cities)
}

// optional int32 nb_ways = 4;
bool GeoStatus::has_nb_ways() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GeoStatus::set_has_nb_ways() {
  _has_bits_[0] |= 0x00000008u;
}
void GeoStatus::clear_has_nb_ways() {
  _has_bits_[0] &= ~0x00000008u;
}
void GeoStatus::clear_nb_ways() {
  nb_ways_ = 0;
  clear_has_nb_ways();
}
 ::google::protobuf::int32 GeoStatus::nb_ways() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_ways)
  return nb_ways_;
}
 void GeoStatus::set_nb_ways(::google::protobuf::int32 value) {
  set_has_nb_ways();
  nb_ways_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_ways)
}

// optional int32 nb_addresses = 5;
bool GeoStatus::has_nb_addresses() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GeoStatus::set_has_nb_addresses() {
  _has_bits_[0] |= 0x00000010u;
}
void GeoStatus::clear_has_nb_addresses() {
  _has_bits_[0] &= ~0x00000010u;
}
void GeoStatus::clear_nb_addresses() {
  nb_addresses_ = 0;
  clear_has_nb_addresses();
}
 ::google::protobuf::int32 GeoStatus::nb_addresses() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_addresses)
  return nb_addresses_;
}
 void GeoStatus::set_nb_addresses(::google::protobuf::int32 value) {
  set_has_nb_addresses();
  nb_addresses_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_addresses)
}

// optional int32 nb_poi = 6;
bool GeoStatus::has_nb_poi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GeoStatus::set_has_nb_poi() {
  _has_bits_[0] |= 0x00000020u;
}
void GeoStatus::clear_has_nb_poi() {
  _has_bits_[0] &= ~0x00000020u;
}
void GeoStatus::clear_nb_poi() {
  nb_poi_ = 0;
  clear_has_nb_poi();
}
 ::google::protobuf::int32 GeoStatus::nb_poi() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.nb_poi)
  return nb_poi_;
}
 void GeoStatus::set_nb_poi(::google::protobuf::int32 value) {
  set_has_nb_poi();
  nb_poi_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.nb_poi)
}

// optional string poi_source = 7;
bool GeoStatus::has_poi_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GeoStatus::set_has_poi_source() {
  _has_bits_[0] |= 0x00000040u;
}
void GeoStatus::clear_has_poi_source() {
  _has_bits_[0] &= ~0x00000040u;
}
void GeoStatus::clear_poi_source() {
  poi_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_poi_source();
}
 const ::std::string& GeoStatus::poi_source() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GeoStatus.poi_source)
  return poi_source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeoStatus::set_poi_source(const ::std::string& value) {
  set_has_poi_source();
  poi_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.GeoStatus.poi_source)
}
 void GeoStatus::set_poi_source(const char* value) {
  set_has_poi_source();
  poi_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.GeoStatus.poi_source)
}
 void GeoStatus::set_poi_source(const char* value, size_t size) {
  set_has_poi_source();
  poi_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.GeoStatus.poi_source)
}
 ::std::string* GeoStatus::mutable_poi_source() {
  set_has_poi_source();
  // @@protoc_insertion_point(field_mutable:pbnavitia.GeoStatus.poi_source)
  return poi_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GeoStatus::release_poi_source() {
  // @@protoc_insertion_point(field_release:pbnavitia.GeoStatus.poi_source)
  clear_has_poi_source();
  return poi_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GeoStatus::set_allocated_poi_source(::std::string* poi_source) {
  if (poi_source != NULL) {
    set_has_poi_source();
  } else {
    clear_has_poi_source();
  }
  poi_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poi_source);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GeoStatus.poi_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kPublicationDateFieldNumber;
const int Status::kStartProductionDateFieldNumber;
const int Status::kEndProductionDateFieldNumber;
const int Status::kDataVersionFieldNumber;
const int Status::kNavitiaVersionFieldNumber;
const int Status::kDataSourcesFieldNumber;
const int Status::kLastLoadAtFieldNumber;
const int Status::kLastLoadStatusFieldNumber;
const int Status::kLoadedFieldNumber;
const int Status::kNbThreadsFieldNumber;
const int Status::kIsConnectedToRabbitmqFieldNumber;
const int Status::kStatusFieldNumber;
const int Status::kLastRtDataLoadedFieldNumber;
const int Status::kIsRealtimeLoadedFieldNumber;
const int Status::kDatasetCreatedAtFieldNumber;
const int Status::kRtContributorsFieldNumber;
const int Status::kDisruptionErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Status)
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Status)
}

void Status::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publication_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_production_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_production_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_ = 0;
  navitia_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_load_at_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_load_status_ = false;
  loaded_ = false;
  nb_threads_ = 0;
  is_connected_to_rabbitmq_ = false;
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_rt_data_loaded_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_realtime_loaded_ = false;
  dataset_created_at_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disruption_error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:pbnavitia.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  publication_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_production_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_production_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  navitia_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_load_at_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_rt_data_loaded_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_created_at_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Status)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Status, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Status*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    if (has_publication_date()) {
      publication_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_start_production_date()) {
      start_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_production_date()) {
      end_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    data_version_ = 0;
    if (has_navitia_version()) {
      navitia_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last_load_at()) {
      last_load_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    last_load_status_ = false;
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(loaded_, is_realtime_loaded_);
    nb_threads_ = 0;
    if (has_status()) {
      status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last_rt_data_loaded()) {
      last_rt_data_loaded_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dataset_created_at()) {
      dataset_created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  disruption_error_ = false;

#undef ZR_HELPER_
#undef ZR_

  data_sources_.Clear();
  rt_contributors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string publication_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publication_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publication_date().data(), this->publication_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.publication_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_production_date;
        break;
      }

      // required string start_production_date = 2;
      case 2: {
        if (tag == 18) {
         parse_start_production_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_production_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_production_date().data(), this->start_production_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.start_production_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_production_date;
        break;
      }

      // required string end_production_date = 3;
      case 3: {
        if (tag == 26) {
         parse_end_production_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_production_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end_production_date().data(), this->end_production_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.end_production_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data_version;
        break;
      }

      // optional int32 data_version = 4;
      case 4: {
        if (tag == 32) {
         parse_data_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_version_)));
          set_has_data_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_navitia_version;
        break;
      }

      // optional string navitia_version = 6;
      case 6: {
        if (tag == 50) {
         parse_navitia_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_navitia_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->navitia_version().data(), this->navitia_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.navitia_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data_sources;
        break;
      }

      // repeated string data_sources = 7;
      case 7: {
        if (tag == 58) {
         parse_data_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data_sources()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_sources(this->data_sources_size() - 1).data(),
            this->data_sources(this->data_sources_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.data_sources");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data_sources;
        if (input->ExpectTag(66)) goto parse_last_load_at;
        break;
      }

      // optional string last_load_at = 8;
      case 8: {
        if (tag == 66) {
         parse_last_load_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_load_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_load_at().data(), this->last_load_at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.last_load_at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_last_load_status;
        break;
      }

      // optional bool last_load_status = 9;
      case 9: {
        if (tag == 72) {
         parse_last_load_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_load_status_)));
          set_has_last_load_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_loaded;
        break;
      }

      // optional bool loaded = 10;
      case 10: {
        if (tag == 80) {
         parse_loaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loaded_)));
          set_has_loaded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nb_threads;
        break;
      }

      // optional int32 nb_threads = 11;
      case 11: {
        if (tag == 88) {
         parse_nb_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nb_threads_)));
          set_has_nb_threads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_connected_to_rabbitmq;
        break;
      }

      // optional bool is_connected_to_rabbitmq = 12;
      case 12: {
        if (tag == 96) {
         parse_is_connected_to_rabbitmq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_connected_to_rabbitmq_)));
          set_has_is_connected_to_rabbitmq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_status;
        break;
      }

      // optional string status = 13;
      case 13: {
        if (tag == 106) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_last_rt_data_loaded;
        break;
      }

      // optional string last_rt_data_loaded = 14;
      case 14: {
        if (tag == 114) {
         parse_last_rt_data_loaded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_rt_data_loaded()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_rt_data_loaded().data(), this->last_rt_data_loaded().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.last_rt_data_loaded");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_is_realtime_loaded;
        break;
      }

      // optional bool is_realtime_loaded = 16;
      case 16: {
        if (tag == 128) {
         parse_is_realtime_loaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_realtime_loaded_)));
          set_has_is_realtime_loaded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_dataset_created_at;
        break;
      }

      // optional string dataset_created_at = 17;
      case 17: {
        if (tag == 138) {
         parse_dataset_created_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_created_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset_created_at().data(), this->dataset_created_at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.dataset_created_at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_rt_contributors;
        break;
      }

      // repeated string rt_contributors = 18;
      case 18: {
        if (tag == 146) {
         parse_rt_contributors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rt_contributors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rt_contributors(this->rt_contributors_size() - 1).data(),
            this->rt_contributors(this->rt_contributors_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Status.rt_contributors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_rt_contributors;
        if (input->ExpectTag(152)) goto parse_disruption_error;
        break;
      }

      // optional bool disruption_error = 19;
      case 19: {
        if (tag == 152) {
         parse_disruption_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disruption_error_)));
          set_has_disruption_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Status)
  // required string publication_date = 1;
  if (has_publication_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publication_date().data(), this->publication_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.publication_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publication_date(), output);
  }

  // required string start_production_date = 2;
  if (has_start_production_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_production_date().data(), this->start_production_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.start_production_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start_production_date(), output);
  }

  // required string end_production_date = 3;
  if (has_end_production_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_production_date().data(), this->end_production_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.end_production_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->end_production_date(), output);
  }

  // optional int32 data_version = 4;
  if (has_data_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->data_version(), output);
  }

  // optional string navitia_version = 6;
  if (has_navitia_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->navitia_version().data(), this->navitia_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.navitia_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->navitia_version(), output);
  }

  // repeated string data_sources = 7;
  for (int i = 0; i < this->data_sources_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_sources(i).data(), this->data_sources(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.data_sources");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->data_sources(i), output);
  }

  // optional string last_load_at = 8;
  if (has_last_load_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_load_at().data(), this->last_load_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.last_load_at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->last_load_at(), output);
  }

  // optional bool last_load_status = 9;
  if (has_last_load_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->last_load_status(), output);
  }

  // optional bool loaded = 10;
  if (has_loaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->loaded(), output);
  }

  // optional int32 nb_threads = 11;
  if (has_nb_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nb_threads(), output);
  }

  // optional bool is_connected_to_rabbitmq = 12;
  if (has_is_connected_to_rabbitmq()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_connected_to_rabbitmq(), output);
  }

  // optional string status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->status(), output);
  }

  // optional string last_rt_data_loaded = 14;
  if (has_last_rt_data_loaded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_rt_data_loaded().data(), this->last_rt_data_loaded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.last_rt_data_loaded");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->last_rt_data_loaded(), output);
  }

  // optional bool is_realtime_loaded = 16;
  if (has_is_realtime_loaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_realtime_loaded(), output);
  }

  // optional string dataset_created_at = 17;
  if (has_dataset_created_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset_created_at().data(), this->dataset_created_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.dataset_created_at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->dataset_created_at(), output);
  }

  // repeated string rt_contributors = 18;
  for (int i = 0; i < this->rt_contributors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rt_contributors(i).data(), this->rt_contributors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.rt_contributors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->rt_contributors(i), output);
  }

  // optional bool disruption_error = 19;
  if (has_disruption_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->disruption_error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Status)
  // required string publication_date = 1;
  if (has_publication_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publication_date().data(), this->publication_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.publication_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publication_date(), target);
  }

  // required string start_production_date = 2;
  if (has_start_production_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_production_date().data(), this->start_production_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.start_production_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_production_date(), target);
  }

  // required string end_production_date = 3;
  if (has_end_production_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_production_date().data(), this->end_production_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.end_production_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->end_production_date(), target);
  }

  // optional int32 data_version = 4;
  if (has_data_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->data_version(), target);
  }

  // optional string navitia_version = 6;
  if (has_navitia_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->navitia_version().data(), this->navitia_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.navitia_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->navitia_version(), target);
  }

  // repeated string data_sources = 7;
  for (int i = 0; i < this->data_sources_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_sources(i).data(), this->data_sources(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.data_sources");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->data_sources(i), target);
  }

  // optional string last_load_at = 8;
  if (has_last_load_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_load_at().data(), this->last_load_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.last_load_at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->last_load_at(), target);
  }

  // optional bool last_load_status = 9;
  if (has_last_load_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->last_load_status(), target);
  }

  // optional bool loaded = 10;
  if (has_loaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->loaded(), target);
  }

  // optional int32 nb_threads = 11;
  if (has_nb_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nb_threads(), target);
  }

  // optional bool is_connected_to_rabbitmq = 12;
  if (has_is_connected_to_rabbitmq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_connected_to_rabbitmq(), target);
  }

  // optional string status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->status(), target);
  }

  // optional string last_rt_data_loaded = 14;
  if (has_last_rt_data_loaded()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_rt_data_loaded().data(), this->last_rt_data_loaded().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.last_rt_data_loaded");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->last_rt_data_loaded(), target);
  }

  // optional bool is_realtime_loaded = 16;
  if (has_is_realtime_loaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_realtime_loaded(), target);
  }

  // optional string dataset_created_at = 17;
  if (has_dataset_created_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset_created_at().data(), this->dataset_created_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.dataset_created_at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->dataset_created_at(), target);
  }

  // repeated string rt_contributors = 18;
  for (int i = 0; i < this->rt_contributors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rt_contributors(i).data(), this->rt_contributors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Status.rt_contributors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->rt_contributors(i), target);
  }

  // optional bool disruption_error = 19;
  if (has_disruption_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->disruption_error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Status)
  return target;
}

int Status::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.Status)
  int total_size = 0;

  if (has_publication_date()) {
    // required string publication_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publication_date());
  }

  if (has_start_production_date()) {
    // required string start_production_date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_production_date());
  }

  if (has_end_production_date()) {
    // required string end_production_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_production_date());
  }

  return total_size;
}
int Status::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Status)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string publication_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publication_date());

    // required string start_production_date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_production_date());

    // required string end_production_date = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_production_date());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 216u) {
    // optional int32 data_version = 4;
    if (has_data_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_version());
    }

    // optional string navitia_version = 6;
    if (has_navitia_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->navitia_version());
    }

    // optional string last_load_at = 8;
    if (has_last_load_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_load_at());
    }

    // optional bool last_load_status = 9;
    if (has_last_load_status()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool loaded = 10;
    if (has_loaded()) {
      total_size += 1 + 1;
    }

    // optional int32 nb_threads = 11;
    if (has_nb_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_threads());
    }

    // optional bool is_connected_to_rabbitmq = 12;
    if (has_is_connected_to_rabbitmq()) {
      total_size += 1 + 1;
    }

    // optional string status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional string last_rt_data_loaded = 14;
    if (has_last_rt_data_loaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_rt_data_loaded());
    }

    // optional bool is_realtime_loaded = 16;
    if (has_is_realtime_loaded()) {
      total_size += 2 + 1;
    }

    // optional string dataset_created_at = 17;
    if (has_dataset_created_at()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset_created_at());
    }

  }
  // optional bool disruption_error = 19;
  if (has_disruption_error()) {
    total_size += 2 + 1;
  }

  // repeated string data_sources = 7;
  total_size += 1 * this->data_sources_size();
  for (int i = 0; i < this->data_sources_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data_sources(i));
  }

  // repeated string rt_contributors = 18;
  total_size += 2 * this->rt_contributors_size();
  for (int i = 0; i < this->rt_contributors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rt_contributors(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_sources_.MergeFrom(from.data_sources_);
  rt_contributors_.MergeFrom(from.rt_contributors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_publication_date()) {
      set_has_publication_date();
      publication_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publication_date_);
    }
    if (from.has_start_production_date()) {
      set_has_start_production_date();
      start_production_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_production_date_);
    }
    if (from.has_end_production_date()) {
      set_has_end_production_date();
      end_production_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_production_date_);
    }
    if (from.has_data_version()) {
      set_data_version(from.data_version());
    }
    if (from.has_navitia_version()) {
      set_has_navitia_version();
      navitia_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.navitia_version_);
    }
    if (from.has_last_load_at()) {
      set_has_last_load_at();
      last_load_at_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_load_at_);
    }
    if (from.has_last_load_status()) {
      set_last_load_status(from.last_load_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loaded()) {
      set_loaded(from.loaded());
    }
    if (from.has_nb_threads()) {
      set_nb_threads(from.nb_threads());
    }
    if (from.has_is_connected_to_rabbitmq()) {
      set_is_connected_to_rabbitmq(from.is_connected_to_rabbitmq());
    }
    if (from.has_status()) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (from.has_last_rt_data_loaded()) {
      set_has_last_rt_data_loaded();
      last_rt_data_loaded_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_rt_data_loaded_);
    }
    if (from.has_is_realtime_loaded()) {
      set_is_realtime_loaded(from.is_realtime_loaded());
    }
    if (from.has_dataset_created_at()) {
      set_has_dataset_created_at();
      dataset_created_at_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_created_at_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_disruption_error()) {
      set_disruption_error(from.disruption_error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  publication_date_.Swap(&other->publication_date_);
  start_production_date_.Swap(&other->start_production_date_);
  end_production_date_.Swap(&other->end_production_date_);
  std::swap(data_version_, other->data_version_);
  navitia_version_.Swap(&other->navitia_version_);
  data_sources_.UnsafeArenaSwap(&other->data_sources_);
  last_load_at_.Swap(&other->last_load_at_);
  std::swap(last_load_status_, other->last_load_status_);
  std::swap(loaded_, other->loaded_);
  std::swap(nb_threads_, other->nb_threads_);
  std::swap(is_connected_to_rabbitmq_, other->is_connected_to_rabbitmq_);
  status_.Swap(&other->status_);
  last_rt_data_loaded_.Swap(&other->last_rt_data_loaded_);
  std::swap(is_realtime_loaded_, other->is_realtime_loaded_);
  dataset_created_at_.Swap(&other->dataset_created_at_);
  rt_contributors_.UnsafeArenaSwap(&other->rt_contributors_);
  std::swap(disruption_error_, other->disruption_error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// required string publication_date = 1;
bool Status::has_publication_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Status::set_has_publication_date() {
  _has_bits_[0] |= 0x00000001u;
}
void Status::clear_has_publication_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void Status::clear_publication_date() {
  publication_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publication_date();
}
 const ::std::string& Status::publication_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.publication_date)
  return publication_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_publication_date(const ::std::string& value) {
  set_has_publication_date();
  publication_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.publication_date)
}
 void Status::set_publication_date(const char* value) {
  set_has_publication_date();
  publication_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.publication_date)
}
 void Status::set_publication_date(const char* value, size_t size) {
  set_has_publication_date();
  publication_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.publication_date)
}
 ::std::string* Status::mutable_publication_date() {
  set_has_publication_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.publication_date)
  return publication_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_publication_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.publication_date)
  clear_has_publication_date();
  return publication_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_publication_date(::std::string* publication_date) {
  if (publication_date != NULL) {
    set_has_publication_date();
  } else {
    clear_has_publication_date();
  }
  publication_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publication_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.publication_date)
}

// required string start_production_date = 2;
bool Status::has_start_production_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Status::set_has_start_production_date() {
  _has_bits_[0] |= 0x00000002u;
}
void Status::clear_has_start_production_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void Status::clear_start_production_date() {
  start_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_production_date();
}
 const ::std::string& Status::start_production_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.start_production_date)
  return start_production_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_start_production_date(const ::std::string& value) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.start_production_date)
}
 void Status::set_start_production_date(const char* value) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.start_production_date)
}
 void Status::set_start_production_date(const char* value, size_t size) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.start_production_date)
}
 ::std::string* Status::mutable_start_production_date() {
  set_has_start_production_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.start_production_date)
  return start_production_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_start_production_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.start_production_date)
  clear_has_start_production_date();
  return start_production_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_start_production_date(::std::string* start_production_date) {
  if (start_production_date != NULL) {
    set_has_start_production_date();
  } else {
    clear_has_start_production_date();
  }
  start_production_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_production_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.start_production_date)
}

// required string end_production_date = 3;
bool Status::has_end_production_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Status::set_has_end_production_date() {
  _has_bits_[0] |= 0x00000004u;
}
void Status::clear_has_end_production_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void Status::clear_end_production_date() {
  end_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_production_date();
}
 const ::std::string& Status::end_production_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.end_production_date)
  return end_production_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_end_production_date(const ::std::string& value) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.end_production_date)
}
 void Status::set_end_production_date(const char* value) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.end_production_date)
}
 void Status::set_end_production_date(const char* value, size_t size) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.end_production_date)
}
 ::std::string* Status::mutable_end_production_date() {
  set_has_end_production_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.end_production_date)
  return end_production_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_end_production_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.end_production_date)
  clear_has_end_production_date();
  return end_production_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_end_production_date(::std::string* end_production_date) {
  if (end_production_date != NULL) {
    set_has_end_production_date();
  } else {
    clear_has_end_production_date();
  }
  end_production_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_production_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.end_production_date)
}

// optional int32 data_version = 4;
bool Status::has_data_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Status::set_has_data_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Status::clear_has_data_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Status::clear_data_version() {
  data_version_ = 0;
  clear_has_data_version();
}
 ::google::protobuf::int32 Status::data_version() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.data_version)
  return data_version_;
}
 void Status::set_data_version(::google::protobuf::int32 value) {
  set_has_data_version();
  data_version_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.data_version)
}

// optional string navitia_version = 6;
bool Status::has_navitia_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Status::set_has_navitia_version() {
  _has_bits_[0] |= 0x00000010u;
}
void Status::clear_has_navitia_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void Status::clear_navitia_version() {
  navitia_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_navitia_version();
}
 const ::std::string& Status::navitia_version() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.navitia_version)
  return navitia_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_navitia_version(const ::std::string& value) {
  set_has_navitia_version();
  navitia_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.navitia_version)
}
 void Status::set_navitia_version(const char* value) {
  set_has_navitia_version();
  navitia_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.navitia_version)
}
 void Status::set_navitia_version(const char* value, size_t size) {
  set_has_navitia_version();
  navitia_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.navitia_version)
}
 ::std::string* Status::mutable_navitia_version() {
  set_has_navitia_version();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.navitia_version)
  return navitia_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_navitia_version() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.navitia_version)
  clear_has_navitia_version();
  return navitia_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_navitia_version(::std::string* navitia_version) {
  if (navitia_version != NULL) {
    set_has_navitia_version();
  } else {
    clear_has_navitia_version();
  }
  navitia_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), navitia_version);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.navitia_version)
}

// repeated string data_sources = 7;
int Status::data_sources_size() const {
  return data_sources_.size();
}
void Status::clear_data_sources() {
  data_sources_.Clear();
}
 const ::std::string& Status::data_sources(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.data_sources)
  return data_sources_.Get(index);
}
 ::std::string* Status::mutable_data_sources(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.data_sources)
  return data_sources_.Mutable(index);
}
 void Status::set_data_sources(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Status.data_sources)
  data_sources_.Mutable(index)->assign(value);
}
 void Status::set_data_sources(int index, const char* value) {
  data_sources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.data_sources)
}
 void Status::set_data_sources(int index, const char* value, size_t size) {
  data_sources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.data_sources)
}
 ::std::string* Status::add_data_sources() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Status.data_sources)
  return data_sources_.Add();
}
 void Status::add_data_sources(const ::std::string& value) {
  data_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Status.data_sources)
}
 void Status::add_data_sources(const char* value) {
  data_sources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Status.data_sources)
}
 void Status::add_data_sources(const char* value, size_t size) {
  data_sources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Status.data_sources)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Status::data_sources() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Status.data_sources)
  return data_sources_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Status::mutable_data_sources() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Status.data_sources)
  return &data_sources_;
}

// optional string last_load_at = 8;
bool Status::has_last_load_at() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Status::set_has_last_load_at() {
  _has_bits_[0] |= 0x00000040u;
}
void Status::clear_has_last_load_at() {
  _has_bits_[0] &= ~0x00000040u;
}
void Status::clear_last_load_at() {
  last_load_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_load_at();
}
 const ::std::string& Status::last_load_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.last_load_at)
  return last_load_at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_last_load_at(const ::std::string& value) {
  set_has_last_load_at();
  last_load_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.last_load_at)
}
 void Status::set_last_load_at(const char* value) {
  set_has_last_load_at();
  last_load_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.last_load_at)
}
 void Status::set_last_load_at(const char* value, size_t size) {
  set_has_last_load_at();
  last_load_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.last_load_at)
}
 ::std::string* Status::mutable_last_load_at() {
  set_has_last_load_at();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.last_load_at)
  return last_load_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_last_load_at() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.last_load_at)
  clear_has_last_load_at();
  return last_load_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_last_load_at(::std::string* last_load_at) {
  if (last_load_at != NULL) {
    set_has_last_load_at();
  } else {
    clear_has_last_load_at();
  }
  last_load_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_load_at);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.last_load_at)
}

// optional bool last_load_status = 9;
bool Status::has_last_load_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Status::set_has_last_load_status() {
  _has_bits_[0] |= 0x00000080u;
}
void Status::clear_has_last_load_status() {
  _has_bits_[0] &= ~0x00000080u;
}
void Status::clear_last_load_status() {
  last_load_status_ = false;
  clear_has_last_load_status();
}
 bool Status::last_load_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.last_load_status)
  return last_load_status_;
}
 void Status::set_last_load_status(bool value) {
  set_has_last_load_status();
  last_load_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.last_load_status)
}

// optional bool loaded = 10;
bool Status::has_loaded() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Status::set_has_loaded() {
  _has_bits_[0] |= 0x00000100u;
}
void Status::clear_has_loaded() {
  _has_bits_[0] &= ~0x00000100u;
}
void Status::clear_loaded() {
  loaded_ = false;
  clear_has_loaded();
}
 bool Status::loaded() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.loaded)
  return loaded_;
}
 void Status::set_loaded(bool value) {
  set_has_loaded();
  loaded_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.loaded)
}

// optional int32 nb_threads = 11;
bool Status::has_nb_threads() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Status::set_has_nb_threads() {
  _has_bits_[0] |= 0x00000200u;
}
void Status::clear_has_nb_threads() {
  _has_bits_[0] &= ~0x00000200u;
}
void Status::clear_nb_threads() {
  nb_threads_ = 0;
  clear_has_nb_threads();
}
 ::google::protobuf::int32 Status::nb_threads() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.nb_threads)
  return nb_threads_;
}
 void Status::set_nb_threads(::google::protobuf::int32 value) {
  set_has_nb_threads();
  nb_threads_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.nb_threads)
}

// optional bool is_connected_to_rabbitmq = 12;
bool Status::has_is_connected_to_rabbitmq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Status::set_has_is_connected_to_rabbitmq() {
  _has_bits_[0] |= 0x00000400u;
}
void Status::clear_has_is_connected_to_rabbitmq() {
  _has_bits_[0] &= ~0x00000400u;
}
void Status::clear_is_connected_to_rabbitmq() {
  is_connected_to_rabbitmq_ = false;
  clear_has_is_connected_to_rabbitmq();
}
 bool Status::is_connected_to_rabbitmq() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.is_connected_to_rabbitmq)
  return is_connected_to_rabbitmq_;
}
 void Status::set_is_connected_to_rabbitmq(bool value) {
  set_has_is_connected_to_rabbitmq();
  is_connected_to_rabbitmq_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.is_connected_to_rabbitmq)
}

// optional string status = 13;
bool Status::has_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Status::set_has_status() {
  _has_bits_[0] |= 0x00000800u;
}
void Status::clear_has_status() {
  _has_bits_[0] &= ~0x00000800u;
}
void Status::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
 const ::std::string& Status::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.status)
}
 void Status::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.status)
}
 void Status::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.status)
}
 ::std::string* Status::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_status() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.status)
}

// optional string last_rt_data_loaded = 14;
bool Status::has_last_rt_data_loaded() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Status::set_has_last_rt_data_loaded() {
  _has_bits_[0] |= 0x00001000u;
}
void Status::clear_has_last_rt_data_loaded() {
  _has_bits_[0] &= ~0x00001000u;
}
void Status::clear_last_rt_data_loaded() {
  last_rt_data_loaded_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_rt_data_loaded();
}
 const ::std::string& Status::last_rt_data_loaded() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.last_rt_data_loaded)
  return last_rt_data_loaded_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_last_rt_data_loaded(const ::std::string& value) {
  set_has_last_rt_data_loaded();
  last_rt_data_loaded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.last_rt_data_loaded)
}
 void Status::set_last_rt_data_loaded(const char* value) {
  set_has_last_rt_data_loaded();
  last_rt_data_loaded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.last_rt_data_loaded)
}
 void Status::set_last_rt_data_loaded(const char* value, size_t size) {
  set_has_last_rt_data_loaded();
  last_rt_data_loaded_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.last_rt_data_loaded)
}
 ::std::string* Status::mutable_last_rt_data_loaded() {
  set_has_last_rt_data_loaded();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.last_rt_data_loaded)
  return last_rt_data_loaded_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_last_rt_data_loaded() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.last_rt_data_loaded)
  clear_has_last_rt_data_loaded();
  return last_rt_data_loaded_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_last_rt_data_loaded(::std::string* last_rt_data_loaded) {
  if (last_rt_data_loaded != NULL) {
    set_has_last_rt_data_loaded();
  } else {
    clear_has_last_rt_data_loaded();
  }
  last_rt_data_loaded_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_rt_data_loaded);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.last_rt_data_loaded)
}

// optional bool is_realtime_loaded = 16;
bool Status::has_is_realtime_loaded() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Status::set_has_is_realtime_loaded() {
  _has_bits_[0] |= 0x00002000u;
}
void Status::clear_has_is_realtime_loaded() {
  _has_bits_[0] &= ~0x00002000u;
}
void Status::clear_is_realtime_loaded() {
  is_realtime_loaded_ = false;
  clear_has_is_realtime_loaded();
}
 bool Status::is_realtime_loaded() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.is_realtime_loaded)
  return is_realtime_loaded_;
}
 void Status::set_is_realtime_loaded(bool value) {
  set_has_is_realtime_loaded();
  is_realtime_loaded_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.is_realtime_loaded)
}

// optional string dataset_created_at = 17;
bool Status::has_dataset_created_at() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Status::set_has_dataset_created_at() {
  _has_bits_[0] |= 0x00004000u;
}
void Status::clear_has_dataset_created_at() {
  _has_bits_[0] &= ~0x00004000u;
}
void Status::clear_dataset_created_at() {
  dataset_created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataset_created_at();
}
 const ::std::string& Status::dataset_created_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.dataset_created_at)
  return dataset_created_at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_dataset_created_at(const ::std::string& value) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Status.dataset_created_at)
}
 void Status::set_dataset_created_at(const char* value) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.dataset_created_at)
}
 void Status::set_dataset_created_at(const char* value, size_t size) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.dataset_created_at)
}
 ::std::string* Status::mutable_dataset_created_at() {
  set_has_dataset_created_at();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.dataset_created_at)
  return dataset_created_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_dataset_created_at() {
  // @@protoc_insertion_point(field_release:pbnavitia.Status.dataset_created_at)
  clear_has_dataset_created_at();
  return dataset_created_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_dataset_created_at(::std::string* dataset_created_at) {
  if (dataset_created_at != NULL) {
    set_has_dataset_created_at();
  } else {
    clear_has_dataset_created_at();
  }
  dataset_created_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_created_at);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Status.dataset_created_at)
}

// repeated string rt_contributors = 18;
int Status::rt_contributors_size() const {
  return rt_contributors_.size();
}
void Status::clear_rt_contributors() {
  rt_contributors_.Clear();
}
 const ::std::string& Status::rt_contributors(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.rt_contributors)
  return rt_contributors_.Get(index);
}
 ::std::string* Status::mutable_rt_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Status.rt_contributors)
  return rt_contributors_.Mutable(index);
}
 void Status::set_rt_contributors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Status.rt_contributors)
  rt_contributors_.Mutable(index)->assign(value);
}
 void Status::set_rt_contributors(int index, const char* value) {
  rt_contributors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Status.rt_contributors)
}
 void Status::set_rt_contributors(int index, const char* value, size_t size) {
  rt_contributors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Status.rt_contributors)
}
 ::std::string* Status::add_rt_contributors() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Status.rt_contributors)
  return rt_contributors_.Add();
}
 void Status::add_rt_contributors(const ::std::string& value) {
  rt_contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Status.rt_contributors)
}
 void Status::add_rt_contributors(const char* value) {
  rt_contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Status.rt_contributors)
}
 void Status::add_rt_contributors(const char* value, size_t size) {
  rt_contributors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Status.rt_contributors)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Status::rt_contributors() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Status.rt_contributors)
  return rt_contributors_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Status::mutable_rt_contributors() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Status.rt_contributors)
  return &rt_contributors_;
}

// optional bool disruption_error = 19;
bool Status::has_disruption_error() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Status::set_has_disruption_error() {
  _has_bits_[0] |= 0x00010000u;
}
void Status::clear_has_disruption_error() {
  _has_bits_[0] &= ~0x00010000u;
}
void Status::clear_disruption_error() {
  disruption_error_ = false;
  clear_has_disruption_error();
}
 bool Status::disruption_error() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Status.disruption_error)
  return disruption_error_;
}
 void Status::set_disruption_error(bool value) {
  set_has_disruption_error();
  disruption_error_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Status.disruption_error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScheduleStopTime::kPropertiesFieldNumber;
const int ScheduleStopTime::kTimeFieldNumber;
const int ScheduleStopTime::kDateFieldNumber;
const int ScheduleStopTime::kDtStatusFieldNumber;
const int ScheduleStopTime::kRealtimeLevelFieldNumber;
const int ScheduleStopTime::kBaseDateTimeFieldNumber;
const int ScheduleStopTime::kImpactUrisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScheduleStopTime::ScheduleStopTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.ScheduleStopTime)
}

void ScheduleStopTime::InitAsDefaultInstance() {
  properties_ = const_cast< ::pbnavitia::Properties*>(&::pbnavitia::Properties::default_instance());
}

ScheduleStopTime::ScheduleStopTime(const ScheduleStopTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.ScheduleStopTime)
}

void ScheduleStopTime::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  properties_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  date_ = GOOGLE_ULONGLONG(0);
  dt_status_ = 0;
  realtime_level_ = 1;
  base_date_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScheduleStopTime::~ScheduleStopTime() {
  // @@protoc_insertion_point(destructor:pbnavitia.ScheduleStopTime)
  SharedDtor();
}

void ScheduleStopTime::SharedDtor() {
  if (this != default_instance_) {
    delete properties_;
  }
}

void ScheduleStopTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScheduleStopTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScheduleStopTime_descriptor_;
}

const ScheduleStopTime& ScheduleStopTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

ScheduleStopTime* ScheduleStopTime::default_instance_ = NULL;

ScheduleStopTime* ScheduleStopTime::New(::google::protobuf::Arena* arena) const {
  ScheduleStopTime* n = new ScheduleStopTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScheduleStopTime::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.ScheduleStopTime)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScheduleStopTime, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScheduleStopTime*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(time_, dt_status_);
    if (has_properties()) {
      if (properties_ != NULL) properties_->::pbnavitia::Properties::Clear();
    }
    realtime_level_ = 1;
    base_date_time_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  impact_uris_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScheduleStopTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.ScheduleStopTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.Properties properties = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_date;
        break;
      }

      // optional uint64 date = 4;
      case 4: {
        if (tag == 32) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dt_status;
        break;
      }

      // optional .pbnavitia.ResponseStatus dt_status = 5;
      case 5: {
        if (tag == 40) {
         parse_dt_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::ResponseStatus_IsValid(value)) {
            set_dt_status(static_cast< ::pbnavitia::ResponseStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_realtime_level;
        break;
      }

      // optional .pbnavitia.RTLevel realtime_level = 6;
      case 6: {
        if (tag == 48) {
         parse_realtime_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::RTLevel_IsValid(value)) {
            set_realtime_level(static_cast< ::pbnavitia::RTLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_base_date_time;
        break;
      }

      // optional uint64 base_date_time = 7;
      case 7: {
        if (tag == 56) {
         parse_base_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_date_time_)));
          set_has_base_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_impact_uris;
        break;
      }

      // repeated string impact_uris = 8;
      case 8: {
        if (tag == 66) {
         parse_impact_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impact_uris()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impact_uris(this->impact_uris_size() - 1).data(),
            this->impact_uris(this->impact_uris_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.ScheduleStopTime.impact_uris");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_impact_uris;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.ScheduleStopTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.ScheduleStopTime)
  return false;
#undef DO_
}

void ScheduleStopTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.ScheduleStopTime)
  // optional .pbnavitia.Properties properties = 2;
  if (has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->properties_, output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional uint64 date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->date(), output);
  }

  // optional .pbnavitia.ResponseStatus dt_status = 5;
  if (has_dt_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dt_status(), output);
  }

  // optional .pbnavitia.RTLevel realtime_level = 6;
  if (has_realtime_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->realtime_level(), output);
  }

  // optional uint64 base_date_time = 7;
  if (has_base_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->base_date_time(), output);
  }

  // repeated string impact_uris = 8;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ScheduleStopTime.impact_uris");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->impact_uris(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.ScheduleStopTime)
}

::google::protobuf::uint8* ScheduleStopTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.ScheduleStopTime)
  // optional .pbnavitia.Properties properties = 2;
  if (has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->properties_, false, target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional uint64 date = 4;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->date(), target);
  }

  // optional .pbnavitia.ResponseStatus dt_status = 5;
  if (has_dt_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dt_status(), target);
  }

  // optional .pbnavitia.RTLevel realtime_level = 6;
  if (has_realtime_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->realtime_level(), target);
  }

  // optional uint64 base_date_time = 7;
  if (has_base_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->base_date_time(), target);
  }

  // repeated string impact_uris = 8;
  for (int i = 0; i < this->impact_uris_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impact_uris(i).data(), this->impact_uris(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.ScheduleStopTime.impact_uris");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->impact_uris(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.ScheduleStopTime)
  return target;
}

int ScheduleStopTime::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.ScheduleStopTime)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .pbnavitia.Properties properties = 2;
    if (has_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->properties_);
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date());
    }

    // optional .pbnavitia.ResponseStatus dt_status = 5;
    if (has_dt_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dt_status());
    }

    // optional .pbnavitia.RTLevel realtime_level = 6;
    if (has_realtime_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->realtime_level());
    }

    // optional uint64 base_date_time = 7;
    if (has_base_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_date_time());
    }

  }
  // repeated string impact_uris = 8;
  total_size += 1 * this->impact_uris_size();
  for (int i = 0; i < this->impact_uris_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impact_uris(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScheduleStopTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.ScheduleStopTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScheduleStopTime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScheduleStopTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.ScheduleStopTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.ScheduleStopTime)
    MergeFrom(*source);
  }
}

void ScheduleStopTime::MergeFrom(const ScheduleStopTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.ScheduleStopTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  impact_uris_.MergeFrom(from.impact_uris_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_properties()) {
      mutable_properties()->::pbnavitia::Properties::MergeFrom(from.properties());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_dt_status()) {
      set_dt_status(from.dt_status());
    }
    if (from.has_realtime_level()) {
      set_realtime_level(from.realtime_level());
    }
    if (from.has_base_date_time()) {
      set_base_date_time(from.base_date_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScheduleStopTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.ScheduleStopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleStopTime::CopyFrom(const ScheduleStopTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.ScheduleStopTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleStopTime::IsInitialized() const {

  if (has_properties()) {
    if (!this->properties_->IsInitialized()) return false;
  }
  return true;
}

void ScheduleStopTime::Swap(ScheduleStopTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScheduleStopTime::InternalSwap(ScheduleStopTime* other) {
  std::swap(properties_, other->properties_);
  std::swap(time_, other->time_);
  std::swap(date_, other->date_);
  std::swap(dt_status_, other->dt_status_);
  std::swap(realtime_level_, other->realtime_level_);
  std::swap(base_date_time_, other->base_date_time_);
  impact_uris_.UnsafeArenaSwap(&other->impact_uris_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScheduleStopTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScheduleStopTime_descriptor_;
  metadata.reflection = ScheduleStopTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScheduleStopTime

// optional .pbnavitia.Properties properties = 2;
bool ScheduleStopTime::has_properties() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScheduleStopTime::set_has_properties() {
  _has_bits_[0] |= 0x00000001u;
}
void ScheduleStopTime::clear_has_properties() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScheduleStopTime::clear_properties() {
  if (properties_ != NULL) properties_->::pbnavitia::Properties::Clear();
  clear_has_properties();
}
const ::pbnavitia::Properties& ScheduleStopTime::properties() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.properties)
  return properties_ != NULL ? *properties_ : *default_instance_->properties_;
}
::pbnavitia::Properties* ScheduleStopTime::mutable_properties() {
  set_has_properties();
  if (properties_ == NULL) {
    properties_ = new ::pbnavitia::Properties;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.ScheduleStopTime.properties)
  return properties_;
}
::pbnavitia::Properties* ScheduleStopTime::release_properties() {
  // @@protoc_insertion_point(field_release:pbnavitia.ScheduleStopTime.properties)
  clear_has_properties();
  ::pbnavitia::Properties* temp = properties_;
  properties_ = NULL;
  return temp;
}
void ScheduleStopTime::set_allocated_properties(::pbnavitia::Properties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    set_has_properties();
  } else {
    clear_has_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.ScheduleStopTime.properties)
}

// optional uint64 time = 3;
bool ScheduleStopTime::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScheduleStopTime::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ScheduleStopTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScheduleStopTime::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::uint64 ScheduleStopTime::time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.time)
  return time_;
}
 void ScheduleStopTime::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.time)
}

// optional uint64 date = 4;
bool ScheduleStopTime::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScheduleStopTime::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
void ScheduleStopTime::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScheduleStopTime::clear_date() {
  date_ = GOOGLE_ULONGLONG(0);
  clear_has_date();
}
 ::google::protobuf::uint64 ScheduleStopTime::date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.date)
  return date_;
}
 void ScheduleStopTime::set_date(::google::protobuf::uint64 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.date)
}

// optional .pbnavitia.ResponseStatus dt_status = 5;
bool ScheduleStopTime::has_dt_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScheduleStopTime::set_has_dt_status() {
  _has_bits_[0] |= 0x00000008u;
}
void ScheduleStopTime::clear_has_dt_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScheduleStopTime::clear_dt_status() {
  dt_status_ = 0;
  clear_has_dt_status();
}
 ::pbnavitia::ResponseStatus ScheduleStopTime::dt_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.dt_status)
  return static_cast< ::pbnavitia::ResponseStatus >(dt_status_);
}
 void ScheduleStopTime::set_dt_status(::pbnavitia::ResponseStatus value) {
  assert(::pbnavitia::ResponseStatus_IsValid(value));
  set_has_dt_status();
  dt_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.dt_status)
}

// optional .pbnavitia.RTLevel realtime_level = 6;
bool ScheduleStopTime::has_realtime_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScheduleStopTime::set_has_realtime_level() {
  _has_bits_[0] |= 0x00000010u;
}
void ScheduleStopTime::clear_has_realtime_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScheduleStopTime::clear_realtime_level() {
  realtime_level_ = 1;
  clear_has_realtime_level();
}
 ::pbnavitia::RTLevel ScheduleStopTime::realtime_level() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.realtime_level)
  return static_cast< ::pbnavitia::RTLevel >(realtime_level_);
}
 void ScheduleStopTime::set_realtime_level(::pbnavitia::RTLevel value) {
  assert(::pbnavitia::RTLevel_IsValid(value));
  set_has_realtime_level();
  realtime_level_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.realtime_level)
}

// optional uint64 base_date_time = 7;
bool ScheduleStopTime::has_base_date_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ScheduleStopTime::set_has_base_date_time() {
  _has_bits_[0] |= 0x00000020u;
}
void ScheduleStopTime::clear_has_base_date_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void ScheduleStopTime::clear_base_date_time() {
  base_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_base_date_time();
}
 ::google::protobuf::uint64 ScheduleStopTime::base_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.base_date_time)
  return base_date_time_;
}
 void ScheduleStopTime::set_base_date_time(::google::protobuf::uint64 value) {
  set_has_base_date_time();
  base_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.base_date_time)
}

// repeated string impact_uris = 8;
int ScheduleStopTime::impact_uris_size() const {
  return impact_uris_.size();
}
void ScheduleStopTime::clear_impact_uris() {
  impact_uris_.Clear();
}
 const ::std::string& ScheduleStopTime::impact_uris(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.ScheduleStopTime.impact_uris)
  return impact_uris_.Get(index);
}
 ::std::string* ScheduleStopTime::mutable_impact_uris(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.ScheduleStopTime.impact_uris)
  return impact_uris_.Mutable(index);
}
 void ScheduleStopTime::set_impact_uris(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.ScheduleStopTime.impact_uris)
  impact_uris_.Mutable(index)->assign(value);
}
 void ScheduleStopTime::set_impact_uris(int index, const char* value) {
  impact_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.ScheduleStopTime.impact_uris)
}
 void ScheduleStopTime::set_impact_uris(int index, const char* value, size_t size) {
  impact_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.ScheduleStopTime.impact_uris)
}
 ::std::string* ScheduleStopTime::add_impact_uris() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.ScheduleStopTime.impact_uris)
  return impact_uris_.Add();
}
 void ScheduleStopTime::add_impact_uris(const ::std::string& value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.ScheduleStopTime.impact_uris)
}
 void ScheduleStopTime::add_impact_uris(const char* value) {
  impact_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.ScheduleStopTime.impact_uris)
}
 void ScheduleStopTime::add_impact_uris(const char* value, size_t size) {
  impact_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.ScheduleStopTime.impact_uris)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScheduleStopTime::impact_uris() const {
  // @@protoc_insertion_point(field_list:pbnavitia.ScheduleStopTime.impact_uris)
  return impact_uris_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ScheduleStopTime::mutable_impact_uris() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.ScheduleStopTime.impact_uris)
  return &impact_uris_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteScheduleRow::kStopPointFieldNumber;
const int RouteScheduleRow::kDateTimesFieldNumber;
const int RouteScheduleRow::kStopTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteScheduleRow::RouteScheduleRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.RouteScheduleRow)
}

void RouteScheduleRow::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
}

RouteScheduleRow::RouteScheduleRow(const RouteScheduleRow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.RouteScheduleRow)
}

void RouteScheduleRow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stop_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteScheduleRow::~RouteScheduleRow() {
  // @@protoc_insertion_point(destructor:pbnavitia.RouteScheduleRow)
  SharedDtor();
}

void RouteScheduleRow::SharedDtor() {
  if (this != default_instance_) {
    delete stop_point_;
  }
}

void RouteScheduleRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteScheduleRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteScheduleRow_descriptor_;
}

const RouteScheduleRow& RouteScheduleRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

RouteScheduleRow* RouteScheduleRow::default_instance_ = NULL;

RouteScheduleRow* RouteScheduleRow::New(::google::protobuf::Arena* arena) const {
  RouteScheduleRow* n = new RouteScheduleRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteScheduleRow::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.RouteScheduleRow)
  if (has_stop_point()) {
    if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  }
  date_times_.Clear();
  stop_times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RouteScheduleRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.RouteScheduleRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.StopPoint stop_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date_times;
        break;
      }

      // repeated .pbnavitia.ScheduleStopTime date_times = 2;
      case 2: {
        if (tag == 18) {
         parse_date_times:
          DO_(input->IncrementRecursionDepth());
         parse_loop_date_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_date_times()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_date_times;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_stop_times;
        break;
      }

      // repeated string stop_times = 3;
      case 3: {
        if (tag == 26) {
         parse_stop_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stop_times()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stop_times(this->stop_times_size() - 1).data(),
            this->stop_times(this->stop_times_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.RouteScheduleRow.stop_times");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stop_times;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.RouteScheduleRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.RouteScheduleRow)
  return false;
#undef DO_
}

void RouteScheduleRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.RouteScheduleRow)
  // required .pbnavitia.StopPoint stop_point = 1;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // repeated .pbnavitia.ScheduleStopTime date_times = 2;
  for (unsigned int i = 0, n = this->date_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->date_times(i), output);
  }

  // repeated string stop_times = 3;
  for (int i = 0; i < this->stop_times_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_times(i).data(), this->stop_times(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.RouteScheduleRow.stop_times");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stop_times(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.RouteScheduleRow)
}

::google::protobuf::uint8* RouteScheduleRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.RouteScheduleRow)
  // required .pbnavitia.StopPoint stop_point = 1;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_point_, false, target);
  }

  // repeated .pbnavitia.ScheduleStopTime date_times = 2;
  for (unsigned int i = 0, n = this->date_times_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->date_times(i), false, target);
  }

  // repeated string stop_times = 3;
  for (int i = 0; i < this->stop_times_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_times(i).data(), this->stop_times(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.RouteScheduleRow.stop_times");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stop_times(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.RouteScheduleRow)
  return target;
}

int RouteScheduleRow::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.RouteScheduleRow)
  int total_size = 0;

  // required .pbnavitia.StopPoint stop_point = 1;
  if (has_stop_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);
  }
  // repeated .pbnavitia.ScheduleStopTime date_times = 2;
  total_size += 1 * this->date_times_size();
  for (int i = 0; i < this->date_times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->date_times(i));
  }

  // repeated string stop_times = 3;
  total_size += 1 * this->stop_times_size();
  for (int i = 0; i < this->stop_times_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stop_times(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteScheduleRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.RouteScheduleRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RouteScheduleRow* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteScheduleRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.RouteScheduleRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.RouteScheduleRow)
    MergeFrom(*source);
  }
}

void RouteScheduleRow::MergeFrom(const RouteScheduleRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.RouteScheduleRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  date_times_.MergeFrom(from.date_times_);
  stop_times_.MergeFrom(from.stop_times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RouteScheduleRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.RouteScheduleRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteScheduleRow::CopyFrom(const RouteScheduleRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.RouteScheduleRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteScheduleRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->date_times())) return false;
  return true;
}

void RouteScheduleRow::Swap(RouteScheduleRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteScheduleRow::InternalSwap(RouteScheduleRow* other) {
  std::swap(stop_point_, other->stop_point_);
  date_times_.UnsafeArenaSwap(&other->date_times_);
  stop_times_.UnsafeArenaSwap(&other->stop_times_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteScheduleRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteScheduleRow_descriptor_;
  metadata.reflection = RouteScheduleRow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteScheduleRow

// required .pbnavitia.StopPoint stop_point = 1;
bool RouteScheduleRow::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RouteScheduleRow::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
void RouteScheduleRow::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void RouteScheduleRow::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& RouteScheduleRow::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteScheduleRow.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* RouteScheduleRow::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteScheduleRow.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* RouteScheduleRow::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.RouteScheduleRow.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void RouteScheduleRow::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RouteScheduleRow.stop_point)
}

// repeated .pbnavitia.ScheduleStopTime date_times = 2;
int RouteScheduleRow::date_times_size() const {
  return date_times_.size();
}
void RouteScheduleRow::clear_date_times() {
  date_times_.Clear();
}
const ::pbnavitia::ScheduleStopTime& RouteScheduleRow::date_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteScheduleRow.date_times)
  return date_times_.Get(index);
}
::pbnavitia::ScheduleStopTime* RouteScheduleRow::mutable_date_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteScheduleRow.date_times)
  return date_times_.Mutable(index);
}
::pbnavitia::ScheduleStopTime* RouteScheduleRow::add_date_times() {
  // @@protoc_insertion_point(field_add:pbnavitia.RouteScheduleRow.date_times)
  return date_times_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >*
RouteScheduleRow::mutable_date_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.RouteScheduleRow.date_times)
  return &date_times_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >&
RouteScheduleRow::date_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.RouteScheduleRow.date_times)
  return date_times_;
}

// repeated string stop_times = 3;
int RouteScheduleRow::stop_times_size() const {
  return stop_times_.size();
}
void RouteScheduleRow::clear_stop_times() {
  stop_times_.Clear();
}
 const ::std::string& RouteScheduleRow::stop_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteScheduleRow.stop_times)
  return stop_times_.Get(index);
}
 ::std::string* RouteScheduleRow::mutable_stop_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteScheduleRow.stop_times)
  return stop_times_.Mutable(index);
}
 void RouteScheduleRow::set_stop_times(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.RouteScheduleRow.stop_times)
  stop_times_.Mutable(index)->assign(value);
}
 void RouteScheduleRow::set_stop_times(int index, const char* value) {
  stop_times_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.RouteScheduleRow.stop_times)
}
 void RouteScheduleRow::set_stop_times(int index, const char* value, size_t size) {
  stop_times_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.RouteScheduleRow.stop_times)
}
 ::std::string* RouteScheduleRow::add_stop_times() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.RouteScheduleRow.stop_times)
  return stop_times_.Add();
}
 void RouteScheduleRow::add_stop_times(const ::std::string& value) {
  stop_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.RouteScheduleRow.stop_times)
}
 void RouteScheduleRow::add_stop_times(const char* value) {
  stop_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.RouteScheduleRow.stop_times)
}
 void RouteScheduleRow::add_stop_times(const char* value, size_t size) {
  stop_times_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.RouteScheduleRow.stop_times)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
RouteScheduleRow::stop_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.RouteScheduleRow.stop_times)
  return stop_times_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
RouteScheduleRow::mutable_stop_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.RouteScheduleRow.stop_times)
  return &stop_times_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kPtDisplayInformationsFieldNumber;
const int Header::kAdditionalInformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Header)
}

void Header::InitAsDefaultInstance() {
  pt_display_informations_ = const_cast< ::pbnavitia::PtDisplayInfo*>(&::pbnavitia::PtDisplayInfo::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  pt_display_informations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:pbnavitia.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
    delete pt_display_informations_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Header)
  if (has_pt_display_informations()) {
    if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  }
  additional_informations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.PtDisplayInfo pt_display_informations = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_display_informations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_additional_informations;
        break;
      }

      // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 3;
      case 3: {
        if (tag == 24) {
         parse_additional_informations:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::SectionAdditionalInformationType_IsValid(value)) {
            add_additional_informations(static_cast< ::pbnavitia::SectionAdditionalInformationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::pbnavitia::SectionAdditionalInformationType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_additional_informations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_additional_informations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Header)
  // required .pbnavitia.PtDisplayInfo pt_display_informations = 1;
  if (has_pt_display_informations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pt_display_informations_, output);
  }

  // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 3;
  for (int i = 0; i < this->additional_informations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->additional_informations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Header)
  // required .pbnavitia.PtDisplayInfo pt_display_informations = 1;
  if (has_pt_display_informations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pt_display_informations_, false, target);
  }

  // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 3;
  for (int i = 0; i < this->additional_informations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->additional_informations(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Header)
  return target;
}

int Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Header)
  int total_size = 0;

  // required .pbnavitia.PtDisplayInfo pt_display_informations = 1;
  if (has_pt_display_informations()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pt_display_informations_);
  }
  // repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->additional_informations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->additional_informations(i));
    }
    total_size += 1 * this->additional_informations_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  additional_informations_.MergeFrom(from.additional_informations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pt_display_informations()) {
      mutable_pt_display_informations()->::pbnavitia::PtDisplayInfo::MergeFrom(from.pt_display_informations());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pt_display_informations()) {
    if (!this->pt_display_informations_->IsInitialized()) return false;
  }
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(pt_display_informations_, other->pt_display_informations_);
  additional_informations_.UnsafeArenaSwap(&other->additional_informations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required .pbnavitia.PtDisplayInfo pt_display_informations = 1;
bool Header::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
const ::pbnavitia::PtDisplayInfo& Header::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Header.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* Header::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Header.pt_display_informations)
  return pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* Header::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.Header.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
void Header::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Header.pt_display_informations)
}

// repeated .pbnavitia.SectionAdditionalInformationType additional_informations = 3;
int Header::additional_informations_size() const {
  return additional_informations_.size();
}
void Header::clear_additional_informations() {
  additional_informations_.Clear();
}
 ::pbnavitia::SectionAdditionalInformationType Header::additional_informations(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Header.additional_informations)
  return static_cast< ::pbnavitia::SectionAdditionalInformationType >(additional_informations_.Get(index));
}
 void Header::set_additional_informations(int index, ::pbnavitia::SectionAdditionalInformationType value) {
  assert(::pbnavitia::SectionAdditionalInformationType_IsValid(value));
  additional_informations_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnavitia.Header.additional_informations)
}
 void Header::add_additional_informations(::pbnavitia::SectionAdditionalInformationType value) {
  assert(::pbnavitia::SectionAdditionalInformationType_IsValid(value));
  additional_informations_.Add(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Header.additional_informations)
}
 const ::google::protobuf::RepeatedField<int>&
Header::additional_informations() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Header.additional_informations)
  return additional_informations_;
}
 ::google::protobuf::RepeatedField<int>*
Header::mutable_additional_informations() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Header.additional_informations)
  return &additional_informations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kRowsFieldNumber;
const int Table::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Table)
}

void Table::InitAsDefaultInstance() {
}

Table::Table(const Table& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Table)
}

void Table::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:pbnavitia.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_descriptor_;
}

const Table& Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Table* Table::default_instance_ = NULL;

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Table)
  rows_.Clear();
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.RouteScheduleRow rows = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rows;
        if (input->ExpectTag(18)) goto parse_loop_headers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Header headers = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_headers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Table)
  // repeated .pbnavitia.RouteScheduleRow rows = 1;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rows(i), output);
  }

  // repeated .pbnavitia.Header headers = 2;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->headers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Table)
  // repeated .pbnavitia.RouteScheduleRow rows = 1;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rows(i), false, target);
  }

  // repeated .pbnavitia.Header headers = 2;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->headers(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Table)
  return target;
}

int Table::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Table)
  int total_size = 0;

  // repeated .pbnavitia.RouteScheduleRow rows = 1;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  // repeated .pbnavitia.Header headers = 2;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Table)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Table* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Table)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rows_.MergeFrom(from.rows_);
  headers_.MergeFrom(from.headers_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rows())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->headers())) return false;
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  rows_.UnsafeArenaSwap(&other->rows_);
  headers_.UnsafeArenaSwap(&other->headers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_descriptor_;
  metadata.reflection = Table_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// repeated .pbnavitia.RouteScheduleRow rows = 1;
int Table::rows_size() const {
  return rows_.size();
}
void Table::clear_rows() {
  rows_.Clear();
}
const ::pbnavitia::RouteScheduleRow& Table::rows(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Table.rows)
  return rows_.Get(index);
}
::pbnavitia::RouteScheduleRow* Table::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Table.rows)
  return rows_.Mutable(index);
}
::pbnavitia::RouteScheduleRow* Table::add_rows() {
  // @@protoc_insertion_point(field_add:pbnavitia.Table.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteScheduleRow >*
Table::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Table.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteScheduleRow >&
Table::rows() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Table.rows)
  return rows_;
}

// repeated .pbnavitia.Header headers = 2;
int Table::headers_size() const {
  return headers_.size();
}
void Table::clear_headers() {
  headers_.Clear();
}
const ::pbnavitia::Header& Table::headers(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Table.headers)
  return headers_.Get(index);
}
::pbnavitia::Header* Table::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Table.headers)
  return headers_.Mutable(index);
}
::pbnavitia::Header* Table::add_headers() {
  // @@protoc_insertion_point(field_add:pbnavitia.Table.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Header >*
Table::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Table.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Header >&
Table::headers() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Table.headers)
  return headers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteSchedule::kTableFieldNumber;
const int RouteSchedule::kPtDisplayInformationsFieldNumber;
const int RouteSchedule::kGeojsonFieldNumber;
const int RouteSchedule::kResponseStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteSchedule::RouteSchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.RouteSchedule)
}

void RouteSchedule::InitAsDefaultInstance() {
  table_ = const_cast< ::pbnavitia::Table*>(&::pbnavitia::Table::default_instance());
  pt_display_informations_ = const_cast< ::pbnavitia::PtDisplayInfo*>(&::pbnavitia::PtDisplayInfo::default_instance());
  geojson_ = const_cast< ::pbnavitia::MultiLineString*>(&::pbnavitia::MultiLineString::default_instance());
}

RouteSchedule::RouteSchedule(const RouteSchedule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.RouteSchedule)
}

void RouteSchedule::SharedCtor() {
  _cached_size_ = 0;
  table_ = NULL;
  pt_display_informations_ = NULL;
  geojson_ = NULL;
  response_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteSchedule::~RouteSchedule() {
  // @@protoc_insertion_point(destructor:pbnavitia.RouteSchedule)
  SharedDtor();
}

void RouteSchedule::SharedDtor() {
  if (this != default_instance_) {
    delete table_;
    delete pt_display_informations_;
    delete geojson_;
  }
}

void RouteSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteSchedule_descriptor_;
}

const RouteSchedule& RouteSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

RouteSchedule* RouteSchedule::default_instance_ = NULL;

RouteSchedule* RouteSchedule::New(::google::protobuf::Arena* arena) const {
  RouteSchedule* n = new RouteSchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.RouteSchedule)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_table()) {
      if (table_ != NULL) table_->::pbnavitia::Table::Clear();
    }
    if (has_pt_display_informations()) {
      if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
    }
    if (has_geojson()) {
      if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
    }
    response_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RouteSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.RouteSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.Table table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pt_display_informations;
        break;
      }

      // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
      case 2: {
        if (tag == 18) {
         parse_pt_display_informations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_display_informations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_geojson;
        break;
      }

      // optional .pbnavitia.MultiLineString geojson = 3;
      case 3: {
        if (tag == 26) {
         parse_geojson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geojson()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_response_status;
        break;
      }

      // optional .pbnavitia.ResponseStatus response_status = 4;
      case 4: {
        if (tag == 32) {
         parse_response_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::ResponseStatus_IsValid(value)) {
            set_response_status(static_cast< ::pbnavitia::ResponseStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.RouteSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.RouteSchedule)
  return false;
#undef DO_
}

void RouteSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.RouteSchedule)
  // required .pbnavitia.Table table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_, output);
  }

  // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
  if (has_pt_display_informations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pt_display_informations_, output);
  }

  // optional .pbnavitia.MultiLineString geojson = 3;
  if (has_geojson()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->geojson_, output);
  }

  // optional .pbnavitia.ResponseStatus response_status = 4;
  if (has_response_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->response_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.RouteSchedule)
}

::google::protobuf::uint8* RouteSchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.RouteSchedule)
  // required .pbnavitia.Table table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->table_, false, target);
  }

  // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
  if (has_pt_display_informations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pt_display_informations_, false, target);
  }

  // optional .pbnavitia.MultiLineString geojson = 3;
  if (has_geojson()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->geojson_, false, target);
  }

  // optional .pbnavitia.ResponseStatus response_status = 4;
  if (has_response_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->response_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.RouteSchedule)
  return target;
}

int RouteSchedule::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.RouteSchedule)
  int total_size = 0;

  if (has_table()) {
    // required .pbnavitia.Table table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  if (has_pt_display_informations()) {
    // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pt_display_informations_);
  }

  return total_size;
}
int RouteSchedule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.RouteSchedule)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pbnavitia.Table table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);

    // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pt_display_informations_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional .pbnavitia.MultiLineString geojson = 3;
    if (has_geojson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geojson_);
    }

    // optional .pbnavitia.ResponseStatus response_status = 4;
    if (has_response_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteSchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.RouteSchedule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RouteSchedule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteSchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.RouteSchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.RouteSchedule)
    MergeFrom(*source);
  }
}

void RouteSchedule::MergeFrom(const RouteSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.RouteSchedule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      mutable_table()->::pbnavitia::Table::MergeFrom(from.table());
    }
    if (from.has_pt_display_informations()) {
      mutable_pt_display_informations()->::pbnavitia::PtDisplayInfo::MergeFrom(from.pt_display_informations());
    }
    if (from.has_geojson()) {
      mutable_geojson()->::pbnavitia::MultiLineString::MergeFrom(from.geojson());
    }
    if (from.has_response_status()) {
      set_response_status(from.response_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RouteSchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.RouteSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteSchedule::CopyFrom(const RouteSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.RouteSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSchedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_table()) {
    if (!this->table_->IsInitialized()) return false;
  }
  if (has_pt_display_informations()) {
    if (!this->pt_display_informations_->IsInitialized()) return false;
  }
  if (has_geojson()) {
    if (!this->geojson_->IsInitialized()) return false;
  }
  return true;
}

void RouteSchedule::Swap(RouteSchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteSchedule::InternalSwap(RouteSchedule* other) {
  std::swap(table_, other->table_);
  std::swap(pt_display_informations_, other->pt_display_informations_);
  std::swap(geojson_, other->geojson_);
  std::swap(response_status_, other->response_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteSchedule_descriptor_;
  metadata.reflection = RouteSchedule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteSchedule

// required .pbnavitia.Table table = 1;
bool RouteSchedule::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RouteSchedule::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void RouteSchedule::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void RouteSchedule::clear_table() {
  if (table_ != NULL) table_->::pbnavitia::Table::Clear();
  clear_has_table();
}
const ::pbnavitia::Table& RouteSchedule::table() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteSchedule.table)
  return table_ != NULL ? *table_ : *default_instance_->table_;
}
::pbnavitia::Table* RouteSchedule::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    table_ = new ::pbnavitia::Table;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteSchedule.table)
  return table_;
}
::pbnavitia::Table* RouteSchedule::release_table() {
  // @@protoc_insertion_point(field_release:pbnavitia.RouteSchedule.table)
  clear_has_table();
  ::pbnavitia::Table* temp = table_;
  table_ = NULL;
  return temp;
}
void RouteSchedule::set_allocated_table(::pbnavitia::Table* table) {
  delete table_;
  table_ = table;
  if (table) {
    set_has_table();
  } else {
    clear_has_table();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RouteSchedule.table)
}

// required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
bool RouteSchedule::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RouteSchedule::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000002u;
}
void RouteSchedule::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000002u;
}
void RouteSchedule::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
const ::pbnavitia::PtDisplayInfo& RouteSchedule::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteSchedule.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* RouteSchedule::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteSchedule.pt_display_informations)
  return pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* RouteSchedule::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.RouteSchedule.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
void RouteSchedule::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RouteSchedule.pt_display_informations)
}

// optional .pbnavitia.MultiLineString geojson = 3;
bool RouteSchedule::has_geojson() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RouteSchedule::set_has_geojson() {
  _has_bits_[0] |= 0x00000004u;
}
void RouteSchedule::clear_has_geojson() {
  _has_bits_[0] &= ~0x00000004u;
}
void RouteSchedule::clear_geojson() {
  if (geojson_ != NULL) geojson_->::pbnavitia::MultiLineString::Clear();
  clear_has_geojson();
}
const ::pbnavitia::MultiLineString& RouteSchedule::geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteSchedule.geojson)
  return geojson_ != NULL ? *geojson_ : *default_instance_->geojson_;
}
::pbnavitia::MultiLineString* RouteSchedule::mutable_geojson() {
  set_has_geojson();
  if (geojson_ == NULL) {
    geojson_ = new ::pbnavitia::MultiLineString;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RouteSchedule.geojson)
  return geojson_;
}
::pbnavitia::MultiLineString* RouteSchedule::release_geojson() {
  // @@protoc_insertion_point(field_release:pbnavitia.RouteSchedule.geojson)
  clear_has_geojson();
  ::pbnavitia::MultiLineString* temp = geojson_;
  geojson_ = NULL;
  return temp;
}
void RouteSchedule::set_allocated_geojson(::pbnavitia::MultiLineString* geojson) {
  delete geojson_;
  geojson_ = geojson;
  if (geojson) {
    set_has_geojson();
  } else {
    clear_has_geojson();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RouteSchedule.geojson)
}

// optional .pbnavitia.ResponseStatus response_status = 4;
bool RouteSchedule::has_response_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RouteSchedule::set_has_response_status() {
  _has_bits_[0] |= 0x00000008u;
}
void RouteSchedule::clear_has_response_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void RouteSchedule::clear_response_status() {
  response_status_ = 0;
  clear_has_response_status();
}
 ::pbnavitia::ResponseStatus RouteSchedule::response_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RouteSchedule.response_status)
  return static_cast< ::pbnavitia::ResponseStatus >(response_status_);
}
 void RouteSchedule::set_response_status(::pbnavitia::ResponseStatus value) {
  assert(::pbnavitia::ResponseStatus_IsValid(value));
  set_has_response_status();
  response_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.RouteSchedule.response_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Passage::kStopDateTimeFieldNumber;
const int Passage::kStopPointFieldNumber;
const int Passage::kPtDisplayInformationsFieldNumber;
const int Passage::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Passage::Passage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Passage)
}

void Passage::InitAsDefaultInstance() {
  stop_date_time_ = const_cast< ::pbnavitia::StopDateTime*>(&::pbnavitia::StopDateTime::default_instance());
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
  pt_display_informations_ = const_cast< ::pbnavitia::PtDisplayInfo*>(&::pbnavitia::PtDisplayInfo::default_instance());
  route_ = const_cast< ::pbnavitia::Route*>(&::pbnavitia::Route::default_instance());
}

Passage::Passage(const Passage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Passage)
}

void Passage::SharedCtor() {
  _cached_size_ = 0;
  stop_date_time_ = NULL;
  stop_point_ = NULL;
  pt_display_informations_ = NULL;
  route_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:pbnavitia.Passage)
  SharedDtor();
}

void Passage::SharedDtor() {
  if (this != default_instance_) {
    delete stop_date_time_;
    delete stop_point_;
    delete pt_display_informations_;
    delete route_;
  }
}

void Passage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Passage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Passage_descriptor_;
}

const Passage& Passage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Passage* Passage::default_instance_ = NULL;

Passage* Passage::New(::google::protobuf::Arena* arena) const {
  Passage* n = new Passage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Passage)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_stop_date_time()) {
      if (stop_date_time_ != NULL) stop_date_time_->::pbnavitia::StopDateTime::Clear();
    }
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
    if (has_pt_display_informations()) {
      if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
    }
    if (has_route()) {
      if (route_ != NULL) route_->::pbnavitia::Route::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Passage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Passage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.StopDateTime stop_date_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_date_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop_point;
        break;
      }

      // required .pbnavitia.StopPoint stop_point = 2;
      case 2: {
        if (tag == 18) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pt_display_informations;
        break;
      }

      // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
      case 3: {
        if (tag == 26) {
         parse_pt_display_informations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_display_informations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_route;
        break;
      }

      // optional .pbnavitia.Route route = 4;
      case 4: {
        if (tag == 34) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Passage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Passage)
  return false;
#undef DO_
}

void Passage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Passage)
  // required .pbnavitia.StopDateTime stop_date_time = 1;
  if (has_stop_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_date_time_, output);
  }

  // required .pbnavitia.StopPoint stop_point = 2;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stop_point_, output);
  }

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
  if (has_pt_display_informations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pt_display_informations_, output);
  }

  // optional .pbnavitia.Route route = 4;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->route_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Passage)
}

::google::protobuf::uint8* Passage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Passage)
  // required .pbnavitia.StopDateTime stop_date_time = 1;
  if (has_stop_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_date_time_, false, target);
  }

  // required .pbnavitia.StopPoint stop_point = 2;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stop_point_, false, target);
  }

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
  if (has_pt_display_informations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pt_display_informations_, false, target);
  }

  // optional .pbnavitia.Route route = 4;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->route_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Passage)
  return target;
}

int Passage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.Passage)
  int total_size = 0;

  if (has_stop_date_time()) {
    // required .pbnavitia.StopDateTime stop_date_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_date_time_);
  }

  if (has_stop_point()) {
    // required .pbnavitia.StopPoint stop_point = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);
  }

  return total_size;
}
int Passage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Passage)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pbnavitia.StopDateTime stop_date_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_date_time_);

    // required .pbnavitia.StopPoint stop_point = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
    if (has_pt_display_informations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pt_display_informations_);
    }

    // optional .pbnavitia.Route route = 4;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->route_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Passage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Passage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Passage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Passage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Passage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Passage)
    MergeFrom(*source);
  }
}

void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Passage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_date_time()) {
      mutable_stop_date_time()->::pbnavitia::StopDateTime::MergeFrom(from.stop_date_time());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_pt_display_informations()) {
      mutable_pt_display_informations()->::pbnavitia::PtDisplayInfo::MergeFrom(from.pt_display_informations());
    }
    if (from.has_route()) {
      mutable_route()->::pbnavitia::Route::MergeFrom(from.route());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Passage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stop_date_time()) {
    if (!this->stop_date_time_->IsInitialized()) return false;
  }
  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  if (has_pt_display_informations()) {
    if (!this->pt_display_informations_->IsInitialized()) return false;
  }
  if (has_route()) {
    if (!this->route_->IsInitialized()) return false;
  }
  return true;
}

void Passage::Swap(Passage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Passage::InternalSwap(Passage* other) {
  std::swap(stop_date_time_, other->stop_date_time_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(pt_display_informations_, other->pt_display_informations_);
  std::swap(route_, other->route_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Passage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Passage_descriptor_;
  metadata.reflection = Passage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Passage

// required .pbnavitia.StopDateTime stop_date_time = 1;
bool Passage::has_stop_date_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Passage::set_has_stop_date_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Passage::clear_has_stop_date_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Passage::clear_stop_date_time() {
  if (stop_date_time_ != NULL) stop_date_time_->::pbnavitia::StopDateTime::Clear();
  clear_has_stop_date_time();
}
const ::pbnavitia::StopDateTime& Passage::stop_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Passage.stop_date_time)
  return stop_date_time_ != NULL ? *stop_date_time_ : *default_instance_->stop_date_time_;
}
::pbnavitia::StopDateTime* Passage::mutable_stop_date_time() {
  set_has_stop_date_time();
  if (stop_date_time_ == NULL) {
    stop_date_time_ = new ::pbnavitia::StopDateTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Passage.stop_date_time)
  return stop_date_time_;
}
::pbnavitia::StopDateTime* Passage::release_stop_date_time() {
  // @@protoc_insertion_point(field_release:pbnavitia.Passage.stop_date_time)
  clear_has_stop_date_time();
  ::pbnavitia::StopDateTime* temp = stop_date_time_;
  stop_date_time_ = NULL;
  return temp;
}
void Passage::set_allocated_stop_date_time(::pbnavitia::StopDateTime* stop_date_time) {
  delete stop_date_time_;
  stop_date_time_ = stop_date_time;
  if (stop_date_time) {
    set_has_stop_date_time();
  } else {
    clear_has_stop_date_time();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Passage.stop_date_time)
}

// required .pbnavitia.StopPoint stop_point = 2;
bool Passage::has_stop_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Passage::set_has_stop_point() {
  _has_bits_[0] |= 0x00000002u;
}
void Passage::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void Passage::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& Passage::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Passage.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* Passage::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Passage.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* Passage::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.Passage.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void Passage::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Passage.stop_point)
}

// optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
bool Passage::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Passage::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000004u;
}
void Passage::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000004u;
}
void Passage::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
const ::pbnavitia::PtDisplayInfo& Passage::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Passage.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* Passage::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Passage.pt_display_informations)
  return pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* Passage::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.Passage.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
void Passage::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Passage.pt_display_informations)
}

// optional .pbnavitia.Route route = 4;
bool Passage::has_route() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Passage::set_has_route() {
  _has_bits_[0] |= 0x00000008u;
}
void Passage::clear_has_route() {
  _has_bits_[0] &= ~0x00000008u;
}
void Passage::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
const ::pbnavitia::Route& Passage::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Passage.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
::pbnavitia::Route* Passage::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Passage.route)
  return route_;
}
::pbnavitia::Route* Passage::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.Passage.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
void Passage::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Passage.route)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutePoint::kRouteFieldNumber;
const int RoutePoint::kStopPointFieldNumber;
const int RoutePoint::kPtDisplayInformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutePoint::RoutePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.RoutePoint)
}

void RoutePoint::InitAsDefaultInstance() {
  route_ = const_cast< ::pbnavitia::Route*>(&::pbnavitia::Route::default_instance());
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
  pt_display_informations_ = const_cast< ::pbnavitia::PtDisplayInfo*>(&::pbnavitia::PtDisplayInfo::default_instance());
}

RoutePoint::RoutePoint(const RoutePoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.RoutePoint)
}

void RoutePoint::SharedCtor() {
  _cached_size_ = 0;
  route_ = NULL;
  stop_point_ = NULL;
  pt_display_informations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutePoint::~RoutePoint() {
  // @@protoc_insertion_point(destructor:pbnavitia.RoutePoint)
  SharedDtor();
}

void RoutePoint::SharedDtor() {
  if (this != default_instance_) {
    delete route_;
    delete stop_point_;
    delete pt_display_informations_;
  }
}

void RoutePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutePoint_descriptor_;
}

const RoutePoint& RoutePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

RoutePoint* RoutePoint::default_instance_ = NULL;

RoutePoint* RoutePoint::New(::google::protobuf::Arena* arena) const {
  RoutePoint* n = new RoutePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.RoutePoint)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_route()) {
      if (route_ != NULL) route_->::pbnavitia::Route::Clear();
    }
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
    if (has_pt_display_informations()) {
      if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoutePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.RoutePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.Route route = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop_point;
        break;
      }

      // optional .pbnavitia.StopPoint stop_point = 2;
      case 2: {
        if (tag == 18) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pt_display_informations;
        break;
      }

      // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
      case 3: {
        if (tag == 26) {
         parse_pt_display_informations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_display_informations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.RoutePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.RoutePoint)
  return false;
#undef DO_
}

void RoutePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.RoutePoint)
  // optional .pbnavitia.Route route = 1;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->route_, output);
  }

  // optional .pbnavitia.StopPoint stop_point = 2;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stop_point_, output);
  }

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
  if (has_pt_display_informations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pt_display_informations_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.RoutePoint)
}

::google::protobuf::uint8* RoutePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.RoutePoint)
  // optional .pbnavitia.Route route = 1;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->route_, false, target);
  }

  // optional .pbnavitia.StopPoint stop_point = 2;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stop_point_, false, target);
  }

  // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
  if (has_pt_display_informations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pt_display_informations_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.RoutePoint)
  return target;
}

int RoutePoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.RoutePoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .pbnavitia.Route route = 1;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->route_);
    }

    // optional .pbnavitia.StopPoint stop_point = 2;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
    if (has_pt_display_informations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pt_display_informations_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.RoutePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoutePoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.RoutePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.RoutePoint)
    MergeFrom(*source);
  }
}

void RoutePoint::MergeFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.RoutePoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_route()) {
      mutable_route()->::pbnavitia::Route::MergeFrom(from.route());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_pt_display_informations()) {
      mutable_pt_display_informations()->::pbnavitia::PtDisplayInfo::MergeFrom(from.pt_display_informations());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoutePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePoint::CopyFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePoint::IsInitialized() const {

  if (has_route()) {
    if (!this->route_->IsInitialized()) return false;
  }
  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  if (has_pt_display_informations()) {
    if (!this->pt_display_informations_->IsInitialized()) return false;
  }
  return true;
}

void RoutePoint::Swap(RoutePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutePoint::InternalSwap(RoutePoint* other) {
  std::swap(route_, other->route_);
  std::swap(stop_point_, other->stop_point_);
  std::swap(pt_display_informations_, other->pt_display_informations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutePoint_descriptor_;
  metadata.reflection = RoutePoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutePoint

// optional .pbnavitia.Route route = 1;
bool RoutePoint::has_route() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoutePoint::set_has_route() {
  _has_bits_[0] |= 0x00000001u;
}
void RoutePoint::clear_has_route() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoutePoint::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
const ::pbnavitia::Route& RoutePoint::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutePoint.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
::pbnavitia::Route* RoutePoint::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RoutePoint.route)
  return route_;
}
::pbnavitia::Route* RoutePoint::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.RoutePoint.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
void RoutePoint::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RoutePoint.route)
}

// optional .pbnavitia.StopPoint stop_point = 2;
bool RoutePoint::has_stop_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoutePoint::set_has_stop_point() {
  _has_bits_[0] |= 0x00000002u;
}
void RoutePoint::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoutePoint::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& RoutePoint::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutePoint.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* RoutePoint::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RoutePoint.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* RoutePoint::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.RoutePoint.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void RoutePoint::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RoutePoint.stop_point)
}

// optional .pbnavitia.PtDisplayInfo pt_display_informations = 3;
bool RoutePoint::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoutePoint::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000004u;
}
void RoutePoint::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoutePoint::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
const ::pbnavitia::PtDisplayInfo& RoutePoint::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutePoint.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* RoutePoint::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.RoutePoint.pt_display_informations)
  return pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* RoutePoint::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.RoutePoint.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
void RoutePoint::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.RoutePoint.pt_display_informations)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoardItem::kHourFieldNumber;
const int BoardItem::kMinutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoardItem::BoardItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.BoardItem)
}

void BoardItem::InitAsDefaultInstance() {
}

BoardItem::BoardItem(const BoardItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.BoardItem)
}

void BoardItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hour_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoardItem::~BoardItem() {
  // @@protoc_insertion_point(destructor:pbnavitia.BoardItem)
  SharedDtor();
}

void BoardItem::SharedDtor() {
  hour_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BoardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoardItem_descriptor_;
}

const BoardItem& BoardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

BoardItem* BoardItem::default_instance_ = NULL;

BoardItem* BoardItem::New(::google::protobuf::Arena* arena) const {
  BoardItem* n = new BoardItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.BoardItem)
  if (has_hour()) {
    hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  minutes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BoardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.BoardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hour = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hour().data(), this->hour().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.BoardItem.hour");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_minutes;
        break;
      }

      // repeated string minutes = 2;
      case 2: {
        if (tag == 18) {
         parse_minutes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_minutes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->minutes(this->minutes_size() - 1).data(),
            this->minutes(this->minutes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.BoardItem.minutes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_minutes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.BoardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.BoardItem)
  return false;
#undef DO_
}

void BoardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.BoardItem)
  // required string hour = 1;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hour().data(), this->hour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.BoardItem.hour");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hour(), output);
  }

  // repeated string minutes = 2;
  for (int i = 0; i < this->minutes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->minutes(i).data(), this->minutes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.BoardItem.minutes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->minutes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.BoardItem)
}

::google::protobuf::uint8* BoardItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.BoardItem)
  // required string hour = 1;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hour().data(), this->hour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.BoardItem.hour");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hour(), target);
  }

  // repeated string minutes = 2;
  for (int i = 0; i < this->minutes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->minutes(i).data(), this->minutes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.BoardItem.minutes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->minutes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.BoardItem)
  return target;
}

int BoardItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.BoardItem)
  int total_size = 0;

  // required string hour = 1;
  if (has_hour()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hour());
  }
  // repeated string minutes = 2;
  total_size += 1 * this->minutes_size();
  for (int i = 0; i < this->minutes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->minutes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoardItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.BoardItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoardItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoardItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.BoardItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.BoardItem)
    MergeFrom(*source);
  }
}

void BoardItem::MergeFrom(const BoardItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.BoardItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  minutes_.MergeFrom(from.minutes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hour()) {
      set_has_hour();
      hour_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hour_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BoardItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.BoardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoardItem::CopyFrom(const BoardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.BoardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BoardItem::Swap(BoardItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoardItem::InternalSwap(BoardItem* other) {
  hour_.Swap(&other->hour_);
  minutes_.UnsafeArenaSwap(&other->minutes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoardItem_descriptor_;
  metadata.reflection = BoardItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoardItem

// required string hour = 1;
bool BoardItem::has_hour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoardItem::set_has_hour() {
  _has_bits_[0] |= 0x00000001u;
}
void BoardItem::clear_has_hour() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoardItem::clear_hour() {
  hour_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hour();
}
 const ::std::string& BoardItem::hour() const {
  // @@protoc_insertion_point(field_get:pbnavitia.BoardItem.hour)
  return hour_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BoardItem::set_hour(const ::std::string& value) {
  set_has_hour();
  hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.BoardItem.hour)
}
 void BoardItem::set_hour(const char* value) {
  set_has_hour();
  hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.BoardItem.hour)
}
 void BoardItem::set_hour(const char* value, size_t size) {
  set_has_hour();
  hour_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.BoardItem.hour)
}
 ::std::string* BoardItem::mutable_hour() {
  set_has_hour();
  // @@protoc_insertion_point(field_mutable:pbnavitia.BoardItem.hour)
  return hour_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BoardItem::release_hour() {
  // @@protoc_insertion_point(field_release:pbnavitia.BoardItem.hour)
  clear_has_hour();
  return hour_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BoardItem::set_allocated_hour(::std::string* hour) {
  if (hour != NULL) {
    set_has_hour();
  } else {
    clear_has_hour();
  }
  hour_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hour);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.BoardItem.hour)
}

// repeated string minutes = 2;
int BoardItem::minutes_size() const {
  return minutes_.size();
}
void BoardItem::clear_minutes() {
  minutes_.Clear();
}
 const ::std::string& BoardItem::minutes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.BoardItem.minutes)
  return minutes_.Get(index);
}
 ::std::string* BoardItem::mutable_minutes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.BoardItem.minutes)
  return minutes_.Mutable(index);
}
 void BoardItem::set_minutes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.BoardItem.minutes)
  minutes_.Mutable(index)->assign(value);
}
 void BoardItem::set_minutes(int index, const char* value) {
  minutes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.BoardItem.minutes)
}
 void BoardItem::set_minutes(int index, const char* value, size_t size) {
  minutes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.BoardItem.minutes)
}
 ::std::string* BoardItem::add_minutes() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.BoardItem.minutes)
  return minutes_.Add();
}
 void BoardItem::add_minutes(const ::std::string& value) {
  minutes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.BoardItem.minutes)
}
 void BoardItem::add_minutes(const char* value) {
  minutes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.BoardItem.minutes)
}
 void BoardItem::add_minutes(const char* value, size_t size) {
  minutes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.BoardItem.minutes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BoardItem::minutes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.BoardItem.minutes)
  return minutes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BoardItem::mutable_minutes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.BoardItem.minutes)
  return &minutes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepartureBoard::kStopPointFieldNumber;
const int DepartureBoard::kRouteFieldNumber;
const int DepartureBoard::kBoardItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepartureBoard::DepartureBoard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.DepartureBoard)
}

void DepartureBoard::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
  route_ = const_cast< ::pbnavitia::Route*>(&::pbnavitia::Route::default_instance());
}

DepartureBoard::DepartureBoard(const DepartureBoard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.DepartureBoard)
}

void DepartureBoard::SharedCtor() {
  _cached_size_ = 0;
  stop_point_ = NULL;
  route_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepartureBoard::~DepartureBoard() {
  // @@protoc_insertion_point(destructor:pbnavitia.DepartureBoard)
  SharedDtor();
}

void DepartureBoard::SharedDtor() {
  if (this != default_instance_) {
    delete stop_point_;
    delete route_;
  }
}

void DepartureBoard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepartureBoard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepartureBoard_descriptor_;
}

const DepartureBoard& DepartureBoard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

DepartureBoard* DepartureBoard::default_instance_ = NULL;

DepartureBoard* DepartureBoard::New(::google::protobuf::Arena* arena) const {
  DepartureBoard* n = new DepartureBoard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DepartureBoard::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.DepartureBoard)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
    if (has_route()) {
      if (route_ != NULL) route_->::pbnavitia::Route::Clear();
    }
  }
  board_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DepartureBoard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.DepartureBoard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.StopPoint stop_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_route;
        break;
      }

      // required .pbnavitia.Route route = 2;
      case 2: {
        if (tag == 18) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_board_items;
        break;
      }

      // repeated .pbnavitia.BoardItem board_items = 3;
      case 3: {
        if (tag == 26) {
         parse_board_items:
          DO_(input->IncrementRecursionDepth());
         parse_loop_board_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_board_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_board_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.DepartureBoard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.DepartureBoard)
  return false;
#undef DO_
}

void DepartureBoard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.DepartureBoard)
  // required .pbnavitia.StopPoint stop_point = 1;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // required .pbnavitia.Route route = 2;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->route_, output);
  }

  // repeated .pbnavitia.BoardItem board_items = 3;
  for (unsigned int i = 0, n = this->board_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->board_items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.DepartureBoard)
}

::google::protobuf::uint8* DepartureBoard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.DepartureBoard)
  // required .pbnavitia.StopPoint stop_point = 1;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_point_, false, target);
  }

  // required .pbnavitia.Route route = 2;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->route_, false, target);
  }

  // repeated .pbnavitia.BoardItem board_items = 3;
  for (unsigned int i = 0, n = this->board_items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->board_items(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.DepartureBoard)
  return target;
}

int DepartureBoard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.DepartureBoard)
  int total_size = 0;

  if (has_stop_point()) {
    // required .pbnavitia.StopPoint stop_point = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);
  }

  if (has_route()) {
    // required .pbnavitia.Route route = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_);
  }

  return total_size;
}
int DepartureBoard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.DepartureBoard)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .pbnavitia.StopPoint stop_point = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);

    // required .pbnavitia.Route route = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .pbnavitia.BoardItem board_items = 3;
  total_size += 1 * this->board_items_size();
  for (int i = 0; i < this->board_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->board_items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartureBoard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.DepartureBoard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DepartureBoard* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DepartureBoard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.DepartureBoard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.DepartureBoard)
    MergeFrom(*source);
  }
}

void DepartureBoard::MergeFrom(const DepartureBoard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.DepartureBoard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  board_items_.MergeFrom(from.board_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_route()) {
      mutable_route()->::pbnavitia::Route::MergeFrom(from.route());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DepartureBoard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.DepartureBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartureBoard::CopyFrom(const DepartureBoard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.DepartureBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartureBoard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  if (has_route()) {
    if (!this->route_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->board_items())) return false;
  return true;
}

void DepartureBoard::Swap(DepartureBoard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepartureBoard::InternalSwap(DepartureBoard* other) {
  std::swap(stop_point_, other->stop_point_);
  std::swap(route_, other->route_);
  board_items_.UnsafeArenaSwap(&other->board_items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DepartureBoard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepartureBoard_descriptor_;
  metadata.reflection = DepartureBoard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DepartureBoard

// required .pbnavitia.StopPoint stop_point = 1;
bool DepartureBoard::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DepartureBoard::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
void DepartureBoard::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void DepartureBoard::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& DepartureBoard::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DepartureBoard.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* DepartureBoard::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DepartureBoard.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* DepartureBoard::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.DepartureBoard.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void DepartureBoard::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DepartureBoard.stop_point)
}

// required .pbnavitia.Route route = 2;
bool DepartureBoard::has_route() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DepartureBoard::set_has_route() {
  _has_bits_[0] |= 0x00000002u;
}
void DepartureBoard::clear_has_route() {
  _has_bits_[0] &= ~0x00000002u;
}
void DepartureBoard::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
const ::pbnavitia::Route& DepartureBoard::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.DepartureBoard.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
::pbnavitia::Route* DepartureBoard::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.DepartureBoard.route)
  return route_;
}
::pbnavitia::Route* DepartureBoard::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.DepartureBoard.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
void DepartureBoard::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.DepartureBoard.route)
}

// repeated .pbnavitia.BoardItem board_items = 3;
int DepartureBoard::board_items_size() const {
  return board_items_.size();
}
void DepartureBoard::clear_board_items() {
  board_items_.Clear();
}
const ::pbnavitia::BoardItem& DepartureBoard::board_items(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.DepartureBoard.board_items)
  return board_items_.Get(index);
}
::pbnavitia::BoardItem* DepartureBoard::mutable_board_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.DepartureBoard.board_items)
  return board_items_.Mutable(index);
}
::pbnavitia::BoardItem* DepartureBoard::add_board_items() {
  // @@protoc_insertion_point(field_add:pbnavitia.DepartureBoard.board_items)
  return board_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::BoardItem >*
DepartureBoard::mutable_board_items() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.DepartureBoard.board_items)
  return &board_items_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::BoardItem >&
DepartureBoard::board_items() const {
  // @@protoc_insertion_point(field_list:pbnavitia.DepartureBoard.board_items)
  return board_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Load::kOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Load::Load()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Load)
}

void Load::InitAsDefaultInstance() {
}

Load::Load(const Load& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Load)
}

void Load::SharedCtor() {
  _cached_size_ = 0;
  ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Load::~Load() {
  // @@protoc_insertion_point(destructor:pbnavitia.Load)
  SharedDtor();
}

void Load::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Load::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Load::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Load_descriptor_;
}

const Load& Load::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Load* Load::default_instance_ = NULL;

Load* Load::New(::google::protobuf::Arena* arena) const {
  Load* n = new Load;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Load::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Load)
  ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Load::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Load)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ok = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
          set_has_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Load)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Load)
  return false;
#undef DO_
}

void Load::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Load)
  // required bool ok = 1;
  if (has_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Load)
}

::google::protobuf::uint8* Load::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Load)
  // required bool ok = 1;
  if (has_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Load)
  return target;
}

int Load::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Load)
  int total_size = 0;

  // required bool ok = 1;
  if (has_ok()) {
    total_size += 1 + 1;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Load::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Load)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Load* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Load>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Load)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Load)
    MergeFrom(*source);
  }
}

void Load::MergeFrom(const Load& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Load)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ok()) {
      set_ok(from.ok());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Load::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Load::CopyFrom(const Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Load::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Load::Swap(Load* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Load::InternalSwap(Load* other) {
  std::swap(ok_, other->ok_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Load::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Load_descriptor_;
  metadata.reflection = Load_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Load

// required bool ok = 1;
bool Load::has_ok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Load::set_has_ok() {
  _has_bits_[0] |= 0x00000001u;
}
void Load::clear_has_ok() {
  _has_bits_[0] &= ~0x00000001u;
}
void Load::clear_ok() {
  ok_ = false;
  clear_has_ok();
}
 bool Load::ok() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Load.ok)
  return ok_;
}
 void Load::set_ok(bool value) {
  set_has_ok();
  ok_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Load.ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadatas::kStartProductionDateFieldNumber;
const int Metadatas::kEndProductionDateFieldNumber;
const int Metadatas::kShapeFieldNumber;
const int Metadatas::kStatusFieldNumber;
const int Metadatas::kContributorsFieldNumber;
const int Metadatas::kTimezoneFieldNumber;
const int Metadatas::kNameFieldNumber;
const int Metadatas::kLastLoadAtFieldNumber;
const int Metadatas::kDatasetCreatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadatas::Metadatas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Metadatas)
}

void Metadatas::InitAsDefaultInstance() {
}

Metadatas::Metadatas(const Metadatas& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Metadatas)
}

void Metadatas::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  start_production_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_production_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_load_at_ = GOOGLE_ULONGLONG(0);
  dataset_created_at_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadatas::~Metadatas() {
  // @@protoc_insertion_point(destructor:pbnavitia.Metadatas)
  SharedDtor();
}

void Metadatas::SharedDtor() {
  start_production_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_production_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_created_at_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Metadatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadatas_descriptor_;
}

const Metadatas& Metadatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Metadatas* Metadatas::default_instance_ = NULL;

Metadatas* Metadatas::New(::google::protobuf::Arena* arena) const {
  Metadatas* n = new Metadatas;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metadatas::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Metadatas)
  if (_has_bits_[0 / 32] & 239u) {
    if (has_start_production_date()) {
      start_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_production_date()) {
      end_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_shape()) {
      shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_status()) {
      status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timezone()) {
      timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    last_load_at_ = GOOGLE_ULONGLONG(0);
  }
  if (has_dataset_created_at()) {
    dataset_created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contributors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Metadatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Metadatas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string start_production_date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_production_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_production_date().data(), this->start_production_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Metadatas.start_production_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_production_date;
        break;
      }

      // required string end_production_date = 2;
      case 2: {
        if (tag == 18) {
         parse_end_production_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_production_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->end_production_date().data(), this->end_production_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Metadatas.end_production_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shape;
        break;
      }

      // required string shape = 3;
      case 3: {
        if (tag == 26) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shape()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shape().data(), this->shape().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Metadatas.shape");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }

      // required string status = 4;
      case 4: {
        if (tag == 34) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Metadatas.status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_contributors;
        break;
      }

      // repeated string contributors = 12;
      case 12: {
        if (tag == 98) {
         parse_contributors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_contributors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contributors(this->contributors_size() - 1).data(),
            this->contributors(this->contributors_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Metadatas.contributors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_contributors;
        if (input->ExpectTag(106)) goto parse_timezone;
        break;
      }

      // optional string timezone = 13;
      case 13: {
        if (tag == 106) {
         parse_timezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Metadatas.timezone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_name;
        break;
      }

      // optional string name = 14;
      case 14: {
        if (tag == 114) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Metadatas.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_last_load_at;
        break;
      }

      // optional uint64 last_load_at = 15;
      case 15: {
        if (tag == 120) {
         parse_last_load_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_load_at_)));
          set_has_last_load_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_dataset_created_at;
        break;
      }

      // optional string dataset_created_at = 16;
      case 16: {
        if (tag == 130) {
         parse_dataset_created_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_created_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset_created_at().data(), this->dataset_created_at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Metadatas.dataset_created_at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Metadatas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Metadatas)
  return false;
#undef DO_
}

void Metadatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Metadatas)
  // required string start_production_date = 1;
  if (has_start_production_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_production_date().data(), this->start_production_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.start_production_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_production_date(), output);
  }

  // required string end_production_date = 2;
  if (has_end_production_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_production_date().data(), this->end_production_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.end_production_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end_production_date(), output);
  }

  // required string shape = 3;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.shape");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shape(), output);
  }

  // required string status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->status(), output);
  }

  // repeated string contributors = 12;
  for (int i = 0; i < this->contributors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contributors(i).data(), this->contributors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.contributors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->contributors(i), output);
  }

  // optional string timezone = 13;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->timezone(), output);
  }

  // optional string name = 14;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->name(), output);
  }

  // optional uint64 last_load_at = 15;
  if (has_last_load_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->last_load_at(), output);
  }

  // optional string dataset_created_at = 16;
  if (has_dataset_created_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset_created_at().data(), this->dataset_created_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.dataset_created_at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->dataset_created_at(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Metadatas)
}

::google::protobuf::uint8* Metadatas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Metadatas)
  // required string start_production_date = 1;
  if (has_start_production_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_production_date().data(), this->start_production_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.start_production_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_production_date(), target);
  }

  // required string end_production_date = 2;
  if (has_end_production_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->end_production_date().data(), this->end_production_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.end_production_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->end_production_date(), target);
  }

  // required string shape = 3;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.shape");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shape(), target);
  }

  // required string status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status(), target);
  }

  // repeated string contributors = 12;
  for (int i = 0; i < this->contributors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contributors(i).data(), this->contributors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.contributors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->contributors(i), target);
  }

  // optional string timezone = 13;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->timezone(), target);
  }

  // optional string name = 14;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->name(), target);
  }

  // optional uint64 last_load_at = 15;
  if (has_last_load_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->last_load_at(), target);
  }

  // optional string dataset_created_at = 16;
  if (has_dataset_created_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset_created_at().data(), this->dataset_created_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Metadatas.dataset_created_at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->dataset_created_at(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Metadatas)
  return target;
}

int Metadatas::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.Metadatas)
  int total_size = 0;

  if (has_start_production_date()) {
    // required string start_production_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_production_date());
  }

  if (has_end_production_date()) {
    // required string end_production_date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_production_date());
  }

  if (has_shape()) {
    // required string shape = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shape());
  }

  if (has_status()) {
    // required string status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  return total_size;
}
int Metadatas::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Metadatas)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string start_production_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_production_date());

    // required string end_production_date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_production_date());

    // required string shape = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shape());

    // required string status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional string timezone = 13;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone());
    }

    // optional string name = 14;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 last_load_at = 15;
    if (has_last_load_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_load_at());
    }

  }
  // optional string dataset_created_at = 16;
  if (has_dataset_created_at()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_created_at());
  }

  // repeated string contributors = 12;
  total_size += 1 * this->contributors_size();
  for (int i = 0; i < this->contributors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->contributors(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadatas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Metadatas)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Metadatas* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Metadatas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Metadatas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Metadatas)
    MergeFrom(*source);
  }
}

void Metadatas::MergeFrom(const Metadatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Metadatas)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  contributors_.MergeFrom(from.contributors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_production_date()) {
      set_has_start_production_date();
      start_production_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_production_date_);
    }
    if (from.has_end_production_date()) {
      set_has_end_production_date();
      end_production_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_production_date_);
    }
    if (from.has_shape()) {
      set_has_shape();
      shape_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shape_);
    }
    if (from.has_status()) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (from.has_timezone()) {
      set_has_timezone();
      timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_last_load_at()) {
      set_last_load_at(from.last_load_at());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dataset_created_at()) {
      set_has_dataset_created_at();
      dataset_created_at_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_created_at_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Metadatas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Metadatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadatas::CopyFrom(const Metadatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Metadatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadatas::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Metadatas::Swap(Metadatas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadatas::InternalSwap(Metadatas* other) {
  start_production_date_.Swap(&other->start_production_date_);
  end_production_date_.Swap(&other->end_production_date_);
  shape_.Swap(&other->shape_);
  status_.Swap(&other->status_);
  contributors_.UnsafeArenaSwap(&other->contributors_);
  timezone_.Swap(&other->timezone_);
  name_.Swap(&other->name_);
  std::swap(last_load_at_, other->last_load_at_);
  dataset_created_at_.Swap(&other->dataset_created_at_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metadatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadatas_descriptor_;
  metadata.reflection = Metadatas_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadatas

// required string start_production_date = 1;
bool Metadatas::has_start_production_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Metadatas::set_has_start_production_date() {
  _has_bits_[0] |= 0x00000001u;
}
void Metadatas::clear_has_start_production_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void Metadatas::clear_start_production_date() {
  start_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_production_date();
}
 const ::std::string& Metadatas::start_production_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.start_production_date)
  return start_production_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_start_production_date(const ::std::string& value) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.start_production_date)
}
 void Metadatas::set_start_production_date(const char* value) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.start_production_date)
}
 void Metadatas::set_start_production_date(const char* value, size_t size) {
  set_has_start_production_date();
  start_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.start_production_date)
}
 ::std::string* Metadatas::mutable_start_production_date() {
  set_has_start_production_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.start_production_date)
  return start_production_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadatas::release_start_production_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.start_production_date)
  clear_has_start_production_date();
  return start_production_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_allocated_start_production_date(::std::string* start_production_date) {
  if (start_production_date != NULL) {
    set_has_start_production_date();
  } else {
    clear_has_start_production_date();
  }
  start_production_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_production_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.start_production_date)
}

// required string end_production_date = 2;
bool Metadatas::has_end_production_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Metadatas::set_has_end_production_date() {
  _has_bits_[0] |= 0x00000002u;
}
void Metadatas::clear_has_end_production_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void Metadatas::clear_end_production_date() {
  end_production_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_production_date();
}
 const ::std::string& Metadatas::end_production_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.end_production_date)
  return end_production_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_end_production_date(const ::std::string& value) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.end_production_date)
}
 void Metadatas::set_end_production_date(const char* value) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.end_production_date)
}
 void Metadatas::set_end_production_date(const char* value, size_t size) {
  set_has_end_production_date();
  end_production_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.end_production_date)
}
 ::std::string* Metadatas::mutable_end_production_date() {
  set_has_end_production_date();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.end_production_date)
  return end_production_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadatas::release_end_production_date() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.end_production_date)
  clear_has_end_production_date();
  return end_production_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_allocated_end_production_date(::std::string* end_production_date) {
  if (end_production_date != NULL) {
    set_has_end_production_date();
  } else {
    clear_has_end_production_date();
  }
  end_production_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_production_date);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.end_production_date)
}

// required string shape = 3;
bool Metadatas::has_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Metadatas::set_has_shape() {
  _has_bits_[0] |= 0x00000004u;
}
void Metadatas::clear_has_shape() {
  _has_bits_[0] &= ~0x00000004u;
}
void Metadatas::clear_shape() {
  shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shape();
}
 const ::std::string& Metadatas::shape() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.shape)
  return shape_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_shape(const ::std::string& value) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.shape)
}
 void Metadatas::set_shape(const char* value) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.shape)
}
 void Metadatas::set_shape(const char* value, size_t size) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.shape)
}
 ::std::string* Metadatas::mutable_shape() {
  set_has_shape();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.shape)
  return shape_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadatas::release_shape() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.shape)
  clear_has_shape();
  return shape_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_allocated_shape(::std::string* shape) {
  if (shape != NULL) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shape);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.shape)
}

// required string status = 4;
bool Metadatas::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Metadatas::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void Metadatas::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void Metadatas::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
 const ::std::string& Metadatas::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.status)
}
 void Metadatas::set_status(const char* value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.status)
}
 void Metadatas::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.status)
}
 ::std::string* Metadatas::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadatas::release_status() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.status)
}

// repeated string contributors = 12;
int Metadatas::contributors_size() const {
  return contributors_.size();
}
void Metadatas::clear_contributors() {
  contributors_.Clear();
}
 const ::std::string& Metadatas::contributors(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.contributors)
  return contributors_.Get(index);
}
 ::std::string* Metadatas::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.contributors)
  return contributors_.Mutable(index);
}
 void Metadatas::set_contributors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.contributors)
  contributors_.Mutable(index)->assign(value);
}
 void Metadatas::set_contributors(int index, const char* value) {
  contributors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.contributors)
}
 void Metadatas::set_contributors(int index, const char* value, size_t size) {
  contributors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.contributors)
}
 ::std::string* Metadatas::add_contributors() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Metadatas.contributors)
  return contributors_.Add();
}
 void Metadatas::add_contributors(const ::std::string& value) {
  contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Metadatas.contributors)
}
 void Metadatas::add_contributors(const char* value) {
  contributors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Metadatas.contributors)
}
 void Metadatas::add_contributors(const char* value, size_t size) {
  contributors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Metadatas.contributors)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Metadatas::contributors() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Metadatas.contributors)
  return contributors_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Metadatas::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Metadatas.contributors)
  return &contributors_;
}

// optional string timezone = 13;
bool Metadatas::has_timezone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Metadatas::set_has_timezone() {
  _has_bits_[0] |= 0x00000020u;
}
void Metadatas::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000020u;
}
void Metadatas::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone();
}
 const ::std::string& Metadatas::timezone() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.timezone)
  return timezone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_timezone(const ::std::string& value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.timezone)
}
 void Metadatas::set_timezone(const char* value) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.timezone)
}
 void Metadatas::set_timezone(const char* value, size_t size) {
  set_has_timezone();
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.timezone)
}
 ::std::string* Metadatas::mutable_timezone() {
  set_has_timezone();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadatas::release_timezone() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.timezone)
  clear_has_timezone();
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    set_has_timezone();
  } else {
    clear_has_timezone();
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.timezone)
}

// optional string name = 14;
bool Metadatas::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Metadatas::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
void Metadatas::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void Metadatas::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Metadatas::name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.name)
}
 void Metadatas::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.name)
}
 void Metadatas::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.name)
}
 ::std::string* Metadatas::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadatas::release_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.name)
}

// optional uint64 last_load_at = 15;
bool Metadatas::has_last_load_at() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Metadatas::set_has_last_load_at() {
  _has_bits_[0] |= 0x00000080u;
}
void Metadatas::clear_has_last_load_at() {
  _has_bits_[0] &= ~0x00000080u;
}
void Metadatas::clear_last_load_at() {
  last_load_at_ = GOOGLE_ULONGLONG(0);
  clear_has_last_load_at();
}
 ::google::protobuf::uint64 Metadatas::last_load_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.last_load_at)
  return last_load_at_;
}
 void Metadatas::set_last_load_at(::google::protobuf::uint64 value) {
  set_has_last_load_at();
  last_load_at_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.last_load_at)
}

// optional string dataset_created_at = 16;
bool Metadatas::has_dataset_created_at() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Metadatas::set_has_dataset_created_at() {
  _has_bits_[0] |= 0x00000100u;
}
void Metadatas::clear_has_dataset_created_at() {
  _has_bits_[0] &= ~0x00000100u;
}
void Metadatas::clear_dataset_created_at() {
  dataset_created_at_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataset_created_at();
}
 const ::std::string& Metadatas::dataset_created_at() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Metadatas.dataset_created_at)
  return dataset_created_at_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_dataset_created_at(const ::std::string& value) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Metadatas.dataset_created_at)
}
 void Metadatas::set_dataset_created_at(const char* value) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Metadatas.dataset_created_at)
}
 void Metadatas::set_dataset_created_at(const char* value, size_t size) {
  set_has_dataset_created_at();
  dataset_created_at_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Metadatas.dataset_created_at)
}
 ::std::string* Metadatas::mutable_dataset_created_at() {
  set_has_dataset_created_at();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Metadatas.dataset_created_at)
  return dataset_created_at_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metadatas::release_dataset_created_at() {
  // @@protoc_insertion_point(field_release:pbnavitia.Metadatas.dataset_created_at)
  clear_has_dataset_created_at();
  return dataset_created_at_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metadatas::set_allocated_dataset_created_at(::std::string* dataset_created_at) {
  if (dataset_created_at != NULL) {
    set_has_dataset_created_at();
  } else {
    clear_has_dataset_created_at();
  }
  dataset_created_at_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_created_at);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Metadatas.dataset_created_at)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pagination::kTotalResultFieldNumber;
const int Pagination::kStartPageFieldNumber;
const int Pagination::kItemsPerPageFieldNumber;
const int Pagination::kItemsOnPageFieldNumber;
const int Pagination::kNextPageFieldNumber;
const int Pagination::kPreviousPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pagination::Pagination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Pagination)
}

void Pagination::InitAsDefaultInstance() {
}

Pagination::Pagination(const Pagination& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Pagination)
}

void Pagination::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  totalresult_ = 0;
  startpage_ = 0;
  itemsperpage_ = 0;
  itemsonpage_ = 0;
  nextpage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previouspage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:pbnavitia.Pagination)
  SharedDtor();
}

void Pagination::SharedDtor() {
  nextpage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previouspage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Pagination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pagination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pagination_descriptor_;
}

const Pagination& Pagination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Pagination* Pagination::default_instance_ = NULL;

Pagination* Pagination::New(::google::protobuf::Arena* arena) const {
  Pagination* n = new Pagination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Pagination)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Pagination, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Pagination*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(totalresult_, itemsonpage_);
    if (has_nextpage()) {
      nextpage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_previouspage()) {
      previouspage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Pagination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Pagination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 totalResult = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalresult_)));
          set_has_totalresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startPage;
        break;
      }

      // required int32 startPage = 2;
      case 2: {
        if (tag == 16) {
         parse_startPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpage_)));
          set_has_startpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemsPerPage;
        break;
      }

      // required int32 itemsPerPage = 3;
      case 3: {
        if (tag == 24) {
         parse_itemsPerPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemsperpage_)));
          set_has_itemsperpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemsOnPage;
        break;
      }

      // required int32 itemsOnPage = 4;
      case 4: {
        if (tag == 32) {
         parse_itemsOnPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemsonpage_)));
          set_has_itemsonpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nextPage;
        break;
      }

      // optional string nextPage = 5;
      case 5: {
        if (tag == 42) {
         parse_nextPage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextpage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nextpage().data(), this->nextpage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Pagination.nextPage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_previousPage;
        break;
      }

      // optional string previousPage = 6;
      case 6: {
        if (tag == 50) {
         parse_previousPage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_previouspage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->previouspage().data(), this->previouspage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Pagination.previousPage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Pagination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Pagination)
  return false;
#undef DO_
}

void Pagination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Pagination)
  // required int32 totalResult = 1;
  if (has_totalresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalresult(), output);
  }

  // required int32 startPage = 2;
  if (has_startpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpage(), output);
  }

  // required int32 itemsPerPage = 3;
  if (has_itemsperpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemsperpage(), output);
  }

  // required int32 itemsOnPage = 4;
  if (has_itemsonpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemsonpage(), output);
  }

  // optional string nextPage = 5;
  if (has_nextpage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nextpage().data(), this->nextpage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Pagination.nextPage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nextpage(), output);
  }

  // optional string previousPage = 6;
  if (has_previouspage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previouspage().data(), this->previouspage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Pagination.previousPage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->previouspage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Pagination)
}

::google::protobuf::uint8* Pagination::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Pagination)
  // required int32 totalResult = 1;
  if (has_totalresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalresult(), target);
  }

  // required int32 startPage = 2;
  if (has_startpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpage(), target);
  }

  // required int32 itemsPerPage = 3;
  if (has_itemsperpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemsperpage(), target);
  }

  // required int32 itemsOnPage = 4;
  if (has_itemsonpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemsonpage(), target);
  }

  // optional string nextPage = 5;
  if (has_nextpage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nextpage().data(), this->nextpage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Pagination.nextPage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nextpage(), target);
  }

  // optional string previousPage = 6;
  if (has_previouspage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->previouspage().data(), this->previouspage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Pagination.previousPage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->previouspage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Pagination)
  return target;
}

int Pagination::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.Pagination)
  int total_size = 0;

  if (has_totalresult()) {
    // required int32 totalResult = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalresult());
  }

  if (has_startpage()) {
    // required int32 startPage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpage());
  }

  if (has_itemsperpage()) {
    // required int32 itemsPerPage = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemsperpage());
  }

  if (has_itemsonpage()) {
    // required int32 itemsOnPage = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemsonpage());
  }

  return total_size;
}
int Pagination::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Pagination)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 totalResult = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalresult());

    // required int32 startPage = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startpage());

    // required int32 itemsPerPage = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemsperpage());

    // required int32 itemsOnPage = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemsonpage());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 48u) {
    // optional string nextPage = 5;
    if (has_nextpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextpage());
    }

    // optional string previousPage = 6;
    if (has_previouspage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->previouspage());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pagination::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Pagination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Pagination* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pagination>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Pagination)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Pagination)
    MergeFrom(*source);
  }
}

void Pagination::MergeFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Pagination)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalresult()) {
      set_totalresult(from.totalresult());
    }
    if (from.has_startpage()) {
      set_startpage(from.startpage());
    }
    if (from.has_itemsperpage()) {
      set_itemsperpage(from.itemsperpage());
    }
    if (from.has_itemsonpage()) {
      set_itemsonpage(from.itemsonpage());
    }
    if (from.has_nextpage()) {
      set_has_nextpage();
      nextpage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nextpage_);
    }
    if (from.has_previouspage()) {
      set_has_previouspage();
      previouspage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previouspage_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Pagination::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pagination::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Pagination::Swap(Pagination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pagination::InternalSwap(Pagination* other) {
  std::swap(totalresult_, other->totalresult_);
  std::swap(startpage_, other->startpage_);
  std::swap(itemsperpage_, other->itemsperpage_);
  std::swap(itemsonpage_, other->itemsonpage_);
  nextpage_.Swap(&other->nextpage_);
  previouspage_.Swap(&other->previouspage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pagination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pagination_descriptor_;
  metadata.reflection = Pagination_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pagination

// required int32 totalResult = 1;
bool Pagination::has_totalresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pagination::set_has_totalresult() {
  _has_bits_[0] |= 0x00000001u;
}
void Pagination::clear_has_totalresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pagination::clear_totalresult() {
  totalresult_ = 0;
  clear_has_totalresult();
}
 ::google::protobuf::int32 Pagination::totalresult() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.totalResult)
  return totalresult_;
}
 void Pagination::set_totalresult(::google::protobuf::int32 value) {
  set_has_totalresult();
  totalresult_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.totalResult)
}

// required int32 startPage = 2;
bool Pagination::has_startpage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pagination::set_has_startpage() {
  _has_bits_[0] |= 0x00000002u;
}
void Pagination::clear_has_startpage() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pagination::clear_startpage() {
  startpage_ = 0;
  clear_has_startpage();
}
 ::google::protobuf::int32 Pagination::startpage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.startPage)
  return startpage_;
}
 void Pagination::set_startpage(::google::protobuf::int32 value) {
  set_has_startpage();
  startpage_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.startPage)
}

// required int32 itemsPerPage = 3;
bool Pagination::has_itemsperpage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pagination::set_has_itemsperpage() {
  _has_bits_[0] |= 0x00000004u;
}
void Pagination::clear_has_itemsperpage() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pagination::clear_itemsperpage() {
  itemsperpage_ = 0;
  clear_has_itemsperpage();
}
 ::google::protobuf::int32 Pagination::itemsperpage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.itemsPerPage)
  return itemsperpage_;
}
 void Pagination::set_itemsperpage(::google::protobuf::int32 value) {
  set_has_itemsperpage();
  itemsperpage_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.itemsPerPage)
}

// required int32 itemsOnPage = 4;
bool Pagination::has_itemsonpage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Pagination::set_has_itemsonpage() {
  _has_bits_[0] |= 0x00000008u;
}
void Pagination::clear_has_itemsonpage() {
  _has_bits_[0] &= ~0x00000008u;
}
void Pagination::clear_itemsonpage() {
  itemsonpage_ = 0;
  clear_has_itemsonpage();
}
 ::google::protobuf::int32 Pagination::itemsonpage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.itemsOnPage)
  return itemsonpage_;
}
 void Pagination::set_itemsonpage(::google::protobuf::int32 value) {
  set_has_itemsonpage();
  itemsonpage_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.itemsOnPage)
}

// optional string nextPage = 5;
bool Pagination::has_nextpage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Pagination::set_has_nextpage() {
  _has_bits_[0] |= 0x00000010u;
}
void Pagination::clear_has_nextpage() {
  _has_bits_[0] &= ~0x00000010u;
}
void Pagination::clear_nextpage() {
  nextpage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nextpage();
}
 const ::std::string& Pagination::nextpage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.nextPage)
  return nextpage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pagination::set_nextpage(const ::std::string& value) {
  set_has_nextpage();
  nextpage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.nextPage)
}
 void Pagination::set_nextpage(const char* value) {
  set_has_nextpage();
  nextpage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Pagination.nextPage)
}
 void Pagination::set_nextpage(const char* value, size_t size) {
  set_has_nextpage();
  nextpage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Pagination.nextPage)
}
 ::std::string* Pagination::mutable_nextpage() {
  set_has_nextpage();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Pagination.nextPage)
  return nextpage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Pagination::release_nextpage() {
  // @@protoc_insertion_point(field_release:pbnavitia.Pagination.nextPage)
  clear_has_nextpage();
  return nextpage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pagination::set_allocated_nextpage(::std::string* nextpage) {
  if (nextpage != NULL) {
    set_has_nextpage();
  } else {
    clear_has_nextpage();
  }
  nextpage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nextpage);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Pagination.nextPage)
}

// optional string previousPage = 6;
bool Pagination::has_previouspage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Pagination::set_has_previouspage() {
  _has_bits_[0] |= 0x00000020u;
}
void Pagination::clear_has_previouspage() {
  _has_bits_[0] &= ~0x00000020u;
}
void Pagination::clear_previouspage() {
  previouspage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previouspage();
}
 const ::std::string& Pagination::previouspage() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Pagination.previousPage)
  return previouspage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pagination::set_previouspage(const ::std::string& value) {
  set_has_previouspage();
  previouspage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Pagination.previousPage)
}
 void Pagination::set_previouspage(const char* value) {
  set_has_previouspage();
  previouspage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Pagination.previousPage)
}
 void Pagination::set_previouspage(const char* value, size_t size) {
  set_has_previouspage();
  previouspage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Pagination.previousPage)
}
 ::std::string* Pagination::mutable_previouspage() {
  set_has_previouspage();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Pagination.previousPage)
  return previouspage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Pagination::release_previouspage() {
  // @@protoc_insertion_point(field_release:pbnavitia.Pagination.previousPage)
  clear_has_previouspage();
  return previouspage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pagination::set_allocated_previouspage(::std::string* previouspage) {
  if (previouspage != NULL) {
    set_has_previouspage();
  } else {
    clear_has_previouspage();
  }
  previouspage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previouspage);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Pagination.previousPage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSchedule::kRouteFieldNumber;
const int StopSchedule::kPtDisplayInformationsFieldNumber;
const int StopSchedule::kStopPointFieldNumber;
const int StopSchedule::kDateTimesFieldNumber;
const int StopSchedule::kResponseStatusFieldNumber;
const int StopSchedule::kFirstDatetimeFieldNumber;
const int StopSchedule::kLastDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSchedule::StopSchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StopSchedule)
}

void StopSchedule::InitAsDefaultInstance() {
  route_ = const_cast< ::pbnavitia::Route*>(&::pbnavitia::Route::default_instance());
  pt_display_informations_ = const_cast< ::pbnavitia::PtDisplayInfo*>(&::pbnavitia::PtDisplayInfo::default_instance());
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
  first_datetime_ = const_cast< ::pbnavitia::ScheduleStopTime*>(&::pbnavitia::ScheduleStopTime::default_instance());
  last_datetime_ = const_cast< ::pbnavitia::ScheduleStopTime*>(&::pbnavitia::ScheduleStopTime::default_instance());
}

StopSchedule::StopSchedule(const StopSchedule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StopSchedule)
}

void StopSchedule::SharedCtor() {
  _cached_size_ = 0;
  route_ = NULL;
  pt_display_informations_ = NULL;
  stop_point_ = NULL;
  response_status_ = 0;
  first_datetime_ = NULL;
  last_datetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopSchedule::~StopSchedule() {
  // @@protoc_insertion_point(destructor:pbnavitia.StopSchedule)
  SharedDtor();
}

void StopSchedule::SharedDtor() {
  if (this != default_instance_) {
    delete route_;
    delete pt_display_informations_;
    delete stop_point_;
    delete first_datetime_;
    delete last_datetime_;
  }
}

void StopSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopSchedule_descriptor_;
}

const StopSchedule& StopSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

StopSchedule* StopSchedule::default_instance_ = NULL;

StopSchedule* StopSchedule::New(::google::protobuf::Arena* arena) const {
  StopSchedule* n = new StopSchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StopSchedule)
  if (_has_bits_[0 / 32] & 119u) {
    if (has_route()) {
      if (route_ != NULL) route_->::pbnavitia::Route::Clear();
    }
    if (has_pt_display_informations()) {
      if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
    }
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
    response_status_ = 0;
    if (has_first_datetime()) {
      if (first_datetime_ != NULL) first_datetime_->::pbnavitia::ScheduleStopTime::Clear();
    }
    if (has_last_datetime()) {
      if (last_datetime_ != NULL) last_datetime_->::pbnavitia::ScheduleStopTime::Clear();
    }
  }
  date_times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StopSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StopSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbnavitia.Route route = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pt_display_informations;
        break;
      }

      // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
      case 2: {
        if (tag == 18) {
         parse_pt_display_informations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_display_informations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stop_point;
        break;
      }

      // required .pbnavitia.StopPoint stop_point = 3;
      case 3: {
        if (tag == 26) {
         parse_stop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_date_times;
        break;
      }

      // repeated .pbnavitia.ScheduleStopTime date_times = 4;
      case 4: {
        if (tag == 34) {
         parse_date_times:
          DO_(input->IncrementRecursionDepth());
         parse_loop_date_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_date_times()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_date_times;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_response_status;
        break;
      }

      // optional .pbnavitia.ResponseStatus response_status = 5;
      case 5: {
        if (tag == 40) {
         parse_response_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::ResponseStatus_IsValid(value)) {
            set_response_status(static_cast< ::pbnavitia::ResponseStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_first_datetime;
        break;
      }

      // optional .pbnavitia.ScheduleStopTime first_datetime = 6;
      case 6: {
        if (tag == 50) {
         parse_first_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_last_datetime;
        break;
      }

      // optional .pbnavitia.ScheduleStopTime last_datetime = 7;
      case 7: {
        if (tag == 58) {
         parse_last_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_datetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StopSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StopSchedule)
  return false;
#undef DO_
}

void StopSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StopSchedule)
  // required .pbnavitia.Route route = 1;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->route_, output);
  }

  // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
  if (has_pt_display_informations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pt_display_informations_, output);
  }

  // required .pbnavitia.StopPoint stop_point = 3;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // repeated .pbnavitia.ScheduleStopTime date_times = 4;
  for (unsigned int i = 0, n = this->date_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->date_times(i), output);
  }

  // optional .pbnavitia.ResponseStatus response_status = 5;
  if (has_response_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->response_status(), output);
  }

  // optional .pbnavitia.ScheduleStopTime first_datetime = 6;
  if (has_first_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->first_datetime_, output);
  }

  // optional .pbnavitia.ScheduleStopTime last_datetime = 7;
  if (has_last_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->last_datetime_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StopSchedule)
}

::google::protobuf::uint8* StopSchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StopSchedule)
  // required .pbnavitia.Route route = 1;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->route_, false, target);
  }

  // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
  if (has_pt_display_informations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pt_display_informations_, false, target);
  }

  // required .pbnavitia.StopPoint stop_point = 3;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stop_point_, false, target);
  }

  // repeated .pbnavitia.ScheduleStopTime date_times = 4;
  for (unsigned int i = 0, n = this->date_times_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->date_times(i), false, target);
  }

  // optional .pbnavitia.ResponseStatus response_status = 5;
  if (has_response_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->response_status(), target);
  }

  // optional .pbnavitia.ScheduleStopTime first_datetime = 6;
  if (has_first_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->first_datetime_, false, target);
  }

  // optional .pbnavitia.ScheduleStopTime last_datetime = 7;
  if (has_last_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->last_datetime_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StopSchedule)
  return target;
}

int StopSchedule::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.StopSchedule)
  int total_size = 0;

  if (has_route()) {
    // required .pbnavitia.Route route = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_);
  }

  if (has_pt_display_informations()) {
    // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pt_display_informations_);
  }

  if (has_stop_point()) {
    // required .pbnavitia.StopPoint stop_point = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);
  }

  return total_size;
}
int StopSchedule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StopSchedule)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .pbnavitia.Route route = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_);

    // required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pt_display_informations_);

    // required .pbnavitia.StopPoint stop_point = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stop_point_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 112u) {
    // optional .pbnavitia.ResponseStatus response_status = 5;
    if (has_response_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_status());
    }

    // optional .pbnavitia.ScheduleStopTime first_datetime = 6;
    if (has_first_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->first_datetime_);
    }

    // optional .pbnavitia.ScheduleStopTime last_datetime = 7;
    if (has_last_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_datetime_);
    }

  }
  // repeated .pbnavitia.ScheduleStopTime date_times = 4;
  total_size += 1 * this->date_times_size();
  for (int i = 0; i < this->date_times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->date_times(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopSchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StopSchedule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StopSchedule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StopSchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StopSchedule)
    MergeFrom(*source);
  }
}

void StopSchedule::MergeFrom(const StopSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StopSchedule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  date_times_.MergeFrom(from.date_times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_route()) {
      mutable_route()->::pbnavitia::Route::MergeFrom(from.route());
    }
    if (from.has_pt_display_informations()) {
      mutable_pt_display_informations()->::pbnavitia::PtDisplayInfo::MergeFrom(from.pt_display_informations());
    }
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_response_status()) {
      set_response_status(from.response_status());
    }
    if (from.has_first_datetime()) {
      mutable_first_datetime()->::pbnavitia::ScheduleStopTime::MergeFrom(from.first_datetime());
    }
    if (from.has_last_datetime()) {
      mutable_last_datetime()->::pbnavitia::ScheduleStopTime::MergeFrom(from.last_datetime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StopSchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StopSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSchedule::CopyFrom(const StopSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StopSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSchedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_route()) {
    if (!this->route_->IsInitialized()) return false;
  }
  if (has_pt_display_informations()) {
    if (!this->pt_display_informations_->IsInitialized()) return false;
  }
  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->date_times())) return false;
  if (has_first_datetime()) {
    if (!this->first_datetime_->IsInitialized()) return false;
  }
  if (has_last_datetime()) {
    if (!this->last_datetime_->IsInitialized()) return false;
  }
  return true;
}

void StopSchedule::Swap(StopSchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSchedule::InternalSwap(StopSchedule* other) {
  std::swap(route_, other->route_);
  std::swap(pt_display_informations_, other->pt_display_informations_);
  std::swap(stop_point_, other->stop_point_);
  date_times_.UnsafeArenaSwap(&other->date_times_);
  std::swap(response_status_, other->response_status_);
  std::swap(first_datetime_, other->first_datetime_);
  std::swap(last_datetime_, other->last_datetime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopSchedule_descriptor_;
  metadata.reflection = StopSchedule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopSchedule

// required .pbnavitia.Route route = 1;
bool StopSchedule::has_route() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StopSchedule::set_has_route() {
  _has_bits_[0] |= 0x00000001u;
}
void StopSchedule::clear_has_route() {
  _has_bits_[0] &= ~0x00000001u;
}
void StopSchedule::clear_route() {
  if (route_ != NULL) route_->::pbnavitia::Route::Clear();
  clear_has_route();
}
const ::pbnavitia::Route& StopSchedule::route() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.route)
  return route_ != NULL ? *route_ : *default_instance_->route_;
}
::pbnavitia::Route* StopSchedule::mutable_route() {
  set_has_route();
  if (route_ == NULL) {
    route_ = new ::pbnavitia::Route;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.route)
  return route_;
}
::pbnavitia::Route* StopSchedule::release_route() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.route)
  clear_has_route();
  ::pbnavitia::Route* temp = route_;
  route_ = NULL;
  return temp;
}
void StopSchedule::set_allocated_route(::pbnavitia::Route* route) {
  delete route_;
  route_ = route;
  if (route) {
    set_has_route();
  } else {
    clear_has_route();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.route)
}

// required .pbnavitia.PtDisplayInfo pt_display_informations = 2;
bool StopSchedule::has_pt_display_informations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StopSchedule::set_has_pt_display_informations() {
  _has_bits_[0] |= 0x00000002u;
}
void StopSchedule::clear_has_pt_display_informations() {
  _has_bits_[0] &= ~0x00000002u;
}
void StopSchedule::clear_pt_display_informations() {
  if (pt_display_informations_ != NULL) pt_display_informations_->::pbnavitia::PtDisplayInfo::Clear();
  clear_has_pt_display_informations();
}
const ::pbnavitia::PtDisplayInfo& StopSchedule::pt_display_informations() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.pt_display_informations)
  return pt_display_informations_ != NULL ? *pt_display_informations_ : *default_instance_->pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* StopSchedule::mutable_pt_display_informations() {
  set_has_pt_display_informations();
  if (pt_display_informations_ == NULL) {
    pt_display_informations_ = new ::pbnavitia::PtDisplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.pt_display_informations)
  return pt_display_informations_;
}
::pbnavitia::PtDisplayInfo* StopSchedule::release_pt_display_informations() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.pt_display_informations)
  clear_has_pt_display_informations();
  ::pbnavitia::PtDisplayInfo* temp = pt_display_informations_;
  pt_display_informations_ = NULL;
  return temp;
}
void StopSchedule::set_allocated_pt_display_informations(::pbnavitia::PtDisplayInfo* pt_display_informations) {
  delete pt_display_informations_;
  pt_display_informations_ = pt_display_informations;
  if (pt_display_informations) {
    set_has_pt_display_informations();
  } else {
    clear_has_pt_display_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.pt_display_informations)
}

// required .pbnavitia.StopPoint stop_point = 3;
bool StopSchedule::has_stop_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StopSchedule::set_has_stop_point() {
  _has_bits_[0] |= 0x00000004u;
}
void StopSchedule::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void StopSchedule::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& StopSchedule::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* StopSchedule::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* StopSchedule::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void StopSchedule::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.stop_point)
}

// repeated .pbnavitia.ScheduleStopTime date_times = 4;
int StopSchedule::date_times_size() const {
  return date_times_.size();
}
void StopSchedule::clear_date_times() {
  date_times_.Clear();
}
const ::pbnavitia::ScheduleStopTime& StopSchedule::date_times(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.date_times)
  return date_times_.Get(index);
}
::pbnavitia::ScheduleStopTime* StopSchedule::mutable_date_times(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.date_times)
  return date_times_.Mutable(index);
}
::pbnavitia::ScheduleStopTime* StopSchedule::add_date_times() {
  // @@protoc_insertion_point(field_add:pbnavitia.StopSchedule.date_times)
  return date_times_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >*
StopSchedule::mutable_date_times() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StopSchedule.date_times)
  return &date_times_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ScheduleStopTime >&
StopSchedule::date_times() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StopSchedule.date_times)
  return date_times_;
}

// optional .pbnavitia.ResponseStatus response_status = 5;
bool StopSchedule::has_response_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StopSchedule::set_has_response_status() {
  _has_bits_[0] |= 0x00000010u;
}
void StopSchedule::clear_has_response_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void StopSchedule::clear_response_status() {
  response_status_ = 0;
  clear_has_response_status();
}
 ::pbnavitia::ResponseStatus StopSchedule::response_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.response_status)
  return static_cast< ::pbnavitia::ResponseStatus >(response_status_);
}
 void StopSchedule::set_response_status(::pbnavitia::ResponseStatus value) {
  assert(::pbnavitia::ResponseStatus_IsValid(value));
  set_has_response_status();
  response_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.StopSchedule.response_status)
}

// optional .pbnavitia.ScheduleStopTime first_datetime = 6;
bool StopSchedule::has_first_datetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StopSchedule::set_has_first_datetime() {
  _has_bits_[0] |= 0x00000020u;
}
void StopSchedule::clear_has_first_datetime() {
  _has_bits_[0] &= ~0x00000020u;
}
void StopSchedule::clear_first_datetime() {
  if (first_datetime_ != NULL) first_datetime_->::pbnavitia::ScheduleStopTime::Clear();
  clear_has_first_datetime();
}
const ::pbnavitia::ScheduleStopTime& StopSchedule::first_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.first_datetime)
  return first_datetime_ != NULL ? *first_datetime_ : *default_instance_->first_datetime_;
}
::pbnavitia::ScheduleStopTime* StopSchedule::mutable_first_datetime() {
  set_has_first_datetime();
  if (first_datetime_ == NULL) {
    first_datetime_ = new ::pbnavitia::ScheduleStopTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.first_datetime)
  return first_datetime_;
}
::pbnavitia::ScheduleStopTime* StopSchedule::release_first_datetime() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.first_datetime)
  clear_has_first_datetime();
  ::pbnavitia::ScheduleStopTime* temp = first_datetime_;
  first_datetime_ = NULL;
  return temp;
}
void StopSchedule::set_allocated_first_datetime(::pbnavitia::ScheduleStopTime* first_datetime) {
  delete first_datetime_;
  first_datetime_ = first_datetime;
  if (first_datetime) {
    set_has_first_datetime();
  } else {
    clear_has_first_datetime();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.first_datetime)
}

// optional .pbnavitia.ScheduleStopTime last_datetime = 7;
bool StopSchedule::has_last_datetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StopSchedule::set_has_last_datetime() {
  _has_bits_[0] |= 0x00000040u;
}
void StopSchedule::clear_has_last_datetime() {
  _has_bits_[0] &= ~0x00000040u;
}
void StopSchedule::clear_last_datetime() {
  if (last_datetime_ != NULL) last_datetime_->::pbnavitia::ScheduleStopTime::Clear();
  clear_has_last_datetime();
}
const ::pbnavitia::ScheduleStopTime& StopSchedule::last_datetime() const {
  // @@protoc_insertion_point(field_get:pbnavitia.StopSchedule.last_datetime)
  return last_datetime_ != NULL ? *last_datetime_ : *default_instance_->last_datetime_;
}
::pbnavitia::ScheduleStopTime* StopSchedule::mutable_last_datetime() {
  set_has_last_datetime();
  if (last_datetime_ == NULL) {
    last_datetime_ = new ::pbnavitia::ScheduleStopTime;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.StopSchedule.last_datetime)
  return last_datetime_;
}
::pbnavitia::ScheduleStopTime* StopSchedule::release_last_datetime() {
  // @@protoc_insertion_point(field_release:pbnavitia.StopSchedule.last_datetime)
  clear_has_last_datetime();
  ::pbnavitia::ScheduleStopTime* temp = last_datetime_;
  last_datetime_ = NULL;
  return temp;
}
void StopSchedule::set_allocated_last_datetime(::pbnavitia::ScheduleStopTime* last_datetime) {
  delete last_datetime_;
  last_datetime_ = last_datetime;
  if (last_datetime) {
    set_has_last_datetime();
  } else {
    clear_has_last_datetime();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.StopSchedule.last_datetime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Error_error_id_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_error_id_descriptor_;
}
bool Error_error_id_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Error_error_id Error::bad_filter;
const Error_error_id Error::unknown_api;
const Error_error_id Error::date_out_of_bounds;
const Error_error_id Error::unable_to_parse;
const Error_error_id Error::bad_format;
const Error_error_id Error::no_origin;
const Error_error_id Error::no_destination;
const Error_error_id Error::no_origin_nor_destination;
const Error_error_id Error::no_solution;
const Error_error_id Error::unknown_object;
const Error_error_id Error::service_unavailable;
const Error_error_id Error::invalid_protobuf_request;
const Error_error_id Error::internal_error;
const Error_error_id Error::deadline_expired;
const Error_error_id Error::error_id_MIN;
const Error_error_id Error::error_id_MAX;
const int Error::error_id_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kIdFieldNumber;
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 1;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:pbnavitia.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Error)
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 1;
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.Error.error_id id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::Error_error_id_IsValid(value)) {
            set_id(static_cast< ::pbnavitia::Error_error_id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Error.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Error)
  // optional .pbnavitia.Error.error_id id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Error)
  // optional .pbnavitia.Error.error_id id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Error)
  return target;
}

int Error::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Error)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .pbnavitia.Error.error_id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(id_, other->id_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional .pbnavitia.Error.error_id id = 1;
bool Error::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_id() {
  id_ = 1;
  clear_has_id();
}
 ::pbnavitia::Error_error_id Error::id() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Error.id)
  return static_cast< ::pbnavitia::Error_error_id >(id_);
}
 void Error::set_id(::pbnavitia::Error_error_id value) {
  assert(::pbnavitia::Error_error_id_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Error.id)
}

// optional string message = 2;
bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Error.message)
}
 void Error::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Error.message)
}
 void Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Error.message)
}
 ::std::string* Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:pbnavitia.Error.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Error.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficReports::kNetworkFieldNumber;
const int TrafficReports::kLinesFieldNumber;
const int TrafficReports::kStopAreasFieldNumber;
const int TrafficReports::kVehicleJourneysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficReports::TrafficReports()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.TrafficReports)
}

void TrafficReports::InitAsDefaultInstance() {
  network_ = const_cast< ::pbnavitia::Network*>(&::pbnavitia::Network::default_instance());
}

TrafficReports::TrafficReports(const TrafficReports& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.TrafficReports)
}

void TrafficReports::SharedCtor() {
  _cached_size_ = 0;
  network_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficReports::~TrafficReports() {
  // @@protoc_insertion_point(destructor:pbnavitia.TrafficReports)
  SharedDtor();
}

void TrafficReports::SharedDtor() {
  if (this != default_instance_) {
    delete network_;
  }
}

void TrafficReports::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficReports::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficReports_descriptor_;
}

const TrafficReports& TrafficReports::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

TrafficReports* TrafficReports::default_instance_ = NULL;

TrafficReports* TrafficReports::New(::google::protobuf::Arena* arena) const {
  TrafficReports* n = new TrafficReports;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficReports::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.TrafficReports)
  if (has_network()) {
    if (network_ != NULL) network_->::pbnavitia::Network::Clear();
  }
  lines_.Clear();
  stop_areas_.Clear();
  vehicle_journeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrafficReports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.TrafficReports)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.Network network = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lines;
        break;
      }

      // repeated .pbnavitia.Line lines = 2;
      case 2: {
        if (tag == 18) {
         parse_lines:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_lines;
        if (input->ExpectTag(26)) goto parse_loop_stop_areas;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.StopArea stop_areas = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_stop_areas;
        if (input->ExpectTag(34)) goto parse_loop_vehicle_journeys;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.VehicleJourney vehicle_journeys = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_vehicle_journeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicle_journeys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_vehicle_journeys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.TrafficReports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.TrafficReports)
  return false;
#undef DO_
}

void TrafficReports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.TrafficReports)
  // optional .pbnavitia.Network network = 1;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->network_, output);
  }

  // repeated .pbnavitia.Line lines = 2;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lines(i), output);
  }

  // repeated .pbnavitia.StopArea stop_areas = 3;
  for (unsigned int i = 0, n = this->stop_areas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stop_areas(i), output);
  }

  // repeated .pbnavitia.VehicleJourney vehicle_journeys = 4;
  for (unsigned int i = 0, n = this->vehicle_journeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vehicle_journeys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.TrafficReports)
}

::google::protobuf::uint8* TrafficReports::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.TrafficReports)
  // optional .pbnavitia.Network network = 1;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->network_, false, target);
  }

  // repeated .pbnavitia.Line lines = 2;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lines(i), false, target);
  }

  // repeated .pbnavitia.StopArea stop_areas = 3;
  for (unsigned int i = 0, n = this->stop_areas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stop_areas(i), false, target);
  }

  // repeated .pbnavitia.VehicleJourney vehicle_journeys = 4;
  for (unsigned int i = 0, n = this->vehicle_journeys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->vehicle_journeys(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.TrafficReports)
  return target;
}

int TrafficReports::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.TrafficReports)
  int total_size = 0;

  // optional .pbnavitia.Network network = 1;
  if (has_network()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_);
  }

  // repeated .pbnavitia.Line lines = 2;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  // repeated .pbnavitia.StopArea stop_areas = 3;
  total_size += 1 * this->stop_areas_size();
  for (int i = 0; i < this->stop_areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_areas(i));
  }

  // repeated .pbnavitia.VehicleJourney vehicle_journeys = 4;
  total_size += 1 * this->vehicle_journeys_size();
  for (int i = 0; i < this->vehicle_journeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicle_journeys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficReports::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.TrafficReports)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrafficReports* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficReports>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.TrafficReports)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.TrafficReports)
    MergeFrom(*source);
  }
}

void TrafficReports::MergeFrom(const TrafficReports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.TrafficReports)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  lines_.MergeFrom(from.lines_);
  stop_areas_.MergeFrom(from.stop_areas_);
  vehicle_journeys_.MergeFrom(from.vehicle_journeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_network()) {
      mutable_network()->::pbnavitia::Network::MergeFrom(from.network());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrafficReports::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.TrafficReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficReports::CopyFrom(const TrafficReports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.TrafficReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficReports::IsInitialized() const {

  if (has_network()) {
    if (!this->network_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->lines())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_areas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vehicle_journeys())) return false;
  return true;
}

void TrafficReports::Swap(TrafficReports* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficReports::InternalSwap(TrafficReports* other) {
  std::swap(network_, other->network_);
  lines_.UnsafeArenaSwap(&other->lines_);
  stop_areas_.UnsafeArenaSwap(&other->stop_areas_);
  vehicle_journeys_.UnsafeArenaSwap(&other->vehicle_journeys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficReports::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficReports_descriptor_;
  metadata.reflection = TrafficReports_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficReports

// optional .pbnavitia.Network network = 1;
bool TrafficReports::has_network() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrafficReports::set_has_network() {
  _has_bits_[0] |= 0x00000001u;
}
void TrafficReports::clear_has_network() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrafficReports::clear_network() {
  if (network_ != NULL) network_->::pbnavitia::Network::Clear();
  clear_has_network();
}
const ::pbnavitia::Network& TrafficReports::network() const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReports.network)
  return network_ != NULL ? *network_ : *default_instance_->network_;
}
::pbnavitia::Network* TrafficReports::mutable_network() {
  set_has_network();
  if (network_ == NULL) {
    network_ = new ::pbnavitia::Network;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReports.network)
  return network_;
}
::pbnavitia::Network* TrafficReports::release_network() {
  // @@protoc_insertion_point(field_release:pbnavitia.TrafficReports.network)
  clear_has_network();
  ::pbnavitia::Network* temp = network_;
  network_ = NULL;
  return temp;
}
void TrafficReports::set_allocated_network(::pbnavitia::Network* network) {
  delete network_;
  network_ = network;
  if (network) {
    set_has_network();
  } else {
    clear_has_network();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.TrafficReports.network)
}

// repeated .pbnavitia.Line lines = 2;
int TrafficReports::lines_size() const {
  return lines_.size();
}
void TrafficReports::clear_lines() {
  lines_.Clear();
}
const ::pbnavitia::Line& TrafficReports::lines(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReports.lines)
  return lines_.Get(index);
}
::pbnavitia::Line* TrafficReports::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReports.lines)
  return lines_.Mutable(index);
}
::pbnavitia::Line* TrafficReports::add_lines() {
  // @@protoc_insertion_point(field_add:pbnavitia.TrafficReports.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
TrafficReports::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.TrafficReports.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
TrafficReports::lines() const {
  // @@protoc_insertion_point(field_list:pbnavitia.TrafficReports.lines)
  return lines_;
}

// repeated .pbnavitia.StopArea stop_areas = 3;
int TrafficReports::stop_areas_size() const {
  return stop_areas_.size();
}
void TrafficReports::clear_stop_areas() {
  stop_areas_.Clear();
}
const ::pbnavitia::StopArea& TrafficReports::stop_areas(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReports.stop_areas)
  return stop_areas_.Get(index);
}
::pbnavitia::StopArea* TrafficReports::mutable_stop_areas(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReports.stop_areas)
  return stop_areas_.Mutable(index);
}
::pbnavitia::StopArea* TrafficReports::add_stop_areas() {
  // @@protoc_insertion_point(field_add:pbnavitia.TrafficReports.stop_areas)
  return stop_areas_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
TrafficReports::mutable_stop_areas() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.TrafficReports.stop_areas)
  return &stop_areas_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
TrafficReports::stop_areas() const {
  // @@protoc_insertion_point(field_list:pbnavitia.TrafficReports.stop_areas)
  return stop_areas_;
}

// repeated .pbnavitia.VehicleJourney vehicle_journeys = 4;
int TrafficReports::vehicle_journeys_size() const {
  return vehicle_journeys_.size();
}
void TrafficReports::clear_vehicle_journeys() {
  vehicle_journeys_.Clear();
}
const ::pbnavitia::VehicleJourney& TrafficReports::vehicle_journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.TrafficReports.vehicle_journeys)
  return vehicle_journeys_.Get(index);
}
::pbnavitia::VehicleJourney* TrafficReports::mutable_vehicle_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.TrafficReports.vehicle_journeys)
  return vehicle_journeys_.Mutable(index);
}
::pbnavitia::VehicleJourney* TrafficReports::add_vehicle_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.TrafficReports.vehicle_journeys)
  return vehicle_journeys_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >*
TrafficReports::mutable_vehicle_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.TrafficReports.vehicle_journeys)
  return &vehicle_journeys_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >&
TrafficReports::vehicle_journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.TrafficReports.vehicle_journeys)
  return vehicle_journeys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineReport::kLineFieldNumber;
const int LineReport::kPtObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineReport::LineReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.LineReport)
}

void LineReport::InitAsDefaultInstance() {
  line_ = const_cast< ::pbnavitia::Line*>(&::pbnavitia::Line::default_instance());
}

LineReport::LineReport(const LineReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.LineReport)
}

void LineReport::SharedCtor() {
  _cached_size_ = 0;
  line_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineReport::~LineReport() {
  // @@protoc_insertion_point(destructor:pbnavitia.LineReport)
  SharedDtor();
}

void LineReport::SharedDtor() {
  if (this != default_instance_) {
    delete line_;
  }
}

void LineReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineReport_descriptor_;
}

const LineReport& LineReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

LineReport* LineReport::default_instance_ = NULL;

LineReport* LineReport::New(::google::protobuf::Arena* arena) const {
  LineReport* n = new LineReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineReport::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.LineReport)
  if (has_line()) {
    if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  }
  pt_objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LineReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.LineReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.Line line = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pt_objects;
        break;
      }

      // repeated .pbnavitia.PtObject pt_objects = 2;
      case 2: {
        if (tag == 18) {
         parse_pt_objects:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pt_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pt_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pt_objects;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.LineReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.LineReport)
  return false;
#undef DO_
}

void LineReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.LineReport)
  // optional .pbnavitia.Line line = 1;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->line_, output);
  }

  // repeated .pbnavitia.PtObject pt_objects = 2;
  for (unsigned int i = 0, n = this->pt_objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt_objects(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.LineReport)
}

::google::protobuf::uint8* LineReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.LineReport)
  // optional .pbnavitia.Line line = 1;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->line_, false, target);
  }

  // repeated .pbnavitia.PtObject pt_objects = 2;
  for (unsigned int i = 0, n = this->pt_objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pt_objects(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.LineReport)
  return target;
}

int LineReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.LineReport)
  int total_size = 0;

  // optional .pbnavitia.Line line = 1;
  if (has_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->line_);
  }

  // repeated .pbnavitia.PtObject pt_objects = 2;
  total_size += 1 * this->pt_objects_size();
  for (int i = 0; i < this->pt_objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pt_objects(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.LineReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LineReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LineReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.LineReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.LineReport)
    MergeFrom(*source);
  }
}

void LineReport::MergeFrom(const LineReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.LineReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pt_objects_.MergeFrom(from.pt_objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line()) {
      mutable_line()->::pbnavitia::Line::MergeFrom(from.line());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LineReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.LineReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineReport::CopyFrom(const LineReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.LineReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineReport::IsInitialized() const {

  if (has_line()) {
    if (!this->line_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pt_objects())) return false;
  return true;
}

void LineReport::Swap(LineReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineReport::InternalSwap(LineReport* other) {
  std::swap(line_, other->line_);
  pt_objects_.UnsafeArenaSwap(&other->pt_objects_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineReport_descriptor_;
  metadata.reflection = LineReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineReport

// optional .pbnavitia.Line line = 1;
bool LineReport::has_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LineReport::set_has_line() {
  _has_bits_[0] |= 0x00000001u;
}
void LineReport::clear_has_line() {
  _has_bits_[0] &= ~0x00000001u;
}
void LineReport::clear_line() {
  if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  clear_has_line();
}
const ::pbnavitia::Line& LineReport::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReport.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
::pbnavitia::Line* LineReport::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineReport.line)
  return line_;
}
::pbnavitia::Line* LineReport::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.LineReport.line)
  clear_has_line();
  ::pbnavitia::Line* temp = line_;
  line_ = NULL;
  return temp;
}
void LineReport::set_allocated_line(::pbnavitia::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LineReport.line)
}

// repeated .pbnavitia.PtObject pt_objects = 2;
int LineReport::pt_objects_size() const {
  return pt_objects_.size();
}
void LineReport::clear_pt_objects() {
  pt_objects_.Clear();
}
const ::pbnavitia::PtObject& LineReport::pt_objects(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LineReport.pt_objects)
  return pt_objects_.Get(index);
}
::pbnavitia::PtObject* LineReport::mutable_pt_objects(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LineReport.pt_objects)
  return pt_objects_.Mutable(index);
}
::pbnavitia::PtObject* LineReport::add_pt_objects() {
  // @@protoc_insertion_point(field_add:pbnavitia.LineReport.pt_objects)
  return pt_objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
LineReport::mutable_pt_objects() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LineReport.pt_objects)
  return &pt_objects_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
LineReport::pt_objects() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LineReport.pt_objects)
  return pt_objects_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinkArgs::kKeyFieldNumber;
const int LinkArgs::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinkArgs::LinkArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.LinkArgs)
}

void LinkArgs::InitAsDefaultInstance() {
}

LinkArgs::LinkArgs(const LinkArgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.LinkArgs)
}

void LinkArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkArgs::~LinkArgs() {
  // @@protoc_insertion_point(destructor:pbnavitia.LinkArgs)
  SharedDtor();
}

void LinkArgs::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LinkArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkArgs_descriptor_;
}

const LinkArgs& LinkArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

LinkArgs* LinkArgs::default_instance_ = NULL;

LinkArgs* LinkArgs::New(::google::protobuf::Arena* arena) const {
  LinkArgs* n = new LinkArgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinkArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.LinkArgs)
  if (has_key()) {
    key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LinkArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.LinkArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LinkArgs.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.LinkArgs.values");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.LinkArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.LinkArgs)
  return false;
#undef DO_
}

void LinkArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.LinkArgs)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LinkArgs.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LinkArgs.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.LinkArgs)
}

::google::protobuf::uint8* LinkArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.LinkArgs)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LinkArgs.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.LinkArgs.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.LinkArgs)
  return target;
}

int LinkArgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.LinkArgs)
  int total_size = 0;

  // optional string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // repeated string values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.LinkArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LinkArgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LinkArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.LinkArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.LinkArgs)
    MergeFrom(*source);
  }
}

void LinkArgs::MergeFrom(const LinkArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.LinkArgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LinkArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.LinkArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkArgs::CopyFrom(const LinkArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.LinkArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkArgs::IsInitialized() const {

  return true;
}

void LinkArgs::Swap(LinkArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinkArgs::InternalSwap(LinkArgs* other) {
  key_.Swap(&other->key_);
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LinkArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkArgs_descriptor_;
  metadata.reflection = LinkArgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkArgs

// optional string key = 1;
bool LinkArgs::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LinkArgs::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void LinkArgs::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void LinkArgs::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& LinkArgs::key() const {
  // @@protoc_insertion_point(field_get:pbnavitia.LinkArgs.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LinkArgs::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.LinkArgs.key)
}
 void LinkArgs::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.LinkArgs.key)
}
 void LinkArgs::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LinkArgs.key)
}
 ::std::string* LinkArgs::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:pbnavitia.LinkArgs.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LinkArgs::release_key() {
  // @@protoc_insertion_point(field_release:pbnavitia.LinkArgs.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LinkArgs::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.LinkArgs.key)
}

// repeated string values = 2;
int LinkArgs::values_size() const {
  return values_.size();
}
void LinkArgs::clear_values() {
  values_.Clear();
}
 const ::std::string& LinkArgs::values(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.LinkArgs.values)
  return values_.Get(index);
}
 ::std::string* LinkArgs::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.LinkArgs.values)
  return values_.Mutable(index);
}
 void LinkArgs::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.LinkArgs.values)
  values_.Mutable(index)->assign(value);
}
 void LinkArgs::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.LinkArgs.values)
}
 void LinkArgs::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.LinkArgs.values)
}
 ::std::string* LinkArgs::add_values() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.LinkArgs.values)
  return values_.Add();
}
 void LinkArgs::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.LinkArgs.values)
}
 void LinkArgs::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.LinkArgs.values)
}
 void LinkArgs::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.LinkArgs.values)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
LinkArgs::values() const {
  // @@protoc_insertion_point(field_list:pbnavitia.LinkArgs.values)
  return values_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
LinkArgs::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.LinkArgs.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link::kRelFieldNumber;
const int Link::kTypeFieldNumber;
const int Link::kIsTemplatedFieldNumber;
const int Link::kDescriptionFieldNumber;
const int Link::kKwargsFieldNumber;
const int Link::kRessourceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link::Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Link)
}

void Link::InitAsDefaultInstance() {
}

Link::Link(const Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Link)
}

void Link::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_templated_ = false;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ressource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:pbnavitia.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  rel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ressource_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New(::google::protobuf::Arena* arena) const {
  Link* n = new Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Link)
  if (_has_bits_[0 / 32] & 47u) {
    if (has_rel()) {
      rel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_templated_ = false;
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ressource_name()) {
      ressource_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  kwargs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rel().data(), this->rel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Link.rel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Link.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_templated;
        break;
      }

      // optional bool is_templated = 3;
      case 3: {
        if (tag == 24) {
         parse_is_templated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_templated_)));
          set_has_is_templated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Link.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_kwargs;
        break;
      }

      // repeated .pbnavitia.LinkArgs kwargs = 5;
      case 5: {
        if (tag == 42) {
         parse_kwargs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kwargs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kwargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_kwargs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_ressource_name;
        break;
      }

      // optional string ressource_name = 6;
      case 6: {
        if (tag == 50) {
         parse_ressource_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ressource_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ressource_name().data(), this->ressource_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Link.ressource_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Link)
  // optional string rel = 1;
  if (has_rel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rel().data(), this->rel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Link.rel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rel(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Link.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional bool is_templated = 3;
  if (has_is_templated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_templated(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Link.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // repeated .pbnavitia.LinkArgs kwargs = 5;
  for (unsigned int i = 0, n = this->kwargs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kwargs(i), output);
  }

  // optional string ressource_name = 6;
  if (has_ressource_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ressource_name().data(), this->ressource_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Link.ressource_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ressource_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Link)
}

::google::protobuf::uint8* Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Link)
  // optional string rel = 1;
  if (has_rel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rel().data(), this->rel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Link.rel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rel(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Link.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional bool is_templated = 3;
  if (has_is_templated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_templated(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Link.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // repeated .pbnavitia.LinkArgs kwargs = 5;
  for (unsigned int i = 0, n = this->kwargs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->kwargs(i), false, target);
  }

  // optional string ressource_name = 6;
  if (has_ressource_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ressource_name().data(), this->ressource_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Link.ressource_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ressource_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Link)
  return target;
}

int Link::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Link)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 47u) {
    // optional string rel = 1;
    if (has_rel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rel());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional bool is_templated = 3;
    if (has_is_templated()) {
      total_size += 1 + 1;
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string ressource_name = 6;
    if (has_ressource_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ressource_name());
    }

  }
  // repeated .pbnavitia.LinkArgs kwargs = 5;
  total_size += 1 * this->kwargs_size();
  for (int i = 0; i < this->kwargs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kwargs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Link* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Link)
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  kwargs_.MergeFrom(from.kwargs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rel()) {
      set_has_rel();
      rel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rel_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_is_templated()) {
      set_is_templated(from.is_templated());
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (from.has_ressource_name()) {
      set_has_ressource_name();
      ressource_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ressource_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {

  return true;
}

void Link::Swap(Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link::InternalSwap(Link* other) {
  rel_.Swap(&other->rel_);
  type_.Swap(&other->type_);
  std::swap(is_templated_, other->is_templated_);
  description_.Swap(&other->description_);
  kwargs_.UnsafeArenaSwap(&other->kwargs_);
  ressource_name_.Swap(&other->ressource_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link

// optional string rel = 1;
bool Link::has_rel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Link::set_has_rel() {
  _has_bits_[0] |= 0x00000001u;
}
void Link::clear_has_rel() {
  _has_bits_[0] &= ~0x00000001u;
}
void Link::clear_rel() {
  rel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rel();
}
 const ::std::string& Link::rel() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.rel)
  return rel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_rel(const ::std::string& value) {
  set_has_rel();
  rel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Link.rel)
}
 void Link::set_rel(const char* value) {
  set_has_rel();
  rel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Link.rel)
}
 void Link::set_rel(const char* value, size_t size) {
  set_has_rel();
  rel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Link.rel)
}
 ::std::string* Link::mutable_rel() {
  set_has_rel();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.rel)
  return rel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Link::release_rel() {
  // @@protoc_insertion_point(field_release:pbnavitia.Link.rel)
  clear_has_rel();
  return rel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_allocated_rel(::std::string* rel) {
  if (rel != NULL) {
    set_has_rel();
  } else {
    clear_has_rel();
  }
  rel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rel);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Link.rel)
}

// optional string type = 2;
bool Link::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Link::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Link::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Link::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Link::type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Link.type)
}
 void Link::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Link.type)
}
 void Link::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Link.type)
}
 ::std::string* Link::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Link::release_type() {
  // @@protoc_insertion_point(field_release:pbnavitia.Link.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Link.type)
}

// optional bool is_templated = 3;
bool Link::has_is_templated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Link::set_has_is_templated() {
  _has_bits_[0] |= 0x00000004u;
}
void Link::clear_has_is_templated() {
  _has_bits_[0] &= ~0x00000004u;
}
void Link::clear_is_templated() {
  is_templated_ = false;
  clear_has_is_templated();
}
 bool Link::is_templated() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.is_templated)
  return is_templated_;
}
 void Link::set_is_templated(bool value) {
  set_has_is_templated();
  is_templated_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Link.is_templated)
}

// optional string description = 4;
bool Link::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Link::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
void Link::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
void Link::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& Link::description() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Link.description)
}
 void Link::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Link.description)
}
 void Link::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Link.description)
}
 ::std::string* Link::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Link::release_description() {
  // @@protoc_insertion_point(field_release:pbnavitia.Link.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Link.description)
}

// repeated .pbnavitia.LinkArgs kwargs = 5;
int Link::kwargs_size() const {
  return kwargs_.size();
}
void Link::clear_kwargs() {
  kwargs_.Clear();
}
const ::pbnavitia::LinkArgs& Link::kwargs(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.kwargs)
  return kwargs_.Get(index);
}
::pbnavitia::LinkArgs* Link::mutable_kwargs(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.kwargs)
  return kwargs_.Mutable(index);
}
::pbnavitia::LinkArgs* Link::add_kwargs() {
  // @@protoc_insertion_point(field_add:pbnavitia.Link.kwargs)
  return kwargs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LinkArgs >*
Link::mutable_kwargs() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Link.kwargs)
  return &kwargs_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LinkArgs >&
Link::kwargs() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Link.kwargs)
  return kwargs_;
}

// optional string ressource_name = 6;
bool Link::has_ressource_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Link::set_has_ressource_name() {
  _has_bits_[0] |= 0x00000020u;
}
void Link::clear_has_ressource_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void Link::clear_ressource_name() {
  ressource_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ressource_name();
}
 const ::std::string& Link::ressource_name() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Link.ressource_name)
  return ressource_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_ressource_name(const ::std::string& value) {
  set_has_ressource_name();
  ressource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Link.ressource_name)
}
 void Link::set_ressource_name(const char* value) {
  set_has_ressource_name();
  ressource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Link.ressource_name)
}
 void Link::set_ressource_name(const char* value, size_t size) {
  set_has_ressource_name();
  ressource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Link.ressource_name)
}
 ::std::string* Link::mutable_ressource_name() {
  set_has_ressource_name();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Link.ressource_name)
  return ressource_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Link::release_ressource_name() {
  // @@protoc_insertion_point(field_release:pbnavitia.Link.ressource_name)
  clear_has_ressource_name();
  return ressource_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Link::set_allocated_ressource_name(::std::string* ressource_name) {
  if (ressource_name != NULL) {
    set_has_ressource_name();
  } else {
    clear_has_ressource_name();
  }
  ressource_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ressource_name);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Link.ressource_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphicalIsochrone::kGeojsonFieldNumber;
const int GraphicalIsochrone::kMaxDurationFieldNumber;
const int GraphicalIsochrone::kMinDurationFieldNumber;
const int GraphicalIsochrone::kOriginFieldNumber;
const int GraphicalIsochrone::kDestinationFieldNumber;
const int GraphicalIsochrone::kRequestedDateTimeFieldNumber;
const int GraphicalIsochrone::kMinDateTimeFieldNumber;
const int GraphicalIsochrone::kMaxDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphicalIsochrone::GraphicalIsochrone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.GraphicalIsochrone)
}

void GraphicalIsochrone::InitAsDefaultInstance() {
  origin_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  destination_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
}

GraphicalIsochrone::GraphicalIsochrone(const GraphicalIsochrone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.GraphicalIsochrone)
}

void GraphicalIsochrone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  geojson_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_duration_ = 0;
  min_duration_ = 0;
  origin_ = NULL;
  destination_ = NULL;
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  min_date_time_ = GOOGLE_ULONGLONG(0);
  max_date_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GraphicalIsochrone::~GraphicalIsochrone() {
  // @@protoc_insertion_point(destructor:pbnavitia.GraphicalIsochrone)
  SharedDtor();
}

void GraphicalIsochrone::SharedDtor() {
  geojson_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete origin_;
    delete destination_;
  }
}

void GraphicalIsochrone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphicalIsochrone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphicalIsochrone_descriptor_;
}

const GraphicalIsochrone& GraphicalIsochrone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

GraphicalIsochrone* GraphicalIsochrone::default_instance_ = NULL;

GraphicalIsochrone* GraphicalIsochrone::New(::google::protobuf::Arena* arena) const {
  GraphicalIsochrone* n = new GraphicalIsochrone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GraphicalIsochrone::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.GraphicalIsochrone)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GraphicalIsochrone, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GraphicalIsochrone*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(max_duration_, min_duration_);
    ZR_(requested_date_time_, max_date_time_);
    if (has_geojson()) {
      geojson_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GraphicalIsochrone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.GraphicalIsochrone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string geojson = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geojson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geojson().data(), this->geojson().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.GraphicalIsochrone.geojson");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_duration;
        break;
      }

      // optional int32 max_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_max_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_duration_)));
          set_has_max_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_duration;
        break;
      }

      // optional int32 min_duration = 3;
      case 3: {
        if (tag == 24) {
         parse_min_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_duration_)));
          set_has_min_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_origin;
        break;
      }

      // optional .pbnavitia.PtObject origin = 4;
      case 4: {
        if (tag == 34) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destination;
        break;
      }

      // optional .pbnavitia.PtObject destination = 5;
      case 5: {
        if (tag == 42) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_requested_date_time;
        break;
      }

      // optional uint64 requested_date_time = 6;
      case 6: {
        if (tag == 48) {
         parse_requested_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requested_date_time_)));
          set_has_requested_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_min_date_time;
        break;
      }

      // optional uint64 min_date_time = 7;
      case 7: {
        if (tag == 56) {
         parse_min_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_date_time_)));
          set_has_min_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_date_time;
        break;
      }

      // optional uint64 max_date_time = 8;
      case 8: {
        if (tag == 64) {
         parse_max_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_date_time_)));
          set_has_max_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.GraphicalIsochrone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.GraphicalIsochrone)
  return false;
#undef DO_
}

void GraphicalIsochrone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.GraphicalIsochrone)
  // optional string geojson = 1;
  if (has_geojson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geojson().data(), this->geojson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.GraphicalIsochrone.geojson");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->geojson(), output);
  }

  // optional int32 max_duration = 2;
  if (has_max_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_duration(), output);
  }

  // optional int32 min_duration = 3;
  if (has_min_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_duration(), output);
  }

  // optional .pbnavitia.PtObject origin = 4;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->origin_, output);
  }

  // optional .pbnavitia.PtObject destination = 5;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->destination_, output);
  }

  // optional uint64 requested_date_time = 6;
  if (has_requested_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->requested_date_time(), output);
  }

  // optional uint64 min_date_time = 7;
  if (has_min_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->min_date_time(), output);
  }

  // optional uint64 max_date_time = 8;
  if (has_max_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->max_date_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.GraphicalIsochrone)
}

::google::protobuf::uint8* GraphicalIsochrone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.GraphicalIsochrone)
  // optional string geojson = 1;
  if (has_geojson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geojson().data(), this->geojson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.GraphicalIsochrone.geojson");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geojson(), target);
  }

  // optional int32 max_duration = 2;
  if (has_max_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_duration(), target);
  }

  // optional int32 min_duration = 3;
  if (has_min_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_duration(), target);
  }

  // optional .pbnavitia.PtObject origin = 4;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->origin_, false, target);
  }

  // optional .pbnavitia.PtObject destination = 5;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->destination_, false, target);
  }

  // optional uint64 requested_date_time = 6;
  if (has_requested_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->requested_date_time(), target);
  }

  // optional uint64 min_date_time = 7;
  if (has_min_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->min_date_time(), target);
  }

  // optional uint64 max_date_time = 8;
  if (has_max_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->max_date_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.GraphicalIsochrone)
  return target;
}

int GraphicalIsochrone::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.GraphicalIsochrone)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string geojson = 1;
    if (has_geojson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geojson());
    }

    // optional int32 max_duration = 2;
    if (has_max_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_duration());
    }

    // optional int32 min_duration = 3;
    if (has_min_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_duration());
    }

    // optional .pbnavitia.PtObject origin = 4;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .pbnavitia.PtObject destination = 5;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

    // optional uint64 requested_date_time = 6;
    if (has_requested_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requested_date_time());
    }

    // optional uint64 min_date_time = 7;
    if (has_min_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_date_time());
    }

    // optional uint64 max_date_time = 8;
    if (has_max_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_date_time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphicalIsochrone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.GraphicalIsochrone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GraphicalIsochrone* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphicalIsochrone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.GraphicalIsochrone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.GraphicalIsochrone)
    MergeFrom(*source);
  }
}

void GraphicalIsochrone::MergeFrom(const GraphicalIsochrone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.GraphicalIsochrone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geojson()) {
      set_has_geojson();
      geojson_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.geojson_);
    }
    if (from.has_max_duration()) {
      set_max_duration(from.max_duration());
    }
    if (from.has_min_duration()) {
      set_min_duration(from.min_duration());
    }
    if (from.has_origin()) {
      mutable_origin()->::pbnavitia::PtObject::MergeFrom(from.origin());
    }
    if (from.has_destination()) {
      mutable_destination()->::pbnavitia::PtObject::MergeFrom(from.destination());
    }
    if (from.has_requested_date_time()) {
      set_requested_date_time(from.requested_date_time());
    }
    if (from.has_min_date_time()) {
      set_min_date_time(from.min_date_time());
    }
    if (from.has_max_date_time()) {
      set_max_date_time(from.max_date_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GraphicalIsochrone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.GraphicalIsochrone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphicalIsochrone::CopyFrom(const GraphicalIsochrone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.GraphicalIsochrone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphicalIsochrone::IsInitialized() const {

  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  return true;
}

void GraphicalIsochrone::Swap(GraphicalIsochrone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GraphicalIsochrone::InternalSwap(GraphicalIsochrone* other) {
  geojson_.Swap(&other->geojson_);
  std::swap(max_duration_, other->max_duration_);
  std::swap(min_duration_, other->min_duration_);
  std::swap(origin_, other->origin_);
  std::swap(destination_, other->destination_);
  std::swap(requested_date_time_, other->requested_date_time_);
  std::swap(min_date_time_, other->min_date_time_);
  std::swap(max_date_time_, other->max_date_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GraphicalIsochrone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphicalIsochrone_descriptor_;
  metadata.reflection = GraphicalIsochrone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GraphicalIsochrone

// optional string geojson = 1;
bool GraphicalIsochrone::has_geojson() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GraphicalIsochrone::set_has_geojson() {
  _has_bits_[0] |= 0x00000001u;
}
void GraphicalIsochrone::clear_has_geojson() {
  _has_bits_[0] &= ~0x00000001u;
}
void GraphicalIsochrone::clear_geojson() {
  geojson_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geojson();
}
 const ::std::string& GraphicalIsochrone::geojson() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.geojson)
  return geojson_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphicalIsochrone::set_geojson(const ::std::string& value) {
  set_has_geojson();
  geojson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.geojson)
}
 void GraphicalIsochrone::set_geojson(const char* value) {
  set_has_geojson();
  geojson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.GraphicalIsochrone.geojson)
}
 void GraphicalIsochrone::set_geojson(const char* value, size_t size) {
  set_has_geojson();
  geojson_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.GraphicalIsochrone.geojson)
}
 ::std::string* GraphicalIsochrone::mutable_geojson() {
  set_has_geojson();
  // @@protoc_insertion_point(field_mutable:pbnavitia.GraphicalIsochrone.geojson)
  return geojson_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GraphicalIsochrone::release_geojson() {
  // @@protoc_insertion_point(field_release:pbnavitia.GraphicalIsochrone.geojson)
  clear_has_geojson();
  return geojson_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GraphicalIsochrone::set_allocated_geojson(::std::string* geojson) {
  if (geojson != NULL) {
    set_has_geojson();
  } else {
    clear_has_geojson();
  }
  geojson_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geojson);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GraphicalIsochrone.geojson)
}

// optional int32 max_duration = 2;
bool GraphicalIsochrone::has_max_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GraphicalIsochrone::set_has_max_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void GraphicalIsochrone::clear_has_max_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void GraphicalIsochrone::clear_max_duration() {
  max_duration_ = 0;
  clear_has_max_duration();
}
 ::google::protobuf::int32 GraphicalIsochrone::max_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.max_duration)
  return max_duration_;
}
 void GraphicalIsochrone::set_max_duration(::google::protobuf::int32 value) {
  set_has_max_duration();
  max_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.max_duration)
}

// optional int32 min_duration = 3;
bool GraphicalIsochrone::has_min_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GraphicalIsochrone::set_has_min_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void GraphicalIsochrone::clear_has_min_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void GraphicalIsochrone::clear_min_duration() {
  min_duration_ = 0;
  clear_has_min_duration();
}
 ::google::protobuf::int32 GraphicalIsochrone::min_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.min_duration)
  return min_duration_;
}
 void GraphicalIsochrone::set_min_duration(::google::protobuf::int32 value) {
  set_has_min_duration();
  min_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.min_duration)
}

// optional .pbnavitia.PtObject origin = 4;
bool GraphicalIsochrone::has_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GraphicalIsochrone::set_has_origin() {
  _has_bits_[0] |= 0x00000008u;
}
void GraphicalIsochrone::clear_has_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
void GraphicalIsochrone::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
  clear_has_origin();
}
const ::pbnavitia::PtObject& GraphicalIsochrone::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::pbnavitia::PtObject* GraphicalIsochrone::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.GraphicalIsochrone.origin)
  return origin_;
}
::pbnavitia::PtObject* GraphicalIsochrone::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.GraphicalIsochrone.origin)
  clear_has_origin();
  ::pbnavitia::PtObject* temp = origin_;
  origin_ = NULL;
  return temp;
}
void GraphicalIsochrone::set_allocated_origin(::pbnavitia::PtObject* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GraphicalIsochrone.origin)
}

// optional .pbnavitia.PtObject destination = 5;
bool GraphicalIsochrone::has_destination() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GraphicalIsochrone::set_has_destination() {
  _has_bits_[0] |= 0x00000010u;
}
void GraphicalIsochrone::clear_has_destination() {
  _has_bits_[0] &= ~0x00000010u;
}
void GraphicalIsochrone::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
  clear_has_destination();
}
const ::pbnavitia::PtObject& GraphicalIsochrone::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::pbnavitia::PtObject* GraphicalIsochrone::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.GraphicalIsochrone.destination)
  return destination_;
}
::pbnavitia::PtObject* GraphicalIsochrone::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.GraphicalIsochrone.destination)
  clear_has_destination();
  ::pbnavitia::PtObject* temp = destination_;
  destination_ = NULL;
  return temp;
}
void GraphicalIsochrone::set_allocated_destination(::pbnavitia::PtObject* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.GraphicalIsochrone.destination)
}

// optional uint64 requested_date_time = 6;
bool GraphicalIsochrone::has_requested_date_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GraphicalIsochrone::set_has_requested_date_time() {
  _has_bits_[0] |= 0x00000020u;
}
void GraphicalIsochrone::clear_has_requested_date_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void GraphicalIsochrone::clear_requested_date_time() {
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_requested_date_time();
}
 ::google::protobuf::uint64 GraphicalIsochrone::requested_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.requested_date_time)
  return requested_date_time_;
}
 void GraphicalIsochrone::set_requested_date_time(::google::protobuf::uint64 value) {
  set_has_requested_date_time();
  requested_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.requested_date_time)
}

// optional uint64 min_date_time = 7;
bool GraphicalIsochrone::has_min_date_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GraphicalIsochrone::set_has_min_date_time() {
  _has_bits_[0] |= 0x00000040u;
}
void GraphicalIsochrone::clear_has_min_date_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void GraphicalIsochrone::clear_min_date_time() {
  min_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_min_date_time();
}
 ::google::protobuf::uint64 GraphicalIsochrone::min_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.min_date_time)
  return min_date_time_;
}
 void GraphicalIsochrone::set_min_date_time(::google::protobuf::uint64 value) {
  set_has_min_date_time();
  min_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.min_date_time)
}

// optional uint64 max_date_time = 8;
bool GraphicalIsochrone::has_max_date_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GraphicalIsochrone::set_has_max_date_time() {
  _has_bits_[0] |= 0x00000080u;
}
void GraphicalIsochrone::clear_has_max_date_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void GraphicalIsochrone::clear_max_date_time() {
  max_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_max_date_time();
}
 ::google::protobuf::uint64 GraphicalIsochrone::max_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.GraphicalIsochrone.max_date_time)
  return max_date_time_;
}
 void GraphicalIsochrone::set_max_date_time(::google::protobuf::uint64 value) {
  set_has_max_date_time();
  max_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.GraphicalIsochrone.max_date_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeatMap::kHeatMatrixFieldNumber;
const int HeatMap::kOriginFieldNumber;
const int HeatMap::kDestinationFieldNumber;
const int HeatMap::kRequestedDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeatMap::HeatMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.HeatMap)
}

void HeatMap::InitAsDefaultInstance() {
  origin_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
  destination_ = const_cast< ::pbnavitia::PtObject*>(&::pbnavitia::PtObject::default_instance());
}

HeatMap::HeatMap(const HeatMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.HeatMap)
}

void HeatMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  heat_matrix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_ = NULL;
  destination_ = NULL;
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeatMap::~HeatMap() {
  // @@protoc_insertion_point(destructor:pbnavitia.HeatMap)
  SharedDtor();
}

void HeatMap::SharedDtor() {
  heat_matrix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete origin_;
    delete destination_;
  }
}

void HeatMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeatMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeatMap_descriptor_;
}

const HeatMap& HeatMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

HeatMap* HeatMap::default_instance_ = NULL;

HeatMap* HeatMap::New(::google::protobuf::Arena* arena) const {
  HeatMap* n = new HeatMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeatMap::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.HeatMap)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_heat_matrix()) {
      heat_matrix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
    }
    requested_date_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeatMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.HeatMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string heat_matrix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heat_matrix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->heat_matrix().data(), this->heat_matrix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.HeatMap.heat_matrix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_origin;
        break;
      }

      // optional .pbnavitia.PtObject origin = 2;
      case 2: {
        if (tag == 18) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_destination;
        break;
      }

      // optional .pbnavitia.PtObject destination = 3;
      case 3: {
        if (tag == 26) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_requested_date_time;
        break;
      }

      // optional uint64 requested_date_time = 4;
      case 4: {
        if (tag == 32) {
         parse_requested_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requested_date_time_)));
          set_has_requested_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.HeatMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.HeatMap)
  return false;
#undef DO_
}

void HeatMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.HeatMap)
  // optional string heat_matrix = 1;
  if (has_heat_matrix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heat_matrix().data(), this->heat_matrix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.HeatMap.heat_matrix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->heat_matrix(), output);
  }

  // optional .pbnavitia.PtObject origin = 2;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->origin_, output);
  }

  // optional .pbnavitia.PtObject destination = 3;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->destination_, output);
  }

  // optional uint64 requested_date_time = 4;
  if (has_requested_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->requested_date_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.HeatMap)
}

::google::protobuf::uint8* HeatMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.HeatMap)
  // optional string heat_matrix = 1;
  if (has_heat_matrix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heat_matrix().data(), this->heat_matrix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.HeatMap.heat_matrix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->heat_matrix(), target);
  }

  // optional .pbnavitia.PtObject origin = 2;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->origin_, false, target);
  }

  // optional .pbnavitia.PtObject destination = 3;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->destination_, false, target);
  }

  // optional uint64 requested_date_time = 4;
  if (has_requested_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->requested_date_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.HeatMap)
  return target;
}

int HeatMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.HeatMap)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string heat_matrix = 1;
    if (has_heat_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heat_matrix());
    }

    // optional .pbnavitia.PtObject origin = 2;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .pbnavitia.PtObject destination = 3;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destination_);
    }

    // optional uint64 requested_date_time = 4;
    if (has_requested_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requested_date_time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeatMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.HeatMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HeatMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeatMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.HeatMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.HeatMap)
    MergeFrom(*source);
  }
}

void HeatMap::MergeFrom(const HeatMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.HeatMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heat_matrix()) {
      set_has_heat_matrix();
      heat_matrix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heat_matrix_);
    }
    if (from.has_origin()) {
      mutable_origin()->::pbnavitia::PtObject::MergeFrom(from.origin());
    }
    if (from.has_destination()) {
      mutable_destination()->::pbnavitia::PtObject::MergeFrom(from.destination());
    }
    if (from.has_requested_date_time()) {
      set_requested_date_time(from.requested_date_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeatMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.HeatMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeatMap::CopyFrom(const HeatMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.HeatMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeatMap::IsInitialized() const {

  if (has_origin()) {
    if (!this->origin_->IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination_->IsInitialized()) return false;
  }
  return true;
}

void HeatMap::Swap(HeatMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeatMap::InternalSwap(HeatMap* other) {
  heat_matrix_.Swap(&other->heat_matrix_);
  std::swap(origin_, other->origin_);
  std::swap(destination_, other->destination_);
  std::swap(requested_date_time_, other->requested_date_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeatMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeatMap_descriptor_;
  metadata.reflection = HeatMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeatMap

// optional string heat_matrix = 1;
bool HeatMap::has_heat_matrix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeatMap::set_has_heat_matrix() {
  _has_bits_[0] |= 0x00000001u;
}
void HeatMap::clear_has_heat_matrix() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeatMap::clear_heat_matrix() {
  heat_matrix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_heat_matrix();
}
 const ::std::string& HeatMap::heat_matrix() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMap.heat_matrix)
  return heat_matrix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeatMap::set_heat_matrix(const ::std::string& value) {
  set_has_heat_matrix();
  heat_matrix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.HeatMap.heat_matrix)
}
 void HeatMap::set_heat_matrix(const char* value) {
  set_has_heat_matrix();
  heat_matrix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.HeatMap.heat_matrix)
}
 void HeatMap::set_heat_matrix(const char* value, size_t size) {
  set_has_heat_matrix();
  heat_matrix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.HeatMap.heat_matrix)
}
 ::std::string* HeatMap::mutable_heat_matrix() {
  set_has_heat_matrix();
  // @@protoc_insertion_point(field_mutable:pbnavitia.HeatMap.heat_matrix)
  return heat_matrix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeatMap::release_heat_matrix() {
  // @@protoc_insertion_point(field_release:pbnavitia.HeatMap.heat_matrix)
  clear_has_heat_matrix();
  return heat_matrix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeatMap::set_allocated_heat_matrix(::std::string* heat_matrix) {
  if (heat_matrix != NULL) {
    set_has_heat_matrix();
  } else {
    clear_has_heat_matrix();
  }
  heat_matrix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heat_matrix);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.HeatMap.heat_matrix)
}

// optional .pbnavitia.PtObject origin = 2;
bool HeatMap::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeatMap::set_has_origin() {
  _has_bits_[0] |= 0x00000002u;
}
void HeatMap::clear_has_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeatMap::clear_origin() {
  if (origin_ != NULL) origin_->::pbnavitia::PtObject::Clear();
  clear_has_origin();
}
const ::pbnavitia::PtObject& HeatMap::origin() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMap.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
::pbnavitia::PtObject* HeatMap::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.HeatMap.origin)
  return origin_;
}
::pbnavitia::PtObject* HeatMap::release_origin() {
  // @@protoc_insertion_point(field_release:pbnavitia.HeatMap.origin)
  clear_has_origin();
  ::pbnavitia::PtObject* temp = origin_;
  origin_ = NULL;
  return temp;
}
void HeatMap::set_allocated_origin(::pbnavitia::PtObject* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.HeatMap.origin)
}

// optional .pbnavitia.PtObject destination = 3;
bool HeatMap::has_destination() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HeatMap::set_has_destination() {
  _has_bits_[0] |= 0x00000004u;
}
void HeatMap::clear_has_destination() {
  _has_bits_[0] &= ~0x00000004u;
}
void HeatMap::clear_destination() {
  if (destination_ != NULL) destination_->::pbnavitia::PtObject::Clear();
  clear_has_destination();
}
const ::pbnavitia::PtObject& HeatMap::destination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMap.destination)
  return destination_ != NULL ? *destination_ : *default_instance_->destination_;
}
::pbnavitia::PtObject* HeatMap::mutable_destination() {
  set_has_destination();
  if (destination_ == NULL) {
    destination_ = new ::pbnavitia::PtObject;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.HeatMap.destination)
  return destination_;
}
::pbnavitia::PtObject* HeatMap::release_destination() {
  // @@protoc_insertion_point(field_release:pbnavitia.HeatMap.destination)
  clear_has_destination();
  ::pbnavitia::PtObject* temp = destination_;
  destination_ = NULL;
  return temp;
}
void HeatMap::set_allocated_destination(::pbnavitia::PtObject* destination) {
  delete destination_;
  destination_ = destination;
  if (destination) {
    set_has_destination();
  } else {
    clear_has_destination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.HeatMap.destination)
}

// optional uint64 requested_date_time = 4;
bool HeatMap::has_requested_date_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HeatMap::set_has_requested_date_time() {
  _has_bits_[0] |= 0x00000008u;
}
void HeatMap::clear_has_requested_date_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void HeatMap::clear_requested_date_time() {
  requested_date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_requested_date_time();
}
 ::google::protobuf::uint64 HeatMap::requested_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.HeatMap.requested_date_time)
  return requested_date_time_;
}
 void HeatMap::set_requested_date_time(::google::protobuf::uint64 value) {
  set_has_requested_date_time();
  requested_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.HeatMap.requested_date_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingElement::kDurationFieldNumber;
const int RoutingElement::kRoutingStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingElement::RoutingElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.RoutingElement)
}

void RoutingElement::InitAsDefaultInstance() {
}

RoutingElement::RoutingElement(const RoutingElement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.RoutingElement)
}

void RoutingElement::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  routing_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutingElement::~RoutingElement() {
  // @@protoc_insertion_point(destructor:pbnavitia.RoutingElement)
  SharedDtor();
}

void RoutingElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoutingElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingElement_descriptor_;
}

const RoutingElement& RoutingElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

RoutingElement* RoutingElement::default_instance_ = NULL;

RoutingElement* RoutingElement::New(::google::protobuf::Arena* arena) const {
  RoutingElement* n = new RoutingElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutingElement::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.RoutingElement)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoutingElement, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoutingElement*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(duration_, routing_status_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoutingElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.RoutingElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_routing_status;
        break;
      }

      // required .pbnavitia.RoutingStatus routing_status = 2;
      case 2: {
        if (tag == 16) {
         parse_routing_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::RoutingStatus_IsValid(value)) {
            set_routing_status(static_cast< ::pbnavitia::RoutingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.RoutingElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.RoutingElement)
  return false;
#undef DO_
}

void RoutingElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.RoutingElement)
  // required int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // required .pbnavitia.RoutingStatus routing_status = 2;
  if (has_routing_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->routing_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.RoutingElement)
}

::google::protobuf::uint8* RoutingElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.RoutingElement)
  // required int32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // required .pbnavitia.RoutingStatus routing_status = 2;
  if (has_routing_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->routing_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.RoutingElement)
  return target;
}

int RoutingElement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbnavitia.RoutingElement)
  int total_size = 0;

  if (has_duration()) {
    // required int32 duration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());
  }

  if (has_routing_status()) {
    // required .pbnavitia.RoutingStatus routing_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->routing_status());
  }

  return total_size;
}
int RoutingElement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.RoutingElement)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 duration = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration());

    // required .pbnavitia.RoutingStatus routing_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->routing_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.RoutingElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoutingElement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.RoutingElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.RoutingElement)
    MergeFrom(*source);
  }
}

void RoutingElement::MergeFrom(const RoutingElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.RoutingElement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_routing_status()) {
      set_routing_status(from.routing_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoutingElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.RoutingElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingElement::CopyFrom(const RoutingElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.RoutingElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoutingElement::Swap(RoutingElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingElement::InternalSwap(RoutingElement* other) {
  std::swap(duration_, other->duration_);
  std::swap(routing_status_, other->routing_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutingElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutingElement_descriptor_;
  metadata.reflection = RoutingElement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoutingElement

// required int32 duration = 1;
bool RoutingElement::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoutingElement::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void RoutingElement::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoutingElement::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
 ::google::protobuf::int32 RoutingElement::duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutingElement.duration)
  return duration_;
}
 void RoutingElement::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.RoutingElement.duration)
}

// required .pbnavitia.RoutingStatus routing_status = 2;
bool RoutingElement::has_routing_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoutingElement::set_has_routing_status() {
  _has_bits_[0] |= 0x00000002u;
}
void RoutingElement::clear_has_routing_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoutingElement::clear_routing_status() {
  routing_status_ = 0;
  clear_has_routing_status();
}
 ::pbnavitia::RoutingStatus RoutingElement::routing_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.RoutingElement.routing_status)
  return static_cast< ::pbnavitia::RoutingStatus >(routing_status_);
}
 void RoutingElement::set_routing_status(::pbnavitia::RoutingStatus value) {
  assert(::pbnavitia::RoutingStatus_IsValid(value));
  set_has_routing_status();
  routing_status_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.RoutingElement.routing_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetNetworkRoutingRow::kRoutingResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetNetworkRoutingRow::StreetNetworkRoutingRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StreetNetworkRoutingRow)
}

void StreetNetworkRoutingRow::InitAsDefaultInstance() {
}

StreetNetworkRoutingRow::StreetNetworkRoutingRow(const StreetNetworkRoutingRow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StreetNetworkRoutingRow)
}

void StreetNetworkRoutingRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetNetworkRoutingRow::~StreetNetworkRoutingRow() {
  // @@protoc_insertion_point(destructor:pbnavitia.StreetNetworkRoutingRow)
  SharedDtor();
}

void StreetNetworkRoutingRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreetNetworkRoutingRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetNetworkRoutingRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetNetworkRoutingRow_descriptor_;
}

const StreetNetworkRoutingRow& StreetNetworkRoutingRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

StreetNetworkRoutingRow* StreetNetworkRoutingRow::default_instance_ = NULL;

StreetNetworkRoutingRow* StreetNetworkRoutingRow::New(::google::protobuf::Arena* arena) const {
  StreetNetworkRoutingRow* n = new StreetNetworkRoutingRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreetNetworkRoutingRow::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StreetNetworkRoutingRow)
  routing_response_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreetNetworkRoutingRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StreetNetworkRoutingRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.RoutingElement routing_response = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_routing_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routing_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_routing_response;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StreetNetworkRoutingRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StreetNetworkRoutingRow)
  return false;
#undef DO_
}

void StreetNetworkRoutingRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StreetNetworkRoutingRow)
  // repeated .pbnavitia.RoutingElement routing_response = 2;
  for (unsigned int i = 0, n = this->routing_response_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routing_response(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StreetNetworkRoutingRow)
}

::google::protobuf::uint8* StreetNetworkRoutingRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StreetNetworkRoutingRow)
  // repeated .pbnavitia.RoutingElement routing_response = 2;
  for (unsigned int i = 0, n = this->routing_response_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->routing_response(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StreetNetworkRoutingRow)
  return target;
}

int StreetNetworkRoutingRow::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StreetNetworkRoutingRow)
  int total_size = 0;

  // repeated .pbnavitia.RoutingElement routing_response = 2;
  total_size += 1 * this->routing_response_size();
  for (int i = 0; i < this->routing_response_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routing_response(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetNetworkRoutingRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StreetNetworkRoutingRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreetNetworkRoutingRow* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreetNetworkRoutingRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StreetNetworkRoutingRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StreetNetworkRoutingRow)
    MergeFrom(*source);
  }
}

void StreetNetworkRoutingRow::MergeFrom(const StreetNetworkRoutingRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StreetNetworkRoutingRow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  routing_response_.MergeFrom(from.routing_response_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreetNetworkRoutingRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StreetNetworkRoutingRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetNetworkRoutingRow::CopyFrom(const StreetNetworkRoutingRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StreetNetworkRoutingRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetNetworkRoutingRow::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->routing_response())) return false;
  return true;
}

void StreetNetworkRoutingRow::Swap(StreetNetworkRoutingRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetNetworkRoutingRow::InternalSwap(StreetNetworkRoutingRow* other) {
  routing_response_.UnsafeArenaSwap(&other->routing_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreetNetworkRoutingRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreetNetworkRoutingRow_descriptor_;
  metadata.reflection = StreetNetworkRoutingRow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreetNetworkRoutingRow

// repeated .pbnavitia.RoutingElement routing_response = 2;
int StreetNetworkRoutingRow::routing_response_size() const {
  return routing_response_.size();
}
void StreetNetworkRoutingRow::clear_routing_response() {
  routing_response_.Clear();
}
const ::pbnavitia::RoutingElement& StreetNetworkRoutingRow::routing_response(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return routing_response_.Get(index);
}
::pbnavitia::RoutingElement* StreetNetworkRoutingRow::mutable_routing_response(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return routing_response_.Mutable(index);
}
::pbnavitia::RoutingElement* StreetNetworkRoutingRow::add_routing_response() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return routing_response_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutingElement >*
StreetNetworkRoutingRow::mutable_routing_response() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return &routing_response_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutingElement >&
StreetNetworkRoutingRow::routing_response() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetworkRoutingRow.routing_response)
  return routing_response_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetNetworkRoutingMatrix::kRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetNetworkRoutingMatrix::StreetNetworkRoutingMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.StreetNetworkRoutingMatrix)
}

void StreetNetworkRoutingMatrix::InitAsDefaultInstance() {
}

StreetNetworkRoutingMatrix::StreetNetworkRoutingMatrix(const StreetNetworkRoutingMatrix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.StreetNetworkRoutingMatrix)
}

void StreetNetworkRoutingMatrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreetNetworkRoutingMatrix::~StreetNetworkRoutingMatrix() {
  // @@protoc_insertion_point(destructor:pbnavitia.StreetNetworkRoutingMatrix)
  SharedDtor();
}

void StreetNetworkRoutingMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreetNetworkRoutingMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetNetworkRoutingMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreetNetworkRoutingMatrix_descriptor_;
}

const StreetNetworkRoutingMatrix& StreetNetworkRoutingMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

StreetNetworkRoutingMatrix* StreetNetworkRoutingMatrix::default_instance_ = NULL;

StreetNetworkRoutingMatrix* StreetNetworkRoutingMatrix::New(::google::protobuf::Arena* arena) const {
  StreetNetworkRoutingMatrix* n = new StreetNetworkRoutingMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreetNetworkRoutingMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.StreetNetworkRoutingMatrix)
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StreetNetworkRoutingMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.StreetNetworkRoutingMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnavitia.StreetNetworkRoutingRow rows = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_rows;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.StreetNetworkRoutingMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.StreetNetworkRoutingMatrix)
  return false;
#undef DO_
}

void StreetNetworkRoutingMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.StreetNetworkRoutingMatrix)
  // repeated .pbnavitia.StreetNetworkRoutingRow rows = 1;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rows(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.StreetNetworkRoutingMatrix)
}

::google::protobuf::uint8* StreetNetworkRoutingMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.StreetNetworkRoutingMatrix)
  // repeated .pbnavitia.StreetNetworkRoutingRow rows = 1;
  for (unsigned int i = 0, n = this->rows_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rows(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.StreetNetworkRoutingMatrix)
  return target;
}

int StreetNetworkRoutingMatrix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.StreetNetworkRoutingMatrix)
  int total_size = 0;

  // repeated .pbnavitia.StreetNetworkRoutingRow rows = 1;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetNetworkRoutingMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.StreetNetworkRoutingMatrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreetNetworkRoutingMatrix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreetNetworkRoutingMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.StreetNetworkRoutingMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.StreetNetworkRoutingMatrix)
    MergeFrom(*source);
  }
}

void StreetNetworkRoutingMatrix::MergeFrom(const StreetNetworkRoutingMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.StreetNetworkRoutingMatrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rows_.MergeFrom(from.rows_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StreetNetworkRoutingMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.StreetNetworkRoutingMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetNetworkRoutingMatrix::CopyFrom(const StreetNetworkRoutingMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.StreetNetworkRoutingMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetNetworkRoutingMatrix::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rows())) return false;
  return true;
}

void StreetNetworkRoutingMatrix::Swap(StreetNetworkRoutingMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetNetworkRoutingMatrix::InternalSwap(StreetNetworkRoutingMatrix* other) {
  rows_.UnsafeArenaSwap(&other->rows_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreetNetworkRoutingMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreetNetworkRoutingMatrix_descriptor_;
  metadata.reflection = StreetNetworkRoutingMatrix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreetNetworkRoutingMatrix

// repeated .pbnavitia.StreetNetworkRoutingRow rows = 1;
int StreetNetworkRoutingMatrix::rows_size() const {
  return rows_.size();
}
void StreetNetworkRoutingMatrix::clear_rows() {
  rows_.Clear();
}
const ::pbnavitia::StreetNetworkRoutingRow& StreetNetworkRoutingMatrix::rows(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return rows_.Get(index);
}
::pbnavitia::StreetNetworkRoutingRow* StreetNetworkRoutingMatrix::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return rows_.Mutable(index);
}
::pbnavitia::StreetNetworkRoutingRow* StreetNetworkRoutingMatrix::add_rows() {
  // @@protoc_insertion_point(field_add:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return rows_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StreetNetworkRoutingRow >*
StreetNetworkRoutingMatrix::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return &rows_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StreetNetworkRoutingRow >&
StreetNetworkRoutingMatrix::rows() const {
  // @@protoc_insertion_point(field_list:pbnavitia.StreetNetworkRoutingMatrix.rows)
  return rows_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusCodeFieldNumber;
const int Response::kErrorFieldNumber;
const int Response::kInfoFieldNumber;
const int Response::kStatusFieldNumber;
const int Response::kPublicationDateFieldNumber;
const int Response::kIgnoredWordsFieldNumber;
const int Response::kBadWordsFieldNumber;
const int Response::kPlacesFieldNumber;
const int Response::kPlacesNearbyFieldNumber;
const int Response::kValidityPatternsFieldNumber;
const int Response::kLinesFieldNumber;
const int Response::kJourneyPatternsFieldNumber;
const int Response::kVehicleJourneysFieldNumber;
const int Response::kStopPointsFieldNumber;
const int Response::kStopAreasFieldNumber;
const int Response::kNetworksFieldNumber;
const int Response::kPhysicalModesFieldNumber;
const int Response::kCommercialModesFieldNumber;
const int Response::kConnectionsFieldNumber;
const int Response::kJourneyPatternPointsFieldNumber;
const int Response::kCompaniesFieldNumber;
const int Response::kRoutesFieldNumber;
const int Response::kPoisFieldNumber;
const int Response::kPoiTypesFieldNumber;
const int Response::kCalendarsFieldNumber;
const int Response::kLineGroupsFieldNumber;
const int Response::kTripsFieldNumber;
const int Response::kContributorsFieldNumber;
const int Response::kDatasetsFieldNumber;
const int Response::kRoutePointsFieldNumber;
const int Response::kImpactsFieldNumber;
const int Response::kJourneysFieldNumber;
const int Response::kResponseTypeFieldNumber;
const int Response::kPrevFieldNumber;
const int Response::kNextFieldNumber;
const int Response::kNextRequestDateTimeFieldNumber;
const int Response::kRouteSchedulesFieldNumber;
const int Response::kDepartureBoardsFieldNumber;
const int Response::kNextDeparturesFieldNumber;
const int Response::kNextArrivalsFieldNumber;
const int Response::kStopSchedulesFieldNumber;
const int Response::kLoadFieldNumber;
const int Response::kMetadatasFieldNumber;
const int Response::kPaginationFieldNumber;
const int Response::kTrafficReportsFieldNumber;
const int Response::kLineReportsFieldNumber;
const int Response::kTicketsFieldNumber;
const int Response::kPtObjectsFieldNumber;
const int Response::kFeedPublishersFieldNumber;
const int Response::kNearestStopPointsFieldNumber;
const int Response::kLinksFieldNumber;
const int Response::kGraphicalIsochronesFieldNumber;
const int Response::kHeatMapsFieldNumber;
const int Response::kGeoStatusFieldNumber;
const int Response::kCarCo2EmissionFieldNumber;
const int Response::kSnRoutingMatrixFieldNumber;
const int Response::kEquipmentReportsFieldNumber;
const int Response::kTerminusSchedulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.Response)
}

void Response::InitAsDefaultInstance() {
  error_ = const_cast< ::pbnavitia::Error*>(&::pbnavitia::Error::default_instance());
  status_ = const_cast< ::pbnavitia::Status*>(&::pbnavitia::Status::default_instance());
  load_ = const_cast< ::pbnavitia::Load*>(&::pbnavitia::Load::default_instance());
  metadatas_ = const_cast< ::pbnavitia::Metadatas*>(&::pbnavitia::Metadatas::default_instance());
  pagination_ = const_cast< ::pbnavitia::Pagination*>(&::pbnavitia::Pagination::default_instance());
  geo_status_ = const_cast< ::pbnavitia::GeoStatus*>(&::pbnavitia::GeoStatus::default_instance());
  car_co2_emission_ = const_cast< ::pbnavitia::Co2Emission*>(&::pbnavitia::Co2Emission::default_instance());
  sn_routing_matrix_ = const_cast< ::pbnavitia::StreetNetworkRoutingMatrix*>(&::pbnavitia::StreetNetworkRoutingMatrix::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_code_ = 0;
  error_ = NULL;
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
  publication_date_ = 0;
  response_type_ = 1;
  prev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_request_date_time_ = 0u;
  load_ = NULL;
  metadatas_ = NULL;
  pagination_ = NULL;
  geo_status_ = NULL;
  car_co2_emission_ = NULL;
  sn_routing_matrix_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:pbnavitia.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete error_;
    delete status_;
    delete load_;
    delete metadatas_;
    delete pagination_;
    delete geo_status_;
    delete car_co2_emission_;
    delete sn_routing_matrix_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.Response)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Response, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Response*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(status_code_, publication_date_);
    if (has_error()) {
      if (error_ != NULL) error_->::pbnavitia::Error::Clear();
    }
    if (has_info()) {
      info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_status()) {
      if (status_ != NULL) status_->::pbnavitia::Status::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 15u) {
    response_type_ = 1;
    if (has_prev()) {
      prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_next()) {
      next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    next_request_date_time_ = 0u;
  }
  if (_has_bits_[40 / 32] & 3584u) {
    if (has_load()) {
      if (load_ != NULL) load_->::pbnavitia::Load::Clear();
    }
    if (has_metadatas()) {
      if (metadatas_ != NULL) metadatas_->::pbnavitia::Metadatas::Clear();
    }
    if (has_pagination()) {
      if (pagination_ != NULL) pagination_->::pbnavitia::Pagination::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 14680064u) {
    if (has_geo_status()) {
      if (geo_status_ != NULL) geo_status_->::pbnavitia::GeoStatus::Clear();
    }
    if (has_car_co2_emission()) {
      if (car_co2_emission_ != NULL) car_co2_emission_->::pbnavitia::Co2Emission::Clear();
    }
    if (has_sn_routing_matrix()) {
      if (sn_routing_matrix_ != NULL) sn_routing_matrix_->::pbnavitia::StreetNetworkRoutingMatrix::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ignored_words_.Clear();
  bad_words_.Clear();
  places_.Clear();
  places_nearby_.Clear();
  validity_patterns_.Clear();
  lines_.Clear();
  journey_patterns_.Clear();
  vehicle_journeys_.Clear();
  stop_points_.Clear();
  stop_areas_.Clear();
  networks_.Clear();
  physical_modes_.Clear();
  commercial_modes_.Clear();
  connections_.Clear();
  journey_pattern_points_.Clear();
  companies_.Clear();
  routes_.Clear();
  pois_.Clear();
  poi_types_.Clear();
  calendars_.Clear();
  line_groups_.Clear();
  trips_.Clear();
  contributors_.Clear();
  datasets_.Clear();
  route_points_.Clear();
  impacts_.Clear();
  journeys_.Clear();
  route_schedules_.Clear();
  departure_boards_.Clear();
  next_departures_.Clear();
  next_arrivals_.Clear();
  stop_schedules_.Clear();
  traffic_reports_.Clear();
  line_reports_.Clear();
  tickets_.Clear();
  pt_objects_.Clear();
  feed_publishers_.Clear();
  nearest_stop_points_.Clear();
  links_.Clear();
  graphical_isochrones_.Clear();
  heat_maps_.Clear();
  equipment_reports_.Clear();
  terminus_schedules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .pbnavitia.Error error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional string info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Response.info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }

      // optional .pbnavitia.Status status = 4;
      case 4: {
        if (tag == 34) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_publication_date;
        break;
      }

      // optional int32 publication_date = 5;
      case 5: {
        if (tag == 40) {
         parse_publication_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publication_date_)));
          set_has_publication_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ignored_words;
        break;
      }

      // repeated string ignored_words = 11;
      case 11: {
        if (tag == 90) {
         parse_ignored_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ignored_words()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ignored_words(this->ignored_words_size() - 1).data(),
            this->ignored_words(this->ignored_words_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Response.ignored_words");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ignored_words;
        if (input->ExpectTag(98)) goto parse_bad_words;
        break;
      }

      // repeated string bad_words = 12;
      case 12: {
        if (tag == 98) {
         parse_bad_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bad_words()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bad_words(this->bad_words_size() - 1).data(),
            this->bad_words(this->bad_words_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Response.bad_words");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_bad_words;
        if (input->ExpectTag(106)) goto parse_places;
        break;
      }

      // repeated .pbnavitia.PtObject places = 13;
      case 13: {
        if (tag == 106) {
         parse_places:
          DO_(input->IncrementRecursionDepth());
         parse_loop_places:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_places()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_places;
        if (input->ExpectTag(114)) goto parse_loop_places_nearby;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.PtObject places_nearby = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_places_nearby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_places_nearby()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_places_nearby;
        if (input->ExpectTag(122)) goto parse_loop_validity_patterns;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.ValidityPattern validity_patterns = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_validity_patterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_validity_patterns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_validity_patterns;
        if (input->ExpectTag(130)) goto parse_loop_lines;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Line lines = 16;
      case 16: {
        if (tag == 130) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_lines;
        if (input->ExpectTag(138)) goto parse_loop_journey_patterns;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.JourneyPattern journey_patterns = 17;
      case 17: {
        if (tag == 138) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_journey_patterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_journey_patterns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_journey_patterns;
        if (input->ExpectTag(146)) goto parse_loop_vehicle_journeys;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.VehicleJourney vehicle_journeys = 18;
      case 18: {
        if (tag == 146) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_vehicle_journeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicle_journeys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_vehicle_journeys;
        if (input->ExpectTag(154)) goto parse_loop_stop_points;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.StopPoint stop_points = 19;
      case 19: {
        if (tag == 154) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_loop_stop_points;
        if (input->ExpectTag(162)) goto parse_loop_stop_areas;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.StopArea stop_areas = 20;
      case 20: {
        if (tag == 162) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_stop_areas;
        if (input->ExpectTag(170)) goto parse_loop_networks;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Network networks = 21;
      case 21: {
        if (tag == 170) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_networks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_networks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_loop_networks;
        if (input->ExpectTag(178)) goto parse_loop_physical_modes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.PhysicalMode physical_modes = 22;
      case 22: {
        if (tag == 178) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_physical_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_physical_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_physical_modes;
        if (input->ExpectTag(186)) goto parse_loop_commercial_modes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.CommercialMode commercial_modes = 23;
      case 23: {
        if (tag == 186) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_commercial_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commercial_modes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_loop_commercial_modes;
        if (input->ExpectTag(194)) goto parse_loop_connections;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Connection connections = 24;
      case 24: {
        if (tag == 194) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_connections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_loop_connections;
        if (input->ExpectTag(202)) goto parse_loop_journey_pattern_points;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 25;
      case 25: {
        if (tag == 202) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_journey_pattern_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_journey_pattern_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_loop_journey_pattern_points;
        if (input->ExpectTag(210)) goto parse_loop_companies;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Company companies = 26;
      case 26: {
        if (tag == 210) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_companies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_companies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_loop_companies;
        if (input->ExpectTag(218)) goto parse_loop_routes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Route routes = 27;
      case 27: {
        if (tag == 218) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_loop_routes;
        if (input->ExpectTag(226)) goto parse_loop_pois;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Poi pois = 28;
      case 28: {
        if (tag == 226) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pois:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pois()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_loop_pois;
        if (input->ExpectTag(234)) goto parse_loop_poi_types;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.PoiType poi_types = 29;
      case 29: {
        if (tag == 234) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_poi_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_poi_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_loop_poi_types;
        if (input->ExpectTag(242)) goto parse_loop_journeys;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Journey journeys = 30;
      case 30: {
        if (tag == 242) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_journeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_journeys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_journeys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(248)) goto parse_response_type;
        break;
      }

      // optional .pbnavitia.ResponseType response_type = 31;
      case 31: {
        if (tag == 248) {
         parse_response_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbnavitia::ResponseType_IsValid(value)) {
            set_response_type(static_cast< ::pbnavitia::ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(31, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_prev;
        break;
      }

      // optional string prev = 32;
      case 32: {
        if (tag == 258) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prev().data(), this->prev().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Response.prev");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_next;
        break;
      }

      // optional string next = 33;
      case 33: {
        if (tag == 266) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->next().data(), this->next().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbnavitia.Response.next");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_next_request_date_time;
        break;
      }

      // optional uint32 next_request_date_time = 34;
      case 34: {
        if (tag == 272) {
         parse_next_request_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_request_date_time_)));
          set_has_next_request_date_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_route_schedules;
        break;
      }

      // repeated .pbnavitia.RouteSchedule route_schedules = 35;
      case 35: {
        if (tag == 282) {
         parse_route_schedules:
          DO_(input->IncrementRecursionDepth());
         parse_loop_route_schedules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_route_schedules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_loop_route_schedules;
        if (input->ExpectTag(290)) goto parse_loop_departure_boards;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.DepartureBoard departure_boards = 36;
      case 36: {
        if (tag == 290) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_departure_boards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_departure_boards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_loop_departure_boards;
        if (input->ExpectTag(298)) goto parse_loop_next_departures;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Passage next_departures = 37;
      case 37: {
        if (tag == 298) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_next_departures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_next_departures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_loop_next_departures;
        if (input->ExpectTag(306)) goto parse_loop_next_arrivals;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Passage next_arrivals = 38;
      case 38: {
        if (tag == 306) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_next_arrivals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_next_arrivals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_loop_next_arrivals;
        if (input->ExpectTag(314)) goto parse_loop_stop_schedules;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.StopSchedule stop_schedules = 39;
      case 39: {
        if (tag == 314) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_schedules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_schedules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_loop_stop_schedules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(370)) goto parse_load;
        break;
      }

      // optional .pbnavitia.Load load = 46;
      case 46: {
        if (tag == 370) {
         parse_load:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_metadatas;
        break;
      }

      // optional .pbnavitia.Metadatas metadatas = 48;
      case 48: {
        if (tag == 386) {
         parse_metadatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_pagination;
        break;
      }

      // optional .pbnavitia.Pagination pagination = 49;
      case 49: {
        if (tag == 394) {
         parse_pagination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pagination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_tickets;
        break;
      }

      // repeated .pbnavitia.Ticket tickets = 51;
      case 51: {
        if (tag == 410) {
         parse_tickets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tickets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tickets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_loop_tickets;
        if (input->ExpectTag(418)) goto parse_loop_pt_objects;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.PtObject pt_objects = 52;
      case 52: {
        if (tag == 418) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pt_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pt_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_loop_pt_objects;
        if (input->ExpectTag(426)) goto parse_loop_feed_publishers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.FeedPublisher feed_publishers = 53;
      case 53: {
        if (tag == 426) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feed_publishers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feed_publishers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_loop_feed_publishers;
        if (input->ExpectTag(442)) goto parse_loop_calendars;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Calendar calendars = 55;
      case 55: {
        if (tag == 442) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_calendars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_calendars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_loop_calendars;
        if (input->ExpectTag(450)) goto parse_loop_line_groups;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.LineGroup line_groups = 56;
      case 56: {
        if (tag == 450) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_line_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_line_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_loop_line_groups;
        if (input->ExpectTag(458)) goto parse_loop_impacts;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Impact impacts = 57;
      case 57: {
        if (tag == 458) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_impacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_impacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_loop_impacts;
        if (input->ExpectTag(490)) goto parse_loop_traffic_reports;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.TrafficReports traffic_reports = 61;
      case 61: {
        if (tag == 490) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_traffic_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traffic_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_loop_traffic_reports;
        if (input->ExpectTag(498)) goto parse_loop_trips;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Trip trips = 62;
      case 62: {
        if (tag == 498) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_trips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_loop_trips;
        if (input->ExpectTag(506)) goto parse_loop_nearest_stop_points;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.NearestStopPoint nearest_stop_points = 63;
      case 63: {
        if (tag == 506) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nearest_stop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nearest_stop_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_loop_nearest_stop_points;
        if (input->ExpectTag(514)) goto parse_loop_contributors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Contributor contributors = 64;
      case 64: {
        if (tag == 514) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_contributors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_contributors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_loop_contributors;
        if (input->ExpectTag(522)) goto parse_loop_datasets;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Dataset datasets = 65;
      case 65: {
        if (tag == 522) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datasets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datasets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_loop_datasets;
        if (input->ExpectTag(530)) goto parse_loop_route_points;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.RoutePoint route_points = 66;
      case 66: {
        if (tag == 530) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_route_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_route_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_loop_route_points;
        if (input->ExpectTag(538)) goto parse_loop_links;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.Link links = 67;
      case 67: {
        if (tag == 538) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_loop_links;
        if (input->ExpectTag(546)) goto parse_loop_graphical_isochrones;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.GraphicalIsochrone graphical_isochrones = 68;
      case 68: {
        if (tag == 546) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_graphical_isochrones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_graphical_isochrones()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_loop_graphical_isochrones;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(554)) goto parse_geo_status;
        break;
      }

      // optional .pbnavitia.GeoStatus geo_status = 69;
      case 69: {
        if (tag == 554) {
         parse_geo_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_car_co2_emission;
        break;
      }

      // optional .pbnavitia.Co2Emission car_co2_emission = 70;
      case 70: {
        if (tag == 562) {
         parse_car_co2_emission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_car_co2_emission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_heat_maps;
        break;
      }

      // repeated .pbnavitia.HeatMap heat_maps = 71;
      case 71: {
        if (tag == 570) {
         parse_heat_maps:
          DO_(input->IncrementRecursionDepth());
         parse_loop_heat_maps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_heat_maps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(570)) goto parse_loop_heat_maps;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(578)) goto parse_sn_routing_matrix;
        break;
      }

      // optional .pbnavitia.StreetNetworkRoutingMatrix sn_routing_matrix = 72;
      case 72: {
        if (tag == 578) {
         parse_sn_routing_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sn_routing_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_line_reports;
        break;
      }

      // repeated .pbnavitia.LineReport line_reports = 73;
      case 73: {
        if (tag == 586) {
         parse_line_reports:
          DO_(input->IncrementRecursionDepth());
         parse_loop_line_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_line_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(586)) goto parse_loop_line_reports;
        if (input->ExpectTag(594)) goto parse_loop_equipment_reports;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.EquipmentReport equipment_reports = 74;
      case 74: {
        if (tag == 594) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_equipment_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_equipment_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_loop_equipment_reports;
        if (input->ExpectTag(602)) goto parse_loop_terminus_schedules;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbnavitia.StopSchedule terminus_schedules = 75;
      case 75: {
        if (tag == 602) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_terminus_schedules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_terminus_schedules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(602)) goto parse_loop_terminus_schedules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.Response)
  // optional int32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status_code(), output);
  }

  // optional .pbnavitia.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->info(), output);
  }

  // optional .pbnavitia.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_, output);
  }

  // optional int32 publication_date = 5;
  if (has_publication_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->publication_date(), output);
  }

  // repeated string ignored_words = 11;
  for (int i = 0; i < this->ignored_words_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ignored_words(i).data(), this->ignored_words(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.ignored_words");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ignored_words(i), output);
  }

  // repeated string bad_words = 12;
  for (int i = 0; i < this->bad_words_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bad_words(i).data(), this->bad_words(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.bad_words");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bad_words(i), output);
  }

  // repeated .pbnavitia.PtObject places = 13;
  for (unsigned int i = 0, n = this->places_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->places(i), output);
  }

  // repeated .pbnavitia.PtObject places_nearby = 14;
  for (unsigned int i = 0, n = this->places_nearby_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->places_nearby(i), output);
  }

  // repeated .pbnavitia.ValidityPattern validity_patterns = 15;
  for (unsigned int i = 0, n = this->validity_patterns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->validity_patterns(i), output);
  }

  // repeated .pbnavitia.Line lines = 16;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->lines(i), output);
  }

  // repeated .pbnavitia.JourneyPattern journey_patterns = 17;
  for (unsigned int i = 0, n = this->journey_patterns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->journey_patterns(i), output);
  }

  // repeated .pbnavitia.VehicleJourney vehicle_journeys = 18;
  for (unsigned int i = 0, n = this->vehicle_journeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vehicle_journeys(i), output);
  }

  // repeated .pbnavitia.StopPoint stop_points = 19;
  for (unsigned int i = 0, n = this->stop_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->stop_points(i), output);
  }

  // repeated .pbnavitia.StopArea stop_areas = 20;
  for (unsigned int i = 0, n = this->stop_areas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->stop_areas(i), output);
  }

  // repeated .pbnavitia.Network networks = 21;
  for (unsigned int i = 0, n = this->networks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->networks(i), output);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 22;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->physical_modes(i), output);
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 23;
  for (unsigned int i = 0, n = this->commercial_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->commercial_modes(i), output);
  }

  // repeated .pbnavitia.Connection connections = 24;
  for (unsigned int i = 0, n = this->connections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->connections(i), output);
  }

  // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 25;
  for (unsigned int i = 0, n = this->journey_pattern_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->journey_pattern_points(i), output);
  }

  // repeated .pbnavitia.Company companies = 26;
  for (unsigned int i = 0, n = this->companies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->companies(i), output);
  }

  // repeated .pbnavitia.Route routes = 27;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->routes(i), output);
  }

  // repeated .pbnavitia.Poi pois = 28;
  for (unsigned int i = 0, n = this->pois_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->pois(i), output);
  }

  // repeated .pbnavitia.PoiType poi_types = 29;
  for (unsigned int i = 0, n = this->poi_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->poi_types(i), output);
  }

  // repeated .pbnavitia.Journey journeys = 30;
  for (unsigned int i = 0, n = this->journeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->journeys(i), output);
  }

  // optional .pbnavitia.ResponseType response_type = 31;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->response_type(), output);
  }

  // optional string prev = 32;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prev().data(), this->prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.prev");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->prev(), output);
  }

  // optional string next = 33;
  if (has_next()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next().data(), this->next().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.next");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->next(), output);
  }

  // optional uint32 next_request_date_time = 34;
  if (has_next_request_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->next_request_date_time(), output);
  }

  // repeated .pbnavitia.RouteSchedule route_schedules = 35;
  for (unsigned int i = 0, n = this->route_schedules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->route_schedules(i), output);
  }

  // repeated .pbnavitia.DepartureBoard departure_boards = 36;
  for (unsigned int i = 0, n = this->departure_boards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->departure_boards(i), output);
  }

  // repeated .pbnavitia.Passage next_departures = 37;
  for (unsigned int i = 0, n = this->next_departures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->next_departures(i), output);
  }

  // repeated .pbnavitia.Passage next_arrivals = 38;
  for (unsigned int i = 0, n = this->next_arrivals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->next_arrivals(i), output);
  }

  // repeated .pbnavitia.StopSchedule stop_schedules = 39;
  for (unsigned int i = 0, n = this->stop_schedules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->stop_schedules(i), output);
  }

  // optional .pbnavitia.Load load = 46;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->load_, output);
  }

  // optional .pbnavitia.Metadatas metadatas = 48;
  if (has_metadatas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->metadatas_, output);
  }

  // optional .pbnavitia.Pagination pagination = 49;
  if (has_pagination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *this->pagination_, output);
  }

  // repeated .pbnavitia.Ticket tickets = 51;
  for (unsigned int i = 0, n = this->tickets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->tickets(i), output);
  }

  // repeated .pbnavitia.PtObject pt_objects = 52;
  for (unsigned int i = 0, n = this->pt_objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->pt_objects(i), output);
  }

  // repeated .pbnavitia.FeedPublisher feed_publishers = 53;
  for (unsigned int i = 0, n = this->feed_publishers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->feed_publishers(i), output);
  }

  // repeated .pbnavitia.Calendar calendars = 55;
  for (unsigned int i = 0, n = this->calendars_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->calendars(i), output);
  }

  // repeated .pbnavitia.LineGroup line_groups = 56;
  for (unsigned int i = 0, n = this->line_groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->line_groups(i), output);
  }

  // repeated .pbnavitia.Impact impacts = 57;
  for (unsigned int i = 0, n = this->impacts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->impacts(i), output);
  }

  // repeated .pbnavitia.TrafficReports traffic_reports = 61;
  for (unsigned int i = 0, n = this->traffic_reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->traffic_reports(i), output);
  }

  // repeated .pbnavitia.Trip trips = 62;
  for (unsigned int i = 0, n = this->trips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->trips(i), output);
  }

  // repeated .pbnavitia.NearestStopPoint nearest_stop_points = 63;
  for (unsigned int i = 0, n = this->nearest_stop_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->nearest_stop_points(i), output);
  }

  // repeated .pbnavitia.Contributor contributors = 64;
  for (unsigned int i = 0, n = this->contributors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->contributors(i), output);
  }

  // repeated .pbnavitia.Dataset datasets = 65;
  for (unsigned int i = 0, n = this->datasets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->datasets(i), output);
  }

  // repeated .pbnavitia.RoutePoint route_points = 66;
  for (unsigned int i = 0, n = this->route_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->route_points(i), output);
  }

  // repeated .pbnavitia.Link links = 67;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->links(i), output);
  }

  // repeated .pbnavitia.GraphicalIsochrone graphical_isochrones = 68;
  for (unsigned int i = 0, n = this->graphical_isochrones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->graphical_isochrones(i), output);
  }

  // optional .pbnavitia.GeoStatus geo_status = 69;
  if (has_geo_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, *this->geo_status_, output);
  }

  // optional .pbnavitia.Co2Emission car_co2_emission = 70;
  if (has_car_co2_emission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, *this->car_co2_emission_, output);
  }

  // repeated .pbnavitia.HeatMap heat_maps = 71;
  for (unsigned int i = 0, n = this->heat_maps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->heat_maps(i), output);
  }

  // optional .pbnavitia.StreetNetworkRoutingMatrix sn_routing_matrix = 72;
  if (has_sn_routing_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, *this->sn_routing_matrix_, output);
  }

  // repeated .pbnavitia.LineReport line_reports = 73;
  for (unsigned int i = 0, n = this->line_reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->line_reports(i), output);
  }

  // repeated .pbnavitia.EquipmentReport equipment_reports = 74;
  for (unsigned int i = 0, n = this->equipment_reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->equipment_reports(i), output);
  }

  // repeated .pbnavitia.StopSchedule terminus_schedules = 75;
  for (unsigned int i = 0, n = this->terminus_schedules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, this->terminus_schedules(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.Response)
  // optional int32 status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status_code(), target);
  }

  // optional .pbnavitia.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->info(), target);
  }

  // optional .pbnavitia.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_, false, target);
  }

  // optional int32 publication_date = 5;
  if (has_publication_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->publication_date(), target);
  }

  // repeated string ignored_words = 11;
  for (int i = 0; i < this->ignored_words_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ignored_words(i).data(), this->ignored_words(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.ignored_words");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->ignored_words(i), target);
  }

  // repeated string bad_words = 12;
  for (int i = 0; i < this->bad_words_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bad_words(i).data(), this->bad_words(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.bad_words");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->bad_words(i), target);
  }

  // repeated .pbnavitia.PtObject places = 13;
  for (unsigned int i = 0, n = this->places_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->places(i), false, target);
  }

  // repeated .pbnavitia.PtObject places_nearby = 14;
  for (unsigned int i = 0, n = this->places_nearby_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->places_nearby(i), false, target);
  }

  // repeated .pbnavitia.ValidityPattern validity_patterns = 15;
  for (unsigned int i = 0, n = this->validity_patterns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->validity_patterns(i), false, target);
  }

  // repeated .pbnavitia.Line lines = 16;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->lines(i), false, target);
  }

  // repeated .pbnavitia.JourneyPattern journey_patterns = 17;
  for (unsigned int i = 0, n = this->journey_patterns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->journey_patterns(i), false, target);
  }

  // repeated .pbnavitia.VehicleJourney vehicle_journeys = 18;
  for (unsigned int i = 0, n = this->vehicle_journeys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->vehicle_journeys(i), false, target);
  }

  // repeated .pbnavitia.StopPoint stop_points = 19;
  for (unsigned int i = 0, n = this->stop_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, this->stop_points(i), false, target);
  }

  // repeated .pbnavitia.StopArea stop_areas = 20;
  for (unsigned int i = 0, n = this->stop_areas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->stop_areas(i), false, target);
  }

  // repeated .pbnavitia.Network networks = 21;
  for (unsigned int i = 0, n = this->networks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->networks(i), false, target);
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 22;
  for (unsigned int i = 0, n = this->physical_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->physical_modes(i), false, target);
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 23;
  for (unsigned int i = 0, n = this->commercial_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->commercial_modes(i), false, target);
  }

  // repeated .pbnavitia.Connection connections = 24;
  for (unsigned int i = 0, n = this->connections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->connections(i), false, target);
  }

  // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 25;
  for (unsigned int i = 0, n = this->journey_pattern_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, this->journey_pattern_points(i), false, target);
  }

  // repeated .pbnavitia.Company companies = 26;
  for (unsigned int i = 0, n = this->companies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->companies(i), false, target);
  }

  // repeated .pbnavitia.Route routes = 27;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->routes(i), false, target);
  }

  // repeated .pbnavitia.Poi pois = 28;
  for (unsigned int i = 0, n = this->pois_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, this->pois(i), false, target);
  }

  // repeated .pbnavitia.PoiType poi_types = 29;
  for (unsigned int i = 0, n = this->poi_types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, this->poi_types(i), false, target);
  }

  // repeated .pbnavitia.Journey journeys = 30;
  for (unsigned int i = 0, n = this->journeys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, this->journeys(i), false, target);
  }

  // optional .pbnavitia.ResponseType response_type = 31;
  if (has_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->response_type(), target);
  }

  // optional string prev = 32;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prev().data(), this->prev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.prev");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->prev(), target);
  }

  // optional string next = 33;
  if (has_next()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next().data(), this->next().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbnavitia.Response.next");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->next(), target);
  }

  // optional uint32 next_request_date_time = 34;
  if (has_next_request_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->next_request_date_time(), target);
  }

  // repeated .pbnavitia.RouteSchedule route_schedules = 35;
  for (unsigned int i = 0, n = this->route_schedules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, this->route_schedules(i), false, target);
  }

  // repeated .pbnavitia.DepartureBoard departure_boards = 36;
  for (unsigned int i = 0, n = this->departure_boards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, this->departure_boards(i), false, target);
  }

  // repeated .pbnavitia.Passage next_departures = 37;
  for (unsigned int i = 0, n = this->next_departures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, this->next_departures(i), false, target);
  }

  // repeated .pbnavitia.Passage next_arrivals = 38;
  for (unsigned int i = 0, n = this->next_arrivals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, this->next_arrivals(i), false, target);
  }

  // repeated .pbnavitia.StopSchedule stop_schedules = 39;
  for (unsigned int i = 0, n = this->stop_schedules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, this->stop_schedules(i), false, target);
  }

  // optional .pbnavitia.Load load = 46;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *this->load_, false, target);
  }

  // optional .pbnavitia.Metadatas metadatas = 48;
  if (has_metadatas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *this->metadatas_, false, target);
  }

  // optional .pbnavitia.Pagination pagination = 49;
  if (has_pagination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        49, *this->pagination_, false, target);
  }

  // repeated .pbnavitia.Ticket tickets = 51;
  for (unsigned int i = 0, n = this->tickets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, this->tickets(i), false, target);
  }

  // repeated .pbnavitia.PtObject pt_objects = 52;
  for (unsigned int i = 0, n = this->pt_objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, this->pt_objects(i), false, target);
  }

  // repeated .pbnavitia.FeedPublisher feed_publishers = 53;
  for (unsigned int i = 0, n = this->feed_publishers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, this->feed_publishers(i), false, target);
  }

  // repeated .pbnavitia.Calendar calendars = 55;
  for (unsigned int i = 0, n = this->calendars_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        55, this->calendars(i), false, target);
  }

  // repeated .pbnavitia.LineGroup line_groups = 56;
  for (unsigned int i = 0, n = this->line_groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        56, this->line_groups(i), false, target);
  }

  // repeated .pbnavitia.Impact impacts = 57;
  for (unsigned int i = 0, n = this->impacts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, this->impacts(i), false, target);
  }

  // repeated .pbnavitia.TrafficReports traffic_reports = 61;
  for (unsigned int i = 0, n = this->traffic_reports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        61, this->traffic_reports(i), false, target);
  }

  // repeated .pbnavitia.Trip trips = 62;
  for (unsigned int i = 0, n = this->trips_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        62, this->trips(i), false, target);
  }

  // repeated .pbnavitia.NearestStopPoint nearest_stop_points = 63;
  for (unsigned int i = 0, n = this->nearest_stop_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        63, this->nearest_stop_points(i), false, target);
  }

  // repeated .pbnavitia.Contributor contributors = 64;
  for (unsigned int i = 0, n = this->contributors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        64, this->contributors(i), false, target);
  }

  // repeated .pbnavitia.Dataset datasets = 65;
  for (unsigned int i = 0, n = this->datasets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        65, this->datasets(i), false, target);
  }

  // repeated .pbnavitia.RoutePoint route_points = 66;
  for (unsigned int i = 0, n = this->route_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        66, this->route_points(i), false, target);
  }

  // repeated .pbnavitia.Link links = 67;
  for (unsigned int i = 0, n = this->links_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        67, this->links(i), false, target);
  }

  // repeated .pbnavitia.GraphicalIsochrone graphical_isochrones = 68;
  for (unsigned int i = 0, n = this->graphical_isochrones_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        68, this->graphical_isochrones(i), false, target);
  }

  // optional .pbnavitia.GeoStatus geo_status = 69;
  if (has_geo_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        69, *this->geo_status_, false, target);
  }

  // optional .pbnavitia.Co2Emission car_co2_emission = 70;
  if (has_car_co2_emission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        70, *this->car_co2_emission_, false, target);
  }

  // repeated .pbnavitia.HeatMap heat_maps = 71;
  for (unsigned int i = 0, n = this->heat_maps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        71, this->heat_maps(i), false, target);
  }

  // optional .pbnavitia.StreetNetworkRoutingMatrix sn_routing_matrix = 72;
  if (has_sn_routing_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        72, *this->sn_routing_matrix_, false, target);
  }

  // repeated .pbnavitia.LineReport line_reports = 73;
  for (unsigned int i = 0, n = this->line_reports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        73, this->line_reports(i), false, target);
  }

  // repeated .pbnavitia.EquipmentReport equipment_reports = 74;
  for (unsigned int i = 0, n = this->equipment_reports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        74, this->equipment_reports(i), false, target);
  }

  // repeated .pbnavitia.StopSchedule terminus_schedules = 75;
  for (unsigned int i = 0, n = this->terminus_schedules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        75, this->terminus_schedules(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.Response)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

    // optional .pbnavitia.Error error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

    // optional string info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional .pbnavitia.Status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional int32 publication_date = 5;
    if (has_publication_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publication_date());
    }

  }
  if (_has_bits_[32 / 32] & 15u) {
    // optional .pbnavitia.ResponseType response_type = 31;
    if (has_response_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
    }

    // optional string prev = 32;
    if (has_prev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prev());
    }

    // optional string next = 33;
    if (has_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next());
    }

    // optional uint32 next_request_date_time = 34;
    if (has_next_request_date_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_request_date_time());
    }

  }
  if (_has_bits_[41 / 32] & 3584u) {
    // optional .pbnavitia.Load load = 46;
    if (has_load()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->load_);
    }

    // optional .pbnavitia.Metadatas metadatas = 48;
    if (has_metadatas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metadatas_);
    }

    // optional .pbnavitia.Pagination pagination = 49;
    if (has_pagination()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pagination_);
    }

  }
  if (_has_bits_[53 / 32] & 14680064u) {
    // optional .pbnavitia.GeoStatus geo_status = 69;
    if (has_geo_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geo_status_);
    }

    // optional .pbnavitia.Co2Emission car_co2_emission = 70;
    if (has_car_co2_emission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->car_co2_emission_);
    }

    // optional .pbnavitia.StreetNetworkRoutingMatrix sn_routing_matrix = 72;
    if (has_sn_routing_matrix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sn_routing_matrix_);
    }

  }
  // repeated string ignored_words = 11;
  total_size += 1 * this->ignored_words_size();
  for (int i = 0; i < this->ignored_words_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ignored_words(i));
  }

  // repeated string bad_words = 12;
  total_size += 1 * this->bad_words_size();
  for (int i = 0; i < this->bad_words_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bad_words(i));
  }

  // repeated .pbnavitia.PtObject places = 13;
  total_size += 1 * this->places_size();
  for (int i = 0; i < this->places_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->places(i));
  }

  // repeated .pbnavitia.PtObject places_nearby = 14;
  total_size += 1 * this->places_nearby_size();
  for (int i = 0; i < this->places_nearby_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->places_nearby(i));
  }

  // repeated .pbnavitia.ValidityPattern validity_patterns = 15;
  total_size += 1 * this->validity_patterns_size();
  for (int i = 0; i < this->validity_patterns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->validity_patterns(i));
  }

  // repeated .pbnavitia.Line lines = 16;
  total_size += 2 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  // repeated .pbnavitia.JourneyPattern journey_patterns = 17;
  total_size += 2 * this->journey_patterns_size();
  for (int i = 0; i < this->journey_patterns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->journey_patterns(i));
  }

  // repeated .pbnavitia.VehicleJourney vehicle_journeys = 18;
  total_size += 2 * this->vehicle_journeys_size();
  for (int i = 0; i < this->vehicle_journeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vehicle_journeys(i));
  }

  // repeated .pbnavitia.StopPoint stop_points = 19;
  total_size += 2 * this->stop_points_size();
  for (int i = 0; i < this->stop_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_points(i));
  }

  // repeated .pbnavitia.StopArea stop_areas = 20;
  total_size += 2 * this->stop_areas_size();
  for (int i = 0; i < this->stop_areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_areas(i));
  }

  // repeated .pbnavitia.Network networks = 21;
  total_size += 2 * this->networks_size();
  for (int i = 0; i < this->networks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->networks(i));
  }

  // repeated .pbnavitia.PhysicalMode physical_modes = 22;
  total_size += 2 * this->physical_modes_size();
  for (int i = 0; i < this->physical_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physical_modes(i));
  }

  // repeated .pbnavitia.CommercialMode commercial_modes = 23;
  total_size += 2 * this->commercial_modes_size();
  for (int i = 0; i < this->commercial_modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commercial_modes(i));
  }

  // repeated .pbnavitia.Connection connections = 24;
  total_size += 2 * this->connections_size();
  for (int i = 0; i < this->connections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connections(i));
  }

  // repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 25;
  total_size += 2 * this->journey_pattern_points_size();
  for (int i = 0; i < this->journey_pattern_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->journey_pattern_points(i));
  }

  // repeated .pbnavitia.Company companies = 26;
  total_size += 2 * this->companies_size();
  for (int i = 0; i < this->companies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->companies(i));
  }

  // repeated .pbnavitia.Route routes = 27;
  total_size += 2 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  // repeated .pbnavitia.Poi pois = 28;
  total_size += 2 * this->pois_size();
  for (int i = 0; i < this->pois_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pois(i));
  }

  // repeated .pbnavitia.PoiType poi_types = 29;
  total_size += 2 * this->poi_types_size();
  for (int i = 0; i < this->poi_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poi_types(i));
  }

  // repeated .pbnavitia.Calendar calendars = 55;
  total_size += 2 * this->calendars_size();
  for (int i = 0; i < this->calendars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calendars(i));
  }

  // repeated .pbnavitia.LineGroup line_groups = 56;
  total_size += 2 * this->line_groups_size();
  for (int i = 0; i < this->line_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line_groups(i));
  }

  // repeated .pbnavitia.Trip trips = 62;
  total_size += 2 * this->trips_size();
  for (int i = 0; i < this->trips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trips(i));
  }

  // repeated .pbnavitia.Contributor contributors = 64;
  total_size += 2 * this->contributors_size();
  for (int i = 0; i < this->contributors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contributors(i));
  }

  // repeated .pbnavitia.Dataset datasets = 65;
  total_size += 2 * this->datasets_size();
  for (int i = 0; i < this->datasets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasets(i));
  }

  // repeated .pbnavitia.RoutePoint route_points = 66;
  total_size += 2 * this->route_points_size();
  for (int i = 0; i < this->route_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->route_points(i));
  }

  // repeated .pbnavitia.Impact impacts = 57;
  total_size += 2 * this->impacts_size();
  for (int i = 0; i < this->impacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->impacts(i));
  }

  // repeated .pbnavitia.Journey journeys = 30;
  total_size += 2 * this->journeys_size();
  for (int i = 0; i < this->journeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->journeys(i));
  }

  // repeated .pbnavitia.RouteSchedule route_schedules = 35;
  total_size += 2 * this->route_schedules_size();
  for (int i = 0; i < this->route_schedules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->route_schedules(i));
  }

  // repeated .pbnavitia.DepartureBoard departure_boards = 36;
  total_size += 2 * this->departure_boards_size();
  for (int i = 0; i < this->departure_boards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->departure_boards(i));
  }

  // repeated .pbnavitia.Passage next_departures = 37;
  total_size += 2 * this->next_departures_size();
  for (int i = 0; i < this->next_departures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_departures(i));
  }

  // repeated .pbnavitia.Passage next_arrivals = 38;
  total_size += 2 * this->next_arrivals_size();
  for (int i = 0; i < this->next_arrivals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_arrivals(i));
  }

  // repeated .pbnavitia.StopSchedule stop_schedules = 39;
  total_size += 2 * this->stop_schedules_size();
  for (int i = 0; i < this->stop_schedules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_schedules(i));
  }

  // repeated .pbnavitia.TrafficReports traffic_reports = 61;
  total_size += 2 * this->traffic_reports_size();
  for (int i = 0; i < this->traffic_reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traffic_reports(i));
  }

  // repeated .pbnavitia.LineReport line_reports = 73;
  total_size += 2 * this->line_reports_size();
  for (int i = 0; i < this->line_reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line_reports(i));
  }

  // repeated .pbnavitia.Ticket tickets = 51;
  total_size += 2 * this->tickets_size();
  for (int i = 0; i < this->tickets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tickets(i));
  }

  // repeated .pbnavitia.PtObject pt_objects = 52;
  total_size += 2 * this->pt_objects_size();
  for (int i = 0; i < this->pt_objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pt_objects(i));
  }

  // repeated .pbnavitia.FeedPublisher feed_publishers = 53;
  total_size += 2 * this->feed_publishers_size();
  for (int i = 0; i < this->feed_publishers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feed_publishers(i));
  }

  // repeated .pbnavitia.NearestStopPoint nearest_stop_points = 63;
  total_size += 2 * this->nearest_stop_points_size();
  for (int i = 0; i < this->nearest_stop_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nearest_stop_points(i));
  }

  // repeated .pbnavitia.Link links = 67;
  total_size += 2 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  // repeated .pbnavitia.GraphicalIsochrone graphical_isochrones = 68;
  total_size += 2 * this->graphical_isochrones_size();
  for (int i = 0; i < this->graphical_isochrones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->graphical_isochrones(i));
  }

  // repeated .pbnavitia.HeatMap heat_maps = 71;
  total_size += 2 * this->heat_maps_size();
  for (int i = 0; i < this->heat_maps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heat_maps(i));
  }

  // repeated .pbnavitia.EquipmentReport equipment_reports = 74;
  total_size += 2 * this->equipment_reports_size();
  for (int i = 0; i < this->equipment_reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment_reports(i));
  }

  // repeated .pbnavitia.StopSchedule terminus_schedules = 75;
  total_size += 2 * this->terminus_schedules_size();
  for (int i = 0; i < this->terminus_schedules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->terminus_schedules(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ignored_words_.MergeFrom(from.ignored_words_);
  bad_words_.MergeFrom(from.bad_words_);
  places_.MergeFrom(from.places_);
  places_nearby_.MergeFrom(from.places_nearby_);
  validity_patterns_.MergeFrom(from.validity_patterns_);
  lines_.MergeFrom(from.lines_);
  journey_patterns_.MergeFrom(from.journey_patterns_);
  vehicle_journeys_.MergeFrom(from.vehicle_journeys_);
  stop_points_.MergeFrom(from.stop_points_);
  stop_areas_.MergeFrom(from.stop_areas_);
  networks_.MergeFrom(from.networks_);
  physical_modes_.MergeFrom(from.physical_modes_);
  commercial_modes_.MergeFrom(from.commercial_modes_);
  connections_.MergeFrom(from.connections_);
  journey_pattern_points_.MergeFrom(from.journey_pattern_points_);
  companies_.MergeFrom(from.companies_);
  routes_.MergeFrom(from.routes_);
  pois_.MergeFrom(from.pois_);
  poi_types_.MergeFrom(from.poi_types_);
  calendars_.MergeFrom(from.calendars_);
  line_groups_.MergeFrom(from.line_groups_);
  trips_.MergeFrom(from.trips_);
  contributors_.MergeFrom(from.contributors_);
  datasets_.MergeFrom(from.datasets_);
  route_points_.MergeFrom(from.route_points_);
  impacts_.MergeFrom(from.impacts_);
  journeys_.MergeFrom(from.journeys_);
  route_schedules_.MergeFrom(from.route_schedules_);
  departure_boards_.MergeFrom(from.departure_boards_);
  next_departures_.MergeFrom(from.next_departures_);
  next_arrivals_.MergeFrom(from.next_arrivals_);
  stop_schedules_.MergeFrom(from.stop_schedules_);
  traffic_reports_.MergeFrom(from.traffic_reports_);
  line_reports_.MergeFrom(from.line_reports_);
  tickets_.MergeFrom(from.tickets_);
  pt_objects_.MergeFrom(from.pt_objects_);
  feed_publishers_.MergeFrom(from.feed_publishers_);
  nearest_stop_points_.MergeFrom(from.nearest_stop_points_);
  links_.MergeFrom(from.links_);
  graphical_isochrones_.MergeFrom(from.graphical_isochrones_);
  heat_maps_.MergeFrom(from.heat_maps_);
  equipment_reports_.MergeFrom(from.equipment_reports_);
  terminus_schedules_.MergeFrom(from.terminus_schedules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_error()) {
      mutable_error()->::pbnavitia::Error::MergeFrom(from.error());
    }
    if (from.has_info()) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
    if (from.has_status()) {
      mutable_status()->::pbnavitia::Status::MergeFrom(from.status());
    }
    if (from.has_publication_date()) {
      set_publication_date(from.publication_date());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_prev()) {
      set_has_prev();
      prev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_);
    }
    if (from.has_next()) {
      set_has_next();
      next_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_);
    }
    if (from.has_next_request_date_time()) {
      set_next_request_date_time(from.next_request_date_time());
    }
  }
  if (from._has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    if (from.has_load()) {
      mutable_load()->::pbnavitia::Load::MergeFrom(from.load());
    }
    if (from.has_metadatas()) {
      mutable_metadatas()->::pbnavitia::Metadatas::MergeFrom(from.metadatas());
    }
    if (from.has_pagination()) {
      mutable_pagination()->::pbnavitia::Pagination::MergeFrom(from.pagination());
    }
  }
  if (from._has_bits_[53 / 32] & (0xffu << (53 % 32))) {
    if (from.has_geo_status()) {
      mutable_geo_status()->::pbnavitia::GeoStatus::MergeFrom(from.geo_status());
    }
    if (from.has_car_co2_emission()) {
      mutable_car_co2_emission()->::pbnavitia::Co2Emission::MergeFrom(from.car_co2_emission());
    }
    if (from.has_sn_routing_matrix()) {
      mutable_sn_routing_matrix()->::pbnavitia::StreetNetworkRoutingMatrix::MergeFrom(from.sn_routing_matrix());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  if (has_status()) {
    if (!this->status_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->places())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->places_nearby())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lines())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->journey_patterns())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vehicle_journeys())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_areas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->networks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->connections())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->journey_pattern_points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->companies())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->routes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pois())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->line_groups())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->datasets())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->route_points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->impacts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->journeys())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->route_schedules())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->departure_boards())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->next_departures())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->next_arrivals())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_schedules())) return false;
  if (has_load()) {
    if (!this->load_->IsInitialized()) return false;
  }
  if (has_metadatas()) {
    if (!this->metadatas_->IsInitialized()) return false;
  }
  if (has_pagination()) {
    if (!this->pagination_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->traffic_reports())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->line_reports())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pt_objects())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->feed_publishers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nearest_stop_points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->graphical_isochrones())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->heat_maps())) return false;
  if (has_sn_routing_matrix()) {
    if (!this->sn_routing_matrix_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->equipment_reports())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->terminus_schedules())) return false;
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(status_code_, other->status_code_);
  std::swap(error_, other->error_);
  info_.Swap(&other->info_);
  std::swap(status_, other->status_);
  std::swap(publication_date_, other->publication_date_);
  ignored_words_.UnsafeArenaSwap(&other->ignored_words_);
  bad_words_.UnsafeArenaSwap(&other->bad_words_);
  places_.UnsafeArenaSwap(&other->places_);
  places_nearby_.UnsafeArenaSwap(&other->places_nearby_);
  validity_patterns_.UnsafeArenaSwap(&other->validity_patterns_);
  lines_.UnsafeArenaSwap(&other->lines_);
  journey_patterns_.UnsafeArenaSwap(&other->journey_patterns_);
  vehicle_journeys_.UnsafeArenaSwap(&other->vehicle_journeys_);
  stop_points_.UnsafeArenaSwap(&other->stop_points_);
  stop_areas_.UnsafeArenaSwap(&other->stop_areas_);
  networks_.UnsafeArenaSwap(&other->networks_);
  physical_modes_.UnsafeArenaSwap(&other->physical_modes_);
  commercial_modes_.UnsafeArenaSwap(&other->commercial_modes_);
  connections_.UnsafeArenaSwap(&other->connections_);
  journey_pattern_points_.UnsafeArenaSwap(&other->journey_pattern_points_);
  companies_.UnsafeArenaSwap(&other->companies_);
  routes_.UnsafeArenaSwap(&other->routes_);
  pois_.UnsafeArenaSwap(&other->pois_);
  poi_types_.UnsafeArenaSwap(&other->poi_types_);
  calendars_.UnsafeArenaSwap(&other->calendars_);
  line_groups_.UnsafeArenaSwap(&other->line_groups_);
  trips_.UnsafeArenaSwap(&other->trips_);
  contributors_.UnsafeArenaSwap(&other->contributors_);
  datasets_.UnsafeArenaSwap(&other->datasets_);
  route_points_.UnsafeArenaSwap(&other->route_points_);
  impacts_.UnsafeArenaSwap(&other->impacts_);
  journeys_.UnsafeArenaSwap(&other->journeys_);
  std::swap(response_type_, other->response_type_);
  prev_.Swap(&other->prev_);
  next_.Swap(&other->next_);
  std::swap(next_request_date_time_, other->next_request_date_time_);
  route_schedules_.UnsafeArenaSwap(&other->route_schedules_);
  departure_boards_.UnsafeArenaSwap(&other->departure_boards_);
  next_departures_.UnsafeArenaSwap(&other->next_departures_);
  next_arrivals_.UnsafeArenaSwap(&other->next_arrivals_);
  stop_schedules_.UnsafeArenaSwap(&other->stop_schedules_);
  std::swap(load_, other->load_);
  std::swap(metadatas_, other->metadatas_);
  std::swap(pagination_, other->pagination_);
  traffic_reports_.UnsafeArenaSwap(&other->traffic_reports_);
  line_reports_.UnsafeArenaSwap(&other->line_reports_);
  tickets_.UnsafeArenaSwap(&other->tickets_);
  pt_objects_.UnsafeArenaSwap(&other->pt_objects_);
  feed_publishers_.UnsafeArenaSwap(&other->feed_publishers_);
  nearest_stop_points_.UnsafeArenaSwap(&other->nearest_stop_points_);
  links_.UnsafeArenaSwap(&other->links_);
  graphical_isochrones_.UnsafeArenaSwap(&other->graphical_isochrones_);
  heat_maps_.UnsafeArenaSwap(&other->heat_maps_);
  std::swap(geo_status_, other->geo_status_);
  std::swap(car_co2_emission_, other->car_co2_emission_);
  std::swap(sn_routing_matrix_, other->sn_routing_matrix_);
  equipment_reports_.UnsafeArenaSwap(&other->equipment_reports_);
  terminus_schedules_.UnsafeArenaSwap(&other->terminus_schedules_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int32 status_code = 1;
bool Response::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
 ::google::protobuf::int32 Response::status_code() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.status_code)
  return status_code_;
}
 void Response::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Response.status_code)
}

// optional .pbnavitia.Error error = 2;
bool Response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_error() {
  if (error_ != NULL) error_->::pbnavitia::Error::Clear();
  clear_has_error();
}
const ::pbnavitia::Error& Response::error() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
::pbnavitia::Error* Response::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::pbnavitia::Error;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.error)
  return error_;
}
::pbnavitia::Error* Response::release_error() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.error)
  clear_has_error();
  ::pbnavitia::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void Response::set_allocated_error(::pbnavitia::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.error)
}

// optional string info = 3;
bool Response::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
 const ::std::string& Response::info() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Response.info)
}
 void Response::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.info)
}
 void Response::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.info)
}
 ::std::string* Response::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_info() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.info)
}

// optional .pbnavitia.Status status = 4;
bool Response::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_status() {
  if (status_ != NULL) status_->::pbnavitia::Status::Clear();
  clear_has_status();
}
const ::pbnavitia::Status& Response::status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::pbnavitia::Status* Response::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::pbnavitia::Status;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.status)
  return status_;
}
::pbnavitia::Status* Response::release_status() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.status)
  clear_has_status();
  ::pbnavitia::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void Response::set_allocated_status(::pbnavitia::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.status)
}

// optional int32 publication_date = 5;
bool Response::has_publication_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Response::set_has_publication_date() {
  _has_bits_[0] |= 0x00000010u;
}
void Response::clear_has_publication_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void Response::clear_publication_date() {
  publication_date_ = 0;
  clear_has_publication_date();
}
 ::google::protobuf::int32 Response::publication_date() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.publication_date)
  return publication_date_;
}
 void Response::set_publication_date(::google::protobuf::int32 value) {
  set_has_publication_date();
  publication_date_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Response.publication_date)
}

// repeated string ignored_words = 11;
int Response::ignored_words_size() const {
  return ignored_words_.size();
}
void Response::clear_ignored_words() {
  ignored_words_.Clear();
}
 const ::std::string& Response::ignored_words(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.ignored_words)
  return ignored_words_.Get(index);
}
 ::std::string* Response::mutable_ignored_words(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.ignored_words)
  return ignored_words_.Mutable(index);
}
 void Response::set_ignored_words(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Response.ignored_words)
  ignored_words_.Mutable(index)->assign(value);
}
 void Response::set_ignored_words(int index, const char* value) {
  ignored_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.ignored_words)
}
 void Response::set_ignored_words(int index, const char* value, size_t size) {
  ignored_words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.ignored_words)
}
 ::std::string* Response::add_ignored_words() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Response.ignored_words)
  return ignored_words_.Add();
}
 void Response::add_ignored_words(const ::std::string& value) {
  ignored_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Response.ignored_words)
}
 void Response::add_ignored_words(const char* value) {
  ignored_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Response.ignored_words)
}
 void Response::add_ignored_words(const char* value, size_t size) {
  ignored_words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Response.ignored_words)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::ignored_words() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.ignored_words)
  return ignored_words_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_ignored_words() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.ignored_words)
  return &ignored_words_;
}

// repeated string bad_words = 12;
int Response::bad_words_size() const {
  return bad_words_.size();
}
void Response::clear_bad_words() {
  bad_words_.Clear();
}
 const ::std::string& Response::bad_words(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.bad_words)
  return bad_words_.Get(index);
}
 ::std::string* Response::mutable_bad_words(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.bad_words)
  return bad_words_.Mutable(index);
}
 void Response::set_bad_words(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pbnavitia.Response.bad_words)
  bad_words_.Mutable(index)->assign(value);
}
 void Response::set_bad_words(int index, const char* value) {
  bad_words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.bad_words)
}
 void Response::set_bad_words(int index, const char* value, size_t size) {
  bad_words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.bad_words)
}
 ::std::string* Response::add_bad_words() {
  // @@protoc_insertion_point(field_add_mutable:pbnavitia.Response.bad_words)
  return bad_words_.Add();
}
 void Response::add_bad_words(const ::std::string& value) {
  bad_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pbnavitia.Response.bad_words)
}
 void Response::add_bad_words(const char* value) {
  bad_words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pbnavitia.Response.bad_words)
}
 void Response::add_bad_words(const char* value, size_t size) {
  bad_words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pbnavitia.Response.bad_words)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::bad_words() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.bad_words)
  return bad_words_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_bad_words() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.bad_words)
  return &bad_words_;
}

// repeated .pbnavitia.PtObject places = 13;
int Response::places_size() const {
  return places_.size();
}
void Response::clear_places() {
  places_.Clear();
}
const ::pbnavitia::PtObject& Response::places(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.places)
  return places_.Get(index);
}
::pbnavitia::PtObject* Response::mutable_places(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.places)
  return places_.Mutable(index);
}
::pbnavitia::PtObject* Response::add_places() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.places)
  return places_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
Response::mutable_places() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.places)
  return &places_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
Response::places() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.places)
  return places_;
}

// repeated .pbnavitia.PtObject places_nearby = 14;
int Response::places_nearby_size() const {
  return places_nearby_.size();
}
void Response::clear_places_nearby() {
  places_nearby_.Clear();
}
const ::pbnavitia::PtObject& Response::places_nearby(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.places_nearby)
  return places_nearby_.Get(index);
}
::pbnavitia::PtObject* Response::mutable_places_nearby(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.places_nearby)
  return places_nearby_.Mutable(index);
}
::pbnavitia::PtObject* Response::add_places_nearby() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.places_nearby)
  return places_nearby_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
Response::mutable_places_nearby() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.places_nearby)
  return &places_nearby_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
Response::places_nearby() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.places_nearby)
  return places_nearby_;
}

// repeated .pbnavitia.ValidityPattern validity_patterns = 15;
int Response::validity_patterns_size() const {
  return validity_patterns_.size();
}
void Response::clear_validity_patterns() {
  validity_patterns_.Clear();
}
const ::pbnavitia::ValidityPattern& Response::validity_patterns(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.validity_patterns)
  return validity_patterns_.Get(index);
}
::pbnavitia::ValidityPattern* Response::mutable_validity_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.validity_patterns)
  return validity_patterns_.Mutable(index);
}
::pbnavitia::ValidityPattern* Response::add_validity_patterns() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.validity_patterns)
  return validity_patterns_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::ValidityPattern >*
Response::mutable_validity_patterns() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.validity_patterns)
  return &validity_patterns_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::ValidityPattern >&
Response::validity_patterns() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.validity_patterns)
  return validity_patterns_;
}

// repeated .pbnavitia.Line lines = 16;
int Response::lines_size() const {
  return lines_.size();
}
void Response::clear_lines() {
  lines_.Clear();
}
const ::pbnavitia::Line& Response::lines(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.lines)
  return lines_.Get(index);
}
::pbnavitia::Line* Response::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.lines)
  return lines_.Mutable(index);
}
::pbnavitia::Line* Response::add_lines() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >*
Response::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Line >&
Response::lines() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.lines)
  return lines_;
}

// repeated .pbnavitia.JourneyPattern journey_patterns = 17;
int Response::journey_patterns_size() const {
  return journey_patterns_.size();
}
void Response::clear_journey_patterns() {
  journey_patterns_.Clear();
}
const ::pbnavitia::JourneyPattern& Response::journey_patterns(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.journey_patterns)
  return journey_patterns_.Get(index);
}
::pbnavitia::JourneyPattern* Response::mutable_journey_patterns(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.journey_patterns)
  return journey_patterns_.Mutable(index);
}
::pbnavitia::JourneyPattern* Response::add_journey_patterns() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.journey_patterns)
  return journey_patterns_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >*
Response::mutable_journey_patterns() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.journey_patterns)
  return &journey_patterns_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPattern >&
Response::journey_patterns() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.journey_patterns)
  return journey_patterns_;
}

// repeated .pbnavitia.VehicleJourney vehicle_journeys = 18;
int Response::vehicle_journeys_size() const {
  return vehicle_journeys_.size();
}
void Response::clear_vehicle_journeys() {
  vehicle_journeys_.Clear();
}
const ::pbnavitia::VehicleJourney& Response::vehicle_journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.vehicle_journeys)
  return vehicle_journeys_.Get(index);
}
::pbnavitia::VehicleJourney* Response::mutable_vehicle_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.vehicle_journeys)
  return vehicle_journeys_.Mutable(index);
}
::pbnavitia::VehicleJourney* Response::add_vehicle_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.vehicle_journeys)
  return vehicle_journeys_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >*
Response::mutable_vehicle_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.vehicle_journeys)
  return &vehicle_journeys_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::VehicleJourney >&
Response::vehicle_journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.vehicle_journeys)
  return vehicle_journeys_;
}

// repeated .pbnavitia.StopPoint stop_points = 19;
int Response::stop_points_size() const {
  return stop_points_.size();
}
void Response::clear_stop_points() {
  stop_points_.Clear();
}
const ::pbnavitia::StopPoint& Response::stop_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.stop_points)
  return stop_points_.Get(index);
}
::pbnavitia::StopPoint* Response::mutable_stop_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.stop_points)
  return stop_points_.Mutable(index);
}
::pbnavitia::StopPoint* Response::add_stop_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.stop_points)
  return stop_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >*
Response::mutable_stop_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.stop_points)
  return &stop_points_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopPoint >&
Response::stop_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.stop_points)
  return stop_points_;
}

// repeated .pbnavitia.StopArea stop_areas = 20;
int Response::stop_areas_size() const {
  return stop_areas_.size();
}
void Response::clear_stop_areas() {
  stop_areas_.Clear();
}
const ::pbnavitia::StopArea& Response::stop_areas(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.stop_areas)
  return stop_areas_.Get(index);
}
::pbnavitia::StopArea* Response::mutable_stop_areas(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.stop_areas)
  return stop_areas_.Mutable(index);
}
::pbnavitia::StopArea* Response::add_stop_areas() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.stop_areas)
  return stop_areas_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >*
Response::mutable_stop_areas() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.stop_areas)
  return &stop_areas_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopArea >&
Response::stop_areas() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.stop_areas)
  return stop_areas_;
}

// repeated .pbnavitia.Network networks = 21;
int Response::networks_size() const {
  return networks_.size();
}
void Response::clear_networks() {
  networks_.Clear();
}
const ::pbnavitia::Network& Response::networks(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.networks)
  return networks_.Get(index);
}
::pbnavitia::Network* Response::mutable_networks(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.networks)
  return networks_.Mutable(index);
}
::pbnavitia::Network* Response::add_networks() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.networks)
  return networks_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Network >*
Response::mutable_networks() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.networks)
  return &networks_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Network >&
Response::networks() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.networks)
  return networks_;
}

// repeated .pbnavitia.PhysicalMode physical_modes = 22;
int Response::physical_modes_size() const {
  return physical_modes_.size();
}
void Response::clear_physical_modes() {
  physical_modes_.Clear();
}
const ::pbnavitia::PhysicalMode& Response::physical_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.physical_modes)
  return physical_modes_.Get(index);
}
::pbnavitia::PhysicalMode* Response::mutable_physical_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.physical_modes)
  return physical_modes_.Mutable(index);
}
::pbnavitia::PhysicalMode* Response::add_physical_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.physical_modes)
  return physical_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >*
Response::mutable_physical_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.physical_modes)
  return &physical_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PhysicalMode >&
Response::physical_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.physical_modes)
  return physical_modes_;
}

// repeated .pbnavitia.CommercialMode commercial_modes = 23;
int Response::commercial_modes_size() const {
  return commercial_modes_.size();
}
void Response::clear_commercial_modes() {
  commercial_modes_.Clear();
}
const ::pbnavitia::CommercialMode& Response::commercial_modes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.commercial_modes)
  return commercial_modes_.Get(index);
}
::pbnavitia::CommercialMode* Response::mutable_commercial_modes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.commercial_modes)
  return commercial_modes_.Mutable(index);
}
::pbnavitia::CommercialMode* Response::add_commercial_modes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.commercial_modes)
  return commercial_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >*
Response::mutable_commercial_modes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.commercial_modes)
  return &commercial_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::CommercialMode >&
Response::commercial_modes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.commercial_modes)
  return commercial_modes_;
}

// repeated .pbnavitia.Connection connections = 24;
int Response::connections_size() const {
  return connections_.size();
}
void Response::clear_connections() {
  connections_.Clear();
}
const ::pbnavitia::Connection& Response::connections(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.connections)
  return connections_.Get(index);
}
::pbnavitia::Connection* Response::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.connections)
  return connections_.Mutable(index);
}
::pbnavitia::Connection* Response::add_connections() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.connections)
  return connections_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Connection >*
Response::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.connections)
  return &connections_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Connection >&
Response::connections() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.connections)
  return connections_;
}

// repeated .pbnavitia.JourneyPatternPoint journey_pattern_points = 25;
int Response::journey_pattern_points_size() const {
  return journey_pattern_points_.size();
}
void Response::clear_journey_pattern_points() {
  journey_pattern_points_.Clear();
}
const ::pbnavitia::JourneyPatternPoint& Response::journey_pattern_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.journey_pattern_points)
  return journey_pattern_points_.Get(index);
}
::pbnavitia::JourneyPatternPoint* Response::mutable_journey_pattern_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.journey_pattern_points)
  return journey_pattern_points_.Mutable(index);
}
::pbnavitia::JourneyPatternPoint* Response::add_journey_pattern_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.journey_pattern_points)
  return journey_pattern_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >*
Response::mutable_journey_pattern_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.journey_pattern_points)
  return &journey_pattern_points_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::JourneyPatternPoint >&
Response::journey_pattern_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.journey_pattern_points)
  return journey_pattern_points_;
}

// repeated .pbnavitia.Company companies = 26;
int Response::companies_size() const {
  return companies_.size();
}
void Response::clear_companies() {
  companies_.Clear();
}
const ::pbnavitia::Company& Response::companies(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.companies)
  return companies_.Get(index);
}
::pbnavitia::Company* Response::mutable_companies(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.companies)
  return companies_.Mutable(index);
}
::pbnavitia::Company* Response::add_companies() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.companies)
  return companies_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Company >*
Response::mutable_companies() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.companies)
  return &companies_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Company >&
Response::companies() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.companies)
  return companies_;
}

// repeated .pbnavitia.Route routes = 27;
int Response::routes_size() const {
  return routes_.size();
}
void Response::clear_routes() {
  routes_.Clear();
}
const ::pbnavitia::Route& Response::routes(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.routes)
  return routes_.Get(index);
}
::pbnavitia::Route* Response::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.routes)
  return routes_.Mutable(index);
}
::pbnavitia::Route* Response::add_routes() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >*
Response::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Route >&
Response::routes() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.routes)
  return routes_;
}

// repeated .pbnavitia.Poi pois = 28;
int Response::pois_size() const {
  return pois_.size();
}
void Response::clear_pois() {
  pois_.Clear();
}
const ::pbnavitia::Poi& Response::pois(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.pois)
  return pois_.Get(index);
}
::pbnavitia::Poi* Response::mutable_pois(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.pois)
  return pois_.Mutable(index);
}
::pbnavitia::Poi* Response::add_pois() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.pois)
  return pois_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Poi >*
Response::mutable_pois() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.pois)
  return &pois_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Poi >&
Response::pois() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.pois)
  return pois_;
}

// repeated .pbnavitia.PoiType poi_types = 29;
int Response::poi_types_size() const {
  return poi_types_.size();
}
void Response::clear_poi_types() {
  poi_types_.Clear();
}
const ::pbnavitia::PoiType& Response::poi_types(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.poi_types)
  return poi_types_.Get(index);
}
::pbnavitia::PoiType* Response::mutable_poi_types(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.poi_types)
  return poi_types_.Mutable(index);
}
::pbnavitia::PoiType* Response::add_poi_types() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.poi_types)
  return poi_types_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PoiType >*
Response::mutable_poi_types() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.poi_types)
  return &poi_types_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PoiType >&
Response::poi_types() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.poi_types)
  return poi_types_;
}

// repeated .pbnavitia.Calendar calendars = 55;
int Response::calendars_size() const {
  return calendars_.size();
}
void Response::clear_calendars() {
  calendars_.Clear();
}
const ::pbnavitia::Calendar& Response::calendars(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.calendars)
  return calendars_.Get(index);
}
::pbnavitia::Calendar* Response::mutable_calendars(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.calendars)
  return calendars_.Mutable(index);
}
::pbnavitia::Calendar* Response::add_calendars() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.calendars)
  return calendars_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >*
Response::mutable_calendars() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.calendars)
  return &calendars_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Calendar >&
Response::calendars() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.calendars)
  return calendars_;
}

// repeated .pbnavitia.LineGroup line_groups = 56;
int Response::line_groups_size() const {
  return line_groups_.size();
}
void Response::clear_line_groups() {
  line_groups_.Clear();
}
const ::pbnavitia::LineGroup& Response::line_groups(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.line_groups)
  return line_groups_.Get(index);
}
::pbnavitia::LineGroup* Response::mutable_line_groups(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.line_groups)
  return line_groups_.Mutable(index);
}
::pbnavitia::LineGroup* Response::add_line_groups() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.line_groups)
  return line_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >*
Response::mutable_line_groups() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.line_groups)
  return &line_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineGroup >&
Response::line_groups() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.line_groups)
  return line_groups_;
}

// repeated .pbnavitia.Trip trips = 62;
int Response::trips_size() const {
  return trips_.size();
}
void Response::clear_trips() {
  trips_.Clear();
}
const ::pbnavitia::Trip& Response::trips(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.trips)
  return trips_.Get(index);
}
::pbnavitia::Trip* Response::mutable_trips(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.trips)
  return trips_.Mutable(index);
}
::pbnavitia::Trip* Response::add_trips() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.trips)
  return trips_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Trip >*
Response::mutable_trips() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.trips)
  return &trips_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Trip >&
Response::trips() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.trips)
  return trips_;
}

// repeated .pbnavitia.Contributor contributors = 64;
int Response::contributors_size() const {
  return contributors_.size();
}
void Response::clear_contributors() {
  contributors_.Clear();
}
const ::pbnavitia::Contributor& Response::contributors(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.contributors)
  return contributors_.Get(index);
}
::pbnavitia::Contributor* Response::mutable_contributors(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.contributors)
  return contributors_.Mutable(index);
}
::pbnavitia::Contributor* Response::add_contributors() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.contributors)
  return contributors_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Contributor >*
Response::mutable_contributors() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.contributors)
  return &contributors_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Contributor >&
Response::contributors() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.contributors)
  return contributors_;
}

// repeated .pbnavitia.Dataset datasets = 65;
int Response::datasets_size() const {
  return datasets_.size();
}
void Response::clear_datasets() {
  datasets_.Clear();
}
const ::pbnavitia::Dataset& Response::datasets(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.datasets)
  return datasets_.Get(index);
}
::pbnavitia::Dataset* Response::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.datasets)
  return datasets_.Mutable(index);
}
::pbnavitia::Dataset* Response::add_datasets() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.datasets)
  return datasets_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Dataset >*
Response::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.datasets)
  return &datasets_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Dataset >&
Response::datasets() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.datasets)
  return datasets_;
}

// repeated .pbnavitia.RoutePoint route_points = 66;
int Response::route_points_size() const {
  return route_points_.size();
}
void Response::clear_route_points() {
  route_points_.Clear();
}
const ::pbnavitia::RoutePoint& Response::route_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.route_points)
  return route_points_.Get(index);
}
::pbnavitia::RoutePoint* Response::mutable_route_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.route_points)
  return route_points_.Mutable(index);
}
::pbnavitia::RoutePoint* Response::add_route_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.route_points)
  return route_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutePoint >*
Response::mutable_route_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.route_points)
  return &route_points_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RoutePoint >&
Response::route_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.route_points)
  return route_points_;
}

// repeated .pbnavitia.Impact impacts = 57;
int Response::impacts_size() const {
  return impacts_.size();
}
void Response::clear_impacts() {
  impacts_.Clear();
}
const ::pbnavitia::Impact& Response::impacts(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.impacts)
  return impacts_.Get(index);
}
::pbnavitia::Impact* Response::mutable_impacts(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.impacts)
  return impacts_.Mutable(index);
}
::pbnavitia::Impact* Response::add_impacts() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.impacts)
  return impacts_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Impact >*
Response::mutable_impacts() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.impacts)
  return &impacts_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Impact >&
Response::impacts() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.impacts)
  return impacts_;
}

// repeated .pbnavitia.Journey journeys = 30;
int Response::journeys_size() const {
  return journeys_.size();
}
void Response::clear_journeys() {
  journeys_.Clear();
}
const ::pbnavitia::Journey& Response::journeys(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.journeys)
  return journeys_.Get(index);
}
::pbnavitia::Journey* Response::mutable_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.journeys)
  return journeys_.Mutable(index);
}
::pbnavitia::Journey* Response::add_journeys() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.journeys)
  return journeys_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >*
Response::mutable_journeys() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.journeys)
  return &journeys_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Journey >&
Response::journeys() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.journeys)
  return journeys_;
}

// optional .pbnavitia.ResponseType response_type = 31;
bool Response::has_response_type() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void Response::set_has_response_type() {
  _has_bits_[1] |= 0x00000001u;
}
void Response::clear_has_response_type() {
  _has_bits_[1] &= ~0x00000001u;
}
void Response::clear_response_type() {
  response_type_ = 1;
  clear_has_response_type();
}
 ::pbnavitia::ResponseType Response::response_type() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.response_type)
  return static_cast< ::pbnavitia::ResponseType >(response_type_);
}
 void Response::set_response_type(::pbnavitia::ResponseType value) {
  assert(::pbnavitia::ResponseType_IsValid(value));
  set_has_response_type();
  response_type_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Response.response_type)
}

// optional string prev = 32;
bool Response::has_prev() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void Response::set_has_prev() {
  _has_bits_[1] |= 0x00000002u;
}
void Response::clear_has_prev() {
  _has_bits_[1] &= ~0x00000002u;
}
void Response::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
 const ::std::string& Response::prev() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.prev)
  return prev_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Response.prev)
}
 void Response::set_prev(const char* value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.prev)
}
 void Response::set_prev(const char* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.prev)
}
 ::std::string* Response::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_prev() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.prev)
}

// optional string next = 33;
bool Response::has_next() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void Response::set_has_next() {
  _has_bits_[1] |= 0x00000004u;
}
void Response::clear_has_next() {
  _has_bits_[1] &= ~0x00000004u;
}
void Response::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
 const ::std::string& Response::next() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.next)
  return next_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnavitia.Response.next)
}
 void Response::set_next(const char* value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnavitia.Response.next)
}
 void Response::set_next(const char* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnavitia.Response.next)
}
 ::std::string* Response::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_next() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.next)
}

// optional uint32 next_request_date_time = 34;
bool Response::has_next_request_date_time() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void Response::set_has_next_request_date_time() {
  _has_bits_[1] |= 0x00000008u;
}
void Response::clear_has_next_request_date_time() {
  _has_bits_[1] &= ~0x00000008u;
}
void Response::clear_next_request_date_time() {
  next_request_date_time_ = 0u;
  clear_has_next_request_date_time();
}
 ::google::protobuf::uint32 Response::next_request_date_time() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.next_request_date_time)
  return next_request_date_time_;
}
 void Response::set_next_request_date_time(::google::protobuf::uint32 value) {
  set_has_next_request_date_time();
  next_request_date_time_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.Response.next_request_date_time)
}

// repeated .pbnavitia.RouteSchedule route_schedules = 35;
int Response::route_schedules_size() const {
  return route_schedules_.size();
}
void Response::clear_route_schedules() {
  route_schedules_.Clear();
}
const ::pbnavitia::RouteSchedule& Response::route_schedules(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.route_schedules)
  return route_schedules_.Get(index);
}
::pbnavitia::RouteSchedule* Response::mutable_route_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.route_schedules)
  return route_schedules_.Mutable(index);
}
::pbnavitia::RouteSchedule* Response::add_route_schedules() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.route_schedules)
  return route_schedules_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteSchedule >*
Response::mutable_route_schedules() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.route_schedules)
  return &route_schedules_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::RouteSchedule >&
Response::route_schedules() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.route_schedules)
  return route_schedules_;
}

// repeated .pbnavitia.DepartureBoard departure_boards = 36;
int Response::departure_boards_size() const {
  return departure_boards_.size();
}
void Response::clear_departure_boards() {
  departure_boards_.Clear();
}
const ::pbnavitia::DepartureBoard& Response::departure_boards(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.departure_boards)
  return departure_boards_.Get(index);
}
::pbnavitia::DepartureBoard* Response::mutable_departure_boards(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.departure_boards)
  return departure_boards_.Mutable(index);
}
::pbnavitia::DepartureBoard* Response::add_departure_boards() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.departure_boards)
  return departure_boards_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::DepartureBoard >*
Response::mutable_departure_boards() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.departure_boards)
  return &departure_boards_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::DepartureBoard >&
Response::departure_boards() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.departure_boards)
  return departure_boards_;
}

// repeated .pbnavitia.Passage next_departures = 37;
int Response::next_departures_size() const {
  return next_departures_.size();
}
void Response::clear_next_departures() {
  next_departures_.Clear();
}
const ::pbnavitia::Passage& Response::next_departures(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.next_departures)
  return next_departures_.Get(index);
}
::pbnavitia::Passage* Response::mutable_next_departures(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.next_departures)
  return next_departures_.Mutable(index);
}
::pbnavitia::Passage* Response::add_next_departures() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.next_departures)
  return next_departures_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >*
Response::mutable_next_departures() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.next_departures)
  return &next_departures_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >&
Response::next_departures() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.next_departures)
  return next_departures_;
}

// repeated .pbnavitia.Passage next_arrivals = 38;
int Response::next_arrivals_size() const {
  return next_arrivals_.size();
}
void Response::clear_next_arrivals() {
  next_arrivals_.Clear();
}
const ::pbnavitia::Passage& Response::next_arrivals(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.next_arrivals)
  return next_arrivals_.Get(index);
}
::pbnavitia::Passage* Response::mutable_next_arrivals(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.next_arrivals)
  return next_arrivals_.Mutable(index);
}
::pbnavitia::Passage* Response::add_next_arrivals() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.next_arrivals)
  return next_arrivals_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >*
Response::mutable_next_arrivals() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.next_arrivals)
  return &next_arrivals_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Passage >&
Response::next_arrivals() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.next_arrivals)
  return next_arrivals_;
}

// repeated .pbnavitia.StopSchedule stop_schedules = 39;
int Response::stop_schedules_size() const {
  return stop_schedules_.size();
}
void Response::clear_stop_schedules() {
  stop_schedules_.Clear();
}
const ::pbnavitia::StopSchedule& Response::stop_schedules(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.stop_schedules)
  return stop_schedules_.Get(index);
}
::pbnavitia::StopSchedule* Response::mutable_stop_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.stop_schedules)
  return stop_schedules_.Mutable(index);
}
::pbnavitia::StopSchedule* Response::add_stop_schedules() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.stop_schedules)
  return stop_schedules_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >*
Response::mutable_stop_schedules() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.stop_schedules)
  return &stop_schedules_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >&
Response::stop_schedules() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.stop_schedules)
  return stop_schedules_;
}

// optional .pbnavitia.Load load = 46;
bool Response::has_load() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void Response::set_has_load() {
  _has_bits_[1] |= 0x00000200u;
}
void Response::clear_has_load() {
  _has_bits_[1] &= ~0x00000200u;
}
void Response::clear_load() {
  if (load_ != NULL) load_->::pbnavitia::Load::Clear();
  clear_has_load();
}
const ::pbnavitia::Load& Response::load() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.load)
  return load_ != NULL ? *load_ : *default_instance_->load_;
}
::pbnavitia::Load* Response::mutable_load() {
  set_has_load();
  if (load_ == NULL) {
    load_ = new ::pbnavitia::Load;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.load)
  return load_;
}
::pbnavitia::Load* Response::release_load() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.load)
  clear_has_load();
  ::pbnavitia::Load* temp = load_;
  load_ = NULL;
  return temp;
}
void Response::set_allocated_load(::pbnavitia::Load* load) {
  delete load_;
  load_ = load;
  if (load) {
    set_has_load();
  } else {
    clear_has_load();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.load)
}

// optional .pbnavitia.Metadatas metadatas = 48;
bool Response::has_metadatas() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void Response::set_has_metadatas() {
  _has_bits_[1] |= 0x00000400u;
}
void Response::clear_has_metadatas() {
  _has_bits_[1] &= ~0x00000400u;
}
void Response::clear_metadatas() {
  if (metadatas_ != NULL) metadatas_->::pbnavitia::Metadatas::Clear();
  clear_has_metadatas();
}
const ::pbnavitia::Metadatas& Response::metadatas() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.metadatas)
  return metadatas_ != NULL ? *metadatas_ : *default_instance_->metadatas_;
}
::pbnavitia::Metadatas* Response::mutable_metadatas() {
  set_has_metadatas();
  if (metadatas_ == NULL) {
    metadatas_ = new ::pbnavitia::Metadatas;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.metadatas)
  return metadatas_;
}
::pbnavitia::Metadatas* Response::release_metadatas() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.metadatas)
  clear_has_metadatas();
  ::pbnavitia::Metadatas* temp = metadatas_;
  metadatas_ = NULL;
  return temp;
}
void Response::set_allocated_metadatas(::pbnavitia::Metadatas* metadatas) {
  delete metadatas_;
  metadatas_ = metadatas;
  if (metadatas) {
    set_has_metadatas();
  } else {
    clear_has_metadatas();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.metadatas)
}

// optional .pbnavitia.Pagination pagination = 49;
bool Response::has_pagination() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void Response::set_has_pagination() {
  _has_bits_[1] |= 0x00000800u;
}
void Response::clear_has_pagination() {
  _has_bits_[1] &= ~0x00000800u;
}
void Response::clear_pagination() {
  if (pagination_ != NULL) pagination_->::pbnavitia::Pagination::Clear();
  clear_has_pagination();
}
const ::pbnavitia::Pagination& Response::pagination() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.pagination)
  return pagination_ != NULL ? *pagination_ : *default_instance_->pagination_;
}
::pbnavitia::Pagination* Response::mutable_pagination() {
  set_has_pagination();
  if (pagination_ == NULL) {
    pagination_ = new ::pbnavitia::Pagination;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.pagination)
  return pagination_;
}
::pbnavitia::Pagination* Response::release_pagination() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.pagination)
  clear_has_pagination();
  ::pbnavitia::Pagination* temp = pagination_;
  pagination_ = NULL;
  return temp;
}
void Response::set_allocated_pagination(::pbnavitia::Pagination* pagination) {
  delete pagination_;
  pagination_ = pagination;
  if (pagination) {
    set_has_pagination();
  } else {
    clear_has_pagination();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.pagination)
}

// repeated .pbnavitia.TrafficReports traffic_reports = 61;
int Response::traffic_reports_size() const {
  return traffic_reports_.size();
}
void Response::clear_traffic_reports() {
  traffic_reports_.Clear();
}
const ::pbnavitia::TrafficReports& Response::traffic_reports(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.traffic_reports)
  return traffic_reports_.Get(index);
}
::pbnavitia::TrafficReports* Response::mutable_traffic_reports(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.traffic_reports)
  return traffic_reports_.Mutable(index);
}
::pbnavitia::TrafficReports* Response::add_traffic_reports() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.traffic_reports)
  return traffic_reports_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::TrafficReports >*
Response::mutable_traffic_reports() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.traffic_reports)
  return &traffic_reports_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::TrafficReports >&
Response::traffic_reports() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.traffic_reports)
  return traffic_reports_;
}

// repeated .pbnavitia.LineReport line_reports = 73;
int Response::line_reports_size() const {
  return line_reports_.size();
}
void Response::clear_line_reports() {
  line_reports_.Clear();
}
const ::pbnavitia::LineReport& Response::line_reports(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.line_reports)
  return line_reports_.Get(index);
}
::pbnavitia::LineReport* Response::mutable_line_reports(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.line_reports)
  return line_reports_.Mutable(index);
}
::pbnavitia::LineReport* Response::add_line_reports() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.line_reports)
  return line_reports_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::LineReport >*
Response::mutable_line_reports() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.line_reports)
  return &line_reports_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::LineReport >&
Response::line_reports() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.line_reports)
  return line_reports_;
}

// repeated .pbnavitia.Ticket tickets = 51;
int Response::tickets_size() const {
  return tickets_.size();
}
void Response::clear_tickets() {
  tickets_.Clear();
}
const ::pbnavitia::Ticket& Response::tickets(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.tickets)
  return tickets_.Get(index);
}
::pbnavitia::Ticket* Response::mutable_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.tickets)
  return tickets_.Mutable(index);
}
::pbnavitia::Ticket* Response::add_tickets() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.tickets)
  return tickets_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Ticket >*
Response::mutable_tickets() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.tickets)
  return &tickets_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Ticket >&
Response::tickets() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.tickets)
  return tickets_;
}

// repeated .pbnavitia.PtObject pt_objects = 52;
int Response::pt_objects_size() const {
  return pt_objects_.size();
}
void Response::clear_pt_objects() {
  pt_objects_.Clear();
}
const ::pbnavitia::PtObject& Response::pt_objects(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.pt_objects)
  return pt_objects_.Get(index);
}
::pbnavitia::PtObject* Response::mutable_pt_objects(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.pt_objects)
  return pt_objects_.Mutable(index);
}
::pbnavitia::PtObject* Response::add_pt_objects() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.pt_objects)
  return pt_objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >*
Response::mutable_pt_objects() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.pt_objects)
  return &pt_objects_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::PtObject >&
Response::pt_objects() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.pt_objects)
  return pt_objects_;
}

// repeated .pbnavitia.FeedPublisher feed_publishers = 53;
int Response::feed_publishers_size() const {
  return feed_publishers_.size();
}
void Response::clear_feed_publishers() {
  feed_publishers_.Clear();
}
const ::pbnavitia::FeedPublisher& Response::feed_publishers(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.feed_publishers)
  return feed_publishers_.Get(index);
}
::pbnavitia::FeedPublisher* Response::mutable_feed_publishers(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.feed_publishers)
  return feed_publishers_.Mutable(index);
}
::pbnavitia::FeedPublisher* Response::add_feed_publishers() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.feed_publishers)
  return feed_publishers_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::FeedPublisher >*
Response::mutable_feed_publishers() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.feed_publishers)
  return &feed_publishers_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::FeedPublisher >&
Response::feed_publishers() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.feed_publishers)
  return feed_publishers_;
}

// repeated .pbnavitia.NearestStopPoint nearest_stop_points = 63;
int Response::nearest_stop_points_size() const {
  return nearest_stop_points_.size();
}
void Response::clear_nearest_stop_points() {
  nearest_stop_points_.Clear();
}
const ::pbnavitia::NearestStopPoint& Response::nearest_stop_points(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.nearest_stop_points)
  return nearest_stop_points_.Get(index);
}
::pbnavitia::NearestStopPoint* Response::mutable_nearest_stop_points(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.nearest_stop_points)
  return nearest_stop_points_.Mutable(index);
}
::pbnavitia::NearestStopPoint* Response::add_nearest_stop_points() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.nearest_stop_points)
  return nearest_stop_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::NearestStopPoint >*
Response::mutable_nearest_stop_points() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.nearest_stop_points)
  return &nearest_stop_points_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::NearestStopPoint >&
Response::nearest_stop_points() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.nearest_stop_points)
  return nearest_stop_points_;
}

// repeated .pbnavitia.Link links = 67;
int Response::links_size() const {
  return links_.size();
}
void Response::clear_links() {
  links_.Clear();
}
const ::pbnavitia::Link& Response::links(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.links)
  return links_.Get(index);
}
::pbnavitia::Link* Response::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.links)
  return links_.Mutable(index);
}
::pbnavitia::Link* Response::add_links() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.links)
  return links_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::Link >*
Response::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.links)
  return &links_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::Link >&
Response::links() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.links)
  return links_;
}

// repeated .pbnavitia.GraphicalIsochrone graphical_isochrones = 68;
int Response::graphical_isochrones_size() const {
  return graphical_isochrones_.size();
}
void Response::clear_graphical_isochrones() {
  graphical_isochrones_.Clear();
}
const ::pbnavitia::GraphicalIsochrone& Response::graphical_isochrones(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.graphical_isochrones)
  return graphical_isochrones_.Get(index);
}
::pbnavitia::GraphicalIsochrone* Response::mutable_graphical_isochrones(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.graphical_isochrones)
  return graphical_isochrones_.Mutable(index);
}
::pbnavitia::GraphicalIsochrone* Response::add_graphical_isochrones() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.graphical_isochrones)
  return graphical_isochrones_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::GraphicalIsochrone >*
Response::mutable_graphical_isochrones() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.graphical_isochrones)
  return &graphical_isochrones_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::GraphicalIsochrone >&
Response::graphical_isochrones() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.graphical_isochrones)
  return graphical_isochrones_;
}

// repeated .pbnavitia.HeatMap heat_maps = 71;
int Response::heat_maps_size() const {
  return heat_maps_.size();
}
void Response::clear_heat_maps() {
  heat_maps_.Clear();
}
const ::pbnavitia::HeatMap& Response::heat_maps(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.heat_maps)
  return heat_maps_.Get(index);
}
::pbnavitia::HeatMap* Response::mutable_heat_maps(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.heat_maps)
  return heat_maps_.Mutable(index);
}
::pbnavitia::HeatMap* Response::add_heat_maps() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.heat_maps)
  return heat_maps_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::HeatMap >*
Response::mutable_heat_maps() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.heat_maps)
  return &heat_maps_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::HeatMap >&
Response::heat_maps() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.heat_maps)
  return heat_maps_;
}

// optional .pbnavitia.GeoStatus geo_status = 69;
bool Response::has_geo_status() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void Response::set_has_geo_status() {
  _has_bits_[1] |= 0x00200000u;
}
void Response::clear_has_geo_status() {
  _has_bits_[1] &= ~0x00200000u;
}
void Response::clear_geo_status() {
  if (geo_status_ != NULL) geo_status_->::pbnavitia::GeoStatus::Clear();
  clear_has_geo_status();
}
const ::pbnavitia::GeoStatus& Response::geo_status() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.geo_status)
  return geo_status_ != NULL ? *geo_status_ : *default_instance_->geo_status_;
}
::pbnavitia::GeoStatus* Response::mutable_geo_status() {
  set_has_geo_status();
  if (geo_status_ == NULL) {
    geo_status_ = new ::pbnavitia::GeoStatus;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.geo_status)
  return geo_status_;
}
::pbnavitia::GeoStatus* Response::release_geo_status() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.geo_status)
  clear_has_geo_status();
  ::pbnavitia::GeoStatus* temp = geo_status_;
  geo_status_ = NULL;
  return temp;
}
void Response::set_allocated_geo_status(::pbnavitia::GeoStatus* geo_status) {
  delete geo_status_;
  geo_status_ = geo_status;
  if (geo_status) {
    set_has_geo_status();
  } else {
    clear_has_geo_status();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.geo_status)
}

// optional .pbnavitia.Co2Emission car_co2_emission = 70;
bool Response::has_car_co2_emission() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void Response::set_has_car_co2_emission() {
  _has_bits_[1] |= 0x00400000u;
}
void Response::clear_has_car_co2_emission() {
  _has_bits_[1] &= ~0x00400000u;
}
void Response::clear_car_co2_emission() {
  if (car_co2_emission_ != NULL) car_co2_emission_->::pbnavitia::Co2Emission::Clear();
  clear_has_car_co2_emission();
}
const ::pbnavitia::Co2Emission& Response::car_co2_emission() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.car_co2_emission)
  return car_co2_emission_ != NULL ? *car_co2_emission_ : *default_instance_->car_co2_emission_;
}
::pbnavitia::Co2Emission* Response::mutable_car_co2_emission() {
  set_has_car_co2_emission();
  if (car_co2_emission_ == NULL) {
    car_co2_emission_ = new ::pbnavitia::Co2Emission;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.car_co2_emission)
  return car_co2_emission_;
}
::pbnavitia::Co2Emission* Response::release_car_co2_emission() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.car_co2_emission)
  clear_has_car_co2_emission();
  ::pbnavitia::Co2Emission* temp = car_co2_emission_;
  car_co2_emission_ = NULL;
  return temp;
}
void Response::set_allocated_car_co2_emission(::pbnavitia::Co2Emission* car_co2_emission) {
  delete car_co2_emission_;
  car_co2_emission_ = car_co2_emission;
  if (car_co2_emission) {
    set_has_car_co2_emission();
  } else {
    clear_has_car_co2_emission();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.car_co2_emission)
}

// optional .pbnavitia.StreetNetworkRoutingMatrix sn_routing_matrix = 72;
bool Response::has_sn_routing_matrix() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void Response::set_has_sn_routing_matrix() {
  _has_bits_[1] |= 0x00800000u;
}
void Response::clear_has_sn_routing_matrix() {
  _has_bits_[1] &= ~0x00800000u;
}
void Response::clear_sn_routing_matrix() {
  if (sn_routing_matrix_ != NULL) sn_routing_matrix_->::pbnavitia::StreetNetworkRoutingMatrix::Clear();
  clear_has_sn_routing_matrix();
}
const ::pbnavitia::StreetNetworkRoutingMatrix& Response::sn_routing_matrix() const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.sn_routing_matrix)
  return sn_routing_matrix_ != NULL ? *sn_routing_matrix_ : *default_instance_->sn_routing_matrix_;
}
::pbnavitia::StreetNetworkRoutingMatrix* Response::mutable_sn_routing_matrix() {
  set_has_sn_routing_matrix();
  if (sn_routing_matrix_ == NULL) {
    sn_routing_matrix_ = new ::pbnavitia::StreetNetworkRoutingMatrix;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.sn_routing_matrix)
  return sn_routing_matrix_;
}
::pbnavitia::StreetNetworkRoutingMatrix* Response::release_sn_routing_matrix() {
  // @@protoc_insertion_point(field_release:pbnavitia.Response.sn_routing_matrix)
  clear_has_sn_routing_matrix();
  ::pbnavitia::StreetNetworkRoutingMatrix* temp = sn_routing_matrix_;
  sn_routing_matrix_ = NULL;
  return temp;
}
void Response::set_allocated_sn_routing_matrix(::pbnavitia::StreetNetworkRoutingMatrix* sn_routing_matrix) {
  delete sn_routing_matrix_;
  sn_routing_matrix_ = sn_routing_matrix;
  if (sn_routing_matrix) {
    set_has_sn_routing_matrix();
  } else {
    clear_has_sn_routing_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.Response.sn_routing_matrix)
}

// repeated .pbnavitia.EquipmentReport equipment_reports = 74;
int Response::equipment_reports_size() const {
  return equipment_reports_.size();
}
void Response::clear_equipment_reports() {
  equipment_reports_.Clear();
}
const ::pbnavitia::EquipmentReport& Response::equipment_reports(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.equipment_reports)
  return equipment_reports_.Get(index);
}
::pbnavitia::EquipmentReport* Response::mutable_equipment_reports(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.equipment_reports)
  return equipment_reports_.Mutable(index);
}
::pbnavitia::EquipmentReport* Response::add_equipment_reports() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.equipment_reports)
  return equipment_reports_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentReport >*
Response::mutable_equipment_reports() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.equipment_reports)
  return &equipment_reports_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::EquipmentReport >&
Response::equipment_reports() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.equipment_reports)
  return equipment_reports_;
}

// repeated .pbnavitia.StopSchedule terminus_schedules = 75;
int Response::terminus_schedules_size() const {
  return terminus_schedules_.size();
}
void Response::clear_terminus_schedules() {
  terminus_schedules_.Clear();
}
const ::pbnavitia::StopSchedule& Response::terminus_schedules(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.Response.terminus_schedules)
  return terminus_schedules_.Get(index);
}
::pbnavitia::StopSchedule* Response::mutable_terminus_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.Response.terminus_schedules)
  return terminus_schedules_.Mutable(index);
}
::pbnavitia::StopSchedule* Response::add_terminus_schedules() {
  // @@protoc_insertion_point(field_add:pbnavitia.Response.terminus_schedules)
  return terminus_schedules_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >*
Response::mutable_terminus_schedules() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.Response.terminus_schedules)
  return &terminus_schedules_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopSchedule >&
Response::terminus_schedules() const {
  // @@protoc_insertion_point(field_list:pbnavitia.Response.terminus_schedules)
  return terminus_schedules_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NearestStopPoint::kStopPointFieldNumber;
const int NearestStopPoint::kAccessDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NearestStopPoint::NearestStopPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.NearestStopPoint)
}

void NearestStopPoint::InitAsDefaultInstance() {
  stop_point_ = const_cast< ::pbnavitia::StopPoint*>(&::pbnavitia::StopPoint::default_instance());
}

NearestStopPoint::NearestStopPoint(const NearestStopPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.NearestStopPoint)
}

void NearestStopPoint::SharedCtor() {
  _cached_size_ = 0;
  stop_point_ = NULL;
  access_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NearestStopPoint::~NearestStopPoint() {
  // @@protoc_insertion_point(destructor:pbnavitia.NearestStopPoint)
  SharedDtor();
}

void NearestStopPoint::SharedDtor() {
  if (this != default_instance_) {
    delete stop_point_;
  }
}

void NearestStopPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NearestStopPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NearestStopPoint_descriptor_;
}

const NearestStopPoint& NearestStopPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

NearestStopPoint* NearestStopPoint::default_instance_ = NULL;

NearestStopPoint* NearestStopPoint::New(::google::protobuf::Arena* arena) const {
  NearestStopPoint* n = new NearestStopPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NearestStopPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.NearestStopPoint)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stop_point()) {
      if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
    }
    access_duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NearestStopPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.NearestStopPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.StopPoint stop_point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_duration;
        break;
      }

      // optional int32 access_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_access_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_duration_)));
          set_has_access_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.NearestStopPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.NearestStopPoint)
  return false;
#undef DO_
}

void NearestStopPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.NearestStopPoint)
  // optional .pbnavitia.StopPoint stop_point = 1;
  if (has_stop_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // optional int32 access_duration = 2;
  if (has_access_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->access_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.NearestStopPoint)
}

::google::protobuf::uint8* NearestStopPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.NearestStopPoint)
  // optional .pbnavitia.StopPoint stop_point = 1;
  if (has_stop_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stop_point_, false, target);
  }

  // optional int32 access_duration = 2;
  if (has_access_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->access_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.NearestStopPoint)
  return target;
}

int NearestStopPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.NearestStopPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .pbnavitia.StopPoint stop_point = 1;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stop_point_);
    }

    // optional int32 access_duration = 2;
    if (has_access_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->access_duration());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NearestStopPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.NearestStopPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NearestStopPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NearestStopPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.NearestStopPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.NearestStopPoint)
    MergeFrom(*source);
  }
}

void NearestStopPoint::MergeFrom(const NearestStopPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.NearestStopPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_point()) {
      mutable_stop_point()->::pbnavitia::StopPoint::MergeFrom(from.stop_point());
    }
    if (from.has_access_duration()) {
      set_access_duration(from.access_duration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NearestStopPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.NearestStopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestStopPoint::CopyFrom(const NearestStopPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.NearestStopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestStopPoint::IsInitialized() const {

  if (has_stop_point()) {
    if (!this->stop_point_->IsInitialized()) return false;
  }
  return true;
}

void NearestStopPoint::Swap(NearestStopPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NearestStopPoint::InternalSwap(NearestStopPoint* other) {
  std::swap(stop_point_, other->stop_point_);
  std::swap(access_duration_, other->access_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NearestStopPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NearestStopPoint_descriptor_;
  metadata.reflection = NearestStopPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NearestStopPoint

// optional .pbnavitia.StopPoint stop_point = 1;
bool NearestStopPoint::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NearestStopPoint::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
void NearestStopPoint::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void NearestStopPoint::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->::pbnavitia::StopPoint::Clear();
  clear_has_stop_point();
}
const ::pbnavitia::StopPoint& NearestStopPoint::stop_point() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPoint.stop_point)
  return stop_point_ != NULL ? *stop_point_ : *default_instance_->stop_point_;
}
::pbnavitia::StopPoint* NearestStopPoint::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::pbnavitia::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.NearestStopPoint.stop_point)
  return stop_point_;
}
::pbnavitia::StopPoint* NearestStopPoint::release_stop_point() {
  // @@protoc_insertion_point(field_release:pbnavitia.NearestStopPoint.stop_point)
  clear_has_stop_point();
  ::pbnavitia::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
void NearestStopPoint::set_allocated_stop_point(::pbnavitia::StopPoint* stop_point) {
  delete stop_point_;
  stop_point_ = stop_point;
  if (stop_point) {
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.NearestStopPoint.stop_point)
}

// optional int32 access_duration = 2;
bool NearestStopPoint::has_access_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NearestStopPoint::set_has_access_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void NearestStopPoint::clear_has_access_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void NearestStopPoint::clear_access_duration() {
  access_duration_ = 0;
  clear_has_access_duration();
}
 ::google::protobuf::int32 NearestStopPoint::access_duration() const {
  // @@protoc_insertion_point(field_get:pbnavitia.NearestStopPoint.access_duration)
  return access_duration_;
}
 void NearestStopPoint::set_access_duration(::google::protobuf::int32 value) {
  set_has_access_duration();
  access_duration_ = value;
  // @@protoc_insertion_point(field_set:pbnavitia.NearestStopPoint.access_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EquipmentReport::kLineFieldNumber;
const int EquipmentReport::kStopAreaEquipmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EquipmentReport::EquipmentReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnavitia.EquipmentReport)
}

void EquipmentReport::InitAsDefaultInstance() {
  line_ = const_cast< ::pbnavitia::Line*>(&::pbnavitia::Line::default_instance());
}

EquipmentReport::EquipmentReport(const EquipmentReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pbnavitia.EquipmentReport)
}

void EquipmentReport::SharedCtor() {
  _cached_size_ = 0;
  line_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentReport::~EquipmentReport() {
  // @@protoc_insertion_point(destructor:pbnavitia.EquipmentReport)
  SharedDtor();
}

void EquipmentReport::SharedDtor() {
  if (this != default_instance_) {
    delete line_;
  }
}

void EquipmentReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentReport_descriptor_;
}

const EquipmentReport& EquipmentReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_response_2eproto();
  return *default_instance_;
}

EquipmentReport* EquipmentReport::default_instance_ = NULL;

EquipmentReport* EquipmentReport::New(::google::protobuf::Arena* arena) const {
  EquipmentReport* n = new EquipmentReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipmentReport::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnavitia.EquipmentReport)
  if (has_line()) {
    if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  }
  stop_area_equipments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EquipmentReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnavitia.EquipmentReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbnavitia.Line line = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stop_area_equipments;
        break;
      }

      // repeated .pbnavitia.StopAreaEquipment stop_area_equipments = 2;
      case 2: {
        if (tag == 18) {
         parse_stop_area_equipments:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stop_area_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stop_area_equipments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stop_area_equipments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnavitia.EquipmentReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnavitia.EquipmentReport)
  return false;
#undef DO_
}

void EquipmentReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnavitia.EquipmentReport)
  // optional .pbnavitia.Line line = 1;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->line_, output);
  }

  // repeated .pbnavitia.StopAreaEquipment stop_area_equipments = 2;
  for (unsigned int i = 0, n = this->stop_area_equipments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stop_area_equipments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnavitia.EquipmentReport)
}

::google::protobuf::uint8* EquipmentReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnavitia.EquipmentReport)
  // optional .pbnavitia.Line line = 1;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->line_, false, target);
  }

  // repeated .pbnavitia.StopAreaEquipment stop_area_equipments = 2;
  for (unsigned int i = 0, n = this->stop_area_equipments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stop_area_equipments(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnavitia.EquipmentReport)
  return target;
}

int EquipmentReport::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pbnavitia.EquipmentReport)
  int total_size = 0;

  // optional .pbnavitia.Line line = 1;
  if (has_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->line_);
  }

  // repeated .pbnavitia.StopAreaEquipment stop_area_equipments = 2;
  total_size += 1 * this->stop_area_equipments_size();
  for (int i = 0; i < this->stop_area_equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_area_equipments(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnavitia.EquipmentReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EquipmentReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipmentReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnavitia.EquipmentReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnavitia.EquipmentReport)
    MergeFrom(*source);
  }
}

void EquipmentReport::MergeFrom(const EquipmentReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnavitia.EquipmentReport)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stop_area_equipments_.MergeFrom(from.stop_area_equipments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line()) {
      mutable_line()->::pbnavitia::Line::MergeFrom(from.line());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EquipmentReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnavitia.EquipmentReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentReport::CopyFrom(const EquipmentReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnavitia.EquipmentReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentReport::IsInitialized() const {

  if (has_line()) {
    if (!this->line_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->stop_area_equipments())) return false;
  return true;
}

void EquipmentReport::Swap(EquipmentReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipmentReport::InternalSwap(EquipmentReport* other) {
  std::swap(line_, other->line_);
  stop_area_equipments_.UnsafeArenaSwap(&other->stop_area_equipments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipmentReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentReport_descriptor_;
  metadata.reflection = EquipmentReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipmentReport

// optional .pbnavitia.Line line = 1;
bool EquipmentReport::has_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EquipmentReport::set_has_line() {
  _has_bits_[0] |= 0x00000001u;
}
void EquipmentReport::clear_has_line() {
  _has_bits_[0] &= ~0x00000001u;
}
void EquipmentReport::clear_line() {
  if (line_ != NULL) line_->::pbnavitia::Line::Clear();
  clear_has_line();
}
const ::pbnavitia::Line& EquipmentReport::line() const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReport.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
::pbnavitia::Line* EquipmentReport::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::pbnavitia::Line;
  }
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentReport.line)
  return line_;
}
::pbnavitia::Line* EquipmentReport::release_line() {
  // @@protoc_insertion_point(field_release:pbnavitia.EquipmentReport.line)
  clear_has_line();
  ::pbnavitia::Line* temp = line_;
  line_ = NULL;
  return temp;
}
void EquipmentReport::set_allocated_line(::pbnavitia::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:pbnavitia.EquipmentReport.line)
}

// repeated .pbnavitia.StopAreaEquipment stop_area_equipments = 2;
int EquipmentReport::stop_area_equipments_size() const {
  return stop_area_equipments_.size();
}
void EquipmentReport::clear_stop_area_equipments() {
  stop_area_equipments_.Clear();
}
const ::pbnavitia::StopAreaEquipment& EquipmentReport::stop_area_equipments(int index) const {
  // @@protoc_insertion_point(field_get:pbnavitia.EquipmentReport.stop_area_equipments)
  return stop_area_equipments_.Get(index);
}
::pbnavitia::StopAreaEquipment* EquipmentReport::mutable_stop_area_equipments(int index) {
  // @@protoc_insertion_point(field_mutable:pbnavitia.EquipmentReport.stop_area_equipments)
  return stop_area_equipments_.Mutable(index);
}
::pbnavitia::StopAreaEquipment* EquipmentReport::add_stop_area_equipments() {
  // @@protoc_insertion_point(field_add:pbnavitia.EquipmentReport.stop_area_equipments)
  return stop_area_equipments_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnavitia::StopAreaEquipment >*
EquipmentReport::mutable_stop_area_equipments() {
  // @@protoc_insertion_point(field_mutable_list:pbnavitia.EquipmentReport.stop_area_equipments)
  return &stop_area_equipments_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnavitia::StopAreaEquipment >&
EquipmentReport::stop_area_equipments() const {
  // @@protoc_insertion_point(field_list:pbnavitia.EquipmentReport.stop_area_equipments)
  return stop_area_equipments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnavitia

// @@protoc_insertion_point(global_scope)
